.. _node-authenticate:

===================
Authenticate a User
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Node SDK provides developers with a unified API to authenticate application
users for any authentication provider. Users log in by providing authentication
credentials for a given authentication provider and the SDK automatically
manages authentication tokens and refreshes data for logged in users.

.. _node-login:

MongoDB Realm provides developers with an API to log application users
in and out with any enabled authentication provider. Pass in a
credentials object to specify the authentication provider info to the
login methods. 


The SDK provides the following methods for user authentication:

.. list-table::
   :header-rows: 1
   :widths: 10 90

   * - Method 
     - Usage
   * - ``App.logIn()``
     - Call ``App.logIn()`` to log a user in with a ``Realm.Credentials`` object for an enabled authentication provider. For example, running the script: "app.logIn(Realm.Credentials.emailPassword('<email>', '<password>'))" would log in a user created with an email/password authentication provider.
   * - ``User.logOut()``
     - Call ``User.logOut()`` to log a user out, regardless of the authentication provider the user was registered using.

Log In
------

.. _node-login-anonymous:

Anonymous
~~~~~~~~~

The :doc:`Anonymous </authentication/anonymous>` provider allows users to log in
to your application with ephemeral accounts that have no associated information.

To log in, create an anonymous credential and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6
         
         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6

         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })

.. _node-login-email-password:

Email/Password
~~~~~~~~~~~~~~

The :doc:`email/password </authentication/email-password>` authentication
provider allows users to log in to your application with an email address and a
password.

To log in, create an email/password credential with the user's email address and
password and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email, password) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("cal.kestis@example.com", "Bogano123!").then(user => {
           console.log("Successfully logged in!", user)
         })

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email: string, password: string) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser ` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("cal.kestis@example.com", "Bogano123!").then(user => {
           console.log("Successfully logged in!", user)
         })

.. _node-login-api-key:

API Key
~~~~~~~

The :doc:`API key </authentication/api-key>` authentication provider allows
server processes to access to access your app directly or on behalf of a user.

To log in with an API key, create an API Key credential with a server or user
API key and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginApiKey(apiKey) {
           // Create an API Key credential
           const credentials = Realm.Credentials.apiKey(apiKey);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginApiKey("To0SQOPC...ZOU0xUYvWw").then(user => {
           console.log("Successfully logged in!", user)
         })
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginApiKey(apiKey: string) {
           // Create an API Key credential
           const credentials = Realm.Credentials.apiKey(apiKey);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginApiKey("To0SQOPC...ZOU0xUYvWw").then(user => {
           console.log("Successfully logged in!", user)
         })

.. _node-login-custom-function:

Custom Function
~~~~~~~~~~~~~~~

The :doc:`Custom Function </authentication/custom-function>` authentication
provider allows you to handle user authentication by running a :doc:`function
</functions>` that receives a payload of arbitrary information about a user.

To log in with the custom function provider, create a Custom Function credential
with a payload object and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload: Realm.Credentials.FunctionPayload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _node-login-custom-jwt:

Custom JWT
~~~~~~~~~~

The :doc:`Custom JWT </authentication/custom-jwt>` authentication provider
allows you to handle user authentication with any authentication system that
returns a :ref:`JSON web token <json-web-tokens>`.

To log in, create a Custom JWT credential with a JWT from the external system
and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt: Realm.Credentials.JWTPayload) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _node-login-facebook:

Facebook OAuth
~~~~~~~~~~~~~~

The :doc:`Facebook </authentication/facebook>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. admonition:: Enable the Facebook Auth Provider
   :class: note
   
   To authenticate a Facebook user, you must configure the :doc:`Facebook
   authentication provider </authentication/facebook>`.

You can use the :facebook:`official Facebook SDK <docs/facebook-login/overview>`
to handle the user authentication and redirect flow from a client application.
Once authenticated, the Facebook SDK returns an access token that you can send
to your Node.js app and use to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the access token from a client application using the Facebook SDK
         const accessToken = getFacebookAccessToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.facebook(accessToken);
         app.logIn(credentials).then(user => {
           console.log(`Logged in with id: ${user.id}`);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the access token from a client application using the Facebook SDK
         const accessToken: string = getFacebookAccessToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.facebook(accessToken);
         app.logIn(credentials).then((user: Realm.User) => {
           console.log(`Logged in with id: ${user.id}`);
         });

.. _node-login-google:

Google OAuth
~~~~~~~~~~~~

The :doc:`Google </authentication/google>` authentication provider allows you to
authenticate users through a Google project using their existing Google account.

.. admonition:: Enable the Google Auth Provider
   :class: note
   
   To authenticate a Google user, you must configure the :doc:`Google
   authentication provider </authentication/google>`.

You can use the :google:`official Google SDK <identity>` to handle the user
authentication and redirect flow from a client application. Once authenticated,
the Google SDK returns an access token that you can send to your Node.js app and
use to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the access token from a client application using the Google SDK
         const accessToken = getGoogleAccessToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.google(accessToken);
         app.logIn(credentials).then(user => {
           console.log(`Logged in with id: ${user.id}`);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the access token from a client application using the Google SDK
         const accessToken: string = getGoogleAccessToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.google(accessToken);
         app.logIn(credentials).then((user: Realm.User) => {
           console.log(`Logged in with id: ${user.id}`);
         });

.. _node-login-apple:

Sign-in with Apple
~~~~~~~~~~~~~~~~~~

The :doc:`Apple </authentication/apple>` authentication provider allows you to
authenticate users through Sign-in With Apple.

.. admonition:: Enable the Apple Auth Provider
   :class: note
   
   To authenticate an Apple user, you must configure the :doc:`Apple
   authentication provider </authentication/apple>`.

You can use the :apple:`official Sign in with Apple JS SDK
<documentation/sign_in_with_apple/sign_in_with_apple_js>` to handle the user
authentication and redirect flow from a client application. Once authenticated,
the Apple JS SDK returns an ID token that you can send to your Node.js app and
use to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the access token from a client application using the Apple JS SDK
         const idToken = getAppleIdToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.apple(idToken);
         app.logIn(credentials).then(user => {
           console.log(`Logged in with id: ${user.id}`);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the access token from a client application using the Apple JS SDK
         const idToken: string = getAppleIdToken();

         // Log the user in to your app
         const credentials = Realm.Credentials.google(idToken);
         app.logIn(credentials).then((user: Realm.User) => {
           console.log(`Logged in with id: ${user.id}`);
         });

.. _node-logout:

Log Out
-------

To log any user out, call the ``User.logOut()`` on their user instance.

.. include:: /includes/log-out-queries-in-progress.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
