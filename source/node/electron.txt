.. _node-electron-client-quick-start:

=========================
Quick Start With Electron
=========================


.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your Electron application. This page contains
information to get {+service+} integrated into your Electron application
quickly. To learn how to set up an Electron application with Realm
without using any additional frameworks, see the :ref:`Electron set up
<electron-setup>` instructions. If you have already created an
application using `Create React App
<https://reactjs.org/docs/create-a-new-react-app.html>`_ or if you are
interested in integrating a React App with Realm using Electron, check
out the :ref:`Electron with React set up <react-electron-setup>`
instructions.

Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`


Set up
------

.. _electron-setup:

Set up Realm with Electron
~~~~~~~~~~~~~~~~~~~~~~~~~

To set up an Electron application using {+service+} use the following instructions:

.. include:: /includes/steps/realm-with-electron.rst


.. _react-electron-setup:

Set up Realm with Electron using Create React App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To set up a React application with {+service+} using Electron use the following instructions:

.. include:: /includes/steps/realm-with-electron-using-create-react-app.rst

Working Realm Using Renderer and Main Processes
-----------------------------------------------

Electron applications have one main process. The main process can create
multiple BrowserWindows. Each BrowserWindow will spawn its own process.
This presents the following unique development challenges when developing
applications using Electron and Realm:

- 2 different processes cannot access a synced realm. Due to this, the recommended course of action is to open a non-synced realm on renderer processes, and open a synced realm on the main process. 
- Since a non-synced realm is opened on the renderer process, the main process must be notified when a write transaction happens during the renderer process. 


Consider the following code in the ``main process``:

.. literalinclude:: /examples/QuickStarts/electron/quickstart-main.js
  :language: javascript
  :emphasize-lines: 39, 42, 45
  :linenos:

Notice that on line 38 a synced realm is opened in this main proces. on
line 42, the `ipcMain <https://www.electronjs.org/docs/api/ipc-main>`_
Electron API is used to listen for an "asynchronous-message" event. When
that occurs, and the argument "sync" is passed in, all local changes
will be uploaded to the synced realm. 

Consider the adjacent ``renderer process`` code:

.. literalinclude:: /examples/QuickStarts/electron/quickstart-renderer.js
  :language: javascript
  :emphasize-lines: 28, 40
  :linenos:

On line 27, a non-synced realm is opened in this renderer process. All
write transactions on this local realm, will not be synced by default.
In order to sync these writes, the `ipcRenderer
<https://www.electronjs.org/docs/api/ipc-renderer>`_ Electron API is
used to emit an "asynchronous-message" with the arguement "sync" on line
40. This tells our ``main process`` to upload all local changes to the
synced realm. 

Summary
-------

- You can create an Electron Application using {+service+} by installing `Electron <https://www.npmjs.com/package/electron>`_ and the `MongoDB Realm JS SDK <https://www.npmjs.com/package/realm>`_.
- You can create React Application with Realm using Electron by utilizing `craco <https://www.npmjs.com/package/@craco/craco>`_, Electron, and Realm.
- Since 2 different processes cannot access a synced realm, open a non-synced realm on the renderer processes and a synced realm on the main process.
- Notify the main process that a write transaction has occurred on the renderer process by utilizing the `ipcMain <https://www.electronjs.org/docs/api/ipc-main>`_ and the `ipcRenderer <https://www.electronjs.org/docs/api/ipc-renderer>`_ APIs.