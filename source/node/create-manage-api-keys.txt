.. _node-create-manage-api-keys:

=============================
Create & Manage User API Keys
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can use the Node SDK to create and manage :ref:`user API keys
<api-key-authentication-user-api-key>` that allow services to log in and
interact with your app on behalf of an existing user without requiring the user
to re-authenticate.

User API keys are managed as part of the :doc:`API Key authentication provider
</authentication/api-key>` but may only be created for users associated with a
different, non-anonymous authentication provider.

User objects in the Node SDK include an ``ApiKeyAuth`` object that exposes
methods to work with that user's API keys.

.. _node-api-key-create-user-key:

Create a User API Key
---------------------

To create a new user API key, call ``ApiKeyAuth.create()`` with an identifying
name for the key. The name must be a string that's unique among all of the
user's API keys.

.. include:: /includes/note-store-user-api-key-value.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         
         const user = app.currentUser;
         const key = await user.apiKeys.create("apiKeyName");
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         const user = app.currentUser;
         const key = await user.apiKeys.create("apiKeyName");

.. _node-api-key-look-up-user-key:

Look up a User API Key
----------------------

To get an array that lists all of a user's API keys, call
``ApiKeyAuth.fetchAll()``. You can also find a specific API key by calling
``ApiKeyAuth.fetch()`` with the key's ``_id``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         
         const user = app.currentUser;
         // List all of a user's keys
         const keys = await user.apiKeys.fetchAll();
         // Get a specific key by its ID
         const key = await user.apiKeys.fetch("5eb5931548d79bc784adf46e");
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         const user = app.currentUser;
         // List all of a user's keys
         const keys = await user.apiKeys.fetchAll();
         // Get a specific key by its ID
         const key = await user.apiKeys.fetch("5eb5931548d79bc784adf46e");

.. _node-api-key-enable-disable:

Enable or Disable an API Key
----------------------------

You can enable or disable a user API key by calling ``ApiKeyAuth.enable()`` or
``ApiKeyAuth.disable()`` with the key's ``_id``. When a key is disabled, it
cannot be used to log in on behalf of the user.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         
         // Get the ID of a User API Key
         const user = app.currentUser;
         const apiKeys = await user.apiKeys.fetchAll();
         const keyId = apiKeys[0]["_id"];
         
         // Enable the User API Key
         await user.apiKey.enable(keyId);
         // Disable the User API Key
         await user.apiKey.disable(keyId);
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         // Get the ID of a User API Key
         const user = app.currentUser;
         const apiKeys = await user.apiKeys.fetchAll();
         const keyId = apiKeys[0]["_id"];
         
         // Enable the User API Key
         await user.apiKey.enable(keyId);
         // Disable the User API Key
         await user.apiKey.disable(keyId);

.. _node-api-key-delete:

Delete an API Key
-----------------

You can permanently delete a user API key by calling ``ApiKeyAuth.delete()``
with the key's ``_id``. Deleted keys can no longer be used to log in on behalf
of the user.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the ID of a User API Key
         const user = app.currentUser;
         const apiKeys = await user.apiKeys.fetchAll();
         const keyId = apiKeys[0]["_id"];
         
         // Delete the User API Key
         await user.apiKey.delete(keyId);
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the ID of a User API Key
         const user = app.currentUser;
         const apiKeys = await user.apiKeys.fetchAll();
         const keyId = apiKeys[0]["_id"];
         
         // Delete the User API Key
         await user.apiKey.delete(keyId);
