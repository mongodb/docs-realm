.. _node-realm-database-writes:

======
Writes
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+client-database+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+client-database+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note:: Remember

   All writes must happen in a transaction.

A {+realm+} allows only one open transaction at a time. {+client-database+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+client-database+} either
**commits** it or **cancels** it:

- When {+client-database+} **commits** a transaction, {+client-database+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+client-database+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+client-database+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _node-acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} guarantees that transactions are :term:`ACID`
compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

- {+client-database+} establishes :wikipedia:`atomicity <Atomicity_(database_systems)>` by grouping operations in transactions and rolling back all operations in a transaction if any of them fail.
- {+client-database+} establishes :wikipedia:`consistency <Consistency_(database_systems)>` and avoids data corruption by validating changes against the schema. If the result of any write operation is not valid, {+client-database+} cancels and rolls back the entire transaction.
- {+client-database+} establishes :wikipedia:`isolation <Isolation_(database_systems)>` by allowing only one writer at a time. This ensures thread safety between transactions.
- Finally, {+client-database+} establishes :wikipedia:`durability <Durability_(database_systems)>` by writing to disk immediately when a transaction is committed. In the event of an app crash, for example, the changes are not lost or corrupted.

.. _node-open-a-transaction:

Run a Transaction
-----------------

{+client-database+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+client-database+} runs
it, {+client-database+} cancels the transaction. Otherwise, {+client-database+} commits
the transaction immediately after the callback.

.. important:: Concurrency Concerns

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync>`, avoid opening transactions on the
   UI thread altogether, as {+client-database+} processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   the {+realm+}'s write method. If the code in the callback
   throws an exception, {+client-database+} cancels the transaction.
   Otherwise, {+client-database+} commits the transaction.

   .. tabs-realm-languages::

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/CRUD/BatchUpdate.js
            :language: javascript
            :emphasize-lines: 9-12



.. _node-create-an-object:

Create an Object
----------------

In general, instantiate :ref:`{+service-short+} objects
<node-realm-objects>` as you would any other object. In a
transaction, you can add the object to the {+realm+} if the
{+realm+}'s :ref:`schema <node-realm-schema>` includes the
object type. When you add an instance to the {+realm+}, it
becomes *managed* by that {+realm+}.

With the Java and JavaScript SDKs, instead use the {+realm+}'s
factory method in a transaction to instantiate your class.
This automatically inserts the instance into the {+realm+}.

.. example::

   This code demonstrates how to create an object with {+client-database+}:

   .. literalinclude:: /examples/CRUD/Create.js
      :language: javascript
      :emphasize-lines: 7


.. _node-upsert:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** is a write operation that either inserts a new object
with a given primary key or updates an existing object that already has
that primary key. We call this an upsert because it is an "**update** or
**insert**" operation. This is useful when an object may or may not
already exist, such as when bulk importing a dataset into an existing
{+realm+}. Upserting is an elegant way to update existing entries while
adding any new entries.

.. example::

   This code demonstrates how to upsert an object with
   {+realm+}. We create a new user named "Drew" and then update
   their name to "Andy" via upsert:

   .. literalinclude:: /examples/CRUD/Upsert.js
      :language: javascript
      :emphasize-lines: 4, 11

.. _node-update:

Update an Object
----------------

Within a transaction, you can update a {+service-short+} object the same
way you would update any other object in your language of
choice: just assign a new value to the property or update
the property.

.. example::

   This code changes the dog's name to "Wolfie" and
   increments the age by 1:

   .. literalinclude:: /examples/CRUD/Update.js
      :language: javascript
      :emphasize-lines: 8-9

.. _node-batch-update:

Update a Collection
~~~~~~~~~~~~~~~~~~~

{+client-database+} supports collection-wide updates. A collection update
applies the same update to specific properties of several
objects in a collection at once.

.. example::

   The following code demonstrates how to update a
   collection. Thanks to the :ref:`implicit inverse
   relationship <node-inverse-relationship>` between the Dog's
   ``owner`` property and the Person's ``dogs`` property,
   {+client-database+} automatically updates Ali's list of dogs.

   .. literalinclude:: /examples/CRUD/BatchUpdate.js
      :language: javascript
      :emphasize-lines: 9-12


.. _node-delete:

Delete an Object
----------------

In general, to delete an object from a {+realm+}, pass the
instance to the delete method of the {+realm+} within a
transaction.

With the Java SDK, call ``deleteFromRealm()`` on the
instance itself.

.. important:: Do not use objects after delete

   {+client-database+} throws an error if you try to use an object after
   it has been deleted.

.. example::

   The following code shows how to delete one object from
   its {+realm+}:

   .. literalinclude:: /examples/CRUD/Delete.js
      :language: javascript
      :emphasize-lines: 3

.. _node-delete-collection:

Delete a Collection
~~~~~~~~~~~~~~~~~~~

In general, to delete a collection of objects from a {+realm+},
pass the collection to the delete method of the {+realm+} within
a transaction.

With the Java SDK, call ``deleteFromRealm()`` on the
collection itself.

.. example::

   The following code demonstrates how to delete a
   collection from a {+realm+}:

   .. literalinclude:: /examples/CRUD/DeleteCollection.js
      :language: javascript
      :emphasize-lines: 6

.. _node-chaining-delete:

Manually Delete An Object with a Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you delete a non-embedded object with a :ref:`relationship <node-client-relationships>`
to a child object, Realm does not automatically delete the child object.

.. note:: Automatically Deleting Embedded Objects

   If you would like to automatically delete an object, you must make the object
   an :ref:`Embedded Object <node-embedded-objects>`. When you delete a Realm
   object, Realm automatically deletes any embedded objects referenced by that
   object.


.. example::

   In the following example, Ali is a ``Person`` who is the ``owner`` of many
   dogs. The code block demonstrates how to delete an object that is related to
   another object by first deleting all of Aliâ€™s dogs, then deleting Ali:

   .. literalinclude:: /examples/CRUD/delete-an-object-with-a-relationship.js
      :language: javascript


.. _node-delete-all-of-object:

Delete All Instances of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} supports deleting all instances of a :ref:`{+service-short+} type
<node-realm-objects>` from a {+realm+}.

.. example::

   The following code demonstrates how to delete all
   Dog instances from a {+realm+}:

   .. literalinclude:: /examples/CRUD/DeleteAllOfClass.js
      :language: javascript
      :emphasize-lines: 3

.. _node-delete-all:

Delete Everything
~~~~~~~~~~~~~~~~~

It is possible to delete all objects from the {+realm+}. This
does not affect the schema of the {+realm+}. This is useful for
quickly clearing out your {+realm+} while prototyping.

.. example::

   The following code demonstrates how to delete everything
   from a {+realm+}:

   .. literalinclude:: /examples/CRUD/DeleteAll.js
      :language: javascript
      :emphasize-lines: 3

Summary
-------

- {+client-database+} handles writes in terms of **transactions**. All writes must occur in a transaction.
- {+client-database+} transactions are ACID compliant.
- To write to {+client-database+}, define the transaction in a callback function that you pass to the {+realm+}'s ``write`` method.
