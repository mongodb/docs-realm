.. _forward-logs:

=========================
Forward Logs to a Service
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can configure a log forwarder to automatically store your
application's server-side logs in a MongoDB collection or send them to
an external service. Realm can forward logs individually as they're
created or batch logs together to reduce overhead.

A log forwarder consists of the following components:

- An **action** that controls how and where Realm forwards logs.

- A **filter** that controls which logs Realm forwards.

- A **policy** that controls whether Realm batches logs or forwards them individually.

Why Should I Configure Log Forwarding?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Consider setting up a log forwarder if you need to do any of the
following:

- Store logs for longer than Realm's retention period of {+log-retention-time+}.

- Integrate logs into an external logging service

- Access logs in Atlas Search, Online Archive, and Charts

How is Log Forwarding Billed?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each log forward action invocation (on either an individual log or a
batch) is billed as one :ref:`Realm request <billing-requests>`.

.. _set-up-log-forwarder:

Set Up a Log Forwarder
----------------------

1. Create a Log Forwarder
~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To create a new log forwarder, navigate to the :guilabel:`Logs`
      page and select the :guilabel:`Forwarding` tab. Then, click the
      :guilabel:`Create a Log Forwarder` button.

      On the next screen, specify a unique name for the log forwarder.
   
   .. tab::
      :tabid: cli

      To create a new log forwarder, add a new configuration file to the
      ``log_forwarders`` directory of your app. The file name should
      match the value in the configuration's ``name`` field.
      
      .. code-block:: json
         :caption: /log_forwarders/<name>.json
         
         {
           "name": "<name>"
         }

2. Choose Which Logs to Forward
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm can forward all of your app's logs or send only a subset to the
target collection or service. You control this subset for each log
forwarder by defining filters for the log type (e.g. functions, sync,
etc.) and status (i.e. success or error) that invoke the forwarder's
action.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      Choose one or more types of log to forward in the :guilabel:`Log
      Type` dropdown:

      .. figure:: /images/log-forwarding-type.png
         :alt:  The dropdown to select which log types to forward
      
      Choose one or more statuses to forward in the :guilabel:`Log
      Status` dropdown:

      .. figure:: /images/log-forwarding-status.png
         :alt: The dropdown to select which log statuses to forward
   
   .. tab::
      :tabid: cli
      
      Specify one or more types and one or more statuses for the
      forwarder to match and forward:

      .. code-block:: json
         :caption: /log_forwarders/<name>.json
         :emphasize-lines: 3, 4
         
         {
           "name": "<name>",
           "log_types": [ "<type>", ... ],
           "log_statuses": [ "<status>", ... ]
         }
      
      Realm supports forwarding the following log types:
      
      .. include:: /includes/log-forwarder-types.rst
      
      Realm supports forwarding the following log statuses:
      
      .. include:: /includes/log-forwarder-statuses.rst

.. important::
   
   Realm only forwards a given log if both its type *and* status are
   specified in the filter.

   For example, consider a forwarder that filters for ``sync`` logs with
   an ``error`` status.
   
   The filter *would* forward the following log:

   .. code-block:: json
      
      { "type": "sync", "status": "error", ... }
   
   The filter *would not* forward the following logs:

   .. code-block:: json
      
      { "type": "sync", "status": "success", ... }
      { "type": "schema", "status": "error", ... }

3. Configure Log Batching
~~~~~~~~~~~~~~~~~~~~~~~~~

Realm can combine multiple logs in to a single batched request to reduce
overhead. The way that Realm groups logs into batches is controlled by a
batching policy.

Realm supports the following batching policies:

- **No Batching:** Realm forwards logs individually as their
  corresponding requests occur.

- **Batching:** The forwarder groups documents into a batch as they
  happen. Each batch may include up to 100 log entries. When a batch is
  full, Realm forwards the entire batch in a single request. Realm
  forwards logs at least once a minute regardless of the number of logs
  in the current batch.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To configure batching, select either the :guilabel:`No batch` or
      :guilabel:`Batching` policy.

      .. figure:: /images/log-forwarding-batching.png
         :alt: The batching policy selections: "No batch" and "Batching".
   
   .. tab::
      :tabid: cli
      
      To configure batching, specify the policy type, either ``single``
      or ``batch``, in the ``policy`` field:

      .. code-block:: json
         :caption: /log_forwarders/<name>.json
         :emphasize-lines: 5
         
         {
           "name": "<name>",
           "log_types": [ "<type>", ... ],
           "log_statuses": [ "<status>", ... ],
           "policy": { "type": "<single|batch>" }
         }

5. Define an Action
~~~~~~~~~~~~~~~~~~~

A log forwarder can automatically store logs in a linked MongoDB
collection or call a custom function that sends the logs to an external
service.

Store Logs in a MongoDB Collection
``````````````````````````````````

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To store logs in a collection, select the :guilabel:`To
      Collection` action and enter the names of the linked cluster,
      database, and collection that should hold the forwarded logs.

      .. figure:: /images/log-forwarding-action-collection.png
         :alt: The "To Collection" action with a cluster, database, and collection specified.
   
   .. tab::
      :tabid: cli
      
      To store logs in a collection, specify an ``action`` of type
      ``collection`` that includes the names of the linked cluster,
      database, and collection that should hold the forwarded logs.
      
      .. code-block:: json
         :caption: /log_forwarders/<name>.json
         :emphasize-lines: 6-11
         
         {
           "name": "<name>",
           "log_types": [ "<type>", ... ],
           "log_statuses": [ "<status>", ... ],
           "policy": { "type": "<single|batch>" },
           "action": {
             "type": "collection",
             "data_source": "<data source name>",
             "database": "<database name>",
             "collection": "<collection name>"
           }
         }

Forward Logs with a Custom Function
```````````````````````````````````

To forward logs to an external service, :ref:`write a function
<define-a-function>` that accepts an array of log objects and calls the
service through an API, SDK, or library.

.. note::
   
   Depending on your batching policy and log frequency, Realm may call a
   log forwarding function with an array of up to 100 log objects.

The function should have the same signature as the following example:

.. code-block:: javascript
   :caption: /functions/<function name>.js

   exports = async function(logs) {
     // `logs` is an array of 1-100 log objects
     // Use an API or library to send the logs to another service.
     await context.http.post({
       url: "https://api.example.com/logs",
       body: logs,
       encodeBodyAsJSON: true
     });
   }

Once you've written the log forwarding function, you can assign it to a
log forwarder by name.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To assign a function to a log forwarder, select the :guilabel:`To
      Function` action and then select the function from the dropdown
      input.
   
   .. tab::
      :tabid: cli
      
      To assign a function to a log forwarder, specify an ``action`` of
      type ``function`` that includes the name of the log forwarding
      function.

      .. code-block:: json
         :caption: /log_forwarders/<name>.json
         :emphasize-lines: 6-9
         
         {
           "name": "<name>",
           "log_types": [ "<type>", ... ],
           "log_statuses": [ "<status>", ... ],
           "policy": { "type": "<single|batch>" },
           "action": {
             "type": "function",
             "name": "<function name>"
           }
         }

6. Save and Deploy your Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      Once you've configured the log forwarder, click :guilabel:`Save`.
      If you have deployment drafts enabled, make sure to deploy your
      changes.
   
   .. tab::
      :tabid: cli
      
      Once you've configured the log forwarder, save the configuration
      file and then push your updated app configuration:
      
      .. code-block:: sh
         
         realm-cli push

Restart a Suspended Log Forwarder
---------------------------------

A log forwarder may suspend in response to an event that prevents it
from continuing, such as a network disruption or a change to the
underlying cluster that stores the logs. Once suspended, a forwarder
cannot be invoked and does not forward any logs.

You can restart a suspended log forwarder from the :guilabel:`Logs >
Forwarding` screen of the {+ui+}.

.. note::

   If a log forwarder is suspended, {+service-short+} sends the project
   owner an email alerting them of the issue.
