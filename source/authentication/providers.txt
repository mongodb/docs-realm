.. _authentication-providers:

========================
Authentication Providers
========================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:
   :hidden:
   
   Anonymous Authentication </authentication/anonymous>
   Email/Password Authentication </authentication/email-password>
   Custom JWT Authentication </authentication/custom-jwt>
   Custom Function Authentication </authentication/custom-function>
   API Key Authentication </authentication/api-key>
   Facebook Authentication </authentication/facebook>
   Google Authentication </authentication/google>
   Apple ID Authentication  </authentication/apple>

{+service+} provides several authentication providers that you can
integrate into a client application to allow users to log in
to your {+app+}.

- For applications where you want users to be able to view or manipulate
  data without registering or creating an account, you can use
  :ref:`Anonymous Authentication <anonymous-authentication>`.

- For applications where end users create an account or log in with
  existing credentials, you can use providers that integrate with
  existing login services (:doc:`Facebook </authentication/facebook>`
  and :doc:`Google </authentication/google>`), or use providers that
  allow you or your end users to create new credentials
  (:ref:`Email/Password <email-password-authentication>`, :ref:`API Keys
  <api-key-authentication>`, :doc:`Custom JWT Auth
  </authentication/custom-jwt>` and :doc:`Custom Function Auth
  </authentication/custom-function>`).

You can use a single provider if you want all users to
authenticate in the same way, or you can enable multiple
providers for more flexibility. You can also link a user
account from one provider to a user account from another
provider by using the client SDKs.

An example of an app that would benefit from multiple
authentication providers is a blog or news service. The
typical user of such an app would authenticate anonymously
so that they don't need to register. However, the blog
authors or journalists would need to sign in with some other
provider to be authorized to publish new content.

.. _auth-provider-list:

Authentication Providers
------------------------

The following is a list of the authentication providers
available in {+service-short+}:

.. list-table::
   :header-rows: 1
   :widths: 6 18

   * - Authentication Provider
     - Description

   * - | :doc:`Anonymous </authentication/anonymous>`
       | ``anon-user``
     - Mechanism for authenticating without credentials. This allows
       users to create and interact with data without creating an
       identity. You can later link the data
       from the Anonymous session with a new identity; see your client
       SDK documentation for details.

   * - | :doc:`Email/Password </authentication/email-password>`
       | ``local-userpass``
     - Mechanism for authenticating with an email address and password.
       Requires implementing scripts with the SDKs for confirming an
       email and resetting a password.

   * - | :doc:`API Key </authentication/api-key>`
       | ``api-key``
     - Mechanism for logging in with API keys generated in the
       {+service-short+} admin console or by your end users.

   * - | :doc:`Apple ID </authentication/apple>`
       | ``oauth2-apple``
     - OAuth2-based mechanism for logging in with an Apple ID.

   * - | :doc:`Google </authentication/google>`
       | ``oauth2-google``
     - OAuth2-based mechanism for logging in with an
       `existing Google account <https://developers.google.com/identity/sign-in/web/>`_.

   * - | :doc:`Facebook </authentication/facebook>`
       | ``oauth2-facebook``
     - OAuth2-based mechanism for logging in with an
       `existing Facebook account <https://developers.facebook.com/docs/facebook-login/>`_.

   * - | :doc:`Custom JWT </authentication/custom-jwt>`
       | ``custom-token``
     - Allow users to log in with JWT-based credentials generated by
       a service external to {+service-short+}.

   * - | :doc:`Custom Function </authentication/custom-function>`
       | ``custom-function``
     - Allow users to log in with arbitrary credentials according to
       custom authentication logic that you define.

.. _user-metadata:

User Metadata
-------------

Each authentication provider can associate a distinct set of metadata
fields with an application user. Some providers (such as Email/Password)
always add specific fields, whereas others allow you to configure the
data to associate with each user. The following table describes the
metadata fields that each authentication provider includes in a user
object:

.. list-table::
   :header-rows: 1
   :widths: 30 70
   
   * - Authentication Provider
     - Details
   
   * - :doc:`Anonymous </authentication/anonymous>`
     - Anonymous users are not associated with any metadata.
   
   * - :doc:`Email/Password </authentication/email-password>`
     - Email/Password users are always associated with the following
       metadata fields:
   
       .. list-table::
          :header-rows: 1
          :widths: 10 20
          
          * - Field
            - Description
          
          * - ``email``
            - The user's email address.
   
   * - :doc:`API Key (Server & User) </authentication/api-key>`
     - API Key users are always associated with the following metadata
       fields:
   
       .. list-table::
          :header-rows: 1
          :widths: 10 20
          
          * - Field
            - Description
          
          * - ``name``
            - The name associated with the API key that the user
              authenticated with.
   
   * - OAuth 2.0 (:doc:`Facebook </authentication/facebook>` & :doc:`Google </authentication/google>`)
     - OAuth 2.0 users can be associated with data provided by the
       external authentication service according to the provider's
       :guilabel:`Metadata Fields` configuration. Users must explicitly
       grant your application permission to access the data.
   
   * - :doc:`Custom Function </authentication/custom-function>`
     - Custom Function authentication users are not automatically
       associated with any data.
   
   * - :doc:`Custom JWT </authentication/custom-jwt>`
     - Custom JWT authentication users can be associated with any data
       included in the JWT returned from the external authentication
       system. The provider's :guilabel:`Metadata Fields` configuration
       maps fields in the JWT to fields that appear in the user object's
       ``data`` and ``identity`` fields.

Summary
-------

- {+service+} supports various **authentication providers** to allow
  users to log in to your app.

- You can link a specific user across
  multiple providers.

- Each authentication provider has different metadata about a user's
  identity.
