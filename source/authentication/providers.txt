.. _authentication-providers:

========================
Authentication Providers
========================

.. default-domain:: mongodb

Realm provides several authentication providers that you can
integrate into a client application to allow users to log in
to your app.

- For applications where you want users to be able to view or manipulate
  data without registering or creating an account, you can use
  :doc:`Anonymous Authentication </authentication/anonymous>`.

- For applications where end users create an account or log in with
  existing credentials, you can use providers that integrate with
  existing login services (:doc:`Facebook </authentication/facebook>`
  and :doc:`Google </authentication/google>`), or use providers that
  allow you or your end users to create new credentials
  (:doc:`Email/Password </authentication/userpass>`, :doc:`API Keys
  </authentication/api-key>`, :doc:`Custom JWT Auth
  </authentication/custom-token>` and :doc:`Custom Function Auth
  </authentication/custom-function>`).

You can use a single provider if you want all users to
authenticate in the same way, or you can enable multiple
providers for more flexibility. You can also link a user
account from one provider to a user account from another
provider by using the client SDKs. For more information on
linking, see :doc:`Link User Accounts
</authentication/link>`.

An example of an app that would benefit from multiple
authentication providers is a blog or news service. The
typical user of such an app would authenticate anonymously
so that they don't need to register. However, the blog
authors or journalists would need to sign in with some other
provider to be authorized to publish new content.

.. _auth-provider-list:

Authentication Providers
------------------------

The following is a list of the authentication providers
available in Realm:

.. list-table::
   :header-rows: 1
   :widths: 6 18

   * - Authentication Provider
     - Description

   * - :ref:`Anonymous <anonymous-authentication>`
     - Mechanism for authenticating without credentials. This allows
       users to create and interact with data without creating an
       identity. You can later :doc:`link </authentication/link>` the data
       from the Anonymous session with a new identity.

   * - :doc:`Email/Password </authentication/userpass>`
     - Mechanism for authenticating with an email address and password.
       Requires implementing scripts with the SDKs for confirming an
       email and resetting a password.

   * - :doc:`Google </authentication/google>`
     - OAuth2-based mechanism for logging in with an
       `existing Google account <https://developers.google.com/identity/sign-in/web/>`_.
       Can be for regular Google accounts or can be restricted to
       organizational domains.

   * - :doc:`Facebook </authentication/facebook>`
     - OAuth2-based mechanism for logging in with an
       `existing Facebook account <https://developers.facebook.com/docs/facebook-login/>`_.

   * - :doc:`API Key </authentication/api-key>`
     - Mechanism for logging in with API keys generated in the
       Realm admin console or by your end users.

   * - :doc:`Custom JWT </authentication/custom-token>`
     - Allows users to log in with JWT-based credentials generated by
       a service external to Realm.

   * - :doc:`Custom Function </authentication/custom-function>`
     - Allows users to log in with arbitrary credentials according to
       custom authentication logic that you define.
