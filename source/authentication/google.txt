
.. _google-authentication:

=====================
Google Authentication
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Google authentication provider allows users to log in with their
existing Google account through `Google Sign-In
<https://developers.google.com/identity/>`_. When a user logs in, Google
provides {+service+} with an `OAuth 2.0 access token
<https://www.oauth.com/oauth2-servers/access-tokens/>`_ for the user.
{+service-short+} uses the token to identify the user and access approved data from
Google APIs on their behalf.

.. _auth-gcp-project-setup:

Set Up a Project in the Google API Console
------------------------------------------

You must set up a project in the Google API Console before you :ref:`configure 
Google Authentication in {+service+}<auth-google-configuration>`. Follow the 
SDK-specific steps to set up Google Authentication in the Google API Console.


.. tabs-realm-sdks::

   tabs:
     - id: javascript
       content: ""
     - id: android
       content: ""
     - id: ios
       content: ""

The Google authentication provider requires a :gcp:`project in the Google
API Console </>` to manage authentication and user permissions. The
following steps walk through creating the project, generating OAuth
credentials, and configuring the provider to connect with the project.

.. include:: /includes/steps/auth-google-project-setup.rst

.. _openIdConnect:
.. _auth-google-configuration:
.. _config-oauth2-google:

Configure in Realm
------------------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      You can enable and configure the Google authentication provider
      from the {+ui+} by selecting :guilabel:`Google` from the
      :guilabel:`Authentication` page.
   
   .. tab::
      :tabid: cli
      
      To enable and configure the Google authentication provider with
      :ref:`realm-cli <realm-cli-quickstart>`, define a :ref:`configuration 
      object <appconfig-auth>` for it in ``/auth/providers.json``.

      Google provider configurations have the following form:
      
      .. code-block:: none
         :caption: /auth/providers.json
      
         {
           "oauth2-google": {
             "name": "oauth2-google",
             "type": "oauth2-google",
             "disabled": <boolean>,
             "config": {
               "clientId": <string>,
               "openId": <boolean>
             },
             "secret_config": {
               "clientSecret": <string>
             },
             "metadata_fields": [<document>, ...],
             "redirect_uris": [<string>, ...],
             "domain_restrictions": [<string>, ...]
           }
         }

The Google authentication provider has the following configuration
options:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - | :guilabel:`Client ID`
       | *config.clientId*
       
     - Required. An :guilabel:`OAuth 2.0 Client ID` for your project
       in the Google API Console.
       
       See :ref:`auth-gcp-project-setup` for information about setting
       up OAuth Credentials for your GCP project.
       
   * - | :guilabel:`Client Secret` 
       | *secret_config.clientSecret*
       
     - Required. The name of a :ref:`Secret <app-secret>` that stores
       an :guilabel:`OAuth 2.0 Client Secret` for your project from the
       Google API Console.
       
       See :ref:`auth-gcp-project-setup` for information about setting
       up OAuth Credentials for your GCP project.
       
   * - | :guilabel:`Metadata Fields`
       | *metadata_fields*

     - Optional. A list of fields describing the authenticated user that
       your application will request from the :google:`Google Identity API
       <identity/sign-in/web/reference#googleusergetbasicprofile>`.

       All metadata fields are omitted by default and can be required on
       a field-by-field basis. Users must explicitly grant your app
       permission to access each required field.
       If a metadata field is required and exists for a particular user,
       it will be included in their user object.
       
       To require a metadata field from an import/export
       configuration file, add an entry for the field to the
       ``metadata_fields`` array. Each entry should be a document of
       the following form:
       
       .. code-block:: javascript
       
          { name: "<metadata field name>", required: "<boolean>" }

   * - | :guilabel:`Redirect URIs`
       | *redirect_uris*

     - Required for web applications.
       A list of allowed redirect :abbr:`URIs (Uniform Resource
       Identifiers)`.

       Once a user completes the authentication process on Google, {+service-short+}
       redirects them back to either a specified redirect URI or, if no
       redirect URI is specified, the URL that they initiated the
       authentication request from. {+service-short+} will only redirect a user to a
       URI that exactly matches an entry in this list, including the
       protocol and any trailing slashes.

   * - | :guilabel:`Domain Restrictions`
       | *domain_restrictions*

     - Optional. A list of approved :wikipedia:`domains <Domain_name>`
       for user accounts.

       If specified, the provider checks the domain of a user's primary
       email address on Google and only allows them to authenticate if
       the domain matches an entry in this list.

       For example, if ``example1.com`` and ``example2.com`` are listed,
       a Google user with a primary email of ``joe.mango@example1.com``
       would be allowed to log in, while a user with a primary email of
       ``joe.mango@example3.com`` would not be allowed to log in.

       .. note::

          If you've specified any domain restrictions, you must also
          require the email address field in the :guilabel:`Metadata
          Fields` setting.

   * - | :guilabel:`OpenID Connect`
       | *config.openId*

     - Optional. Default ``false``.
     
       If ``true``, the provider uses :google:`OpenID Connect
       <identity/protocols/oauth2/openid-connect>` to authenticate users.
       
       .. important:: OpenID Connect Support Varies by SDK

          Refer to SDK-specific documentation about support for OpenID Connect. 
          Not all SDK implementations of Google Authentication support OpenID Connect, 
          while others require it. 

       
       .. note:: OpenID Connect Does Not Support Metadata Fields
          
          Google supports OpenID as part of their OAuth 2.0 implementation but does
          not provide access to restricted scopes for OpenID authentication. This
          means that Realm cannot access metadata fields for users authenticated
          with OpenID Connect.

.. _google-authentication-examples:

Examples
--------

For code examples that demonstrate how to register and log in using
Google authentication, see the documentation for the Realm SDKs:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To register or log in a Google user from the Android Client SDK, see the
      :ref:`Java SDK guide to Google authentication <java-login-google>`.

   .. tab::
      :tabid: ios

      To register or log in a Google user from the iOS Client SDK, see the
      :ref:`Swift SDK guide to Google authentication <ios-login-google>`.

   .. tab::
      :tabid: web

      To register or log in a Google user from the Web Client SDK, see the
      :ref:`Web SDK guide to Google authentication <web-login-google>`.

   .. tab::
      :tabid: node
      
      To register or log in a Google user from the Node Client SDK, see the
      :ref:`Node SDK guide to Google authentication <node-login-google>`.

   .. tab::
      :tabid: react-native

      To register or log in a Google user from the React Native Client SDK, see the
      :ref:`React Native SDK guide to Google authentication <react-native-login-google>`.

   .. tab::
      :tabid: dotnet

      To register or log in a Google user from the .NET Client SDK, see the
      :ref:`.NET SDK guide to Google authentication <dotnet-login-google>`.
