.. _email-password-authentication:

=============================
Email/Password Authentication
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _email-password-authentication-overview:

Overview
--------

The Email/Password authentication provider allows users to register
accounts and log in using their email address and a password. {+service+}
must confirm Email/Password users before it allows them to log in to
your application.

.. note::

   User email addresses are case-sensitive. For example, a user with the
   email address ``TestAccount@example.com`` could not log in using the
   ``testaccount@example.com`` address.

.. _email-password-authentication-configuration:

Configuration
-------------

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui

      You can enable and configure the Email/Password authentication
      provider from the {+ui+} by selecting
      :guilabel:`Email/Password` from the :guilabel:`Authentication`
      page.

      Users may choose one of three ways to handle user confirmation:

      - :ref:`Send a Confirmation Email <auth-send-a-confirmation-email>`

      - :ref:`Run a Confirmation Function <auth-run-a-confirmation-function>`

      - :ref:`Automatically Confirm Users <auth-automatically-confirm-users>`

      Users can choose one of two ways to handle password resets:

      - :ref:`Send a Password Reset Email
        <auth-send-a-password-reset-email>`

      - :ref:`Run a Password Reset Function
        <auth-run-a-password-reset-function>`

   .. tab::
      :tabid: cli

      You can enable and configure the Email/Password authentication
      provider with :doc:`realm-cli </deploy/realm-cli-reference>` by
      importing an application directory that contains a
      :ref:`configuration file <appschema-authentication-providers>` for
      the provider.

      The configuration file must be named ``local-userpass.json`` and
      stored in the ``/auth_providers`` directory. Configuration files
      for the Email/Password authentication provider have the following
      form:

      .. code-block:: none
         :caption: /auth_providers/local-userpass.json

         {
           "name": "local-userpass",
           "type": "local-userpass",
           "config": {
             "autoConfirm": <boolean>,
             "emailConfirmationUrl": <string>,
             "confirmEmailSubject": <string>,
             "runConfirmationFunction": <boolean>,
             "confirmationFunctionName": <string>,
             "resetPasswordUrl": <string>,
             "resetPasswordSubject": <string>,
             "runResetFunction": <boolean>,
             "resetFunctionName": <string>,
           },
           "disabled": <boolean>
         }

.. _email-password-authentication-confirmation:

User Confirmation
-----------------

{+service-short+} confirms Email/Password authentication provider users
in one of three ways:

.. _auth-send-a-confirmation-email:

Send a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure the provider to :guilabel:`Send a Confirmation Email`,
{+service-short+} sends a confirmation email to the email address provided by
new Email/Password users when they register an account. The email contains a
link to a confirmation URL that the user must visit within 30 minutes to confirm
that they control the email address.

Configure the following settings to have {+service-short+} automatically send a
confirmation email:

- :guilabel:`Email Confirmation URL`: the base of the URL included in
  every confirmation email. {+service-short+} appends a unique ``token`` and
  ``tokenId`` to this URL as query parameters to create a unique link
  for every confirmation. To confirm the user, extract these query
  parameters from the user's unique URL and pass the token and tokenId
  to the Client SDK's ``confirmUser`` function.

- :guilabel:`Email Confirmation Subject`: the subject of the email sent
  to the user containing the confirmation URL. This value is optional:
  if omitted, {+service-short+} uses a default subject line instead. Custom email
  confirmation subjects can contain a maximum of 256 characters.

.. note:: Use Deep Links in Mobile Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://developer.android.com/training/app-links/deep-linking.html>`_
   in Android or `universal links <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
   in iOS.

.. _auth-run-a-confirmation-function:

Run a Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure the provider to
:guilabel:`Run a Confirmation Function`, {+backend+} runs a {+service-short+} Function
whenever a new Email/Password user registers an account. {+service-short+} passes
this function unique confirmation tokens and data about the user which
allows you to define custom logic to confirm users. The return value of
this function determines whether {+service-short+} immediately confirms the user or
requires additional confirmation from the client application.

You can use a custom confirmation function to define your own
confirmation flows, such as the following examples:

- Send custom confirmation emails from a specific domain with a
  particular template using an external service.

- Read user permissions from a collection in a `{+atlas+} <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ instance
  or an external REST service to confirm whether a user is authorized to
  use the application or not.

- Send confirmation messages through a service other than email.

Configure the following settings to have {+service-short+} automatically run a
confirmation function:

- :guilabel:`Function`: the function run when a user registers a new
  account with your {+app+}. This function must return an
  object containing a ``status`` key mapping to a string with one of the
  following values: ``success``, ``pending``, or ``fail``.

The custom confirmation function signature has one parameter: an
object containing user data and confirmation tokens. The following table
describes the fields found in the object passed to the custom user
confirmation function:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - ``username``

     - The email address of the user.

   * - ``token``

     - A unique value that can be used to confirm the user's identity
       using the SDK ``confirmUser`` function.

   * - ``tokenId``

     - A unique value that can be used to confirm the user's identity
       using the SDK ``confirmUser`` function.

The following table describes the potential values of the ``status``
field in the object returned by the custom user confirmation function:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Status
     - Effect

   * - ``success``

     - {+service-short+} confirms the user's identity, allowing the user to log
       into their new account.

   * - ``pending``

     - {+service-short+} changes the user's confirmation status to ``pending``
       but the client application must call the ``confirmUser`` SDK function to
       fully confirm the user's identity and allow login.

   * - ``fail``

     - {+service-short+} deletes the pending user. The user can only retry
       account confirmation by registering an entirely new account.
       Since the previous account no longer exists, the same username
       can be reused.

A user confirmation function is generally structured as follows:

.. code-block:: javascript

   exports = ({ token, tokenId, username }) => {
      // validate the username
      const isValidEmail = myFakeValidator.validate(username);

      // check if the user is privileged for this service
      const isPrivileged = myFakeAuth.hasAccess(username, 'myFakeService')

      // send a message to the user in some way so that the user can confirm themselves
      const msgSendSuccessful = isValidEmail && isPrivileged && myFakeMsgr.send(username, token, tokenId)

      if ( msgSendSuccessful ) {
         return { status: 'pending' };
      } else {
         return { status: 'fail' };
      }
   }

.. _auth-automatically-confirm-users:

Automatically Confirm Users
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure the provider to
:guilabel:`Automatically Confirm Users`, {+service-short+} immediately confirms
new Email/Password users after registration. When selected, {+service-short+} does
not validate email addresses and does not send any email to the user.

.. warning::

   {+service-short+} does not validate automatically confirmed email addresses. As
   a result, there are a few reasons you may not be able to contact such
   users via email:

   - An automatically confirmed user's email address might not actually
     belong to that user. (e.g. a user could sign up as
     ``steve.jobs@apple.com``)
   - A user's email address may not even be a valid email address. (e.g.
     a user could sign up as ``my.name@gmail`` or ``asdavaskljj``)

   Exercise caution with this option, as *securely* resetting the
   password of a user account with no valid contact information
   can be very difficult.

.. _email-password-authentication-password-resets:

Password Resets
---------------

{+service-short+} resets Email/Password authentication provider user
passwords in one of two ways:

.. _auth-send-a-password-reset-email:

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure the provider to :guilabel:`Send a Password Reset Email`,
{+service-short+} sends a Password Reset URL to a user's email address when a
user requests a password reset. The user must visit this URL within 30 minutes
to confirm their intent to change their password.

Configure the following settings to have {+service-short+} automatically send a
password reset email:

- :guilabel:`Password Reset URL`: the base of the URL included in every
  password reset email. {+service-short+} appends a unique ``token`` and
  ``tokenId`` to this URL as query parameters to create a unique link
  for every password reset. To reset the user's password, extract these
  query parameters from the user's unique URL and pass the token and
  tokenId to the Client SDK's ``resetPassword`` function.

- :guilabel:`Reset Password Email Subject`: the subject line of the
  email that {+service-short+} sends to users when they request to reset their
  password. This value is optional: if omitted, {+service-short+} uses a default
  subject line instead. Custom password reset subjects can contain a
  maximum of 256 characters.

.. note:: Use Deep Links in Mobile Apps

   Mobile applications can handle password resets directly in the app
   by configuring `deep linking
   <https://developer.android.com/training/app-links/deep-linking.html>`_
   in Android or `universal links
   <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
   in iOS.

.. _auth-run-a-password-reset-function:

Run a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure the provider to :guilabel:`Run a Password Reset
Function`, {+service-short+} runs a :doc:`{+service-short+} Function </functions>` that you define
whenever the client SDK ``callResetPasswordFunction()`` function is
called. {+service-short+} passes this function unique confirmation tokens and data
about the user which allows you to define custom logic to reset a user's
password. The value that you return from the function determines whether
{+service-short+} immediately resets the user's password or requires additional
confirmation from the client application.

You can use a custom password reset function to define your own password
reset flows, such as the following examples:

- Send custom password reset emails from a specific domain with a
  particular template using an external service.

- Interface with a MongoDB Atlas collection to implement a password
  reset "cooldown period" to prevent too many password reset
  attempts on a single account in a particular time range.

- Send custom password reset messages through a service other than
  email.

Configure the following settings to have {+service-short+} automatically run a
password reset function:

- :guilabel:`Function`: the function run when an instance of the client
  SDK calls the ``callResetPasswordFunction`` function. This function
  must return an object containing a ``status`` key mapping to a string
  with one of the following values: ``success``, ``pending``, or
  ``fail``.

.. note::

   If you configure the provider to use a password reset function then
   the client SDK ``sendResetPasswordEmail()`` function will return an
   error. You may still need to call ``resetPassword()`` if the password
   reset function returns a ``pending`` status.

The custom password reset function signature is
:wikipedia:`variadic <Variadic_function>`: it accepts any number of
parameters. The first of these parameters is always an object containing
user data and confirmation tokens. All parameters after the first are
custom parameters passed into the Client SDK as an argument collection.
For instance, the Client SDK call:

.. code-block:: javascript

   callResetPasswordFunction("myUsername", "newPassword", ["Security Question Answer 1", "Security Question Answer 2", "securityCode:0510"])


Would be translated into the following custom password reset function
signature:

.. code-block:: javascript

   resetFunc({username, password, token, tokenId}, securityAnswer1, securityAnswer2, securitySMSCode)

Each element of the custom argument array is spread into a parameter for
the custom password reset function, starting with the second parameter.

The following table describes the fields found in the object
passed to the custom password reset function as the first parameter:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - ``username``

     - The email address of the user.

   * - ``password``

     - A new proposed password for the user. If this function returns the
       successful status, the user's password will be updated to this
       value.

   * - ``token``

     - A unique value that can be used to update the user's password.

   * - ``tokenId``

     - A unique value that can be used to confirm the user's identity
       using the SDK ``confirmUser`` function.

The following table describes the potential values of the ``status``
field in the object returned by the custom password reset function:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Status
     - Effect

   * - ``success``

     - {+service-short+} changes the user's password to the provided ``password``
       parameter immediately. Only recommended if your application can
       authenticate the user in the custom function itself through some
       secure means, such as a security question.

   * - ``pending``

     - {+service-short+} waits for client application to reset the user's password
       using the Client SDK ``resetPassword`` function. The user's password is
       not affected unless the client application calls the ``resetPassword``
       function.

   * - ``fail``

     - Nothing happens.

A custom password reset function is generally structured as follows:

.. code-block:: javascript

   exports = ({ token, tokenId, username, password }) => {
      // check if the username corresponds to a real user
      const isUser = myFakeValidator.validate(username);

      // check if the user has requested a password reset too often recently
      const isNotCoolingDown = myFakeCooldownService.canReset(username, 'myFakeService')

      // send a message to the user in some way so that the user can confirm themselves
      const msgSendSuccessful = isUser && isNotCoolingDown && myFakeMsgr.send(username, token, tokenId)

      if ( msgSendSuccessful ) {
         return { status: 'pending' };
      } else {
         return { status: 'fail' };
      }
   }

.. warning::

   The {+service-short+} SDK function ``callResetPasswordFunction()`` is **not**
   authenticated because it is intended for password recovery for users who
   cannot log into their account otherwise. As a result, you cannot associate
   any call to this function with a specific {+service-short+} user. Returning a
   ``success`` status from your custom password reset function permanently
   changes the password to the new value in the ``password`` parameter of the
   function, so returning ``success`` can result in *any user* resetting the
   password of *any other application user*. Because of this, it is recommended
   to always return a ``pending`` status after sending the actual account owner
   a message via a trusted mode of communication.

.. _email-password-authentication-examples:

Examples
--------

For code examples that demonstrate how to register and log in using
email/password authentication, see the documentation for the Realm SDKs:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To register or log in an email/password user from the Android Client SDK, see the
      :ref:`Android SDK guide to email/password authentication <android-login-email-password>`.

   .. tab::
      :tabid: ios

      To register or log in an email/password user from the iOS Client SDK, see the
      :ref:`iOS SDK guide to email/password authentication <ios-login-email-password>`.

   .. tab::
      :tabid: web

      To register or log in an email/password user from the Web Client SDK, see the
      :ref:`Web SDK guide to email/password authentication <web-login-email-password>`.

   .. tab::
      :tabid: node
      
      To register or log in an email/password user from the Node Client SDK, see the
      :ref:`Node SDK guide to email/password authentication <node-login-email-password>`.

   .. tab::
      :tabid: react-native

      To register or log in an email/password user from the React Native Client SDK, see the
      :ref:`React Native SDK guide to email/password authentication <react-native-login-email-password>`.

   .. tab::
      :tabid: dotnet

      To register or log in an email/password user from the .NET Client SDK, see the
      :ref:`.NET SDK guide to email/password authentication <dotnet-login-email-password>`.

.. _email-password-authentication-summary:

Summary
-------

- Email/password authentication allows users to create an identity in
  your application based on a username and a password.
- To enable Email/password authentication, your application should
  support a method of email :ref:`confirmation
  <email-password-authentication-confirmation>`, and a method of
  :ref:`resetting a user's password
  <email-password-authentication-password-resets>`. There are multiple
  implementation options for each of these requirements.
