.. _custom-function-authentication:

==============================
Custom Function Authentication
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The **custom function** authentication provider allows you to define a
custom authentication flow using a :ref:`serverless function
<functions>`. You can use this provider to implement your own user
authentication logic or flexibly integrate an external authentication
system.

Custom function authentication is the most flexible form of
authentication but also requires you to define and manage the
authentication flow yourself.

Consider using the custom function provider in your app if:

- You want to use an external authentication service that does not have
  a built-in provider. If the service uses JSON web tokens, consider
  creating a :ref:`Custom JWT <custom-jwt-authentication>` provider
  instead.

- You want to customize the authentication process. For example, you
  could use a service to send customized confirmation emails.

.. _authentication-function:

The Authentication Function
---------------------------

The authentication function is a serverless JavaScript function where
you define your custom user authentication logic. It runs whenever a
user logs in with a custom function provider credential and can create
new users for first time logins.

The function maps data attached to the credential to a unique string ID
for the user. In the function body, you write custom code to identify
and authenticate the user. For example, you could use the provided data
to log in to an external service over HTTP or using a package from npm.

.. literalinclude:: /authentication/custom-function/the-authentication-function.js
   :language: javascript

.. important::
   
   {+service-short+} does not perform any data validation or
   authentication checks for the Custom Function provider. Make sure
   that you validate incoming data and that your authentication system
   performs appropriate authentication checks, such as requiring a
   password, two factor authentication, or a :wikipedia:`single sign-on
   <Single_sign-on>` token.

Receive a Custom Credential Payload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``payload`` object passed to the function contains data that was
included with the custom function provider credential in the client app.
The function accepts any value provided from your client app, so the
actual field names and values depend on your implementation.

.. example::

   The following code examples show how to create a function credential
   using the Realm SDKs. The credential includes a ``payload`` object
   that is passed to the authentication function.

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. code-block:: javascript
         
            const credentials = Realm.Credentials.function({
              username: "mongolover",
              pin: "24601",
            });
   
      .. tab::
         :tabid: java
   
         .. code-block:: java
            
            import org.bson.Document;
            import static java.util.Map.entry;
   
            val credentials: Credentials = Credentials.customFunction(
              Document(
                Map.ofEntries(
                  entry("username", "mongolover"),
                  entry("pin", "24601")
                )
              )
            )
   
      .. tab::
         :tabid: c-sharp
   
         .. code-block:: csharp
         
            var credentials = Credentials.Function(new {
              username = "mongolover",
              pin = "24601"
            })
   
      .. tab::
         :tabid: swift
   
         .. code-block:: swift
         
            let credentials = Credentials.function(payload: [
               "username": "mongolover",
               "pin": "24601"
            ])

Return an External User ID
~~~~~~~~~~~~~~~~~~~~~~~~~~

If authentication is successful, the function should return a unique
string identifier for the user. For example, you could return the user
ID value used by your external authentication system. The provider uses
the external ID to map from your custom system to your app's internal
user accounts.

.. important::
   
   The user's external ID is *not* the same as the user's internal
   account ID, which is exposed as the ``id`` field of a user object.
   You access the user's internal ID with ``%%user.id`` in expressions,
   ``context.user.id`` in functions, and the ``User.id`` property in the
   SDKs.

If an existing user is already associated with the external ID, the
provider logs that user in.

If the provider has no record of a given external ID, it creates a new
:ref:`user account <user-accounts>`, adds a custom function provider
identity, and then logs in the new user.

The identity object for the custom function provider is stored in the
:ref:`user object <user-objects>` and resembles the following:

.. code-block:: json
   :emphasize-lines: 4-7
   
   {
     "id": "<Internal User Account ID>",
     "identities": [
        {
          "providerType": "custom-function",
          "id": "<External User ID>",
        }
     ]
   }

.. example:: 
  
    The authentication function should return a unique external ID as a
    string:
    
    .. code-block:: javascript
    
      return "5f650356a8631da45dd4784c"
    
    You can also return an object that contains the external ID as its
    ``id`` value:
    
    .. code-block:: javascript

      return { "id": "5f650356a8631da45dd4784c" }

    If you want to define a display name for the user, define it in the
    ``name`` field of the returned object:
    
    .. code-block:: javascript
       :emphasize-lines: 3

       return {
         "id": "5f650356a8631da45dd4784c",
         "name": "James Bond"
       }

.. _config-custom-function:

Set Up Custom Function Authentication
-------------------------------------

You can configure custom function authentication using any supported
deployment method.

Configure the Custom Function Provider
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui

      .. include:: /includes/steps/configure-custom-function-auth-realm-ui.rst 

   .. tab::
      :tabid: cli

      .. include:: /includes/steps/configure-custom-function-auth-import-export.rst

Configure Custom User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can associate :ref:`custom data <custom-user-data>` in a MongoDB
Atlas collection with user accounts in your app. This can be helpful if
you often need to access a user's data but is not required to use the
custom function provider.

A user's custom data document may contain any data. For apps that use
the custom function provider, we recommend storing both the user's
internal user account ID and their external ID.

For example, you might use the following format:

.. code-block:: json

   {
     "_id": "<Generated ObjectId>",
     "user_id": "<Internal User ID>",
     "external_id": "<External User ID>"
   }

You can use the following approach to create custom user documents for
custom function provider users:

1. Configure custom user data for a collection in your linked cluster.
   The User ID field stores the user's internal account ID.

   .. code-block:: json
      :caption: /auth/custom_user_data.json
      :emphasize-lines: 5
      
      {
        "mongo_service_name": "mongodb-atlas",
        "database_name": "myApp",
        "collection_name": "users",
        "user_id_field": "user_id",
        "enabled": true
      }

2. Configure the custom function authentication provider and return a
   unique external user ID from the authentication function. Realm
   stores this ID in the ``id`` field of the user's ``custom-function``
   identity.

   .. code-block:: javascript

      exports = async function handleCustomFunctionAuth(payload) {
        const auth = require("some-external-auth-system")
        const user = await auth.login(payload)
        return user.id
      }

3. Set up an authentication trigger that listens for ``CREATE`` events
   from the ``custom-function`` provider. In the trigger function, add a
   new document to the custom user data collection that includes both
   the user's internal ID and external ID.

   .. code-block:: javascript

      exports = async function onNewCustomFunctionUser({ user }) {
        // This is the user's internal account ID that was generated by your app 
        const internalId = user.id

        // This is the external ID returned from the authentication function
        const customFunctionIdentity = user.identities.find(id => {
          return id.provider_type === "custom-function"
        })
        const externalId = customFunctionIdentity.id

        // Create a custom user data document for the user
        const mdb = context.services.get("mongodb-atlas")
        const users = mdb.db("myApp").collection("users")
        return await users.insertOne({
          // Include both the internal ID and external ID
          user_id: internalId,
          external_id: externalId,
          // Add any other data you want to include
          created_at: new Date()
        })
      }

Log In from a Realm SDK
-----------------------

To log in from a client application, use a Custom Function credential
that contains your login payload data.

For examples, refer to the documentation for a specific SDK:

- :ref:`Swift SDK <ios-login-custom-function>`
- :ref:`Java SDK <java-login-custom-function>`
- :ref:`.NET SDK <dotnet-login-custom-function>`
- :ref:`React Native SDK <react-native-login-custom-function>`
- :ref:`Node.js SDK <node-login-custom-function>`
- :ref:`Web SDK <web-login-custom-function>`
