-----------------------
Access Function Context
-----------------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm :doc:`functions </functions>` are aware of the context in which
they were called and can behave dynamically based on that context. A
function's context includes application components, such as external
services and other functions, as well as execution information, such as
the profile of the user that was logged in when the function was
called.

You can access all aspects of a function's context in the function's
source code with the ``context`` global variable.

Application Logic
-----------------

Call a Function
~~~~~~~~~~~~~~~

You can call any :doc:`function </functions>` in your application
from a function with the ``context.functions`` global variable.

.. code-block:: javascript

   // difference: subtracts b from a using the sum function
   exports = function(a, b) {
       return context.functions.execute("sum", a, -1 * b);
   };

.. _context-connect-to-an-external-service:

Connect to an External Service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can connect to a configured external service from a function by
instantiating a service client with the ``context.services`` global
variable. Any service actions for which you've configured rules are
available as methods on the service client.

.. code-block:: javascript

   exports = function() {
     // Instantiate a service client for the HTTP Service named "myHttpService"
     const http = context.services.get("myHttpService");
     // Call the HTTP service's `get` action (if the service rules allow it)
     return http.get({ url: "https://www.mongodb.com" });
   };

Access Global Values
~~~~~~~~~~~~~~~~~~~~

You can access global values in a function with the ``context.values``
global variable.

.. code-block:: javascript

   exports = function() {
     // Get a global value (or `undefined` if no value has the specified name)
     const theme = context.values.get("theme");
     console.log(theme.colors)     // Output: { red: "#ee1111", blue: "#1111ee" }
     console.log(theme.colors.red) // Output: "#ee1111"
   };

Execution Information
---------------------

.. _context-get-user-information:

Get User Information
~~~~~~~~~~~~~~~~~~~~

You can access the :doc:`user object </authentication>` of the logged in user
that called a function with the ``context.user`` global variable.

.. code-block:: javascript

   exports = function() {
     const currentUser = context.user
     console.log(currentUser.id)
   }

Get Request Information
~~~~~~~~~~~~~~~~~~~~~~~

You can access information about the external HTTP call that initiated a
function's execution with the :ref:`context.request <context-request>`
global variable.

.. code-block:: javascript

   exports = function() {
     const request = context.request;
     if (request.httpReferrer == "https://www.example.com/") {
       applyPercentageDiscount(10);
     }
   }

View a Request's Headers
~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :ref:`context.request <context-request>` global variable
to access the :mdn:`HTTP Header <Web/HTTP/Headers>` that were included
in the request that caused the function to execute.

.. code-block:: javascript

   exports = function() {
     return context.request.requestHeaders;
     // e.g. {
     //   "Content-Type": ["application/json"],
     //   "Cookie": [
     //     "someCookie=someValue",
     //     "anotherCookie=anotherValue"
     //   ]
     // }
   }

View a Request's Query Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :ref:`context.request <context-request>` global variable
to access the raw :wikipedia:`query string <Query_string>` from the URL
of the incoming HTTP request that caused a Function to execute. Incoming
webhooks also expose query parameters in the webhook ``payload`` as an
object where each field maps to a query parameter.

.. code-block:: javascript

   exports = function(payload, response) {
     const rawQuery = context.request.rawQueryString;
     // e.g. "?someParam=foo&anotherParam=42"
     const query = payload.query
     // e.g. { someParam: "foo", anotherParam: 42 }
   }

.. note:: Webhook Query Parameters

   The fields in ``payload.query`` are *not* guaranteed to be in the
   same order as they were specified in the request. If you need to
   preserve the order of the query parameters, use
   ``context.request.rawQueryString`` instead.


Check if the Function is Running as a System User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can determine whether or not a function is being executed as a
regular :doc:`user </authentication>` or a :ref:`system user <system-user>` by
calling :method:`context.runningAsSystem()`.

.. code-block:: javascript

   const isSystemUser = context.runningAsSystem()
   if(isSystemUser) {
     // Do some work that bypasses rules
   } else {
     // Do some work in the context of the user that called the function.
   }

Incoming Webhook Metadata
-------------------------

Get the Current Incoming Webhook URL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the Function is an :ref:`incoming webhook <http-webhooks>`, you can
access the webhook URL on the ``webhookUrl`` property of the
:ref:`context.request <context-request>` object:

.. code-block:: javascript

   exports = function(payload, response) {
     // Returns the webhook URL as a string
     return context.request.webhookUrl
   }

Get the Current Incoming Webhook HTTP Method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the Function is an :ref:`incoming webhook <http-webhooks>`, you can
inspect the :mdn:`HTTP method <Web/HTTP/Methods>` of the request that
called the webhook by accessing the ``httpMethod`` property of the
:ref:`context.request <context-request>` object:

.. include:: /services/examples/webhook-http-method-handler.rst
