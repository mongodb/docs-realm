===========
JSON & BSON
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} :doc:`functions </functions>` include built-in global modules
that allow you to process and convert between data formats. Each format
supports various different data types and encodings.

.. list-table::
   :header-rows: 1
   :widths: 20 80
   
   * - Module
     - Description
   
   * - :ref:`JSON <json>`
     - Includes methods that convert between string and object
       representations of :wikipedia:`JSON <JSON>` data.
   
   * - :ref:`EJSON <ejson>`
     - Includes methods that convert between string and object
       representations of :manual:`Extended JSON
       </reference/mongodb-extended-json>` data.
   
   * - :ref:`BSON <bson>`
     - Includes methods that create :wikipedia:`Binary JSON <BSON>`
       objects and convert between various BSON data types and
       encodings.

.. _json:

JSON (JavaScriptÂ Object Notation)
---------------------------------

:wikipedia:`JSON <JSON>` is a standard data format that stores groups of
key-value pairs and supports basic JavaScript types. For details on
syntax and supported types, refer to the `JSON specification
<https://www.json.org/>`_.

{+service-short+} exposes the standard :mdn:`JSON
<Web/JavaScript/Reference/Global_Objects/JSON>` module in the global
scope of every :doc:`function </functions>`. The module includes methods
that convert between string and object representations of standard JSON
objects.

.. method:: JSON.parse(jsonString)

   Parses the provided JSON string and converts it to a JavaScript
   object.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``jsonString``
        - :mdn:`string <Web/JavaScript/Reference/Global_Objects/String>`
        - A serialized string representation of a standard JSON object.

   :returns:

      A standard JavaScript object generated from the provided JSON
      string.
   
   .. example::
      
      .. code-block:: javascript

         const jsonString = `{
           answer: 42,
           submittedAt: "2020-03-02T16:50:24.475Z"
         }`;
         const object = JSON.parse(jsonString);

.. method:: JSON.stringify(object)

   Serializes the provided JavaScript object to a JSON string.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``object``
        - :mdn:`object <Web/JavaScript/Reference/Global_Objects/Object>`
        - A standard :mdn:`JavaScript Object
          <Web/JavaScript/Reference/Global_Objects/Object>`.

   :returns:

      A string representation of the provided JavaScript object.
   
   .. example::
      
      .. code-block:: javascript

         const object = {
           answer: 42,
           submittedAt: new Date("2020-03-02T16:46:47.977Z")
         };
         const jsonString = JSON.stringify(object);

.. _ejson:
.. _extended-json:

EJSON (Extended JSON)
---------------------

:manual:`Extended JSON </reference/mongodb-extended-json>` is a superset
of standard JSON that adds additional support for types that are
available in :ref:`BSON <bson>` but not included in the `JSON
specification <https://www.json.org/>`_.

{+service-short+} exposes the ``EJSON`` module in the global scope of every
:doc:`function </functions>`. This module is similar to the standard
:mdn:`JSON <Web/JavaScript/Reference/Global_Objects/JSON>` module but
preserves additional type information.

.. method:: EJSON.parse(ejsonString)

   Parses the provided :manual:`EJSON
   </reference/mongodb-extended-json/>` string and converts it to a
   JavaScript object.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ejsonString
        - string
        - A serialized string representation of an Extended JSON object.

   :returns:

      A JavaScript object representation of the provided EJSON string.
   
   .. example::
      
      .. code-block:: javascript

         const ejsonString = `{
           answer: {
             "$numberLong": "42"
           },
           submittedAt: {
             "$date": {
               "$numberLong": "1583167607977"
             }
           }
         }`;
         const object = EJSON.parse(ejsonString);

.. method:: EJSON.stringify(object)

   Serializes the provided JavaScript object to an :manual:`EJSON
   </reference/mongodb-extended-json/>` string.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``object``
        - document
        - An :manual:`EJSON
          </reference/mongodb-extended-json/>` object. The object may
          contain BSON types.

   :returns:

      A string representation of the provided EJSON object.
   
   .. example::
      
      .. code-block:: javascript

         const object = {
           answer: 42,
           submittedAt: new Date("2020-03-02T16:46:47.977Z")
         };
         const ejsonString = EJSON.stringify(object);

.. _bson:
.. _binary-json:

BSON (Binary JSON)
------------------

:wikipedia:`BSON <BSON>` is a data format that encodes binary
representations of :manual:`extended JSON
</reference/mongodb-extended-json>` objects. BSON includes additional
data types beyond those in the JSON standard and provides a unified
interface for converting data to and from binary representations. For
more information, refer to the `BSON specification
<http://bsonspec.org/>`__.

{+service-short+} exposes the ``BSON`` module in the global scope of every
:doc:`Function </functions>`. This module provides methods that allow
you to create BSON objects and convert them to and from various data
types and encodings.

.. note:: MongoDB Documents are BSON

   MongoDB stores all documents in BSON format, so you'll use the
   ``BSON`` package most commonly when you run :ref:`CRUD & Aggregation
   operations <crud-aggregation-operations>`.

.. _bson-objectid:

BSON.ObjectId
~~~~~~~~~~~~~

The ``BSON.ObjectId`` type represents a 12-byte MongoDB ``ObjectId``
identifier.

.. method:: BSON.ObjectId(id)
   
   Constructs a ``BSON.ObjectId`` object that encodes an
   :manual:`ObjectId </reference/method/ObjectId>`
   
   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``id``
        - string
        - Optional. A 12-byte string or a string of 24 hex characters.

   :returns:
      
      A ``BSON.ObjectId`` object that encodes the specified
      :manual:`ObjectId </reference/method/ObjectId>` string or a
      generated ``ObjectId`` string if none was specified.
   
   .. example::
      
      .. code-block:: javascript

         const objectId = new BSON.ObjectId("5e58667d902d38559c802b13");
         const generatedObjectId = new BSON.ObjectId();

.. _bson-regexp:

BSON.BSONRegExp
~~~~~~~~~~~~~~~

The ``BSON.BSONRegExp`` type represents a :mdn:`regular expression
<Web/JavaScript/Guide/Regular_Expressions>`. You can use a
``BSON.BSONRegExp`` object with the ``$regex`` query operator to
:ref:`perform a regular expression query <query-operators-regex>` on a
MongoDB collection.

.. method:: BSON.BSONRegExp(pattern, flags)
   
   Constructs a ``BSON.BSONRegExp`` object from a regular expression
   string. You can optionally specify configuration flags.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``pattern``
        - string
        - A :mdn:`regular expression
          <Web/JavaScript/Guide/Regular_Expressions>` pattern.

      * - ``flags``
        - string
        - Optional. One or more :mdn:`regular expression flags
          <Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2>`.

   :returns:

      A ``BSON.BSONRegExp`` object that encodes the provided regular
      expression pattern and flags.

   .. example::
      
      .. code-block:: javascript
      
         const regex = BSON.BSONRegExp("the great", "ig");

.. _bson-binary:

BSON.Binary
~~~~~~~~~~~

The ``BSON.Binary`` type represents a binary-encoded data string.

.. method:: BSON.Binary.fromHex(hexString, subType)

   Constructs a ``BSON.Binary`` object from data represented as a
   hexadecimal string.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``hexString``
        - string
        - A :wikipedia:`byte aligned <Data_structure_alignment>` string
          of hexadecimal characters (0-9 and A-F).

      * - ``subType``
        - integer
        - Optional. The type of data encoded in the hexadecimal string.
          The value must be in the range 0-255 where ``0``, the default
          value, represents a generic binary. For a full list of
          supported subtypes, refer to the `BSON specification
          <http://bsonspec.org/spec.html>`__.

   :returns:

      A ``BSON.Binary`` object that encodes the provided hexadecimal
      string.

   .. example::
      
      .. code-block:: javascript
      
         const binary = BSON.Binary.fromHex("54657374206d65737361676520706c656173652069676e6f7265=");

.. method:: BSON.Binary.toHex()

   Converts the ``BSON.Binary`` object into a hexadecimal string.

   :returns:

      A hexadecimal string representation of the provided
      ``BSON.Binary`` object.

   .. example::
      
      .. code-block:: javascript
      
         const binary = BSON.Binary.fromHex("54657374206d65737361676520706c656173652069676e6f7265=");
         const hexString = binary.toHex();

.. method:: BSON.Binary.fromBase64(base64String, subType)

   Constructs a ``BSON.Binary`` object from data represented as a base64
   string.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``base64String``
        - string
        - A string of base64 encoded characters.
          
          .. note:: String Padding
             
             The base64-encoded string must include either one or two equals
             signs (``=``), referred to as "padding", at the end of the string.
             ``BSON.Binary.fromBase64()`` does not support unpadded strings.

      * - ``subType``
        - integer
        - Optional. The type of data encoded in the hexadecimal string.
          The value must be in the range 0-255 where ``0``, the default
          value, represents a generic binary. For a full list of
          supported subtypes, refer to the `BSON specification
          <http://bsonspec.org/spec.html>`__.

   :returns:

      A ``BSON.Binary`` object that encodes the provided base64 string.

   .. example::
      
      .. code-block:: javascript
      
         const binary = BSON.Binary.fromBase64("VGVzdCBtZXNzYWdlIHBsZWFzZSBpZ25vcmU=");

.. method:: BSON.Binary.toBase64()

   Converts the ``BSON.Binary`` object into a base64 string.

   :returns:

      A base64 string representation of the ``BSON.Binary`` object.

   .. example::
      
      .. code-block:: javascript
      
         const binary = BSON.Binary.fromBase64("VGVzdCBtZXNzYWdlIHBsZWFzZSBpZ25vcmU=");
         const base64String = binary.toBase64();

.. method:: BSON.Binary.text()

   Converts the ``BSON.Binary`` object into a UTF-8 string.

   :returns:

      A UTF-8 string representation of the provided ``BSON.Binary``
      object.

   .. example::
      
      .. code-block:: javascript
      
         const binary = BSON.Binary.fromBase64("VGVzdCBtZXNzYWdlIHBsZWFzZSBpZ25vcmU=");
         const decodedString = binary.text();





.. _bson-maxkey:

BSON.MaxKey
~~~~~~~~~~~

The ``BSON.MaxKey`` type represents a value that compares higher than
all other BSON values.

.. example::
   
   .. code-block:: javascript
      
      await collection.findOne({ date: { $lt: BSON.MaxKey } });

.. _bson-minkey:

BSON.MinKey
~~~~~~~~~~~

The ``BSON.MinKey`` type represents a value that compares lower than all
other BSON values.

.. example::
   
   .. code-block:: javascript
      
      await collection.findOne({ date: { $gt: BSON.MinKey } });

.. _bson-int32:

BSON.Int32
~~~~~~~~~~

The ``BSON.Int32`` type represents a 32-bit signed integer.

.. method:: BSON.Int32(integer)

   Constructs a ``BSON.Int32`` object from a 32-bit number.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``low32``
        - number
        - A 32-bit number.

   :returns:

      A ``BSON.Int32`` object that encodes the specified integer.
      Returns ``0`` if no arguments are supplied.

   .. example::
      
      .. code-block:: javascript
      
         const int32 = BSON.Int32(42);

.. _bson-long:

BSON.Long
~~~~~~~~~

The ``BSON.Long`` type represents a 64-bit signed integer.

.. method:: BSON.Long(low32, high32)

   Constructs a ``BSON.Long`` object from two 32-bit integers that
   represent the low 32 bits and the high 32 bits in the 64-bit ``Long``
   integer.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``low32``
        - integer
        
        - Optional. The long integer's 32 low bits. These bits represent
          the least significant digits of the number.

      * - ``high32``
        - integer
        - Optional. The long integer's 32 high bits. These bits
          represent the most significant digits of the number.

   :returns:

      A ``BSON.Long`` object that encodes the specified integer.
      Returns ``0`` if no arguments are supplied.

      ``BSON.Long`` encodes using the following formula:

      .. code-block:: javascript
         :copyable: false

         (high32 * (2**32)) + low32

   .. example::
      
      .. code-block:: javascript
      
         const long = BSON.Long(600206158, 342);

.. _bson-double:

BSON.Double
~~~~~~~~~~~

The ``BSON.Double`` type represents a 64-bit (8-byte) floating point
number.

.. important:: Use Decimal128 for Money

   ``BSON.Double`` is subject to floating point rounding errors, so it
   is not recommended for use cases where decimal values must round
   exactly, e.g. financial data. For these cases, use
   :ref:`BSON.Decimal128 <bson-decimal128>` instead.

.. method:: BSON.Double(double)

   Constructs a ``BSON.Double`` object from a 64-bit decimal value.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``double``
        - number
        - A 64-bit decimal value.

   :returns:

      A ``BSON.Double`` object that encodes the specified double.
      Returns ``0`` if no argument is supplied.

   .. example::
      
      .. code-block:: javascript
      
         const double = BSON.Double(1234.5678);

.. _bson-decimal128:

BSON.Decimal128
~~~~~~~~~~~~~~~

The ``BSON.Decimal128`` type represents a 128-bit (16-byte) floating
point number. This type is intended for use cases where decimal values
must round exactly, e.g. financial data.

.. method:: BSON.Decimal128.fromString(decimalString)

   Constructs a ``BSON.Decimal128`` from a string representation of a
   decimal number.

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``decimalString``
        - string
        - A string representing a decimal number, e.g. ``"1234.5678910123456"``.

   :returns:

      A ``BSON.Decimal128`` that encodes the provided decimal value.

   .. example::
      
      .. code-block:: javascript
         
         const double = BSON.Decimal128.fromString("1234.5678910123456");
