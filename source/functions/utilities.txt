================
Utility Packages
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _function-utils-jwt:

JSON Web Tokens (``utils.jwt``)
-------------------------------

The ``utils.jwt`` package provides methods for working with
:jwt-io:`JSON Web Tokens <introduction>`.

.. list-table::
   :header-rows: 1
   :widths: 20 40
   
   * - Method
     - Description
   
   * - :method:`utils.jwt.encode()`
     - Generates an encoded JSON Web Token string for a given
       ``payload``, ``signingMethod``, and ``secret``.
   
   * - :method:`utils.jwt.decode()`
     - Decodes the ``payload`` of a JSON Web Token string.

.. method:: utils.jwt.encode()

   Generates an encoded JSON Web Token string for the ``payload`` based
   on the specified ``signingMethod`` and ``secret``.

   .. code-block:: javascript
      
      utils.jwt.encode(signingMethod, payload, secret, customHeaderFields)

   .. list-table::
      :header-rows: 1
      :widths: 15 10 75

      * - Parameter
        - Type
        - Description

      * - ``signingMethod``
        - String
        - The cryptographic algorithm to use when encoding the JWT.
          Realm supports the following JWT signing methods:
          
          .. list-table::
             :class: config-table
             :widths: 30 70
             :header-rows: 1
             
             * - Signing Method
               - Description

             * - ``"HS256"``
               - HMAC using SHA-256
             * - ``"HS384"``
               - HMAC using SHA-384
             * - ``"HS512"``
               - HMAC using SHA-512
             
             * - ``"RS256"``
               - RSASSA-PKCS1-v1_5 using SHA-256
             * - ``"RS384"``
               - RSASSA-PKCS1-v1_5 using SHA-384
             * - ``"RS512"``
               - RSASSA-PKCS1-v1_5 using SHA-512
             
             * - ``"ES256"``
               - ECDSA using P-256 and SHA-256
             * - ``"ES384"``
               - ECDSA using P-384 and SHA-384
             * - ``"ES512"``
               - ECDSA using P-512 and SHA-512
             
             * - ``"PS256"``
               - RSASSA-PSS using SHA-256 and MGF1 with SHA-256
             * - ``"PS384"``
               - RSASSA-PSS using SHA-384 and MGF1 with SHA-384
             * - ``"PS512"``
               - RSASSA-PSS using SHA-512 and MGF1 with SHA-512

      * - ``payload``
        - Object
        
        - A JSON object that specifies the token's claims and any
          additional related data.

      * - ``secret``
        - String
        - A secret string that Realm uses to sign the token. The value
          of the string depends on the signing method that you use:
          
          .. list-table::
             :header-rows: 1
             :widths: 30 70

             * - Signing Methods
               - Description

             * - | ``"HS256"``
                 | ``"HS384"``
                 | ``"HS512"``
               - A random string.
             * - | ``"RS256"``
                 | ``"RS384"``
                 | ``"RS512"``
               - An RSA-SHA private key in PKCS#8 format.
             * - | ``"PS256"``
                 | ``"PS384"``
                 | ``"PS512"``
               - An RSA-PSS private key in PKCS#8 format.
             * - | ``"ES256"``
                 | ``"ES384"``
                 | ``"ES512"``
               - An :wikipedia:`ECDSA
                 <Elliptic_Curve_Digital_Signature_Algorithm>`  private
                 key in PKCS#8 format.

      * - ``customHeaderFields``
        - Object
        
        - A JSON object that specifies additional fields to include in
          the JWT's `JOSE header
          <https://tools.ietf.org/html/rfc7515#section-4>`__.
   
   :returns:
       A JSON Web Token string encoded for the provided ``payload``.

   .. example::
      
      Consider the following JWT claims object:
      
      .. code-block:: json
         
         {
           "sub": "1234567890",
           "name": "Joe Example",
           "iat": 1565721223187
         }
      
      We can encode the claims object as a JWT string by calling
      ``utils.jwt.encode()``. The following function encodes the JWT
      using the ``HS512`` signing method and the secret
      ``"SuperSecret"``:

      .. code-block:: javascript
         
         exports = function() {
           const signingMethod = "HS512";
           const payload = {
             "sub": "1234567890",
             "name": "Joe Example",
             "iat": 1565721223187
           };
           const secret = "SuperSecret";
           return utils.jwt.encode(signingMethod, payload, secret);
         }
      
      The function returns the following JWT string:

      .. code-block:: none
         
         eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBTY2htb2UiLCJpYXQiOjE1NjU3MjEyMjMxODd9.-QL15ldu2BYuJokNWT6YRiwZQIiIpvq6Kyv-C6qslNdNiUVxo8zqLJZ1iEkNf2yZKMIrQuMCtIC1tzd2H31AxA

.. method:: utils.jwt.decode()

   Decodes the ``payload`` of the provided JSON Web Token string. The
   value of ``key`` must correspond to the secret value that was used to
   encode the JWT string.

   .. code-block:: javascript
      
      utils.jwt.decode(jwtString, key, returnHeader)

   .. list-table::
      :header-rows: 1
      :widths: 15 15 70

      * - Parameter
        - Type
        - Description

      * - ``jwtString``
        - String
        - A JSON Web Token string that encodes a set of claims signed
          with a secret value.

      * - ``key``
        - String
        - A string that Realm uses to verify the token signature. The
          value of the string depends on the signing method that you use:
          
          .. list-table::
             :header-rows: 1

             * - Signing Methods
               - Description

             * - | ``"HS256"``
                 | ``"HS384"``
                 | ``"HS512"``
               - The random string that was used to sign the token.
             * - | ``"RS256"``
                 | ``"RS384"``
                 | ``"RS512"``
               - The RSA-SHA public key that corresponds to the private
                 key that was used to sign the token.
             * - | ``"PS256"``
                 | ``"PS384"``
                 | ``"PS512"``
               - The RSA-PSS public key that corresponds to the private
                 key that was used to sign the token.
             * - | ``"ES256"``
                 | ``"ES384"``
                 | ``"ES512"``
               - The :wikipedia:`ECDSA
                 <Elliptic_Curve_Digital_Signature_Algorithm>` public
                 key that corresponds to the private key that was used
                 to sign the token.

      * - ``returnHeader``
        - Boolean
        
        - If ``true``, return the JWT's `JOSE header
          <https://tools.ietf.org/html/rfc7515#section-4>`__ in addition
          to the decoded payload.
   
   :returns:
       If ``returnHeader`` is ``false``, returns the decoded EJSON
       payload.

       If ``returnHeader`` is ``true``, returns an object that contains
       the `JOSE header
       <https://tools.ietf.org/html/rfc7515#section-4>`__ in the
       ``header`` field and the decoded EJSON payload in the ``payload``
       field.

       .. code-block:: json
          
          {
            "header": {
              "<JOSE Header Field>": <JOSE Header Value>,
              ...
            },
            "payload": {
              "<JWT Claim Field>": <JWT Claim Value>,
              ...
            }
          }

   .. example::
      
      Consider the following signed JWT string:
      
      .. code-block:: none
         
         eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvZSBTY2htb2UiLCJpYXQiOjE1NjU3MjEyMjMxODd9.-QL15ldu2BYuJokNWT6YRiwZQIiIpvq6Kyv-C6qslNdNiUVxo8zqLJZ1iEkNf2yZKMIrQuMCtIC1tzd2H31AxA

      The JWT was signed using the ``HS512`` signing method with the
      secret value ``"SuperSecret"``. We can decode the JWT's claims
      object ``utils.jwt.decode()``. The following function decodes the
      JWT string:

      .. code-block:: javascript
         
         exports = function(jwtString) {
           const key = "SuperSecret";
           return utils.jwt.decode(jwtString, key);
         }
      
      The function returns the following EJSON representation of the JWT
      payload:

      .. code-block:: json
         
         {
           "sub": "1234567890",
           "name": "Joe Example",
           "iat": { "$numberDouble": 1565721223187 }
         }

.. _function-utils-crypto:

Cryptography (``utils.crypto``)
-------------------------------

The ``utils.crypto`` package provides methods for working with
cryptographic algorithms.

.. list-table::
   :header-rows: 1
   :widths: 20 40
   
   * - Method
     - Description
   
   * - :method:`utils.crypto.encrypt()`
     - Generates an encrypted text string from a given text string using
       a specific encryption method and key.
   
   * - :method:`utils.crypto.decrypt()`
     - Decrypts a provided text string using a specific encryption
       method and key.
   
   * - :method:`utils.crypto.sign()`
     - Generates a cryptographically unique signature for a given
       message using a private key.
   
   * - :method:`utils.crypto.verify()`
     - Verifies that a signature is valid for a given message and public
       key.
   
   * - :method:`utils.crypto.hmac()`
     - Generates an :wikipedia:`HMAC <HMAC>` signature from a given
       input and secret.
   
   * - :method:`utils.crypto.hash()`
     - Generates a hash value for a given input and hash function.

.. method:: utils.crypto.encrypt()

   Generates an encrypted text string from the provided text using the
   specified encryption method and key.

   .. code-block:: javascript
      
      utils.crypto.encrypt(encryptionType, message, key)

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``encryptionType``
        - String
        - The type of encryption with which to encrypt the message. The
          following encryption types are supported:

          - :wikipedia:`AES Encryption <Advanced_Encryption_Standard>` (``"aes"``)

      * - ``message``
        - String
        - The text string that you want to encrypt.

      * - ``key``
        - String
        
        - A cryptographic key used to encrypt the text. The key
          you should use depends on the encryption method:

          .. list-table::
             :header-rows: 1
             :widths: 30 70

             * - Encryption Type
               - Encryption Key

             * - AES
               - A 16-byte, 24-byte, or 32-byte random string

   :returns:

      A :ref:`BSON Binary <bson-binary>` object that contains the text
      string encrypted with the specified encryption type and key.

   .. example::
      
      Assume that we have defined a :doc:`Value </values-and-secrets>` named
      ``aesEncryptionKey`` that contains the following 32-byte AES
      encryption key:

      .. code-block:: javascript
         
         "603082712271C525E087BD999A4E0738"
      
      We can encrypt a message with this key using the following Realm
      function:

      .. code-block:: javascript
         :emphasize-lines: 3
         
         exports = function(message) {
           const key = context.values.get("aesEncryptionKey");
           const encryptedMessage = utils.crypto.encrypt("aes", message, key);
           return encryptedMessage.toBase64();
         }
      
      If we use the function to encrypt the message ``"MongoDB is
      great!"``, it returns the following encrypted base64 string:

      .. code-block:: javascript
         
         "WPBuIvJ6Bity43Uh822dW8QlVYVJaFUiDeUjlTiJXzptUuTYIKPlXekBQAJb"

.. method:: utils.crypto.decrypt()

   Decrypts the provided text string using the specified encryption type
   and key. If both the encryption type and key are the same as those
   used to encrypt, this returns the original, unencrypted text.

   .. code-block:: javascript
      
      utils.crypto.decrypt(encryptionType, encryptedMessage, key)

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60
      
      * - Parameter
        - Type
        - Description
      
      * - ``encryptionType``
        - String
        - The type of encryption that was used to encrypt the provided
          text. The following encryption types are supported:
          
          - :wikipedia:`AES Encryption <Advanced_Encryption_Standard>` (``"aes"``)
      
      * - ``encryptedMessage``
        - :ref:`BSON.Binary <bson-binary>`
        - A BSON Binary that encodes the encrypted text string that
          you want to decrypt.
      
      * - ``key``
        - String
        - A cryptographic key used to decrypt the text. The key
          you should use depends on the encryption type:
          
          .. list-table::
             :header-rows: 1
             :widths: 30 70
             
             * - Encryption Type
               - Encryption Key
             
             * - AES
               - A 16-byte, 24-byte, or 32-byte random string

   :returns:
       
       A :ref:`BSON Binary <bson-binary>` object that contains the
       decrypted message.
       
       If the provided encrypted message was encrypted with the
       specified method and key, then the decrypted message is identical
       to the original message.

   .. example::
      
      Assume that we have defined a :doc:`Value </values-and-secrets>` named
      ``aesEncryptionKey`` that contains the following 32-byte AES
      encryption key:
      
      .. code-block:: none
         
         "603082712271C525E087BD999A4E0738"
      
      We can decrypt a message that was encrypted with this key using
      the following Realm function:
      
      .. code-block:: javascript
         :emphasize-lines: 7
         
         exports = function(encryptedMessage) {
           // The encrypted message must be a BSON.Binary
           if(typeof encryptedMessage === "string") {
             encryptedMessage = BSON.Binary.fromBase64(encryptedMessage)
           }
           const key = context.values.get("aesEncryptionKey");
           const decryptedMessage = utils.crypto.decrypt("aes", encryptedMessage, key);
           return decryptedMessage.text();
         }
      
      If we use the function to decrypt the encrypted message, it
      returns the original, unencrypted string:

      .. code-block:: javascript
         
         "MongoDB is great!"

.. method:: utils.crypto.sign()
   
   Generates a cryptographically unique signature for a message using a
   private key. The signature can be verified with the corresponding
   public key to ensure that the signer has access to the private key
   and that the message content has not been altered since it was
   signed.

   .. code-block:: javascript
      
      utils.crypto.sign(encryptionType, message, privateKey, signatureScheme)
   
   .. list-table::
      :header-rows: 1
      :widths: 20 20 60
      
      * - Parameter
        - Type
        - Description
      
      * - ``encryptionType``
        - String
        - The type of encryption that was used to generate the
          private/public key pair. The following encryption types are
          supported:
          
          - :wikipedia:`RSA Encryption <RSA_algorithm>` (``"rsa"``)
      
      * - ``message``
        - String
        - The text string that you want to sign.
      
      * - ``privateKey``
        - String
        - A private key generated with the specified encryption type.

          .. important:: Key Format
             
             Not all RSA keys use the same format. Realm can only sign
             messages with a private key that conforms to the standard
             :wikipedia:`PKCS#1 <PKCS_1>` format. Private keys in this
             format have the header ``-----BEGIN RSA PRIVATE KEY-----``.

             .. include:: /includes/shell-generate-an-rsa-key-pair.rst
      
      * - ``signatureScheme``
        - String
        - Optional. Default: ``"pss"``
          
          The :wikipedia:`padding scheme <Padding_(cryptography)>` that
          the signature should use. Realm supports signing messages
          with the following schemes:

          - :wikipedia:`Probabilistic signature scheme <Probabilistic_signature_scheme>` (``"pss"``)
          - :wikipedia:`PKCS1v1.5 <PKCS_1>` (``"pkcs1v15"``)

   :returns:
       
       A :ref:`BSON.Binary <bson-binary>` :wikipedia:`cryptographic
       signature <Digital_signature>` for the message signed using the
       specified private key.

   .. example::
      
      Assume that we have defined a :doc:`Value </values-and-secrets>` named
      ``rsaPrivateKey`` that contains the following RSA private key:

      .. code-block:: none
         
         -----BEGIN RSA PRIVATE KEY-----
         MIICXAIBAAKBgQDVsEjse2qO4v3p8RM/q8Rqzloc1lee34yoYuKZ2cemuUu8Jpc7
         KFO1+aJpXdbSPZNhGLdANn8f2oMIZ1R9hgEJRn/Qm/YyC4RPTGg55nzHqSlziNZJ
         JAyEUyU7kx5+Kb6ktgojhk8ocZRkorM8FEylkrKzgSrfay0PcWHPsKlmeQIDAQAB
         AoGAHlVK1L7kLmpMbuP4voYMeLjYE9XdVEEZf2GiFwLSE3mkJY44033y/Bb2lgxr
         DScOf675fFUAEK59ATlhxfu6s6rgx+g9qQQ+mL74YZWPqiZHBPjyMRaBalDVC4QF
         YJ+DopFcB8hY2ElXnbK70ALmVYNjw3RdmC97h0YfOsQcWW0CQQD18aeuPNicVnse
         Ku22vvhvQYlabaQh4xdkEIxz1TthZj48f61wZwEMipYqOAc5XEtDlNnxgeipv0yF
         RHstUjwXAkEA3m0Br/U/vC9evuXppWbONana08KLgfELyd3Uw9jG7VKJZTBH5mS8
         7CB68aEF8egrJpo8Ss8BkWrvCxYDb4Y77wJAUlbOMZozVtvpKidrIFR9Lho91uWA
         Hsw9h4W20AzibXBig7SnJ0uE4WMAdS/+0yhgFkceVCmO8E2YW8Gaj4jJjwJASxtg
         AHy+ItuUEL4uIW4Pn8tVW0BMP3qX0niXyfI/ag/+2S5uePv3V3y4RzNqgH83Yved
         +FziWKpVQdcTHeuj/QJBAJl1G3WFruk0llIoKKbKljaEiCm1WCTcuEPbdOtkJYvO
         9ZYQg/fji70FERkq2KHtY7aLhCHzy0d4n9xgE/pjV+I=
         -----END RSA PRIVATE KEY-----
      
      We can sign a message with this key using the following Realm
      function:

      .. code-block:: javascript
         :emphasize-lines: 3
         
         exports = function(message) {
           const rsaPrivateKey = context.values.get("rsaPrivateKey");
           const signature = utils.crypto.sign("rsa", message, rsaPrivateKey, "pss");
           return signature;
         }
      
      If we use the function to sign the message ``"MongoDB is
      great!"``, it returns a :ref:`BSON.Binary <bson-binary>` signature
      that evaluates to the following base64 string:

      .. code-block:: none
         
         "SpfXcJwPbypArt+XuYQyuZqU52YCAY/sZj2kiuin2b6/RzyM4Ek3n3spOtqZJqxn1tfQavxIX4V+prbs74/pOaQkCLekl9Hoa1xOzSKcGoRd8U+n1+UBY3d3cyODGMpyr8Tim2HZAeLPE/D3Q36/K+jpgjvrJFXsJoAy5/PV7iEGV1fkzogmZtXWDcUUBBTTNPY4qZTzjNhL4RAFOc7Mfci+ojE/lLsNaumUVU1/Eky4vasmyjqunm+ULCcRmgWtGDMGHaQV4OXC2LMUe9GOqd3Q9ghCe0Vlhn25oTh8cXoGpd1Fr8wolNa//9dUqSM+QYDpZJXGLShX/Oa8mPwJZKDKHtqrS+2vE6S4dDWR7zKDza+DeovOeCih71QyuSYMXSz+WWGgfLzv/syhmUXP/mjqgLmJU6Kwg5htajDoylpzLC0BLGT4zDZEwBrq/AjwRs/EPjYdFgGCt1WCbbVlDyXvvH1ekDrzACzumhiMSZNNa+ZH3JmMJxTCQWDfiTeAfkauaaZHKIj2q2/QE7vuAhNcVPJ2YgpXnvnQHJpEZBc/Y3Q6JLxom6+cGC4P//9d++r2cwzXIkqD+wSGZVSVtpm5CLtWMRSK5FX2dv16bM+LE8ozoRvtMUDTrQ8SSSDGxyuYbvN9b2fYYPcWpCMchqOBXV6eZGoMldaHX3Qy5h8="

.. method:: utils.crypto.verify()
   
   Checks that the provided signature is valid for the specified message
   and public key.
   
   If the signature is valid, it guarantees that the signer has access
   to the corresponding private key and that the message content has not
   been altered since it was signed.

   .. code-block:: javascript
      
      utils.crypto.verify(encryptionType, message, publicKey, signature, signatureScheme)
   
   .. list-table::
      :header-rows: 1
      :widths: 20 20 60
      
      * - Parameter
        - Type
        - Description
      
      * - ``encryptionType``
        - String
        - The type of encryption that was used to generate the
          private/public key pair. The following encryption types are
          supported:
          
          - :wikipedia:`RSA Encryption <RSA_algorithm>` (``"rsa"``)
      
      * - ``message``
        - String
        - The text string for which you want to verify the signature. If
          the signature is valid, this is the exact message that was
          signed.
      
      * - ``publicKey``
        - String
        
        - The public key for which you want to verify the signature. If
          the signature is valid, this is the corresponding public key
          of the private key that was used to sign the message.

          .. important:: Key Format
             
             Not all RSA keys use the same format. Realm can only
             verify signatures with RSA keys that conform to the
             standard :wikipedia:`PKCS#1 <PKCS_1>` format. Public keys
             in this format have the header ``-----BEGIN RSA PUBLIC
             KEY-----``.

             .. include:: /includes/shell-generate-an-rsa-key-pair.rst
          
      * - ``signature``
        - :ref:`BSON.Binary <bson-binary>`
        - The signature that you want to verify.
      
      * - ``signatureScheme``
        - String
        - Optional. Default: ``"pss"``
          
          The :wikipedia:`padding scheme <Padding_(cryptography)>` that
          the signature uses. Realm supports verifying signatures that
          use the following schemes:

          - :wikipedia:`Probabilistic signature scheme <Probabilistic_signature_scheme>` (``"pss"``)
          - :wikipedia:`PKCS1v1.5 <PKCS_1>` (``"pkcs1v15"``)
          
   :returns:
       
      A boolean that, if ``true``, indicates whether or not the
      signature is valid for the provided message and public key.

   .. example::
      
      We received a message with a signature in :ref:`BSON.Binary
      <bson-binary>` format and want to verify that the message was
      signed with the private key that corresponds to the sender's RSA
      public key:

      .. code-block:: none
         
         -----BEGIN RSA PUBLIC KEY-----
         MIGJAoGBANWwSOx7ao7i/enxEz+rxGrOWhzWV57fjKhi4pnZx6a5S7wmlzsoU7X5
         omld1tI9k2EYt0A2fx/agwhnVH2GAQlGf9Cb9jILhE9MaDnmfMepKXOI1kkxDIRT
         JTuTHn4pvqS2CiOGTyhxlGSiszwUTKWSsrOBKt9rLQ9xYc+wqWZ5AgMBAAE=
         -----END RSA PUBLIC KEY-----

      We can use the following Realm function to verify the RSA
      signature:
      
      .. code-block:: javascript
         :emphasize-lines: 2
         
         exports = function(message, rsaPublicKey, signature) {
           const isValid = utils.crypto.verify("rsa", message, rsaPublicKey, signature, "pss");
           return isValid; // true if the signature matches, else false
         }

.. method:: utils.crypto.hmac()

   Generates an :wikipedia:`HMAC <HMAC>` signature from the provided
   input and secret. This is useful when communicating with third-party
   HTTP services that require signed requests.

   .. code-block:: javascript
      
      utils.crypto.hmac(input, secret, hash_function, output_format)

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``input``
        - string
        - The input for which you would like to generate a signature.

      * - ``secret``
        - string
        - The secret key to use when generating the signature.

      * - ``hash_function``
        - string
        - The name of the hashing function to use when generating the
          signature. The following functions are supported: ``"sha1"``,
          ``"sha256"``, ``"sha512"``.

      * - ``output_format``
        - string
        - The format of the generated signature. Can be either
          ``"hex"`` for a hex string, or ``"base64"`` for a Base64
          string.

   :returns:

      The signature of the input, in the format specified by
      ``output_format``.

.. method:: utils.crypto.hash()

   Generates a hash value for the provided input using the specified
   hash function.

   .. code-block:: javascript
      
      utils.crypto.hash(hash_function, input)

   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Parameter
        - Type
        - Description

      * - ``hash_function``
        - string
        - The name of the hashing function.
          The following functions are supported: ``"sha1"``,
          ``"sha256"``, ``"md5"``.

      * - ``input``
        - string or BSON.Binary
        - Required.
          The input for which you would like to generate a hash value.

   :returns:

      A hash value for the provided input generated by the specified
      hashing function.
