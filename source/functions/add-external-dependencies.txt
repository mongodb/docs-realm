=========================
Add External Dependencies
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can upload JavaScript modules from the `npm <https://www.npmjs.com/>`_ registry into your {+app+}
and use the uploaded :ref:`external dependencies <external-dependencies>` in your {+service-short+} Functions. 
This lets your application depend upon external libraries and reuse code.

{+service+} automatically transpiles added modules to 
ES5 and supports most built-in modules. You can :doc:`import an uploaded module
</functions/import-external-dependencies>` in any {+service-short+} Function.

You can see a list of uploaded packages on the :guilabel:`Functions` screen of
the {+ui+} under the :guilabel:`Dependencies` tab.

There are currently two ways to add dependencies to your {+app+}:

- :ref:`Specify the npm packages you want to use <specify-npm-packages>`
- :ref:`Upload a zipped node_modules folder (legacy)<upload-zipped-node-modules>`

.. _specify-npm-packages:

Specify npm Packages
--------------------

You can specify npm packages to use in your {+service-short+} Functions and 
the {+backend+} imports them. You can do this with the {+ui+} or {+cli+}. 

.. tabs::

   .. tab:: UI
      :tabid: ui 

      .. important:: Overriding Existing Dependencies

         When adding a package via the {+ui+}, if the previous dependencies were 
         :ref:`installed via zip file <upload-zipped-node-modules>`,
         the new package overrides the existing dependencies.
         Otherwise, the package is added to the existing dependencies.

      .. include:: /includes/steps/add-external-dependencies-ui.rst

   .. tab:: CLI
      :tabid: cli

      .. important:: Overriding Existing Dependencies

         Pushing a ``package.json`` file from the {+cli+} overrides all existing 
         dependencies. Your {+service-short+} Functions only have access to dependencies 
         pushed from the CLI.

      .. include:: /includes/steps/add-external-dependencies-cli.rst

.. _upload-zipped-node-modules:

Upload Zipped node_modules
--------------------------

You must first upload an archive of an npm ``node_modules`` folder. 
Uploaded ``node_modules`` archive files are subject to a 10MB size cap.

.. important:: Overriding Existing Dependencies

   Uploading zipped ``node_modules`` overrides all existing dependencies. 
   Your {+service-short+} Functions only have access to uploaded dependencies. 

.. include:: /includes/steps/upload-external-dependencies.rst

Summary
-------

- Dependencies can be used in {+service-short+} Functions
- You can use external dependencies by:

  - Pushing a ``package.json`` including dependencies with the {+cli+}.
  - Selecting packages to be installed with the {+ui+}. 
  - Pushing a zip file of dependencies with the {+cli+}.
  - Uploading a zip file of dependencies with the {+ui+}. 

Next Steps
----------

- Once you add your dependencies to {+backend+}, you can :doc:`import external dependencies
  </functions/import-external-dependencies>` in a {+service-short+} Function.
