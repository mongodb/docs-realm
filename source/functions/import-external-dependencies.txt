.. _import-external-dependencies:

============================
Import External Dependencies
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

You can import npm modules into a {+service-short+} Function and use the imported
:ref:`external dependencies <external-dependencies>` in your code. This
allows your {+app+} to depend upon external libraries for
code reuse.

.. note:: Pre-requisites for Import

   You must :doc:`upload dependencies to
   {+service-short+}</functions/upload-external-dependencies>` before you can
   import them.

.. note:: Node.js Built-In Module Support

   {+service-short+} currently supports a subset of Node.js built-in modules. See :ref:`function
   constraints <function-constraints>` for details on the support of various modules.


Usage
-----

You can import dependencies into any {+service-short+} Function using the
``require`` keyword inside of the ``exports`` function. You cannot use
ES Module ``import`` syntax. Since {+service-short+} does not support file or local
module import, you should import dependencies in the style of a
``node_modules`` module import. To learn more about ``require`` syntax,
consult the `Node.js documentation for the require keyword
<https://nodejs.org/api/modules.html#modules_require_id>`_.

.. important:: Where Do I Import Modules?

   Node.js projects commonly place ``require`` statements in the
   global scope of each file, but {+service-short+} does not support this pattern.
   You *must* place {+service-short+} Function ``require`` statements within a
   function scope.

Import a Full Module
~~~~~~~~~~~~~~~~~~~~

Below, you'll find a simple example of a function that uses the
``require`` keyword inside a function to import the ``ramda`` module to
call `ramda <https://ramdajs.com/>`_'s ``map`` method:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = () => {
      const R = require("ramda");
      return R.map(x => x*2, [1,2,3]);
   }

Import a Module Subfolder
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example demonstrates how to use ``require`` to import a
single submodule of an external dependency into a {+service-short+} Function:

.. code-block:: javascript
   :emphasize-lines: 2

   exports = function(arg){
      const cloneDeep = require("lodash/cloneDeep");

      var original = { name: "Deep" };
      var copy = cloneDeep(original);
      copy.name = "John";

      console.log(`original: ${original.name}`);
      console.log(`copy: ${copy.name}`);
      return (original != copy);
   };
