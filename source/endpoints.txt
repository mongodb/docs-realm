.. _https-endpoints:

===============
HTTPS Endpoints
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:
   
   Configure HTTPS Endpoints </endpoints/configure>
   HTTPS Endpoint Requests and Responses </endpoints/requests-and-responses>

.. note::
   
   HTTPS endpoints replace webhooks from Realm's deprecated third-party
   service integrations. To learn how to migrate your existing webhooks,
   see :ref:`convert-webhooks-to-endpoints`.

Introduction
------------

Many modern applications use multiple external services to handle
complex use cases, such as messaging, analytics, and data management.
Those services often send data back by calling an HTTPS endpoint. You
can create HTTPS endpoints in {+service+} for these external services to
send data to your app.

{+app+} HTTPS endpoints are found at the following URL:

.. code-block::

   https://data.mongodb-api.com/app/<appId>/endpoint/<route>

.. _endpoint-function:

Endpoint Function
-----------------

Each HTTPS endpoint calls an associated :ref:`function <functions>` that
takes the incoming request as its first argument and the response sent
back to callers as the second argument:

.. code-block:: javascript

   exports = async function (request, response) {
     // 1. Parse the incoming request
     const bodyJson = JSON.parse(request.body.text());
     // 2. Run the endpoint logic
     await context.services
       .get("mongodb-atlas")
       .db("myDb")
       .collection("myCollection")
       .insertOne({ date: new Date(), requestBody: bodyJson });
     // 3. Configure the response
     response.setBody("Request was successful");
   }

.. _endpoint-request-object:

Request Objects
~~~~~~~~~~~~~~~

The first argument of an endpoint function is a ``request`` object that
includes information about the incoming HTTP request that called the
endpoint.

.. code-block:: json
   
   {
     "query": { "<Query Parameter>": "<Parameter Value>" },
     "headers": { "<Header>": ["<Header Value>"] },
     "body": <BSON.Binary>
   }

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Field
     - Description
   
   * - ``query``
     - An object where each field maps a URL query parameter to its value.
   
   * - ``headers``
     - An object where each field maps a request header name to an array of one or more values.
   
   * - ``body``
     - A :ref:`BSON.Binary <bson-binary>` object that contains the
       request body. If the request did not include a body, this value
       is ``undefined``.

.. _endpoint-response-object:

Response Objects
~~~~~~~~~~~~~~~~

The second argument of an endpoint function is a ``response`` object
that represents HTTPS response sent back to the caller. The object
includes methods that you can call to configure the response.

.. list-table::
   :header-rows: 1
   :widths: 15 10 45

   * - Method
     - Description

   * - | ``setStatusCode(code)``
       | - ``code: number``
     - Set the HTTP response `status code
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status>`_.

       .. example::

          .. code-block:: javascript

             response.setStatusCode(201);

   * - | ``setBody(body)``
       | - ``body: string | BSON.Binary``
     - Set the HTTP response `body
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#Body_2>`_.

       If ``body`` is a string, it will be encoded to ``BSON.Binary``
       before being returned.

       .. example::

          .. code-block:: javascript

             response.setBody(
               "{'message': 'Hello, World!'}"
             );

   * - | ``setHeader(name, value)``
       | - ``name: string``
       | - ``value: string``
     - Set the HTTP response `header
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers>`_
       specified by ``name`` to the value passed in the ``value``
       argument. This overrides any other values that may have already
       been assigned to that  header.

       .. example::

          .. code-block:: javascript

             response.setHeader(
               "Content-Type",
               "application/json"
             );

   * - | ``addHeader(name, value)``
       | - ``name: string``
       | - ``value: string``
     - Set the HTTP response `header
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers>`_
       specified by ``name`` to the value passed in the ``value``
       argument. Unlike ``setHeader``, this does not override other
       values that have already been assigned to the header.

       .. example::

          .. code-block:: javascript

             response.addHeader(
               "Cache-Control",
               "max-age=600"
             );

             response.addHeader(
               "Cache-Control",
               "min-fresh=60"
             )


Endpoint Configuration
----------------------

.. _endpoint-route:

Route
~~~~~

Every HTTPS endpoint has a unique route that serves as a name for the
endpoint. Clients call an endpoint by specifying its route in the
request URL.

Routes names must begin with a forward slash (``/``) and may contain
additional forward slashes to indicate a nested path.

.. _endpoint-http-method:

HTTP Method
~~~~~~~~~~~

You can configure an endpoint to accept only a specific :mdn:`HTTP
method <Web/HTTP/Methods>` or allow any method and handle each type
within the endpoint function.

HTTPS endpoints support the following standard HTTP methods:

- :mdn:`GET <Web/HTTP/Methods/GET>`
- :mdn:`POST <Web/HTTP/Methods/POST>`
- :mdn:`PUT <Web/HTTP/Methods/PUT>`
- :mdn:`PATCH <Web/HTTP/Methods/PATCH>`
- :mdn:`DELETE <Web/HTTP/Methods/DELETE>`

.. _endpoint-authentication:

Authentication
~~~~~~~~~~~~~~

TODO

.. _endpoint-authorization:

Authorization
~~~~~~~~~~~~~

You can configure authorization for each endpoint to determine whether
or not an authenticated request is allowed to execute.

HTTP endpoints always enforce :ref:`rules` in the context of the
authenticated user that called the endpoint. In addition, you can
specify a request validation scheme that requires incoming requests to
incorporate a secret value.

You can specify up to one of the following schemes:

- :ref:`Secret Query Parameter <endpoint-secret-query-parameter>`

- :ref:`Payload Signature Verification <endpoint-payload-signature-verification>`

.. note::

   For maximum security, programmatically generate the secret value
   using a secure package such as the `Python secrets module
   <https://docs.python.org/3/library/secrets.html>`__. Make sure that
   you do not publish the secret or include it in your version control
   system.

.. _endpoint-secret-query-parameter:

Secret Query Parameter
~~~~~~~~~~~~~~~~~~~~~~

The secret query parameter request validation option requires that
incoming requests include the secret value as a `query parameter
<https://en.wikipedia.org/wiki/Query_string>`_ appended to the end of
the URL.

Every request must include the secret value as the ``secret`` query parameter:

.. code-block:: none

   <endpoint URL>?secret=12345

.. example::
   
   The following ``curl`` request uses secret query parameter validation
   with the secret value ``12345``:

   .. code-block:: shell

      curl -X POST \
           -H "Content-Type: application/json" \
           -d '{ "message": "HELLO" }' \
           https://data.mongodb-api.com/app/myapp-abcde/endpoint/testSecretQueryParam?secret=12345

.. _endpoint-payload-signature-verification:

Payload Signature Verification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Payload signature verification requires that incoming requests include
an HTTP header where the value is a hexadecimal-encoded :abbr:`HMAC
(Hash-based Message Authentication Code)` SHA-256 hash generated from
the request body and the secret value.
   
You could use the following function to generate the payload signature:

.. code-block:: javascript

   // Generate an HMAC request signature
   exports = function signEndpointRequest(
     secret, // the secret validation string e.g. 12345
     body, // the endpoint request body e.g. { "message": "MESSAGE" }
   ) {
     return utils.crypto.hmac(EJSON.stringify(body), secret, "sha256", "hex");
   }

Every request must include a payload signature in the
``Endpoint-Signature`` header:

.. code-block:: none

   Endpoint-Signature::sha256=<hex encoded hash>

.. example::
   
   The following ``curl`` request demonstrates payload signature verification
   with the secret value ``12345``:

   .. code-block:: shell
      
      curl -X POST \
        -H "Content-Type: application/json" \
        -H "Endpoint-Signature::sha256=828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862" \
        -d '{"message":"MESSAGE"}' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/testPayloadSignatureVerification
