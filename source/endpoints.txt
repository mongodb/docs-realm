.. _https-endpoints:

===============
HTTPS Endpoints
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:
   
   Create an HTTPS Endpoint </endpoints/configure>

.. note::
   
   HTTPS endpoints replace webhooks from Realm's deprecated third-party
   service integrations. To learn how to migrate your existing webhooks,
   see :ref:`convert-webhooks-to-endpoints`.

Introduction
------------

HTTPS endpoints are serverless functions that you call by sending
requests from an HTTP client. An endpoint receives requests sent to a
URL, runs a function that can access data from the request payload, and
then returns a result back to the caller. You can use endpoints to
define custom API routes for your app or webhooks that integrate with
external services.

Endpoints use standard, encrypted HTTPS requests, which means that you
don't need to install any database drivers or opinionated libraries to
call them. Instead, you send requests like this from any HTTP client:

.. code-block:: bash
   
   curl -X POST \
        -H 'api-key: <API Key>' \
        -H 'Content-Type: application/json' \
        -d '{ "message": "Hello, world!" }' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/hello

.. _endpoint-route:

Endpoint Routes
~~~~~~~~~~~~~~~

Every HTTPS endpoint has a unique route that serves as a name for the
endpoint. You call an endpoint by appending its route to your app's base
URL and sending an HTTP request. Route names must begin with a forward
slash (``/``) and may contain additional forward slashes to indicate a
nested path.

.. code-block:: none
   :caption: Endpoint URL Format (Global Apps)

   https://data.mongodb-api.com/app/<App ID>/endpoint/<Route>

Endpoints in a :ref:`locally deployed <local-deployment>` app use a base
URL specific to the app's :ref:`deployment region <realm-regions>` (e.g.
``us-east-1``):

.. code-block:: none
   :caption: Endpoint URL Format (Local Apps)

   https://<Region>.aws.data.mongodb-api.com/app/<App ID>/endpoint/<Route>

.. _endpoint-http-method:

HTTP Methods
~~~~~~~~~~~~

You can configure an endpoint to accept only a specific :mdn:`HTTP
method <Web/HTTP/Methods>` or allow any method and handle each type
within the endpoint function.

HTTPS endpoints support the following standard HTTP methods:

- :mdn:`GET <Web/HTTP/Methods/GET>`
- :mdn:`POST <Web/HTTP/Methods/POST>`
- :mdn:`PUT <Web/HTTP/Methods/PUT>`
- :mdn:`PATCH <Web/HTTP/Methods/PATCH>`
- :mdn:`DELETE <Web/HTTP/Methods/DELETE>`

.. _endpoint-function:

Endpoint Functions
~~~~~~~~~~~~~~~~~~

Each request sent to an HTTPS endpoint calls an associated serverless
:ref:`function <functions>` that handles the logic for the endpoint. The
function runs your custom code and can import libraries from npm,
connect to a linked MongoDB Atlas cluster, and call other serverless
functions.

.. tip::
   
   You define and edit endpoint handler functions on the
   :guilabel:`Functions` page of the {+ui+} or in the :ref:`/functions
   <appconfig-functions>` folder of an app configuration directory.

Endpoint functions receive arguments that describe the incoming
:ref:`request <endpoint-request-object>` and allow you to modify the
:ref:`response <endpoint-response-object>` sent back to callers.

.. code-block:: javascript
   :caption: Endpoint function signature
   
   exports = async function (request, response) {
     // ... your code here
   }

.. example::
   
   This endpoint function parses the body of an incoming ``POST``
   request, stores the parsed body in a MongoDB collection, and then
   responds to the caller:

   .. code-block:: javascript
   
      exports = async function (request, response) {
        // 1. Parse the incoming request
        const bodyJson = JSON.parse(request.body.text());
        // 2. Run the endpoint logic
        await context.services
          .get("mongodb-atlas")
          .db("myDb")
          .collection("myCollection")
          .insertOne({ date: new Date(), requestBody: bodyJson });
        // 3. Configure the response
        response.setBody("Request was successful");
      }

.. _endpoint-requests-and-responses:

Requests & Responses
--------------------

.. _endpoint-request-object:

Request Objects
~~~~~~~~~~~~~~~

The first argument of an endpoint function is a ``request`` object that
includes information about the incoming HTTP request that called the
endpoint.

.. code-block:: json
   :caption: Endpoint Request Object
   
   {
     "query": { "<Query Parameter>": "<Parameter Value>" },
     "headers": { "<Header>": ["<Header Value>"] },
     "body": <BSON.Binary>
   }

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Field
     - Description
   
   * - ``query``
     - An object where each field maps a URL query parameter to its value.
   
   * - ``headers``
     - An object where each field maps a request header name to an array of one or more values.
   
   * - ``body``
     - A :ref:`BSON.Binary <bson-binary>` object that contains the
       request body. If the request did not include a body, this value
       is ``undefined``.

.. _endpoint-response-object:

Response Objects
~~~~~~~~~~~~~~~~

The second argument of an endpoint function is a ``response`` object
that represents HTTPS response sent back to the caller. The object
includes methods that you can call to configure the response.

.. note:: Difference in Response Converting from Webhooks to Endpoints

   If you're :ref:`converting your webhooks to endpoints <convert-webhooks-to-endpoints>`, 
   there can be slight differences in behavior for how your Realm function
   handles the the HTTP response. For more information, refer to the documentation on 
   :ref:`differences between webhooks and their converted endpoints 
   <differences-webhooks-converted-endpoints>`.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Method
     - Description

   * - | ``setStatusCode(code)``
       | - ``code: number``
     - Set the HTTP response `status code
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Status>`_.

       .. example::

          .. code-block:: javascript

             response.setStatusCode(201);

   * - | ``setBody(body)``
       | - ``body: string | BSON.Binary``
     - Set the HTTP response `body
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#Body_2>`_.

       If ``body`` is a string, it will be encoded to ``BSON.Binary``
       before being returned.

       .. example::

          .. code-block:: javascript

             response.setBody(
               "{'message': 'Hello, World!'}"
             );

   * - | ``setHeader(name, value)``
       | - ``name: string``
       | - ``value: string``
     - Set the HTTP response `header
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers>`_
       specified by ``name`` to the value passed in the ``value``
       argument. This overrides any other values that may have already
       been assigned to that  header.

       .. example::

          .. code-block:: javascript

             response.setHeader(
               "Content-Type",
               "application/json"
             );

   * - | ``addHeader(name, value)``
       | - ``name: string``
       | - ``value: string``
     - Set the HTTP response `header
       <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers>`_
       specified by ``name`` to the value passed in the ``value``
       argument. Unlike ``setHeader``, this does not override other
       values that have already been assigned to the header.

       .. example::

          .. code-block:: javascript

             response.addHeader(
               "Cache-Control",
               "max-age=600"
             );

             response.addHeader(
               "Cache-Control",
               "min-fresh=60"
             )

.. _endpoint-authentication:

Authentication
--------------

Endpoint requests can run as either an unauthenticated system user or an
application user. Most endpoints use either system authentication or
appplication authentication.

.. tip::
   
   New endpoints that you create in the UI use System authentication by default.

System Authentication
~~~~~~~~~~~~~~~~~~~~~

If the endpoint function is configured to run as the system user,
incoming requests do not need to include any user credentials or tokens.
The endpoint will not enforce any :ref:`rules` or validate your
:ref:`schemas`.

Application Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~

If the endpoint function is configured to use application
authentication, incoming requests must include one or more headers that
contain valid user credentials. Users can authenticate with any of the
following configured authentication providers:

- :ref:`Email/Password <email-password-authentication>`

  .. code-block:: shell
     :emphasize-lines: 2-3
  
     curl -X GET \
        -H 'email: <Email Address>' \
        -H 'password: <Password>' \
        -H 'Content-Type: application/json' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/test

- :ref:`API Key <api-key-authentication>`

  .. code-block:: shell
     :emphasize-lines: 2
  
     curl -X GET \
        -H 'api-key: <API Key>' \
        -H 'Content-Type: application/json' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/test

- :ref:`Custom JWT <custom-jwt-authentication>`

  .. code-block:: shell
     :emphasize-lines: 2
  
     curl -X GET \
        -H 'jwtTokenString: <Custom JSON Web Token>' \
        -H 'Content-Type: application/json' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/test

.. _endpoint-authorization:

Authorization
-------------

You can configure authorization for each endpoint to determine whether
or not an authenticated request is allowed to execute.

HTTP endpoints always enforce :ref:`rules` in the context of the
authenticated user that called the endpoint. In addition, you can
specify a request validation scheme that requires incoming requests to
incorporate a secret value.

You can specify up to one of the following schemes:

- :ref:`Secret Query Parameter <endpoint-secret-query-parameter>`

- :ref:`Payload Signature Verification <endpoint-payload-signature-verification>`

.. note::

   For maximum security, programmatically generate the secret value
   using a secure package such as the `Python secrets module
   <https://docs.python.org/3/library/secrets.html>`__. Make sure that
   you do not publish the secret or include it in your version control
   system.

.. _endpoint-secret-query-parameter:

Secret Query Parameter
~~~~~~~~~~~~~~~~~~~~~~

The secret query parameter request validation option requires that
incoming requests include the secret value as a `query parameter
<https://en.wikipedia.org/wiki/Query_string>`_ appended to the end of
the URL.

Every request must include the secret value as the ``secret`` query parameter:

.. code-block:: none

   <endpoint URL>?secret=12345

.. example::
   
   The following ``curl`` request uses secret query parameter validation
   with the secret value ``12345``:

   .. code-block:: shell

      curl -X POST \
           -H "Content-Type: application/json" \
           -d '{ "message": "HELLO" }' \
           https://data.mongodb-api.com/app/myapp-abcde/endpoint/testSecretQueryParam?secret=12345

.. _endpoint-payload-signature-verification:

Payload Signature Verification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Payload signature verification requires that incoming requests include
an HTTP header where the value is a hexadecimal-encoded :abbr:`HMAC
(Hash-based Message Authentication Code)` SHA-256 hash generated from
the request body and the secret value.
   
You could use the following function to generate the payload signature:

.. code-block:: javascript

   // Generate an HMAC request signature
   exports = function signEndpointRequest(
     secret, // the secret validation string e.g. 12345
     body, // the endpoint request body e.g. { "message": "MESSAGE" }
   ) {
     return utils.crypto.hmac(EJSON.stringify(body), secret, "sha256", "hex");
   }

Every request must include a payload signature in the
``Endpoint-Signature`` header:

.. code-block:: none

   Endpoint-Signature::sha256=<hex encoded hash>

.. example::
   
   The following ``curl`` request demonstrates payload signature verification
   with the secret value ``12345``:

   .. code-block:: shell
      
      curl -X POST \
        -H "Content-Type: application/json" \
        -H "Endpoint-Signature::sha256=828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862" \
        -d '{"message":"MESSAGE"}' \
        https://data.mongodb-api.com/app/myapp-abcde/endpoint/testPayloadSignatureVerification
