.. _mongodb-document-schemas:
.. _mongodb-schemas:
.. _realm-schemas:

================
Document Schemas
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

A **document schema** is a JSON object that allows you
to define the shape and content of documents and embedded documents in a
collection. You can use a schema to require a specific set of fields,
configure the content of a field, or to validate changes to a document
based on its beginning and ending states.

Document schemas follow the same JSON schema specification as
:manual:`document validation </core/document-validation>` in
the MongoDB server. In addition to standard JSON schema,
document schemas can represent any of the :manual:`BSON types
</reference/operator/query/type/#document-type-available-types>`
supported by the ``$type`` operator. This page describes
schemas for the following common types:

- :ref:`Object <schema-type-object>`
- :ref:`Array <schema-type-array>`
- :ref:`String <schema-type-string>`
- :ref:`Number <schema-type-number>`
- :ref:`Boolean <schema-type-boolean>`
- :ref:`UUID <schema-type-uuid>`
- :ref:`ObjectId <schema-type-objectid>`
- :ref:`Mixed <schema-type-mixed>`
- :ref:`Set <schema-type-set>`
- :ref:`Dictionary <schema-type-dictionary>`

.. note::

   You can automatically create GraphQL types or a {+backend-schema+} for
   collections that have a defined document schema using the MongoDB
   {+ui+}. See the :doc:`GraphQL </graphql>` page or the :doc:`{+backend-schema+}
   </sync/configure-your-data-model>` page to learn how.

Schema Enforcement Process
~~~~~~~~~~~~~~~~~~~~~~~~~~

{+backend+} evaluates the result of all document writes (inserts and updates)
and compares them against the schema before committing the writes to
your cluster. If the result of a write operation does not match the
schema, {+backend+} will roll back the write operation and return an error to
the user.

.. example::

   A collection has the following document schema:

   .. code-block:: json

      {
        "properties": {
          "_id": { "bsonType": "objectId" },
          "name": { "bsonType": "string" }
        }
      }

   A user with permission to read and write all fields wants to update
   the ``name`` field of a particular document. They issue the following
   query:

   .. code-block:: javascript
      :copyable: False

      collection.updateOne(
        { "_id": BSON.ObjectId("5ae782e48f25b9dc5c51c4d0") },
        { "$set": { "name": 42 } }
      )

   The query attempts to set the value of ``name`` to the number ``42``,
   but the schema requires the value to be a ``string``. {+backend+} will
   reject this write operation even though the user had permission to
   update the document because the write result does not conform to the
   schema.

.. _document-schema-config:

Document Schema Configuration
-----------------------------

Documents in MongoDB are objects stored in a format called BSON,
a binary-encoded superset of JSON that supports additional data types.
The root of every document schema in {+service-short+} is a :ref:`BSON Object schema
<schema-type-object>` that applies to each document in a collection.

.. code-block:: json
   
   {
     "bsonType": "object",
     "title": "<Type Name>",
     "required": ["<Required Field Name>", ...],
     "properties": {
       "<Field Name>": <Schema Document>
     }
   }

.. note:: Embedded Documents in Realm Database
   
   Any ``object`` schemas embedded in the document schema's ``properties`` map
   to :term:`embedded objects <embedded object>` in Realm Database.
