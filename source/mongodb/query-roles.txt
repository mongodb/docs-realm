.. _mongodb-permissions:
.. _data-access-permissions:
.. _mongodb-roles:

===========
Query Roles
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

A MongoDB service **role** is a group of document-level and field-level
CRUD permissions that {+backend+} evaluates and enforces for each document
that matches an incoming request.

Roles define what the user who issued a query is allowed to do with a
particular document, including which fields they can read and write to
and whether or not they can insert or delete entire documents. Every
role is associated with a specific collection in a
:term:`linked cluster`, and any collection can include multiple roles.

Role Evaluation Process
~~~~~~~~~~~~~~~~~~~~~~~

When {+backend+} receives a query request, it determines which documents
in the collection the query applies to and evaluates a separate role for
each document. To assign a role to a document, {+backend+} steps through
each role definition in order and evaluates the :guilabel:`Apply When`
:doc:`JSON expression </services/json-expressions>` that you defined for
the role. If a role's :guilabel:`Apply When` expression evaluates to
``true``, {+backend+} assigns the role to the current document and moves
on to the next document. If the expression evaluates to ``false``, {+backend+}
evaluates the next role definition. If no roles apply to a document,
{+backend+} withholds the entire document and prevents any modifications.

.. _query-role-config:

Query Role Configuration
------------------------

.. include:: /mongodb/tables/query-role-configuration.rst

Role Templates
--------------

This section demonstrates patterns for common use cases that
you might encounter when you define roles for your collection.

.. contents:: Templates
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Apply When Expressions
~~~~~~~~~~~~~~~~~~~~~~

{+backend+} determines if a role applies to a given document by evaluating
the :guilabel:`Apply When` :doc:`expression
</services/json-expressions>` that you define for each role.

This section contains :guilabel:`Apply When` templates for common
scenarios. To apply an expression to a role, find the scenario that most
closely matches your use case and then copy and paste the provided
template into the :guilabel:`Apply When` field of the role. You may need
to modify placeholder values (denoted by ``<angle brackets>``) in the
template to match your collection.

.. note::

   You can use the :guilabel:`Apply When` expressions on this page for
   :doc:`external services </services>` as well as in MongoDB roles.

The User Is the Document Owner
++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user's unique ``id``
value matches the value of the specified field.

.. code-block:: javascript

   {
     "<Owner ID Field>": "%%user.id"
   }

An Array Field Contains the User's ID
+++++++++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user's unique ``id``
value matches one or more values in the specified array field.

.. code-block:: javascript

   {
     "<Array Field>": "%%user.id"
   }

The User Has An Email Address
+++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user has any email
address listed in their internal :doc:`user object </authentication>`.

.. code-block:: javascript

   {
     "%%user.data.email": { "%exists": true }
   }

The User Has A Specific Email Address
+++++++++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user's email address
matches the specified email address.

.. code-block:: javascript

   {
     "%%user.data.email": "<Email Address>"
   }

A Field Contains the User's Email Address
+++++++++++++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user's email address
matches the value the specified field.

.. code-block:: javascript

   {
     "%%root.email": "%%user.data.email"
   }

An Array Field Contains the User's Email Address
++++++++++++++++++++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the active user's email address
matches one or more string values in the specified array field.

.. code-block:: javascript

   {
     "<Array Field>": "%%user.data.email"
   }

A Field Satisfies a Complex Condition
+++++++++++++++++++++++++++++++++++++

This expression evaluates to ``true`` if the :doc:`Function
</functions>` ``isAuthorizedUser`` returns ``true`` when passed the
active user's id value.

.. note::

   You can call any {+service+} Function from a JSON expression using the
   :json-operator:`%function` operator.

.. code-block:: javascript

   {
     "%%true": {
       "%function": {
         "name": "isAuthorizedUser",
         "arguments": ["%%user.id"]
       }
     }
   }

CRUD Permissions
~~~~~~~~~~~~~~~~

{+service+} uses a role's permissions configuration to determine if the
active user can insert or delete a document as well as which fields in
the document they can read and write.

This section contains templates that define **role permissions** for
common scenarios. To apply a set of permissions to a role, find the
scenario that most closely matches your use case. Update the role's
permissions table to match the provided screenshot or copy and paste the
provided template into the collection's :doc:`advanced mode
</mongodb/configure-advanced-rules>` configuration. Make sure that you modify
any placeholder values (denoted by ``<angle brackets>``) in the template
to match your needs.

The Role Can Read All Fields but Cannot Write
+++++++++++++++++++++++++++++++++++++++++++++

To allow a role to read any field, set the document-level ``read`` field
to ``true``.

.. list-table::

   * - .. figure:: /images/role-template-read-all-data.png
          :alt: A role with permission to read all document fields
          :width: 350px

     - .. code-block:: json
          :emphasize-lines: 6

          {
            "name": "<Role Name>",
            "apply_when": <JSON Expression>,
            "insert": <boolean>,
            "delete": <boolean>,
            "read": true,
          }

The Role Can Read & Write All Fields
++++++++++++++++++++++++++++++++++++

To allow a role to read or write any field, set the document-level
``write`` field to ``true``. Document-level writes require read
permission, so the role will be able to read all fields.

.. list-table::

   * - .. figure:: /images/role-template-read-write-all-data.png
          :alt: A role with permission to read and write all document fields
          :width: 350px

     - .. code-block:: json
          :emphasize-lines: 6

          {
            "name": "<Role Name>",
            "apply_when": <JSON Expression>,
            "insert": <boolean>,
            "delete": <boolean>,
            "write": true,
          }

The Role Can Read All Fields & Write to Specific Fields
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

To allow a role to read all fields, set the document-level ``read``
field to ``true``. To specify a field that the role can write to, set
the ``write`` field to ``true`` in the field's configuration document,
which is embedded in the ``fields`` document.

.. list-table::

   * - .. figure:: /images/role-template-write-specific-fields.png
          :alt: A role with permission to write to specific fields
          :width: 350px

     - .. code-block:: json
          :emphasize-lines: 6, 8

          {
            "name": "<Role Name>",
            "apply_when": <JSON Expression>,
            "insert": <boolean>,
            "delete": <boolean>,
            "read": true,
            "fields": {
              "<Field Name>": { "write": true },
              ...
            }
          }

The Role Can Read & Write All Fields but Cannot Insert New Documents
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

To allow a role to read or write any field, set the document-level
``write`` field to ``true``. Document-level writes require read
permission, so the role will be able to read all fields.

To prevent the role from inserting new documents, set the document-level
``insert`` field to ``false``.

.. list-table::

   * - .. figure:: /images/role-template-no-insert.png
          :alt: A role that lacks permission to insert new documents
          :width: 350px
       
       .. figure:: /images/role-template-read-write-all-data.png
          :alt: A role with permission to read and write all document fields
          :width: 350px

     - .. code-block:: json
          :emphasize-lines: 4, 6

          {
            "name": "<Role Name>",
            "apply_when": <JSON Expression>,
            "insert": false,
            "delete": <boolean>,
            "write": true,
          }

The Role Cannot Write to Specific Fields
++++++++++++++++++++++++++++++++++++++++

To allow a role to write to any field except for those you specify, set
the corresponding field-level ``write`` fields to ``false`` in the
``fields`` document and set the ``additional_fields.write`` field to
``true``.

.. list-table::

   * - .. figure:: /images/role-template-cannot-write-some-fields.png
          :alt: A role with permission to write to some but not all fields
          :width: 350px

     - .. code-block:: json

          {
            "name": "<Role Name>",
            "apply_when": <JSON Expression>,
            "insert": <boolean>,
            "delete": <boolean>,
            "read": true,
            "fields": {
              "<Field Name>": {
                "read": true,
                "write": false
              },
              ...
            },
            "additional_fields": { "write": true }
          }

Advanced Role Patterns
----------------------

The use cases described in this section require you to use advanced
functionality that is not supported by the default collection rules
editor in the {+ui+}. To use this template, :doc:`convert to advanced
mode </mongodb/configure-advanced-rules>` or import a collection rule
configuration with :doc:`{+cli+} </deploy/realm-cli-reference>`.

.. _role-template-insert-only:

Insert-Only Roles
~~~~~~~~~~~~~~~~~

To allow a role to insert new documents but otherwise prevent them from
reading or modifying any data, set ``insert`` to ``true`` and set the
value of document-level ``write`` to a :doc:`JSON expression
</services/json-expressions>` that evaluates to ``true`` only if the
document didn't exist prior to the operation.

.. code-block:: json
   :emphasize-lines: 5, 6-8

   {
     "name": "insertOnly",
     "apply_when": <JSON Expression>,
     "delete": false,
     "insert": true,
     "write": {
       "%%prevRoot": { "%exists": false }
     },
     "additional_fields": {}
   }

.. note::
   
   You must specify a JSON expression for ``write`` to prevent users
   from reading data. To insert a document a role must also have write
   permission for all fields in the document; however, setting ``write``
   directly to ``true`` would also give the role read permission. The
   JSON expression ensures that the role only has read permission for
   the initial document insert.

.. _role-template-embedded-documents:

Field-level Permissions for Embedded Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To allow a role to read or write some but not all fields of an embedded
document, add embedded documents that match the path of the embedded
field to the ``fields`` document.

.. code-block:: json
   :emphasize-lines: 7-14

   {
     "name": "canReadEmbeddedField",
     "apply_when": {},
     "delete": true,
     "insert": true,
     "fields": {
       "someEmbeddedDocument": {
         "fields": {
           "someEmbeddedField": {
             "read": true,
             "write": true
           }
         }
       }
     },
     "additional_fields": {}
   }

.. note::
   
   {+service+} applies any ``read`` and ``write`` permissions defined for a
   given field to all embedded fields that the field contains regardless
   of any permissions defined for those fields.
