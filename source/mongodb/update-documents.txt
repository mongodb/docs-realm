================
Update Documents
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The code snippets on this page demonstrate how to update documents that
are stored in a MongoDB collection. Update operations use query filters
to specify which documents to update and :manual:`update operators
</reference/operator/update>` to describe the changes to apply to
matching documents.

This page also covers several different update operators that you can
use to :ref:`update fields <mongodb-update-operators-fields>` or
:ref:`update array values <mongodb-update-operators-arrays>`.

.. include:: /includes/data-lake-no-writes-note.rst

.. include:: /mongodb/crud-snippets/data-model.rst

.. include:: /mongodb/crud-snippets/setup.rst

Methods
-------

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using the
:method:`collection.updateOne()` action.

The following :ref:`function <functions>` snippet updates the ``name``
of a single document in the ``items`` collection from ``legos`` to
``blocks`` and adds a ``price`` of ``20.99``:

.. include:: /mongodb/crud-snippets/updateOneSetField/functions.rst

Update One or More Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using the
:method:`collection.updateMany()` action.

The following :ref:`function <functions>` snippet updates all documents
in the ``items`` collection by multiplying their ``quantity`` values by
``10``:

.. include:: /mongodb/crud-snippets/updateMany/functions.rst

Options
-------

Upsert Documents
~~~~~~~~~~~~~~~~

If an update operation does not match any document in the collection,
you can automatically insert a single new document into the collection
that matches the update query by setting the ``upsert`` option to
``true``.

The following :ref:`function <functions>` snippet updates a document in
the ``items`` collection that has a ``name`` of ``board game`` by
incrementing its ``quantity`` by ``5``. The ``upsert`` option is
enabled, so if no document has a ``name`` value of ``"board game"`` then
MongoDB inserts a new document with the ``name`` field set to ``"board
game"`` and the ``quantity`` value set to ``5``:

.. include:: /mongodb/crud-snippets/updateOneUpsert/functions.rst

.. _mongodb-update-operators-fields:

Field Update Operators
----------------------

Set the Value of a Field
~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$set </reference/operator/update/set/>`
operator to set the value of a single field without affecting other
fields in a document.

.. code-block:: javascript

   { "$set": { "<Field Name>": <Value>, ... } }

Rename a Field
~~~~~~~~~~~~~~

You can use the :manual:`$rename </reference/operator/update/rename/>`
operator to change the name of a single field in a document.

.. code-block:: javascript

   { "$rename": { "<Current Field Name>": <New Field Name>, ... } }

Increment a Value
~~~~~~~~~~~~~~~~~

You can use the :manual:`$inc </reference/operator/update/inc/>`
operator to add a specified number to the current value of a field. The
number can be positive or negative.

.. code-block:: javascript

   { "$inc": { "<Field Name>": <Increment Number>, ... } }

Multiply a Value
~~~~~~~~~~~~~~~~

You can use the :manual:`$mul </reference/operator/update/mul/>`
operator to multiply a specified number with the current value of a
field. The number can be positive or negative.

.. code-block:: javascript

   { "$mul": { "<Field Name>": <Multiple Number>, ... } }

.. _mongodb-update-operators-arrays:

Array Update Operators
----------------------

Push an Element Into an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$push </reference/operator/update/push>`
operator to add a value to the end of an array field.

.. code-block:: javascript

   { "$push": { "<Array Field Name>": <New Array Element>, ... } }

Pop the Last Element out of an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$pop </reference/operator/update/pop>` operator
to remove either the first or last element of an array field. Specify
``-1`` to remove the first element and ``1`` to remove the last element.

.. code-block:: javascript

   { "$pop": { "<Array Field Name>": <-1 | 1>, ... } }

Add a Unique Element to an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$addToSet
</reference/operator/update/addToSet>` operator to add a value to an
array field if that value is not already included in the array. If the
value is already present, ``$addToSet`` does nothing.

.. code-block:: javascript

   { "$addToSet": { "<Array Field Name>": <Potentially Unique Value>, ... } }

Remove Elements from an Array
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the :manual:`$pull </reference/operator/update/pull>`
operator to remove all instances of any values that match a specified
condition from an array field.

.. code-block:: javascript

   { "$pull": { "<Array Field Name>": <Value | Expression>, ... } }
