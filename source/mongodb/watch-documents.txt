==========================
Watch for Document Changes
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} allows you to watch a collection and receive client-side
:ref:`database events <database-events>` whenever documents in the
collection are inserted or modified. This enables you to develop real-time
and collaborative applications without the overhead and complexity of
alternatives such as long polling.

{+service-short+} uses MongoDB :ref:`change streams <changeStreams>` on watched
collections to listen for changes and broadcast them to any client
applications that are watching documents in the collection at the time
of the event. {+service-short+} supports watching any change on a collection
and watching changes that match a certain filter.

.. admonition:: Change Stream Limitations
   :class: important

   {+service-short+} opens a single MongoDB :ref:`change stream <changeStreams>`
   for each watched collection and limits the total number of open
   change streams on each linked cluster across all {+app+}s based on
   the cluster's size. See :ref:`change stream limitations
   <mongodb-service-limitations-change-streams>` for more information.

.. _watch-snippets-setup:

Setup
~~~~~

.. tabs-realm-sdks::

   tabs:
     - id: javascript
       content: |
         To use the following code snippets in a JavaScript project, you must
         first do the following:

         .. include:: /includes/steps/crud-snippets-js.rst

     - id: ios
       content: |
         To use the following code snippets in an iOS project, you must
         first do the following:

         .. include:: /includes/steps/crud-snippets-ios.rst

     - id: android
       content: |
         To use the following code snippets in an Android project, you must
         first do the following:

         .. include:: /includes/steps/crud-snippets-android.rst


Watch Snippets
--------------

.. _watch-collection:

Watch a Collection
~~~~~~~~~~~~~~~~~~

.. tabs-realm-sdks::

   tabs:
     - id: javascript
       content: |
         You can open a stream of changes made to a collection by calling
         :js-sdk:`collection.watch() <interfaces/remotemongocollection.html#watch-documents>`
         with no argument. Whenever the watched collection changes, the stream's
         event handler fires with a :js-sdk:`ChangeEvent <interfaces/changeevent.html>`
         object as its only argument.

         .. code-block:: javascript

            async function watcher() {
               // Create a change stream that watches the collection
               const stream = await myCollection.watch();
               // Set up a change event handler function for the stream
               stream.onNext((event) => {
                 // Handle the change events for all specified documents here
                 console.log(event.fullDocument);
               });
            }

     - id: ios
       content: |
         You can open a stream of changes made to a collection by calling
         :ios-sdk:`RemoteMongoCollection.watch(delegate:) <Classes/RemoteMongoCollection.html#/s:26StitchRemoteMongoDBService0bC10CollectionC5watch8delegateAA19ChangeStreamSessionCyxGqd___tK9DocumentTQyd__RszAA0hI8DelegateRd__lF>`.
         Whenever the watched collection changes, the passed
         :ios-sdk:`ChangeStreamDelegate <Protocols/ChangeStreamDelegate.html>`
         will receive the associated ChangeEvent.

         .. code-block:: swift

            class MyCustomDelegate<T>: ChangeStreamDelegate
              where T: Encodable, T: Decodable
            {
                typealias DocumentT = T

                func didReceive(event: ChangeEvent<T>) {
                    // react to events
                }
                // ...other method implementations
            }

            class Watcher {
               var changeStreamSession: ChangeStreamSession<Document>?

               func watch(collection: RemoteMongoCollection<Document>) throws {
                  // Watch the collection for any changes. As long as the changeStreamSession
                  // is alive, it will continue to send events to the delegate.
                  changeStreamSession = try collection.watch(delegate: MyCustomDelegate<Document>.init())
               }
            }

     - id: android
       content: |
         You can open a stream of changes made to a collection by calling
         :android-sdk:`RemoteMongoCollection.watch() <com/mongodb/stitch/android/services/mongodb/remote/RemoteMongoCollection.html#watch()>`.
         Whenever the watched collection changes, the
         :android-sdk:`AsyncChangeStream <com/mongodb/stitch/android/services/mongodb/remote/AsyncChangeStream.html>`
         will emit an event.

         .. code-block:: java

            itemsCollection.watch()
                    .addOnCompleteListener(task -> {
                        AsyncChangeStream<Document, ChangeEvent<Document>> changeStream = task.getResult();
                        changeStream.addChangeEventListener((BsonValue documentId, ChangeEvent<Document> event) -> {
                            // handle change event
                        });
                    });


.. _watch-collection-filtered:

Watch a Collection with a Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-sdks::

   tabs:
     - id: javascript
       content: |
         You can open a stream of changes that match a filter by calling
         :js-sdk:`collection.watch(delegate:) <interfaces/remotemongocollection.html#watch-documents>`
         with a :manual:`$match expression </reference/operator/aggregation/match/>`
         as the argument. Whenever the watched collection changes and the
         :js-sdk:`ChangeEvent <interfaces/changeevent.html>` matches the provided
         $match expression, the stream's event handler fires with the ChangeEvent
         object as its only argument.

         The $match expression is similar to the $match expression passed when configuring
         a :doc:`database trigger </triggers/database-triggers/>`.

         .. code-block:: javascript

            async function watcher() {
               // Create a change stream that watches the collection
               // for when any document's 'status' field is changed
               // to the string 'blocked'.
               const stream = await myCollection.watch({
                  "updateDescription.updatedFields": {
                     "status": "blocked",
                  }
               });
               // Set up a change event handler function for the stream
               stream.onNext((event) => {
                 // Handle the change events for all specified documents here
                 console.log(event.fullDocument);
               });

               // Insert a document with status set to 'blocked'
               // to trigger the stream onNext handler
               await myCollection.insertOne({
                  "name": "test",
                  "status": "blocked",
               });
            }

     - id: ios
       content: |
         You can open a stream of changes that match a filter by calling
         :ios-sdk:`RemoteMongoCollection.watch(matchFilter:delegate:) <Classes/RemoteMongoCollection.html#/s:26StitchRemoteMongoDBService0bC10CollectionC5watch11matchFilter8delegateAA19ChangeStreamSessionCyxG0C5Swift8DocumentV_qd__tK0N1TQyd__RszAA0jK8DelegateRd__lF>`
         with a :manual:`$match expression </reference/operator/aggregation/match/>`
         as the ``matchFilter`` argument. Whenever the watched collection changes
         and the change event matches the provided $match expression, the passed
         :ios-sdk:`ChangeStreamDelegate <Protocols/ChangeStreamDelegate.html>`
         will receive the ChangeEvent.

         The $match expression is similar to the $match expression passed when configuring
         a :doc:`database trigger </triggers/database-triggers/>`.

         .. code-block:: swift

            class MyCustomDelegate<T>: ChangeStreamDelegate
              where T: Encodable, T: Decodable
            {
               typealias DocumentT = T

               func didReceive(event: ChangeEvent<T>) {
                  // react to events
               }
               // ...other method implementations
            }

            class Watcher {
               var changeStreamSession: ChangeStreamSession<Document>?

               func watchWithFilter(collection: RemoteMongoCollection<Document>) throws {
                  // Watch the collection for any changes that match the given filter.
                  // As long as the changeStreamSession is alive, it will continue
                  // to send events to the delegate.
                  changeStreamSession = try collection.watch(
                      matchFilter: ["fullDocument.checked": true] as Document,
                      delegate: MyCustomDelegate<Document>.init()
                  )
               }
            }

     - id: android
       content: |
         You can open a stream of changes that match a filter by calling
         :android-sdk:`RemoteMongoCollection.watchWithFilter() <com/mongodb/stitch/android/services/mongodb/remote/RemoteMongoCollection.html#watchWithFilter(org.bson.BsonDocument)>`
         with a :manual:`$match expression </reference/operator/aggregation/match/>`
         as the ``matchFilter`` argument. Whenever the watched collection changes
         and the change event matches the provided $match expression, the
         :android-sdk:`AsyncChangeStream <com/mongodb/stitch/android/services/mongodb/remote/AsyncChangeStream.html>`
         will emit an event.

         The $match expression is similar to the $match expression passed when configuring
         a :doc:`database trigger </triggers/database-triggers/>`.

         .. code-block:: java

            // Watch for events that match the given certain filter
            itemsCollection.watchWithFilter(new BsonDocument("fullDocument.checked", new BsonBoolean(true)))
                    .addOnCompleteListener(task -> {
                        AsyncChangeStream<Document, ChangeEvent<Document>> changeStream = task.getResult();
                        changeStream.addChangeEventListener((BsonValue documentId, ChangeEvent<Document> event) -> {
                            // handle change event
                        });
                    });
