.. _mongodb-service-collection-find-one-and-replace:

==============================
collection.findOneAndReplace()
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. method:: collection.findOneAndReplace()

Overwrite a single document in a collection or :manual:`view
</core/views>` based on a query filter and return the document in either
its pre-replacement or post-replacement form. Unlike
:method:`collection.updateOne()`, this action allows you to atomically
find, replace, and return a document with the same command. This avoids
the risk of other update operations changing the document between
separate :doc:`find </mongodb/actions/collection.find>` and :doc:`update
</mongodb/actions/collection.updateOne>` operations.

Usage
-----

Example
~~~~~~~

To call the ``collection.findOneAndUpdate()`` action from a
:doc:`Function </functions>`, get a collection handle with
:method:`database.collection()` then call the handle's
``findOneAndUpdate()`` method.

.. include:: /mongodb/crud-snippets/findOneAndReplace/functions.rst

Parameters
~~~~~~~~~~

The ``collection.findOneAndReplace()`` action has the following
form:

.. code-block:: javascript

   findOneAndReplace(query, replacement, options)

.. include:: /includes/extracts/mongodb-action-params-findOneAndReplace.rst

Return Value
~~~~~~~~~~~~

You can specify whether to return the pre-replacement or
post-replacement version of the document by setting the value of
``options.returnNewDocument``. By default, ``returnNewDocument`` is
``false``, which indicates that the promise should resolve to the
*pre-update* version of the document.

The ``collection.findOneAndReplace()`` action returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to a
single document that the query overwrote. If no documents match the
specified query, the promise resolves to ``null``.

.. code-block:: javascript

   Promise<document|null>
