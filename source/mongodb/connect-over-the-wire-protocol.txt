==============================
Connect Over the Wire Protocol
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} natively implements a :doc:`subset </mongodb/actions/>` of
the MongoDB wire protocol, which allows you to connect to a {+app+}
through one of its :doc:`linked MongoDB clusters
</mongodb/link-a-data-source>` using standard MongoDB drivers and tools.
Clients use a specialized :ref:`{+service+} connection string
<connection-strings>` to connect and send requests. {+service+} supports
most client features over the wire protocol, including :ref:`role-based
data access rules <mongodb-rules>`, :doc:`functions </functions>`, and
:ref:`service actions <service-actions>`.

Prerequisites
~~~~~~~~~~~~~

You must :doc:`enable wire protocol connections
</mongodb/enable-wire-protocol-connections>` for one or more linked
clusters in your application before you can connect over the wire
protocol.

.. include:: /includes/data-lake-wire-protocol-note.rst

Compatible Clients
~~~~~~~~~~~~~~~~~~

You can use the following tools and drivers to communicate with {+backend+}
using a connection string:

- Version 4.0+ of the :manual:`mongo shell </mongo>`.

- Any MongoDB driver that supports the ``appName`` connection string
  parameter. All official MongoDB drivers support this parameter in
  their current releases.

.. note::

   Connections to {+backend+} over the wire protocol have access to the full
   functionality of the :doc:`MongoDB Service </mongodb>`. However,
   {+service+} does not support all operations and features available in
   standard tools and clients. For details, see :doc:`MongoDB Service
   Limitations </mongodb/service-limitations>`.

Usage
-----

.. _wire-protocol-usage-connect-to-realm:

Connect to Realm with a Connection String
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To connect to {+backend+} over the wire protocol, pass a
:wikipedia:`URL-encoded <Percent-encoding>` :ref:`{+service+} connection
string <connection-strings>` when you create a client, just as you would
with a regular :manual:`connection string
</reference/connection-string>`.

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: shell

            $ mongo "mongodb://<user>:<password>@realm.mongodb.com:27020/?authMechanism=PLAIN&authSource=%24external&ssl=true&appName=realm-application-abcde:mongodb-atlas:local-userpass"

     - id: python
       content: |
         .. code-block:: python

            client = pymongo.MongoClient("mongodb://<user>:<password>@realm.mongodb.com:27020/?authMechanism=PLAIN&authSource=%24external&ssl=true&appName=realm-application-abcde:mongodb-atlas:local-userpass")

     - id: cpp
       content: |
         .. code-block:: cpp

            mongocxx::instance instance{};
            mongocxx::uri uri("mongodb://<user>:<password>@realm.mongodb.com:27020/?authMechanism=PLAIN&authSource=%24external&ssl=true&appName=realm-application-abcde:mongodb-atlas:local-userpass");
            mongocxx::client client(uri);

.. _wire-protocol-usage-crud-operations:

Perform CRUD Operations
~~~~~~~~~~~~~~~~~~~~~~~

While connected to {+backend+} over the wire protocol you can use
standard MongoDB CRUD operations. {+service+} applies :ref:`role-based data
access rules <mongodb-rules>` to all queries in the context of the
authenticated user specified in the connection string :ref:`credentials
<wire-protocol-credentials>`.

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: javascript

            > use HR
            > db.employees.findOne();
            {
              "_id": ObjectId("5ae782e48f25b9dc5c51c4a5"),
              "employeeId": 854271626,
              "name": {
                "first": "Lucas",
                "last": "Lewis"
              },
              "role": "PM",
              "salary": 200000,
              "email": "Lucas.Lewis.0271@company.com",
              "password": "<password>",
              "manager": {
                "id": 328892725,
                "email": "Daniel.Wilson.0474@company.com",
                "name": {
                  "first": "Daniel",
                  "last": "Wilson"
                }
              }
            }


     - id: python
       content: |
         .. code-block:: python

            >>> db = client["HR"]
            >>> employee = db["employees"].find_one();
            >>> pprint(employee)
            {'_id': ObjectId('5ae782e48f25b9dc5c51c4a5'),
             'email': 'Lucas.Lewis.0271@company.com',
             'employeeId': 854271626.0,
             'manager': {'email': 'Daniel.Wilson.0474@company.com',
                         'id': 328892725.0,
                         'name': {'first': 'Daniel', 'last': 'Wilson'}},
             'name': {'first': 'Lucas', 'last': 'Lewis'},
             'password': '<password>',
             'role': 'PM',
             'salary': 200000}


     - id: cpp
       content: |
         .. code-block:: cpp

            mongocxx::database db = client["HR"];
            mongocxx::collection employees = db["employees"];
            bsoncxx::stdx::optional<bsoncxx::document::value> result =
                collection.find_one({});
            if(result) {
                std::cout << bsoncxx::to_json(result) << "\n";
            }

.. _wire-protocol-usage-call-function:

Call a Function
~~~~~~~~~~~~~~~

You can call functions using the ``callFunction`` database command.

.. list-table::
   :header-rows: 1
   :widths: 10 15 15

   * - Command
     - Description
     - Prototype

   * - .. dbcommand:: callFunction
     - Calls the specified :doc:`function </functions>` and returns any
       result.
     - .. code-block:: none

          {
            callFunction: <function name>,
            arguments: [<arg1>, <arg2>, ...]
          }

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: shell

            > db.runCommand({
            ...  callFunction: "getEmployeeById",
            ...  arguments: ["5ae782e48f25b9dc5c51c4a5"]
            ...});
            {
              "ok" : 1,
              "response" : {
                "_id": ObjectId("5ae782e48f25b9dc5c51c4a5"),
                "employeeId": 854271626,
                "name": {
                  "first": "Lucas",
                  "last": "Lewis"
                },
                "role": "PM",
                "salary": 200000,
                "email": "Lucas.Lewis.0271@company.com",
                "password": "<password>",
                "manager": {
                  "id": 328892725,
                  "email": "Daniel.Wilson.0474@company.com",
                  "name": {
                    "first": "Daniel",
                    "last": "Wilson"
                  }
                }
              }
            }

     - id: python
       content: |
         .. code-block:: python

            >>> function_result = db.command("callFunction", "getEmployeeById",
            ...     arguments=["5ae782e48f25b9dc5c51c4a5"]
            ...)
            >>> pprint.pprint(function_result)
            {'ok': 1,
             'response': {'_id': ObjectId('5ae782e48f25b9dc5c51c4a5'),
                          'email': 'Lucas.Lewis.0271@company.com',
                          'employeeId': 854271626.0,
                          'manager': {'email': 'Daniel.Wilson.0474@company.com',
                                      'id': 328892725.0,
                                      'name': {'first': 'Daniel', 'last': 'Wilson'}},
                          'name': {'first': 'Lucas', 'last': 'Lewis'},
                          'password': '<password>',
                          'role': 'PM',
                          'salary': 200000}}

     - id: cpp
       content: |
         .. code-block:: cpp

            db.runCommand({
              callFunction: "getEmployeeById",
              arguments: ["5ae782e48f25b9dc5c51c4a5"]
            });

.. _wire-protocol-usage-call-service-function:

Call a Service Function
~~~~~~~~~~~~~~~~~~~~~~~

You can call service actions using the ``callServiceFunction`` database
command.

.. list-table::
   :header-rows: 1
   :widths: 10 15 15

   * - Command
     - Description
     - Prototype

   * - .. dbcommand:: callServiceFunction
     - Calls the specified :ref:`service action <service-actions>` and
       returns any result.
     - .. code-block:: none

          {
            callServiceFunction: <function name>,
            service: <service name>,
            arguments: [<arg1>, <arg2>, ...]
          }

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: javascript

            > db.runCommand({
            ... callServiceFunction: "get",
            ... service: "http",
            ... arguments: [{ url: "https://jsonplaceholder.typicode.com/todos/1" }]
            ... });
            {
            	"ok" : 1,
            	"response" : {
            		"status" : "200 OK",
            		"statusCode" : 200,
            		"contentLength" : NumberLong(-1),
            		"headers" : {
            			"Content-Type" : ["application/json; charset=utf-8"],
            			"Connection" : ["keep-alive"],
            			"Vary" : ["Origin, Accept-Encoding"],
            			"X-Content-Type-Options" : ["nosniff"],
            			"Via" : ["1.1 vegur"],
            			"X-Powered-By" : ["Express"],
            			"Cf-Cache-Status" : ["HIT"],
            			"Expect-Ct" : ["max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],
			            "Set-Cookie" : ["__cfduid=d7f650e765d41beb7598ce2ab62d0c0191536867096; expires=Fri, 13-Sep-19 19:31:36 GMT; path=/; domain=.typicode.com; HttpOnly"],
		            	"Access-Control-Allow-Credentials" : ["true"],
		            	"Cache-Control" : ["public, max-age=14400"],
		            	"Pragma" : ["no-cache"],
		            	"Etag" : ["W/\"53-hfEnumeNh6YirfjyjaujcOPPT+s\""],
		            	"Server" : ["cloudflare"],
		            	"Cf-Ray" : ["459d08f88e1e56db-IAD"],
		            	"Date" : ["Thu, 13 Sep 2018 19:31:36 GMT"],
		            	"Expires" : ["Thu, 13 Sep 2018 23:31:36 GMT"]
		            },
		            "cookies" : {
		            	"__cfduid" : {
		            		"value" : "d7f650e765d41beb7598ce2ab62d0c0191536867096",
		            		"path" : "/",
		            		"domain" : ".typicode.com",
		            		"expires" : "Mon, 01 Jan 0001 00:00:00 GMT",
		            		"maxAge" : 0,
		            		"secure" : false,
		            		"httpOnly" : true
		            	}
		            },
		            "body" : BinData(0,"ewogICJ1c2VySWQiOiAxLAogICJpZCI6IDEsCiAgInRpdGxlIjogImRlbGVjdHVzIGF1dCBhdXRlbSIsCiAgImNvbXBsZXRlZCI6IGZhbHNlCn0=")
            	}
            }

     - id: python
       content: |
         .. code-block:: python

            >>> result = db.command("callServiceFunction", "get",
            ...    service="http",
            ...    arguments=[{"url": "https://jsonplaceholder.typicode.com/todos/1"}]
            ...)
            >>> pprint.pprint(result)
            {'ok': 1,
             'response': {'body': b'{\n  "userId": 1,\n  "id": 1,\n  "title": "delectus aut'
                                  b' autem",\n  "completed": false\n}',
                          'contentLength': -1,
                          'cookies': {'__cfduid': {'domain': '.typicode.com',
                                                   'expires': 'Mon, 01 Jan 0001 00:00:00 '
                                                              'GMT',
                                                   'httpOnly': True,
                                                   'maxAge': 0,
                                                   'path': '/',
                                                   'secure': False,
                                                   'value': 'd4b10004e96ca7fee0be03dceebaf2ab71536866400'}},
                          'headers': {'Access-Control-Allow-Credentials': ['true'],
                                      'Cache-Control': ['public, max-age=14400'],
                                      'Cf-Cache-Status': ['HIT'],
                                      'Cf-Ray': ['459cf7fc7e20c1bd-IAD'],
                                      'Connection': ['keep-alive'],
                                      'Content-Type': ['application/json; charset=utf-8'],
                                      'Date': ['Thu, 13 Sep 2018 19:20:00 GMT'],
                                      'Etag': ['W/"53-hfEnumeNh6YirfjyjaujcOPPT+s"'],
                                      'Expect-Ct': ['max-age=604800, '
                                                    'report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"'],
                          'Expires': ['Thu, 13 Sep 2018 23:20:00 GMT'],
                          'Pragma': ['no-cache'],
                          'Server': ['cloudflare'],
                          'Set-Cookie': ['__cfduid=d4b10004e96ca7fee0be03dceebaf2ab71536866400; '
                                         'expires=Fri, 13-Sep-19 19:20:00 GMT; '
                                         'path=/; domain=.typicode.com; '
                                         'HttpOnly'],
                          'Vary': ['Origin, Accept-Encoding'],
                          'Via': ['1.1 vegur'],
                          'X-Content-Type-Options': ['nosniff'],
                          'X-Powered-By': ['Express']},
              'status': '200 OK',
              'statusCode': 200}}

     - id: cpp
       content: |
         .. code-block:: cpp

            db.runCommand({
              callServiceFunction: "get",
              service: "http",
              arguments: [{ url: "https://jsonplaceholder.typicode.com/todos/1" }]
            });

Get the Logged In User's Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can get the :doc:`user object </authentication>` for the
authenticated user using the ``userProfile`` database
command.

.. list-table::
   :header-rows: 1
   :widths: 10 15 15

   * - Command
     - Description
     - Prototype

   * - .. dbcommand:: userProfile
     - Returns the :doc:`user object </authentication>` for the authenticated
       user.
     - .. code-block:: none

          {
            userProfile: 1
          }

.. tabs-drivers::

   tabs:
     - id: shell
       content: |
         .. code-block:: javascript

            > db.runCommand({ userProfile: 1 });
            {
            	"ok" : 1,
            	"profile" : {
            		"userid" : "5ad7a79e8f25b975898d77b8",
            		"domainid" : ObjectId("5ad7a69746224c054067c8b1"),
            		"identities" : [
            			{

            			}
            		],
            		"data" : "{\"email\":\"joe.mango@company.com\"}",
            		"type" : "normal",
            		"roleassignments" : [ ]
            	}
            }

     - id: python
       content: |
         .. code-block:: python

            >>> result = db.command("userProfile", 1)
            >>> pprint.pprint(result)
            {'ok': 1,
             'profile': {'data': '{"email":"joe.mango@company.com"}',
                         'domainid': ObjectId('5ad7a69746224c054067c8b1'),
                         'identities': [{}],
                         'roleassignments': [],
                         'type': 'normal',
                         'userid': '5ad7a79e8f25b975898d77b8'}}

     - id: cpp
       content: |
         .. code-block:: cpp

            db.runCommand({ userProfile: 1 });
