.. _graphql-execute operations:

===========================
Execute a GraphQL Operation
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can access data that you've :doc:`exposed from a collection
</graphql/expose-data>` through the GraphQL API. Realm enforces
:ref:`collection rules <mongodb-rules>` for all GraphQL operations, so
you need to :doc:`authenticate </graphql/authenticate>`
each request.

Set Up
------

.. tabs::

   .. tab:: Apollo (React)
      :tabid: apollo-react

      You can use Apollo's React hooks to execute GraphQL operations.
      The hooks are available in the :npm:`@apollo/react-hooks
      <packages/@apollo/react-hooks>` package and all require the
      :npm:`graphql-tag <packages/graphql-tag>` package to define
      operations.

      .. important::

         To execute a GraphQL operation with Apollo, you first need to
         :doc:`connect your client application
         </graphql/connect>`.

      To install the required packages, run the following:

      .. code-block:: shell

         npm install graphql-tag @apollo/react-hooks

   .. tab:: graphqurl (CLI)
      :tabid: graphqurl

      You can use the :github:`graphqurl <hasura/graphqurl>` CLI to
      execute GraphQL operations from a command line. You must
      authenticate all requests, so make sure to :doc:`get a valid
      access token </graphql/authenticate>`.

      To install the ``graphqurl`` CLI, run the following:

      .. code-block:: shell

         npm install -g graphqurl

.. _grapqhl-run-a-query:

Run a Query
-----------

.. admonition:: GraphQL Queries
   :class: note
   
   The GraphQL API supports several different types of queries. For
   detailed information on all supported query types, including
   examples, see :ref:`query resolvers <graphql-query-resolvers>`.

.. tabs::

   .. tab:: Apollo (React)
      :tabid: apollo-react

      Define the query with the ``qgl`` tag and then use the
      :apollo-docs:`useQuery() </react/api/react-hooks/#usequery>` hook
      to run the query whenever the component mounts.

      .. code-block:: javascript
         :emphasize-lines: 2-3, 5-13, 17

         import React from "react";
         import { useQuery } from "@apollo/react-hooks";
         import gql from "graphql-tag";

         const allMoviesFrom200Query = gql`
           query AllMoviesFrom2000 {
             movies(query: { year: 2000 }) {
               title
               year
               runtime
             }
           }
         `

         export default function App() {
           // Must be rendered inside of an ApolloProvider
           const { loading, error, data } = useQuery(allMoviesFrom200Query);
           return (
             <div>
               {loading && <div>loading</div>}
               {error && <div>{`encountered an error: ${error}`}</div>}
               {data && <div>{`successfully queried ${data.length} movies from the year 2000.`}</div>}
             </div>
           );
         }

   .. tab:: graphqurl (CLI)
      :tabid: graphqurl

      .. code-block:: shell

         gq https://realm.mongodb.com/api/client/v2.0/app/<Your App ID>/graphql \
             -H 'Authorization: Bearer <Valid Access Token>' \
             -q 'query AllMoviesFrom2000 {  movies(query: { year: 2000 }) { title year runtime }}'

.. _grapqhl-run-a-mutation:

Run a Mutation
--------------

.. admonition:: GraphQL Mutations
   :class: note
   
   The GraphQL API supports several different types of mutations. For
   detailed information on all supported mutation types, including
   examples, see :ref:`mutation resolvers <graphql-mutation-resolvers>`.

.. tabs::

   .. tab:: Apollo (React)
      :tabid: apollo-react

      Define the mutation with the ``qgl`` tag and then use the
      :apollo-docs:`useMutation() </react/api/react-hooks/#usemutation>`
      hook to get a function that executes the mutation.

      .. code-block:: javascript
         :emphasize-lines: 2, 13-23, 17, 28, 29-31

         import React from "react";
         import { useQuery, useMutation } from "@apollo/react-hooks";
         import gql from "graphql-tag";

         const moviesQuery = gql`
           query AllMovies {
             movies {
               title
               year
             }
           }
         `
         const updateMovieTitleMutation = gql`
           mutation UpdateMovieTitle($oldTitle: String!, $newTitle: String!) {
             updateOneMovie(
               query: { title: $oldTitle }
               set: { title: $newTitle }
             ) {
               title
               year
             }
           }
         `

         export default function App() {
           // Must be rendered inside of an ApolloProvider
           const { loading, error, data } = useQuery(moviesQuery);
           const [updateMovieTitle] = useMutation(updateMovieTitleMutation);
           const handleUpdateMovieTitle = () => updateMovieTitle({
             variables: { oldTitle: "The Matrix 2", newTitle: "The Matrix Reloaded" }
           })
           return (
             <div>
               {loading && <div>loading</div>}
               {error && <div>{`encountered an error: ${error}`}</div>}
               {data && <div>{`successfully queried ${data.length} movies from the year 2000.`}</div>}
               <button onClick={handleUpdateMovieTitle}>Update Movie Title</button>
             </div>
           );
         }

   .. tab:: graphqurl (CLI)
      :tabid: graphqurl

      .. code-block:: shell

         gq https://realm.mongodb.com/api/client/v2.0/app/<Your App ID>/graphql \
             -H 'Authorization: Bearer <Valid Access Token>' \
             -q 'mutation UpdateMovieTitle($oldTitle: String!, $newTitle: String!) { updateOneMovie(query: { title: $oldTitle } set: { title: $newTitle }) { title year } }'
             -v 'oldTitle=The Matrix Reloaded'
             -v 'newTitle=The Matrix 2'
