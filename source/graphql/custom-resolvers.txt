========================
Define a Custom Resolver
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can define custom resolvers that extend the GraphQL API for your app's use
cases. Custom resolvers allow you to define new root-level operations that are
more complex or specific than the generated :ref:`query
<graphql-query-resolvers>` and :ref:`mutation <graphql-mutation-resolvers>`
resolvers. You can also add new computed fields to :ref:`generated document
types <graphql-document-types>` that dynamically evaluate a result whenever an
operation reads a document of the extended type.

Procedure
---------

.. include:: /includes/steps/custom-resolvers-ui.rst

Custom Resolver Examples
------------------------

.. contents:: Custom Resolver Examples
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Scenario & Schemas
~~~~~~~~~~~~~~~~~~

Consider a hypothetical dashboard that a sales team uses to show various
statistics and other performance metrics for a given time period. The dashboard
uses the custom resolvers in this section to handle some of its specific use
cases.

The resolvers all reference ``Sale`` documents, which have the following schema:

.. tabs::
   
   .. tab:: GraphQL Schema
      :tabid: graphql-schema
      
      .. code-block:: graphql
         
         type Sale {
           _id: ObjectId!
           customer_id: String!
           year: String!
           month: String!
           saleTotal: Float!
           notes: [String]
         }
   
   .. tab:: JSON Schema
      :tabid: json-schema

      .. code-block:: json
         
         {
           "title": "Sale",
           "bsonType": "object",
           "required": ["_id", "customer_id", "year", "month", "saleTotal"],
           "properties": {
             "_id": { "bsonType": "objectId" },
             "customer_id": { "bsonType": "string" },
             "year": { "bsonType": "string" },
             "month": { "bsonType": "string" },
             "saleTotal": { "bsonType": "decimal" },
             "notes": {
               "bsonType": "array",
               "items": { "bsonType": "string" }
             }
           }
         }

Custom Query Resolver
~~~~~~~~~~~~~~~~~~~~~

The sales team's hypothetical dashboard uses a custom query resolver that
returns aggregated sales data for a specific month.

Realm generates schema definitions for the resolver's custom input and payload
types and adds the resolver to its parent type, the root-level ``Query``:

.. code-block:: graphql
   
   
   type Query {
     averageSaleForMonth(input: AverageSaleForMonthInput): AverageSaleForMonthPayload
   }
   
   input AverageSalesForMonthInput {
     month: String!;
     year: String!;
   }
   
   type AverageSaleForMonthPayload {
     month: String!;
     year: String!;
     averageSale: Float!;
   }

Configuration
+++++++++++++

The resolver uses the following configuration:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   
   * - :guilabel:`Parent Type`
     - ``Query``

   * - :guilabel:`GraphQL Field Name`
     - ``averageSaleForMonth``
   
   * - :guilabel:`Input Type`
     - Custom Type: ``AverageSaleForMonthInput``
       
       .. tabs::
          
          .. tab:: JSON Schema
             :tabid: json-schema
             
             .. code-block:: json
                
                {
                  "bsonType": "object",
                  "title": "AverageSaleForMonthInput",
                  "required": ["month", "year"],
                  "properties": {
                    "month": {
                      "bsonType": "string"
                    },
                    "year": {
                      "bsonType": "string"
                    }
                  }
                }
          
          .. tab:: GraphQL Schema
             :tabid: graphql-schema
             
             .. code-block:: graphql
                
                input AverageSalesForMonthInput {
                  month: String!;
                  year: String!;
                }

   * - :guilabel:`Payload Type`
     - Custom Type: ``AverageSaleForMonthPayload`
       
       .. tabs::
          
          .. tab:: JSON Schema
             :tabid: json-schema
             
             .. code-block:: json
                
                {
                  "bsonType": "object",
                  "title": "AverageSaleForMonthPayload",
                  "required": ["month", "year", "averageSale"],
                  "properties": {
                    "month": {
                      "bsonType": "string"
                    },
                    "year": {
                      "bsonType": "string"
                    },
                    "averageSale": {
                      "bsonType": "decimal"
                    }
                  }
                }
          
          .. tab:: GraphQL Schema
             :tabid: graphql-schema
             
             .. code-block:: graphql
                
                type AverageSaleForMonthPayload {
                  month: String!;
                  year: String!;
                  averageSale: Float!;
                }
   
   * - :guilabel:`Function`
     - .. code-block:: javascript
          
          exports = async function averageSaleForMonth({ month, year }) {
            const cluster = context.services.get("mongodb-atlas");
            const sales = cluster.db("corp").collection("sales");
          
            const averageSalePayload = await sales
              .aggregate([
                { $match: { month: month, year: year } },
                {
                  $group: {
                    _id: "$month",
                    month: "$month",
                    year: "$year",
                    averageSale: { $avg: "$saleTotal" },
                  },
                },
              ])
              .next();
            
            return averageSalePayload;
          };

Example Usage
+++++++++++++

To call this custom query, you could use the following operation and variables:

.. code-block:: graphql
   
   query GetAverageSaleForMonth($averageSaleInput: AverageSaleForMonthInput!) {
     averageSaleForMonth(input: $averageSaleInput) {
       month
       year
       averageSale
     }
   }

.. code-block:: json
   
   {
     "variables": {
       "averageSaleInput": { month: "March", year: "2020" }
     }
   }

Custom Mutation
~~~~~~~~~~~~~~~

The sales team's hypothetical dashboard uses a custom mutation resolver that
adds a string note to a specific ``Sale`` document, identified by its ``_id``.

Realm generates schema definitions for the resolver's custom input type and adds
the resolver to its parent type, the root-level ``Mutation``:

.. code-block:: graphql
   
   type Mutation {
     addNoteToSale(input: AddNoteToSaleInput): Sale
   }
   
   input AddNoteToSaleInput {
     sale_id: ObjectId!;
     note: String!;
   }

Configuration
+++++++++++++

The resolver uses the following configuration:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   
   * - :guilabel:`Parent Type`
     - ``Mutation``

   * - :guilabel:`GraphQL Field Name`
     - ``addNoteToSale``
   
   * - :guilabel:`Input Type`
     - Custom Type: ``AddNoteToSaleInput``
       
       .. tabs::
          
          .. tab:: JSON Schema
             :tabid: json-schema
             
             .. code-block:: json
                
                {
                  "bsonType": "object",
                  "title": "AddNoteToSaleInput",
                  "required": ["sale_id", "note"],
                  "properties": {
                    "sale_id": {
                      "bsonType": "objectId"
                    },
                    "note": {
                      "bsonType": "string"
                    }
                  }
                }
          
          .. tab:: GraphQL Schema
             :tabid: graphql-schema
             
             .. code-block:: graphql
                
                input AddNoteToSaleInput {
                  sale_id: ObjectId!;
                  note: String!;
                }
             

   * - :guilabel:`Payload Type`
     - Existing Type: ``Sale``
       
       .. tabs::
          
          .. tab:: GraphQL Schema
             :tabid: graphql-schema
             
             .. code-block:: graphql
                
                type Sale {
                  _id: ObjectId!
                  customer_id: String!
                  year: String!
                  month: String!
                  saleTotal: Float!
                  notes: [String]
                }
          
          .. tab:: JSON Schema
             :tabid: json-schema
       
             .. code-block:: json
                
                {
                  "title": "Sale",
                  "bsonType": "object",
                  "required": ["_id", "customer_id", "year", "month", "saleTotal"],
                  "properties": {
                    "_id": { "bsonType": "objectId" },
                    "customer_id": { "bsonType": "string" },
                    "year": { "bsonType": "string" },
                    "month": { "bsonType": "string" },
                    "saleTotal": { "bsonType": "decimal" },
                    "notes": {
                      "bsonType": "array",
                      "items": { "bsonType": "string" }
                    }
                  }
                }
   
   * - :guilabel:`Function`
     - .. code-block:: javascript
          
          exports = async function addNoteToSale({ sale_id, note }) {
            const cluster = context.services.get("mongodb-atlas");
            const sales = cluster.db("corp").collection("sales");
            
            const sale = await sales.findOneAndUpdate(
              { _id: sale_id },
              { $push: { notes: note } },
              { returnNewDocument: true }
            );
            return sale;
          }

Example Usage
+++++++++++++

To call this custom query, you could use the following operation and variables:

.. code-block:: graphql
   
   mutation AddNoteToSale($addNoteToSaleInput: AddNoteToSaleInput) {
     addNoteToSale(input: $addNoteToSaleInput) {
       _id
       customer_id
       month
       year
       saleTotal
       notes
     }
   }

.. code-block:: json
   
   {
     "variables": {
       "addNoteToSaleInput": {
         "sale_id": "5f3c2779796615b661fcdc25",
         "note": "This was such a great sale!"
       }
     }
   }

Computed Properties
~~~~~~~~~~~~~~~~~~~

The sales team's hypothetical dashboard uses a custom resolver that adds a new
computed property to each ``Sale`` document. When an operation requests the
computed field for a given ``Sale``, the resolver queries an external system and
returns support cases filed by the associated customer.

Realm generates schema definitions for the resolver's custom payload type and
adds the resolver to its parent type, ``Sale``:

.. code-block:: graphql
   :emphasize-lines: 8
   
   type Sale {
     _id: ObjectId!
     customer_id: String!
     year: String!
     month: String!
     saleTotal: Float!
     notes: [String]
     customerSupportCases: [CustomerSupportCase]
   }
   
   type CustomerSupportCase {
     caseId: String!
     description: String!
   }

Configuration
+++++++++++++

The resolver uses the following configuration:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Option
     - Description
   
   * - :guilabel:`Parent Type`
     - ``Sale``

   * - :guilabel:`GraphQL Field Name`
     - ``customerSupportCases``
   
   * - :guilabel:`Input Type`
     - None

   * - :guilabel:`Payload Type`
     - Custom Type: ``[CustomerSupportCase]``
       
       .. tabs::
          
          .. tab:: JSON Schema
             :tabid: json-schema
             
             .. code-block:: json
                
                {
                  "bsonType": "array",
                  "items": {
                    "title": "CustomerSupportCase",
                    "bsonType": "object",
                    "required": ["caseId", "description"],
                    "properties": {
                      "caseId": { "bsonType": "string" },
                      "description": { "bsonType": "string" }
                    }
                  }
                }
          
          .. tab:: GraphQL Schema
             :tabid: graphql-schema
             
             .. code-block:: graphql
                :emphasize-lines: 13
                
                type CustomerSupportCase {
                  caseId: String!
                  description: String!
                }
                
                type Sale {
                  _id: ObjectId!
                  customer_id: String!
                  year: String!
                  month: String!
                  saleTotal: Float!
                  notes: [String]
                  customerSupportCases: [CustomerSupportCase]
                }

   * - :guilabel:`Function`
     - .. code-block:: javascript
          
          exports = async function customerSupportCases(sale) {
            // Return a list of objects from some external system
            const cases = await fetchCustomerSupportCases({
              customerId: sale.customer_id
            });
            return cases;
          };

Example Usage
+++++++++++++

To use this custom computed property, you could run the following operation:

.. code-block:: graphql
   :emphasize-lines: 9-12
   
   query GetSalesWithSupportCases {
     sales {
       _id
       customer_id
       year
       month
       saleTotal
       notes
       customerSupportCases {
         caseId
         description
       }
     }
   }
