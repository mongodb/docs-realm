.. _android-client-resets:

=============
Client Resets
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

When a {+realm+} becomes too far out of sync with the data stored in
MongoDB Atlas, the client must perform a **client reset**. A client
reset erases all local data and syncs down a new copy of the data stored
in MongoDB Atlas. Performing a client reset loses all local changes made
since the client last successfully synced. Your app might require
a client reset if a large number of changes has occurred in a {+realm+}
since the last time your client synced successfully. Realms with many
active writers can cause client resets, as well as clients that do not
sync for long periods of time (weeks or months).

Example
-------

By default, the SDK performs client resets automatically. However, for
certain use cases, you might want to customize client reset behavior.
For instance, you might want to make a backup copy of local data so that
you can manually recover changes. To override the default client reset
behavior, create an instance of a ``SyncSession.ClientResetHandler`` that
overrides the default ``onClientReset()`` behavior. Pass this object to
your ``AppConfiguration.Builder`` using the ``defaultClientResetHandler()``
builder method:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val handler = SyncSession.ClientResetHandler { session, error -> 
            Log.e("EXAMPLE", Client Reset required for: ${session.configuration.serverUrl} for error: ${error}")
         }
         val app: App = App(AppConfiguration.Builder("your App ID")
            .defaultClientResetHandler(handler)
            .build())

   .. tab::
      :tabid: java

      .. code-block:: java

        SyncSession.ClientResetHandler handler = new SyncSession.ClientResetHandler() {
            @Override
            public void onClientReset(SyncSession session, ClientResetRequiredError error) {
                Log.e("EXAMPLE", "Client Reset required for: " +
                    session.getConfiguration().getServerUrl() + " for error: " +
                    error.toString());
            }
        }

        val app = App(AppConfiguration.Builder("your App ID")
            .defaultClientResetHandler(handler)
            .build());
