.. _android-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the Android SDK <android-install>`

.. admonition:: Check Out the Tutorial
   :class: note
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the
   :ref:`Android Tutorial <android-kotlin-tutorial>` where you'll build a mobile
   app that connects to the :ref:`Task Tracker backend
   <tutorial-task-tracker-create-realm-app>`.

Import Realm
------------

Near the top of any Kotlin file that uses Realm, add the following import
statement:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         import io.realm.Realm;
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin
   
         import io.realm.Realm

.. _android-quick-start-init-app:

.. include:: /includes/android-initialize-realm.rst

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         String appID = "<your app ID>"; // replace this with your App ID
         App app = new App(new AppConfiguration.Builder(appID)
               .build());
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin
   
         val appID = "<your app ID>" // replace this with your App ID
         val app: App = App(AppConfiguration.Builder(appID)
               .build())

.. admonition:: Android Studio Errors?
   :class: note

   If Android Studio does not recognize the ``Realm``, ``App``, or
   ``AppConfiguration`` types, there could be a problem with the
   your Gradle build configuration. To fix the issue, try:

   - Cleaning your project with ``Build > Clean Project``

   - Rebuilding your project based on your updated ``build.gradle`` file
     with ``Build > Rebuild Project``

   - Revisiting the :ref:`Install the Android SDK <android-install>`
     guide to make sure that you installed the dependencies correctly.

Define Your Object Model
------------------------

Your application's :ref:`object model <android-realm-objects>` controls
the data that you can store within {+client-database+} and synchronize
to and from {+backend+}.

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled
{+sync-short+} with :term:`Development Mode` in the {+ui+}, you can
define your object model directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode,
   you can copy and paste the object model definitions that
   {+backend-short+} generated for you from the :guilabel:`SDKs` tab
   in the {+ui+}. You must re-enable Developer Mode if you want to make
   changes to the object model definition from client side code. See
   :ref:`Configure Your Data Model <configure-your-data-model>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         import io.realm.RealmObject;
         import io.realm.annotations.PrimaryKey;
         import io.realm.annotations.Required;
         import org.bson.types.ObjectId;

         public class Task extends RealmObject {
            @PrimaryKey
            ObjectId _id = new ObjectId();
            String _partition = "My Project";
            String name = "Task";

            @Required
            private String status = "Open";

            public Task(String _name, String project) {
               this._partition = project;
               this.name = _name;
            }

            public Task() {}
         }
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin
   
         import io.realm.RealmObject
         import io.realm.annotations.PrimaryKey
         import io.realm.annotations.Required
         import org.bson.types.ObjectId


         open class Task(_name: String = "Task", project: String = "My Project") : RealmObject() {
            @PrimaryKey var _id: ObjectId = ObjectId()
            var _partition: String = project
            var name: String = _name

            @Required
            private var status: String = "Open"
         }

.. _android-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         Credentials credentials = Credentials.anonymous();

         app.loginAsync(credentials, it -> {
               if (it.isSuccess()) {
                  Log.v("QUICKSTART", "Successfully authenticated anonymously.");
                  user = app.currentUser();
               } else {
                  Log.e("QUICKSTART", it.getError().toString());
               }
         });

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val credentials: Credentials = Credentials.anonymous()

         val user: User? = null
         app.loginAsync(credentials) {
            if (it.isSuccess) {
                  Log.v("QUICKSTART", "Successfully authenticated anonymously.")
                  user = app.currentUser()
            } else {
                  Log.e("QUICKSTART", it.error.toString())
            }
         }



{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso:: :ref:`Authenticate a User <android-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, you can open
a synced :ref:`{+realm+} <android-realms>`. Use the ``SyncConfiguration``
to control the specifics of how your application synchronizes data with
{+backend+}, including the :ref:`partition <partitioning>`,
whether to wait for an initial batch of data to sync, and
more.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         // this code assumes the following static member variables:
         // static User user;
         // static Realm realm;

         String partitionValue = "myPartition";
         SyncConfiguration config = new SyncConfiguration.Builder(user, partitionValue)
                  .waitForInitialRemoteData()
                  .build();

         // Sync all realm changes via a new instance, and when that instance has been successfully created connect it to an on-screen list (a recycler view)
         Realm.getInstanceAsync(config, new Realm.Callback() {
               @Override
               @ParametersAreNonnullByDefault
               public void onSuccess(Realm _realm) {
                  // since this realm should live exactly as long as this activity, assign the realm to a member variable
                  realm = _realm;
                  Log.v("QUICKSTART", "Successfully instantiated realm!");
               }
         });

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val user: User? = app.currentUser()
         val partitionValue: String = "myPartition"
         val config = SyncConfiguration.Builder(user!!, partitionValue)
                     .waitForInitialRemoteData()
                     .build()

         var realm: Realm
         // Sync all realm changes via a new instance, and when that instance has been successfully created connect it to an on-screen list (a recycler view)
         Realm.getInstanceAsync(config, object: Realm.Callback() {
            override fun onSuccess(_realm: Realm) {
               // since this realm should live exactly as long as this activity, assign the realm to a member variable
               realm = _realm
               Log.v("QUICKSTART", "Successfully instantiated realm!");
            }
         })

.. seealso:: :ref:`Sync Data <android-sync-data>`

Log Out
-------

Once logged in, you can log out:

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. code-block:: java
         
         user.logOutAsync( it -> {
            if (it.isSuccess()) {
               Log.v("QUICKSTART", "Successfully logged out.");
            } else {
               Log.e("QUICKSTART", it.getError().toString());
            }
         });


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         user?.logOutAsync {
            if (it.isSuccess) {
                  Log.v("QUICKSTART", "Successfully logged out.")
            } else {
                  Log.e("QUICKSTART", it.error.toString())
            }
         }


Complete Example
----------------

Run the complete example, by replacing the appId with your {+realm+} app ID.

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. note::

         The following codeblock requires you to have a Task class. Copy
         the code from the "Define Your Object Model" step to a
         Task.java file in before using this snippet.

      .. code-block:: java
         
         package com.mongodb.myapplicationjava;

         import androidx.appcompat.app.AppCompatActivity;
         import android.os.Bundle;
         import android.util.Log;

         import io.realm.Realm;
         import io.realm.mongodb.App;
         import io.realm.mongodb.AppConfiguration;

         import io.realm.mongodb.Credentials;
         import io.realm.mongodb.User;
         import io.realm.mongodb.sync.SyncConfiguration;


         public class MainActivity extends AppCompatActivity {
            static User user;
            static Realm realm;
            @Override
            protected void onCreate(Bundle savedInstanceState) {
               super.onCreate(savedInstanceState);
               Realm.init(this); // context, usually an Activity or Application
               String appID = "<your app ID>"; // replace this with your App ID
               App app = new App(new AppConfiguration.Builder(appID)
                        .build());


               Credentials credentials = Credentials.anonymous();

               app.loginAsync(credentials, it -> {
                  if (it.isSuccess()) {
                     Log.v("QUICKSTART", "Successfully authenticated anonymously.");

                     user = app.currentUser();

                     String partitionValue = "myPartition";
                     SyncConfiguration config = new SyncConfiguration.Builder(user, partitionValue)
                              .waitForInitialRemoteData()
                              .build();

                     // Sync all realm changes via a new instance, and when that instance has been successfully created connect it to an on-screen list (a recycler view)
                     Realm.getInstanceAsync(config, new Realm.Callback() {
                        @Override
                        @ParametersAreNonnullByDefault
                        public void onSuccess(Realm _realm) {
                           // since this realm should live exactly as long as this activity, assign the realm to a member variable
                           realm = _realm;
                           Log.v("QUICKSTART", "Successfully instantiated realm!");
                        }
                     });

                     user.logOutAsync( result -> {
                        if (result.isSuccess()) {
                              Log.v("QUICKSTART", "Successfully logged out.");
                        } else {
                              Log.e("QUICKSTART", result.getError().toString());
                        }
                     });
                  } else {
                     Log.e("QUICKSTART", it.getError().toString());
                  }
               });
            }
         }


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         package com.mongodb.myapplication

         import android.os.Bundle
         import androidx.appcompat.app.AppCompatActivity
         import android.util.Log

         import io.realm.Realm
         import io.realm.mongodb.App
         import io.realm.mongodb.AppConfiguration

         import io.realm.mongodb.Credentials
         import io.realm.mongodb.User
         import io.realm.mongodb.sync.SyncConfiguration


         class MainActivity : AppCompatActivity() {

            override fun onCreate(savedInstanceState: Bundle?) {
               super.onCreate(savedInstanceState)

               Realm.init(this) // context, usually an Activity or Application
               val appID = "<your app ID>" // replace this with your App ID
               val app: App = App(AppConfiguration.Builder(appID)
                     .build())

               val credentials: Credentials = Credentials.anonymous()

               var user: User? = null

               app.loginAsync(credentials) {
                  if (it.isSuccess) {
                     Log.v("QUICKSTART", "Successfully authenticated anonymously.")
                     user = app.currentUser()
                  } else {
                     Log.e("QUICKSTART", "an error occurred:")
                     Log.e("QUICKSTART", it.error.toString())
                  }
               }

               user = app.currentUser()
               val partitionValue: String = "myPartition"

               val config = SyncConfiguration.Builder(user!!, partitionValue)
                     .waitForInitialRemoteData()
                     .build()



               var realm: Realm
               // Sync all realm changes via a new instance, and when that instance has been successfully created connect it to an on-screen list (a recycler view)
               Realm.getInstanceAsync(config, object: Realm.Callback() {
                  override fun onSuccess(_realm: Realm) {
                     // since this realm should live exactly as long as this activity, assign the realm to a member variable
                     realm = _realm
                     Log.v("QUICKSTART", "Successfully instantiated realm!");
                  }
               })

               user?.logOutAsync {
                  if (it.isSuccess) {
                     Log.v("QUICKSTART", "Successfully logged out.")
                  } else {
                     Log.e("QUICKSTART", it.error.toString())
                  }
               }

            }
         }

         open class Task(_name: String = "Task", project: String = "My Project") : RealmObject() {
            @PrimaryKey var _id: ObjectId = ObjectId()
            var _partition: String = project
            var name: String = _name

            @Required
            private var status: String = "Open"
         }


Output
------
Running the above code should output something like the following:

.. code-block:: shell

   Successfully authenticated anonymously.

   Successfully instantiated realm!

   Successfully logged out.
