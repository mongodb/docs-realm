.. _android-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the Android SDK <android-install>`

.. admonition:: Check Out the Tutorial
   :class: note
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the
   :ref:`Android Tutorial <android-kotlin-tutorial>` where you'll build a mobile
   app that connects to the :ref:`Task Tracker backend
   <tutorial-task-tracker-create-realm-app>`.

Import Realm
------------

Near the top of any Kotlin file that uses Realm, add the following import
statement:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         import io.realm.Realm;
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin
   
         import io.realm.Realm

.. _android-quick-start-init-app:

.. include:: /includes/android-initialize-realm.rst

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         String appID = "<your app ID>"; // replace this with your App ID
         App app = new App(new AppConfiguration.Builder(appID)
               .build());
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin
   
         val appID = "<your app ID>" // replace this with your App ID
         val app: App = App(AppConfiguration.Builder(appID)
               .build())

.. admonition:: Android Studio Errors?
   :class: note

   If Android Studio does not recognize the ``Realm``, ``App``, or
   ``AppConfiguration`` types, there could be a problem with the
   your Gradle build configuration. To fix the issue, try:

   - Cleaning your project with ``Build > Clean Project``

   - Rebuilding your project based on your updated ``build.gradle`` file
     with ``Build > Rebuild Project``

   - Revisiting the :ref:`Install the Android SDK <android-install>`
     guide to make sure that you installed the dependencies correctly.

Define Your Object Model
------------------------

Your application's :ref:`object model <android-realm-objects>` controls
the data that you can store within {+client-database+} and synchronize
to and from {+backend+}.

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled
{+sync-short+} with :term:`Development Mode` in the {+ui+}, you can
define your object model directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode,
   you can copy and paste the object model definitions that
   {+backend-short+} generated for you from the :guilabel:`SDKs` tab
   in the {+ui+}. You must re-enable Developer Mode if you want to make
   changes to the object model definition from client side code. See
   :ref:`Configure Your Data Model <configure-your-data-model>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. literalinclude:: /android/code-samples/task.java
         :language: java
   
   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         import io.realm.RealmObject
         import io.realm.annotations.PrimaryKey
         import io.realm.annotations.Required
         import org.bson.types.ObjectId

         enum class TaskStatus(val displayName: String) {
            Open("Open"),
            InProgress("In Progress"),
            Complete("Complete"),
         }

         open class Task(_name: String = "Task", project: String = "My Project") : RealmObject() {
            @PrimaryKey var _id: ObjectId = ObjectId()
            var _partition: String = project
            var name: String = _name

            @Required
            var status: String = TaskStatus.Open.name
            var statusEnum: TaskStatus
               get() {
                  // because status is actually a String and another client could assign an invalid value,
                  // default the status to "Open" if the status is unreadable
                  return try {
                     TaskStatus.valueOf(status)
                  } catch (e: IllegalArgumentException) {
                     TaskStatus.Open
                  }
               }
               set(value) { status = value.name }
         }

.. _android-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         Credentials credentials = Credentials.anonymous();

         app.loginAsync(credentials, it -> {
               if (it.isSuccess()) {
                  Log.v("QUICKSTART", "Successfully authenticated anonymously.");
                  user = app.currentUser();

                  // interact with MongoDB Realm via user object here

               } else {
                  Log.e("QUICKSTART", "Failed to log in. Error: " + it.getError().toString());
               }
         });

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val credentials: Credentials = Credentials.anonymous()

         var user: User? = null
         app.loginAsync(credentials) {
            if (it.isSuccess) {
               Log.v("QUICKSTART", "Successfully authenticated anonymously.")
               user = app.currentUser()

               // interact with MongoDB Realm via user object here

            } else {
               Log.e("QUICKSTART", "Failed to log in. Error: ${it.error}")
            }
         }

{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso:: :ref:`Authenticate a User <android-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, you can open
a synced :ref:`{+realm+} <android-realms>`. Use the ``SyncConfiguration``
to control the specifics of how your application synchronizes data with
{+backend+}, including the :ref:`partition <partitioning>`,
whether to wait for an initial batch of data to sync, and
more.

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         User user = app.currentUser();
         String partitionValue = "myPartition";
         SyncConfiguration config = new SyncConfiguration.Builder(user, partitionValue)
                                          .build();

         Realm realm = Realm.getInstance(config);

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val user: User? = app.currentUser()
         val partitionValue: String = "myPartition"
         val config = SyncConfiguration.Builder(user!!, partitionValue)
                        .build()

         val realm: Realm = Realm.getInstance(config)

.. seealso:: :ref:`Sync Data <android-sync-data>`


Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its
:ref:`objects <android-realm-objects>` in a
:ref:`write transaction <android-realm-database-writes>` block.

To create a new Task, instantiate the Task class and add it to the {+realm+} in a write block:

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. code-block:: java

         Task task = new Task("New Task", partitionValue);
         realm.executeTransaction( transactionRealm -> {
            transactionRealm.insert(task);
         });

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val task : Task = Task("New Task", partitionValue)
         realm.executeTransaction { transactionRealm ->
            transactionRealm.insert(task)
         }

You can retrieve a live :ref:`collection <android-client-collections>` of all tasks in the {+realm+}:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         // all tasks in the realm
         RealmResults<Task> tasks = realm.where(Task.class).findAll();

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         // all tasks in the realm
         val tasks : RealmResults<Task> = realm.where<Task>().findAll()

You can also filter that collection using a :ref:`filter <android-client-query-engine>`:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         // you can also filter a collection
         List<Task> tasksThatBeginWithN = tasks.where().beginsWith("name", "N").findAll();
         List<Task> openTasks = tasks.where().equalTo("status", TaskStatus.Open.name()).findAll();

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         // you can also filter a collection
         val tasksThatBeginWithN : List<Task> = tasks.where().beginsWith("name", "N").findAll()
         val openTasks : List<Task> = tasks.where().equalTo("status", TaskStatus.Open.name).findAll()

To modify a task, simply update its properties in a write transaction block:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         // all modifications to a realm must happen inside of a write block
         realm.executeTransaction (transactionRealm -> {
            Task innerOtherTask = transactionRealm.where(Task.class).equalTo("_id", otherTask.get_id()).findFirst();
            innerOtherTask.setStatus(TaskStatus.Complete);
         });

   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         // all modifications to a realm must happen inside of a write block
         realm.executeTransaction { transactionRealm ->
            val innerOtherTask : Task = transactionRealm.where<Task>().equalTo("_id", otherTask._id).findFirst()!!
            innerOtherTask.status = TaskStatus.Complete.name
         }

Finally, you can delete a task:

.. tabs-realm-languages::

   .. tab::
      :tabid: java
   
      .. code-block:: java

         Task yetAnotherTask = tasks.get(0);
         ObjectId yetAnotherTaskId = yetAnotherTask.get_id();
         // all modifications to a realm must happen inside of a write block
         realm.executeTransactionAsync(transactionRealm -> {
            Task innerYetAnotherTask = transactionRealm.where(Task.class).equalTo("_id", yetAnotherTaskId).findFirst();
            innerYetAnotherTask.deleteFromRealm();
         });


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         val yetAnotherTask: Task = tasks.get(0)!!
         val yetAnotherTaskId: ObjectId = yetAnotherTask._id
         // all modifications to a realm must happen inside of a write block
         realm.executeTransactionAsync { transactionRealm ->
            val innerYetAnotherTask : Task = transactionRealm.where<Task>().equalTo("_id", yetAnotherTaskId).findFirst()!!
            innerYetAnotherTask.deleteFromRealm()
         }

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes <android-client-notifications>`
with the `addChangeListener()` method.

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. code-block:: java

         tasks.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Task>>() {
            @Override
            public void onChange(RealmResults<Task> collection, OrderedCollectionChangeSet changeSet) {
               OrderedCollectionChangeSet.Range[] deletions = changeSet.getDeletionRanges();
               for (OrderedCollectionChangeSet.Range range : deletions) {
                  Log.v("QUICKSTART", "Deleted range: " + range.startIndex + " to " + (range.startIndex + range.length));
               }
               OrderedCollectionChangeSet.Range[] insertions = changeSet.getInsertionRanges();
               for (OrderedCollectionChangeSet.Range range : insertions) {
                  Log.v("QUICKSTART", "Inserted range: " + range.startIndex + " to " + (range.startIndex + range.length));
               }

               OrderedCollectionChangeSet.Range[] modifications = changeSet.getChangeRanges();
               for (OrderedCollectionChangeSet.Range range : modifications) {
                  Log.v("QUICKSTART", "Updated range: " + range.startIndex + " to " + (range.startIndex + range.length));
               }
            }
         });


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         tasks.addChangeListener(OrderedRealmCollectionChangeListener<RealmResults<Task>> { collection, changeSet ->
            val deletions = changeSet.deletionRanges
            // if keeping parallel arrays in sync, handle deletions in reverse to avoid changing indices after removals
            for (i in deletions.indices.reversed()) {
               val range = deletions[i]
               Log.v("QUICKSTART", "Deleted range: ${range.startIndex} to ${range.startIndex + range.length}")
            }

            val insertions = changeSet.insertionRanges
            for (range in insertions) {
               Log.v("QUICKSTART", "Inserted range: ${range.startIndex} to ${range.startIndex + range.length}")
            }

            val modifications = changeSet.changeRanges
            for (range in modifications) {
               Log.v("QUICKSTART", "Updated range: ${range.startIndex} to ${range.startIndex + range.length}")
            }
         })


Log Out
-------

Once logged in, you can log out:

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. code-block:: java
         
         user.logOutAsync( result -> {
            if (result.isSuccess()) {
               Log.v("QUICKSTART", "Successfully logged out.");
            } else {
               Log.e("QUICKSTART", "Failed to log out. Error: " + result.getError().toString());
            }
         });


   .. tab::
      :tabid: kotlin

      .. code-block:: kotlin

         user.logOutAsync {
            if (it.isSuccess) {
               Log.v("QUICKSTART", "Successfully logged out.")
            } else {
               Log.e("QUICKSTART", "Failed to log out. Error: ${it.error}")
            }
         }


Complete Example
----------------

Run the complete example, by replacing the appId with your {+realm+} app ID.

.. tabs-realm-languages::

   .. tab::
      :tabid: java

      .. literalinclude:: /android/code-samples/task.java
         :caption: Task.java
         :language: java

      .. literalinclude:: /android/code-samples/quick-start.java
         :caption: MainActivity.java
         :language: java

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /android/code-samples/quick-start.kt
         :caption: MainActivity.kt
         :language: kotlin

Output
------
Running the above code should output something like the following:

.. code-block:: shell

   Successfully authenticated anonymously.

   Updated range: 0 to 1

   Deleted range: 0 to 1

   Successfully logged out.
