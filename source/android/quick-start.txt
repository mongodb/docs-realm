.. _android-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the Android SDK <android-install>`

Import Realm
------------

Near the top of any Kotlin file that uses Realm, add the following import
statement:

.. code-block:: kotlin

   import io.realm.Realm

.. _android-quick-start-init-app:

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. code-block:: kotlin


   val appID = "<your app ID>" // replace this with your App ID
   Realm.init(this) // context, typically an Activity
   val app: App = App(AppConfiguration.Builder(appID)
                      .build())

Define Your Object Model
------------------------

Your application's :ref:`object model <android-realm-objects>` controls
the data that you can store within {+client-database+} and synchronize
to and from {+backend+}.

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled
{+sync-short+} with :term:`Development Mode` in the {+ui+}, you can
define your object model directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode,
   you can copy and paste the object model definitions that
   {+backend-short+} generated for you from the :guilabel:`SDKs` tab
   in the {+ui+}. You must re-enable Developer Mode if you want to make
   changes to the object model definition from client side code. See
   :ref:`Configure Your Data Model <configure-your-data-model>`.

.. code-block:: kotlin

   import io.realm.RealmObject
   import io.realm.annotations.PrimaryKey
   import io.realm.annotations.Required
   import org.bson.types.ObjectId


   open class Task(_name: String = "Task", project: String = "My Project") : RealmObject() {
      @PrimaryKey var _id: ObjectId = ObjectId()
      var _partition: String = project
      var name: String = _name

      @Required
      private var status: String = "Open"
   }

.. _android-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. code-block:: kotlin

   val credentials: Credentials = Credentials.anonymous()

   val user: User? = null
   app.loginAsync(credentials) {
      if (it.isSuccess) {
            Log.v(TAG, "Successfully authenticated anonymously.")
            user = app.currentUser()
      } else {
            Log.e(TAG, it.error.toString())
      }
   }

{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso:: :ref:`Authenticate a User <android-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, you can open
a synced :ref:`{+realm+} <android-realms>`. Use the ``SyncConfiguration``
to control the specifics of how your application synchronizes data with
{+backend+}, including the partition, which determines which data is
synchronized, whether to wait for an initial batch of data to sync, and
more.

.. code-block:: kotlin

   val user: User? = app.currentUser()
   val partitionValue: String = "myPartition"
   val config = SyncConfiguration.Builder(user!!, partitionValue)
                .waitForInitialRemoteData()
                .build()

   var realm: Realm
   // Sync all realm changes via a new instance, and when that instance has been successfully created connect it to an on-screen list (a recycler view)
   Realm.getInstanceAsync(config, object: Realm.Callback() {
      override fun onSuccess(_realm: Realm) {
            // since this realm should live exactly as long as this activity, assign the realm to a member variable
            realm = _realm
      }
   })

.. seealso:: :ref:`Sync Data <android-sync-data>`

Log Out
-------

Once logged in, you can log out:

.. code-block:: kotlin

   user?.logOutAsync {
      if (it.isSuccess) {
            Log.v(TAG, "Successfully logged out.")
      } else {
            Log.e(TAG, it.error.toString())
      }
   }
