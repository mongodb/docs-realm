.. _android-manage-email-password-users:

===========================
Manage Email/Password Users
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

When you have enabled the :ref:`email/password provider
<email-password-authentication>` in your {+app+}, you can register a new
account, confirm an email address, and reset a user's password from
client code.

.. _android-email-password-register-new-user:

Register a New User Account
---------------------------

To register a new user, pass a user-provided email and password to the
``registerUser()`` or ``registerUserAsync()`` methods of your
{+service-short+} ``App``'s ``EmailPasswordAuth`` instance:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         app.emailPassword.registerUserAsync(email, password) {
            if (it.isSuccess) {
                Log.i(TAG,"Successfully registered user.")
            } else {
                Log.e(TAG,"Failed to register user: ${it.error}")
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         app.getEmailPassword().registerUserAsync(email, password, it -> {
            if (it.isSuccess()) {
                Log.i(TAG,"Successfully registered user.");
            } else {
                Log.e(TAG,"Failed to register user: ${it.error}");
            }
         });

.. _android-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to the ``confirmUser()`` or ``confirmUserAsync`` methods of
your {+service-short+} ``App``'s ``EmailPasswordAuth`` instance:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         // token and tokenId are query parameters in the confirmation
         // link sent in the confirmation email.
         app.emailPassword.confirmUserAsync(token, tokenId) {
            if (it.isSuccess) {
                Log.i(TAG, "Successfully confirmed new user.")
            } else {
                Log.e(TAG, "Failed to register user: ${it.error}")
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         // token and tokenId are query parameters in the confirmation
         // link sent in the confirmation email.
         app.getEmailPassword().confirmUserAsync(token, tokenId, it -> {
            if (it.isSuccess()) {
                Log.i(TAG, "Successfully confirmed new user.");
            } else {
                Log.e(TAG, "Failed to register user: ${it.error}");
            }
         });

.. note::

   To access the ``token`` and ``tokenId`` values sent in the user
   confirmation email, you can use a :ref:`custom confirmation email subject
   <auth-send-a-confirmation-email>` containing a `deep link
   <https://developer.android.com/training/app-links/deep-linking>`__.

.. _android-email-password-reset-password:

Reset a User's Password
-----------------------

To reset a user's password, first send the user a password reset email:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         app.emailPassword.sendResetPasswordEmailAsync(emailAddress) {
            if (it.isSuccess) {
                Log.i(TAG, "Successfully sent the user a reset password link to $emailAddress")
            } else {
                Log.e(TAG, "Failed to send the user a reset password link to $emailAddress")
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         app.getEmailPassword().sendResetPasswordEmailAsync(emailAddress, it -> {
            if (it.isSuccess()) {
                Log.i(TAG, "Successfully sent the user a reset password link to $emailAddress");
            } else {
                Log.e(TAG, "Failed to send the user a reset password link to $emailAddress");
            }
         });

Password reset emails contain two values, ``token`` and ``tokenId``.
To complete the password reset flow, prompt the user to enter a new
password and pass the ``token`` and ``tokenId`` values along with the
new password value to your {+service-short+} ``App``'s
``EmailPasswordAuth`` instance's ``resetPassword()`` or ``resetPasswordAsync()``
methods:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         // token and tokenId are query parameters in the confirmation
         // link sent in the password reset email.
         app.emailPassword.resetPasswordAsync(token, tokenId, newPassword) {
            if (it.isSuccess) {
                Log.i(TAG, "Successfully updated password for user.")
            } else {
                Log.e(TAG, "Failed to reset user's password.")
            }
         }

   .. tab::
      :tabid: java
      
      .. code-block:: java

         // token and tokenId are query parameters in the confirmation
         // link sent in the password reset email.
         app.getEmailPassword().resetPasswordAsync(token, tokenId, newPassword, it -> {
            if (it.isSuccess()) {
                Log.i(TAG, "Successfully updated password for user.");
            } else {
                Log.e(TAG, "Failed to reset user's password.");
            }
         });

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a :ref:`custom password reset email subject
   <auth-send-a-password-reset-email>` containing a `deep link
   <https://developer.android.com/training/app-links/deep-linking>`__.
