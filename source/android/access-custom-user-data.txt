.. _android-access-custom-user-data:

=======================
Access Custom User Data
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can read arbitrary data about your application users, known as
custom user data, directly within your Android application. For example,
you might store a user's preferred language, date of birth, or local
timezone. To learn more about custom user data, see :ref:`Enable Custom
User Data <custom-user-data>`.

.. include:: /includes/use-custom-data-note.rst

.. _android-read-custom-user-data:

Read Custom User Data
---------------------

You can read the custom user data of a currently logged in user
through that user's ``User`` object. You cannot edit custom user data
through a ``User`` object. To edit custom user data, see
:ref:`Update Custom User Data <android-update-custom-user-data>`.
To access the data, call the
:java-sdk:`User.customData() <io/realm/mongodb/User.html#getCustomData-->`
method on the ``User`` object of a logged in user:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin
         :emphasize-lines: 13
         
         Realm.init(this) // context, usually an Activity or Application
         val appID = "<your app ID>" // replace this with your App ID
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         val anonymousCredentials: Credentials = Credentials.anonymous()

         val user: User? = null
         app.loginAsync(anonymousCredentials) {
            if (it.isSuccess) {
                Log.v(TAG, "Successfully authenticated anonymously.")
                user = app.currentUser()
                val customUserData : Document? = user?.customData
            } else {
                Log.e(TAG, it.error.toString())
            }
         }

   .. tab::
      :tabid: java

      .. code-block:: java
         :emphasize-lines: 12

         Realm.init(this); // context, usually an Activity or Application
         String appID = "<your app ID>"; // replace this with your App ID
         App app = new App(new AppConfiguration.Builder(appID)
               .build());

         Credentials anonymousCredentials = Credentials.anonymous();

         app.loginAsync(anonymousCredentials, it -> {
            if (it.isSuccess()) {
               Log.v(TAG, "Successfully authenticated anonymously.");
               user = app.currentUser();
               Document customUserData = user.getCustomData()
            } else {
               Log.e(TAG, it.getError().toString());
            }
         });

.. admonition:: Custom Data May Be Stale
   :class: warning
   
   {+backend+} does not dynamically update the value of
   :java-sdk:`User.customData() <io/realm/mongodb/User.html#getCustomData-->`
   immediately when underlying data changes. Instead, {+backend+}
   fetches the most recent version of custom user data whenever a user
   refreshes their :ref:`access token <user-sessions>`, which occurs
   during most SDK operations that contact the {+backend+} back end.
   {+service-short+} refreshes access tokens every 30 minutes, so custom
   user data can be stale for no more than 30 minutes.

.. note::

   If you require the most recent version of custom user data, use the
   :java-sdk:`User.refreshCustomData()
   <io/realm/mongodb/User.html#refreshCustomData-->` method to request
   the latest version of a user's custom data.

.. _android-write-custom-user-data:

Write Custom User Data
----------------------

To create, update, or delete custom user data, you will need the following
information from your custom user data configuration:

- the :term:`custom user data cluster`

- the :term:`custom user data database`

- the :term:`custom user data collection` in which custom
  user data documents are stored

- the :term:`user ID field` used to map custom user data documents
  to users (via :term:`user ID`)

You can find this information in the the :guilabel:`Custom User Data`
tab of the :guilabel:`Users` left sidebar entry of the {+ui+}.

.. _android-create-custom-user-data:

Create Custom User Data for a User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create custom user data for a user, create a MongoDB document in the
custom user data collection. The user ID field of the document should
contain the the user's :term:`user ID`. The following example uses
:term:`MongoDB Data Access <android-mongodb-data-access>` to insert a
document containing the user ID of the currently logged in user and a
``favoriteColor`` value into the custom user data collection:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin
         :emphasize-lines: 13-28
         
         Realm.init(this) // context, usually an Activity or Application
         val appID = "<your app ID>" // replace this with your App ID
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         val anonymousCredentials: Credentials = Credentials.anonymous()

         val user: User? = null
         app.loginAsync(anonymousCredentials) {
            if (it.isSuccess) {
                user = app.currentUser()

                val mongoClient : MongoClient =
                    user.getMongoClient("<mongodb service name for custom user data cluster>")!!
                val mongoDatabase : MongoDatabase =
                    mongoClient.getDatabase("<custom user data database>")!!
                val mongoCollection : MongoCollection<Document> =
                    mongoDatabase.getCollection("<custom user data cluster>")!!

                mongoCollection.insertOne(
                    Document("<user ID field>", user.id).append("favoriteColor", "pink"))
                    .getAsync() {
                        if (it.isSuccess) {
                            Log.v("EXAMPLE", "Inserted custom user data document. _id of inserted document: ${it.get().insertedId}")
                        } else {
                            Log.e("EXAMPLE", "Unable to insert custom user data. Error: ${it.error}")
                        }
                }
            } else {
                Log.e("EXAMPLE", "Failed to log in anonymously: ${it.error}")
            }
         }

   .. tab::
      :tabid: java

      .. code-block:: java
         :emphasize-lines: 12-28

         Realm.init(this); // context, usually an Activity or Application
         String appID = "<your app ID>"; // replace this with your App ID
         App app = new App(new AppConfiguration.Builder(appID)
                .build());

         Credentials credentials = Credentials.anonymous();

         app.loginAsync(credentials, it -> {
            if (it.isSuccess()) {
                User user = app.currentUser();

                MongoClient mongoClient =
                    user.getMongoClient("<mongodb service name for custom user data cluster>");
                MongoDatabase mongoDatabase =
                    mongoClient.getDatabase("<custom user data database>");
                MongoCollection<Document> mongoCollection =
                    mongoDatabase.getCollection("<custom user data cluster>");

                mongoCollection.insertOne(
                    new Document("<user ID field>", user.getId()).append("favoriteColor", "pink"))
                    .getAsync(result -> {
                        if (result.isSuccess()) {
                            Log.v("EXAMPLE", "Inserted custom user data document. _id of inserted document: "
                                + result.get().getId());
                        } else {
                            Log.e("EXAMPLE", "Unable to insert custom user data. Error: " + result.getError());
                        }
                });
            } else {
                Log.e("EXAMPLE", "Failed to log in anonymously:" + it.getError().toString())
            }
         }


You can add any number of arbitrary fields and values to the custom user
data document when you create it. The user ID field is the only
requirement for the document to become available on the ``User`` object
as custom user data.

.. _android-update-custom-user-data:

Update Custom User Data for a User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update custom user data using :ref:`MongoDB Data Access
<android-mongodb-data-access>`, {+service-short+} :ref:`Sync
<android-sync-data>`, `MongoDB Compass
<https://docs.mongodb.com/compass>`__, or the :atlas:`MongoDB Atlas Data
Explorer </data-explorer/>`.

To update a user's custom user data with MongoDB Data Access, edit the
MongoDB document whose user ID field contains the user ID of the user.
The following example uses :term:`MongoDB Data Access
<android-mongodb-data-access>` to update the ``favoriteColor`` field of
the the document containing the user ID of the currently logged in user
in the custom user data collection:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin
         :emphasize-lines: 13-32
         
         Realm.init(this) // context, usually an Activity or Application
         val appID = "<your app ID>" // replace this with your App ID
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         val anonymousCredentials: Credentials = Credentials.anonymous()

         val user: User? = null
         app.loginAsync(anonymousCredentials) {
            if (it.isSuccess) {
                user = app.currentUser()

                val mongoClient : MongoClient =
                    user.getMongoClient("<mongodb service name for custom user data cluster>")!!
                val mongoDatabase : MongoDatabase =
                    mongoClient.getDatabase("<custom user data database>")!!
                val mongoCollection : MongoCollection<Document> =
                    mongoDatabase.getCollection("<custom user data cluster>")!!

                mongoCollection.updateOne(
                    Document("<user ID field>", user.id), Document("favoriteColor", "cerulean"))
                    .getAsync() {
                        if (it.isSuccess) {
                            if (it.get().modifiedCount == 1L) {
                                Log.v("EXAMPLE", "Updated custom user data document.")
                            } else {
                                Log.v("EXAMPLE", "Could not find custom user data document to update.")
                            }
                        } else {
                            Log.e("EXAMPLE", "Unable to update custom user data. Error: ${it.error}")
                        }
                }
            } else {
                Log.e("EXAMPLE", "Failed to log in anonymously: ${it.error}")
            }
         }

   .. tab::
      :tabid: java

      .. code-block:: java
         :emphasize-lines: 12-31

         Realm.init(this); // context, usually an Activity or Application
         String appID = "<your app ID>"; // replace this with your App ID
         App app = new App(new AppConfiguration.Builder(appID)
                .build());

         Credentials credentials = Credentials.anonymous();

         app.loginAsync(credentials, it -> {
            if (it.isSuccess()) {
                User user = app.currentUser();

                MongoClient mongoClient =
                    user.getMongoClient("<mongodb service name for custom user data cluster>");
                MongoDatabase mongoDatabase =
                    mongoClient.getDatabase("<custom user data database>");
                MongoCollection<Document> mongoCollection =
                    mongoDatabase.getCollection("<custom user data cluster>");

                mongoCollection.updateOne(
                    new Document("<user ID field>", user.getId()), new Document("favoriteColor", "cerulean"))
                    .getAsync(result -> {
                        if (result.isSuccess()) {
                            if (result.get().getModifiedCount() == 1L) {
                                Log.v("EXAMPLE", "Updated custom user data document.");
                            } else {
                                Log.v("EXAMPLE", "Could not find custom user data document to update.");
                            }
                        } else {
                            Log.e("EXAMPLE", "Unable to update custom user data. Error: " + result.getError().toString());
                        }
                });
            } else {
                Log.e("EXAMPLE", "Failed to log in anonymously:" + it.getError().toString())
            }
         }

You can determine the ``id`` of a user through either the ``User``
object of the user once logged in or via the :guilabel:`Users` tab of
the :guilabel:`Users` left sidebar entry of the {+ui+}.

Summary
-------

- You can use custom user data to store arbitrary information about your application users.

- {+service+} stores custom user data as a document in a MongoDB collection determined by your application configuration.

- {+service+} associates custom user data with a user based on the value of the user ID field.

- The custom user data field of the user object is read-only. You can modify custom user data using :ref:`MongoDB Data Access
  <android-mongodb-data-access>` or :ref:`Sync <android-sync-data>`.
