.. _android-authenticate:

===================
Authenticate a User
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} provides an API for authenticating users using any enabled
authentication provider. Instantiate a ``Credentials`` object and pass
it to either of the  ``app.login()`` or ``app.loginAsync()`` methods to
authenticate a user login and create a ``User`` object. Each
authentication provider corresponds to a static helper method used to
instantiate ``Credentials`` objects using that authentication providers.
See the table below to find the method that instantiates the
``Credentials`` instance for your authenticatino provider:

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Authentication Provider
     - Credentials Generation Method

   * - :ref:`Anonymous <android-login-anonymous>`
     - ``Credentials.anonymous()``

   * - :ref:`Email/Password <android-login-email-password>`
     - ``Credentials.emailPassword(String email, String password)``

   * - :ref:`API Key <android-login-api-key>`
     - ``Credentials.apiKey(String key)``

   * - :ref:`Custom Function <android-login-custom-function>`
     - ``Credentials.customFunction(String functionName, Object... arguments)``

   * - :ref:`Custom JWT <android-login-custom-jwt>`
     - ``Credentials.jwt(String jwtToken)``

   * - :ref:`Google OAuth <android-login-google>`
     - ``Credentials.google(String googleToken)``

   * - :ref:`Facebook OAuth <android-login-facebook>`
     - ``Credentials.facebook(String accessToken)``
   
   * - :ref:`Sign-in With Apple <android-login-apple>`
     - ``Credentials.apple(String idToken)``

.. _android-login:

Log In
------

You can authenticate users with either the ``app.login()`` or
``app.loginAsync()`` methods of your application's instance of the
``io.realm.mongodb.App`` class. While the ``app.login()`` method blocks
code execution in the calling thread until the supplied credentials have
either succeeded or failed to authenticate a user, the
``app.loginAsync()`` method allows execution to continue, handling
success or failure with a callback function that is guaranteed to
execute on the same thread that called ``app.loginAsync()``.

If successful, the ``app.login()`` method returns a ``User`` object.
In the event of a failure, the ``app.login()`` method throws an
exception of type ``ObjectServerError``.

Pass a callback to the ``app.loginAsync()`` method to handle success or
failure. This callback accepts a single parameter of type
``App.Result``. The ``isSuccess()`` method of the ``App.Result`` object
passed to the callback returns a boolean that indicates whether the
operation succeeded. In the event of a failure,  you can view the
error that caused the failure using the ``getError()`` method.

.. _android-login-anonymous:

Anonymous
~~~~~~~~~

The :doc:`anonymous authentication provider </authentication/anonymous>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
``Credentials.anonymous()`` and then pass the generated credential to
``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin
         
         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())
         
         val credentials: Credentials = Credentials.anonymous()
         
         val user: User? = null
         app.loginAsync(credentials) {
            if (it.isSuccess) {
                Log.v(TAG, "Successfully authenticated anonymously.")
                user = app.currentUser()
            } else {
                Log.e(TAG, it.error.toString())
            }
         }

.. _android-login-email-password:

Email/Password
~~~~~~~~~~~~~~

The :doc:`Email/Password authentication provider </authentication/email-password>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling ``Credentials.emailPassword()``
with the user's email and password. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         val emailPasswordCredentials: Credentials = Credentials.emailPassword("<email>", "<password>")
         
         val user: User? = null
         app.loginAsync(emailPasswordCredentials) {
            if (it.isSuccess) {
                Log.v(TAG, "Successfully authenticated anonymously.")
                user = app.currentUser()
            } else {
                Log.e(TAG, it.error.toString())
            }
         }

.. .. _android-login-api-key:

.. API Key
.. ~~~~~~~

.. The :doc:`API Key authentication provider </authentication/api-key>`
.. enables users to log in to your application with an API Key generated
.. automatically in the client SDK. To log in with API Key authentication, create an
.. API Key credential by calling ``Credentials.apiKey()``
.. with an API Key. Then pass the generated credential
.. to ``app.login()`` or ``app.loginAsync()``.

.. .. tabs-realm-languages::
   
..    .. tab::
..       :tabid: kotlin
      
..       .. code-block:: kotlin

..          Realm.init(this)
..          val appID = "<your app ID>"
..          val app: App = App(AppConfiguration.Builder(appID)
..                     .build())

..          val apiKeyCredentials: Credentials = Credentials.apiKey("<key>")

..          app.loginAsync(apiKeyCredentials) {
..             if (it.isSuccess) {
..                   Log.v(TAG, "Successfully authenticated using an API Key.")
..                   val user: User? = app.currentUser()
..             } else {
..                   Log.e(TAG, "Error logging in: ${it.error.toString()}")
..             }
..          }

.. .. _android-login-custom-function:

.. Custom Function
.. ~~~~~~~~~~~~~~~

.. The :doc:`Custom Function authentication provider </authentication/custom-function>`
.. enables users to log in to your application using a
.. :ref:`Realm Function <function>` defined in your {+app+}. To log in with custom function authentication, create a
.. custom function credential by calling ``Credentials.customFunction()``
.. with the custom function name and arguments. Then pass the generated credential
.. to ``app.login()`` or ``app.loginAsync()``.

.. .. tabs-realm-languages::
   
..    .. tab::
..       :tabid: kotlin
      
..       .. code-block:: kotlin

..          Realm.init(this)
..          val appID = "<your app ID>"
..          val app: App = App(AppConfiguration.Builder(appID)
..                     .build())

..          val customFunctionCredentials: Credentials = Credentials.customFunction("<function name>", "<arg1>", "<arg2>")

..          app.loginAsync(customFunctionCredentials) {
..             if (it.isSuccess) {
..                 Log.v(TAG, "Successfully authenticated using a custom function.")
..                 val user: User? = app.currentUser()
..             } else {
..                 Log.e(TAG, "Error logging in: ${it.error.toString()}")
..             }
..          }

.. _android-login-custom-jwt:

Custom JWT
~~~~~~~~~~

The :doc:`Custom JWT authentication provider </authentication/custom-jwt>`
enables users to log in to your application with a custom JSON Web Token.
To log in with custom JWT authentication, create an
email/password credential by calling ``Credentials.jwt()``
with your custom JWT. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         // fetch JWT from custom provider

         val customJWTCredentials: Credentials = Credentials.jwt("<token>")

         app.loginAsync(customJWTCredentials) {
            if (it.isSuccess) {
                  Log.v(TAG, "Successfully authenticated using a custom JWT.")
                  val user: User? = app.currentUser()
            } else {
                  Log.e(TAG, "Error logging in: ${it.error.toString()}")
            }
         }

.. _android-login-facebook:

Facebook OAuth
~~~~~~~~~~~~~~

The :doc:`Facebook OAuth authentication provider </authentication/facebook>`
enables users to log in to your application with a custom token provided
by Facebook. To log in with Facebook OAuth authentication, create a
Facebook OAuth credential by calling ``Credentials.facebook()``
with the token provided by Facebook. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         // fetch facebook token using Facebook SDK

         val facebookCredentials: Credentials = Credentials.facebook("<token>")

         app.loginAsync(facebookCredentials) {
            if (it.isSuccess) {
                  Log.v(TAG, "Successfully authenticated using Facebook OAuth.")
                  val user: User? = app.currentUser()
            } else {
                  Log.e(TAG, "Error logging in: ${it.error.toString()}")
            }
         }

.. _android-login-google:

Google OAuth
~~~~~~~~~~~~

The :doc:`Google OAuth authentication provider </authentication/google>`
enables users to log in to your application with a custom token provided
by Google. To log in with Google OAuth authentication, create a
Google OAuth credential by calling ``Credentials.google()``
with the token provided by Google. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         // fetch google token using Google SDK

         val googleCredentials: Credentials = Credentials.google("<token>")

         app.loginAsync(googleCredentials) {
            if (it.isSuccess) {
                  Log.v(TAG, "Successfully authenticated using Google OAuth.")
                  val user: User? = app.currentUser()
            } else {
                  Log.e(TAG, "Error logging in: ${it.error.toString()}")
            }
         }

.. _android-login-apple:

Sign-in with Apple
~~~~~~~~~~~~~~~~~~

The :doc:`Sign-in with Apple authentication provider </authentication/apple>`
enables users to log in to your application with a custom token provided
by Apple. To log in with Sign-in with Apple authentication, create a
Sign-in with Apple credential by calling ``Credentials.apple()``
with the token provided by Apple. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         Realm.init(this)
         val appID = "<your app ID>"
         val app: App = App(AppConfiguration.Builder(appID)
                .build())

         // fetch apple token using Apple SDK

         val appleCredentials: Credentials = Credentials.apple("<token>")

         app.loginAsync(appleCredentials) {
            if (it.isSuccess) {
                  Log.v(TAG, "Successfully authenticated using Sign-in with Apple.")
                  val user: User? = app.currentUser()
            } else {
                  Log.e(TAG, "Error logging in: ${it.error.toString()}")
            }
         }

.. _android-logout:

Log Out
-------

You can log out any user, regardless of the authentication provider used
to log in, using the ``user.logOut()`` or ``user.logOutAsync()``
methods. This:

- deletes locally stored user credentials from the device

- immediately halts any synchronization to and from the user's {+realm+}s

- marks the user's {+realm+}s for deletion the next time the app restarts

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user?.logOutAsync {
            if (it.isSuccess) {
                Log.v(TAG, "Successfully logged out.")
            } else {
                Log.e(TAG, it.error.toString())
            }
         }
