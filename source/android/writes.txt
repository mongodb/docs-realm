.. _android-realm-database-writes:

======
Writes
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+client-database+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+client-database+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note::
   
   All writes must happen in a transaction.

A {+realm+} allows only one open transaction at a time. {+client-database+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+client-database+} either
**commits** it or **cancels** it:

- When {+client-database+} **commits** a transaction, {+client-database+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+client-database+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+client-database+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _android-acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} guarantees that transactions are :term:`ACID`
compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

.. _android-open-a-transaction:

Run a Transaction
-----------------

{+client-database+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+client-database+} runs
it, {+client-database+} cancels the transaction. Otherwise, {+client-database+} commits
the transaction immediately after the callback.

.. important:: Concurrency Concerns

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync>`, avoid opening transactions on the
   UI thread altogether, as {+client-database+} processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   :java-sdk:`executeTransaction() <io/realm/Realm.html#executeTransaction-io.realm.Realm.Transaction->`
   or :java-sdk:`executeTransactionAsync() <io/realm/Realm.html#executeTransactionAsync-io.realm.Realm.Transaction->`.
   If the code in the callback throws an exception, {+client-database+}
   cancels the transaction. Otherwise, {+client-database+} commits the
   transaction.

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.run-a-transaction.kt
            :language: kotlin

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.run-a-transaction.java
            :language: java


.. _android-create-an-object:

Create an Object
----------------

In general, instantiate :ref:`{+service-short+} objects
<android-realm-objects>` as you would any other object. In a
transaction, you can add the object to the {+realm+} if the
{+realm+}'s :ref:`schema <android-realm-schema>` includes the object
type. When you add an instance to the {+realm+}, it becomes
*managed* by that {+realm+}.

With the Java and JavaScript SDKs, instead use the {+realm+}'s
factory method in a transaction to instantiate your class.
This automatically inserts the instance into the {+realm+}.

.. example::

   This code demonstrates how to create an object with 
   :java-sdk:`createObject() <io/realm/Realm.html#createObject-java.lang.Class-java.lang.Object->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.create-an-object.kt
            :language: kotlin
            :emphasize-lines: 3

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.create-an-object.java
            :language: java
            :emphasize-lines: 3


.. _android-update:

Update an Object
----------------

Within a transaction, you can update a {+service-short+} object the same
way you would update any other object in your language of
choice. Just assign a new value to the property or update
the property.

.. example::

   This code changes the turtle's name to "Archibald" and
   sets Archibald's age to 101 by assigning new values to properties:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.update-an-object.kt
            :language: kotlin
            :emphasize-lines: 6,7

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.update-an-object.java
            :language: java
            :emphasize-lines: 6,7


.. _android-upsert:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** is a write operation that either inserts a new object
with a given primary key or updates an existing object that already has
that primary key. We call this an upsert because it is an "**update** or
**insert**" operation. This is useful when an object may or may not
already exist, such as when bulk importing a dataset into an existing
{+realm+}. Upserting is an elegant way to update existing entries while
adding any new entries.

.. example::

   This code demonstrates how to upsert an object with
   {+realm+}. We create a new turtle enthusiast named "Drew" and then
   update their name to "Andy" using :java-sdk:`insertOrUpdate()
   <io/realm/Realm.html#insertOrUpdate-io.realm.RealmModel->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.upsert-an-object.kt
            :language: kotlin
            :emphasize-lines: 14-16

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.upsert-an-object.java
            :language: java
            :emphasize-lines: 14-16


.. _android-batch-update:

Update a Collection
~~~~~~~~~~~~~~~~~~~

{+client-database+} supports collection-wide updates. A collection update
applies the same update to specific properties of several
objects in a collection at once.

.. example::

   The following code demonstrates how to update a
   collection. Thanks to the :ref:`implicit inverse
   relationship <android-inverse-relationship>` between the Turtle's
   ``owner`` property and the TurtleEnthusiast's ``turtles`` property,
   {+client-database+} automatically updates Josephine's list of turtles
   when you use :java-sdk:`setObject()
   <io/realm/RealmResults.html#setObject-java.lang.String-io.realm.RealmModel->`
   to update the "owner" property for all turtles in the collection.

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.update-a-collection.kt
            :language: kotlin
            :emphasize-lines: 11,12

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.update-a-collection.java
            :language: java
            :emphasize-lines: 9,10


.. _android-delete:

Delete an Object
----------------

To delete an object from a {+realm+}, use either the dynamic or static
versions of the ``deleteFromRealm()`` method of a :java-sdk:`RealmObject
<io/realm/RealmObject.html>` subclass.

.. important:: Do not use objects after delete

   {+client-database+} throws an error if you try to use an object after
   it has been deleted.

.. example::

   The following code shows how to delete one object from
   its {+realm+} with :java-sdk:`deleteFromRealm()
   <io/realm/RealmObject.html#deleteFromRealm-->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-an-object.kt
            :language: kotlin
            :emphasize-lines: 6

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-an-object.java
            :language: java
            :emphasize-lines: 4


.. _android-delete-collection:

Delete a Collection
~~~~~~~~~~~~~~~~~~~

To delete an object from a {+realm+}, use the ``deleteAllFromRealm()``
method of the :java-sdk:`RealmResults <io/realm/RealmResults.html>`
instance that contains the objects you would like to delete. You can
filter the ``RealmResults`` down to a subset of objects using the
:java-sdk:`where() <io/realm/Realm.html#where-java.lang.Class->` method.

.. example::

   The following code demonstrates how to delete a
   collection from a {+realm+} with :java-sdk:`deleteAllFromRealm()
   <io/realm/RealmResults.html#deleteAllFromRealm-->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-a-collection.kt
            :language: kotlin
            :emphasize-lines: 6

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-a-collection.java
            :language: java
            :emphasize-lines: 4


.. _android-cascading-delete:

Cascading Delete
~~~~~~~~~~~~~~~~

Sometimes, you have :ref:`dependent objects
<android-client-relationships>` that you want to delete when
you delete the parent object. We call this a **cascading
delete**. {+client-database+} does not delete the dependent
objects for you. If you do not delete the objects yourself,
they will remain orphaned in your {+realm+}. Whether or not
this is a problem depends on your application's needs.

Currently, the best way to delete dependent objects is to
iterate through the dependencies and delete them before
deleting the parent object.

.. example::

   The following code demonstrates how to perform a
   cascading delete by first deleting all of Ali's turtles,
   then deleting Ali:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.cascading-deletes.kt
            :language: kotlin
            :emphasize-lines: 6

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.cascading-deletes.java
            :language: java
            :emphasize-lines: 5

.. _android-delete-all-of-object:

Delete All Instances of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} supports deleting all instances of a :ref:`{+service-short+} type
<android-realm-objects>` from a {+realm+}.

.. example::

   The following code demonstrates how to delete all
   Turtle instances from a {+realm+} with :java-sdk:`delete()
   <io/realm/Realm.html#delete-java.lang.Class->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-all-instances-of-a-type.kt
            :language: kotlin
            :emphasize-lines: 2

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-all-instances-of-a-type.java
            :language: java
            :emphasize-lines: 2


.. _android-delete-all:

Delete Everything
~~~~~~~~~~~~~~~~~

It is possible to delete all objects from the {+realm+}. This
does not affect the schema of the {+realm+}. This is useful for
quickly clearing out your {+realm+} while prototyping.

.. example::

   The following code demonstrates how to delete everything
   from a {+realm+} with :java-sdk:`deleteAll()
   <io/realm/Realm.html#deleteAll-->`:

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-all.kt
            :language: kotlin
            :emphasize-lines: 2

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/code/start/WritesTest.codeblock.delete-all.java
            :language: java
            :emphasize-lines: 2


Summary
-------

- {+client-database+} handles writes in terms of **transactions**. All writes must occur in a transaction.
- {+client-database+} transactions are ACID compliant.
- To write to {+client-database+}, define the transaction in a callback function that you pass to the {+realm+}'s ``write`` method.
