.. _android-create-manage-api-keys:

=============================
Create & Manage User API Keys
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

User API keys are generated for specific application users by the client
SDKs. You can allow devices or services to communicate with {+service+}
on behalf of a user by associating a unique user API key with each
device or service.

User API keys are always associated with a user object created by another
non-anonymous authentication provider. Each user can associate up to 20
user keys with their account.

.. note::

   User API keys are not the same as **server API keys**, which allow a
   user or service to directly authenticate with {+service+} using the
   :ref:`API Key authentication provider <android-login-api-key>`. To learn
   more about server API keys, see :ref:`API Key Authentication
   <api-key-authentication>`.

.. _android-api-key-create-user-key:

Create a User API Key
---------------------

To create a new user API key, call the ``createApiKey()`` or
``createApiKeyAsync()`` methods of a logged in user's ``apiKeyAuth``
instance. The user API key will be associated with the logged in user
and can be used to interact with {+service+} on their behalf. You cannot
create user API keys for anonymous users.

.. include:: /includes/note-store-user-api-key-value.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.createApiKeyAsync("<name-of-the-api-key>") {
            if (it.isSuccess) {
               Log.v(TAG, "Successfully created the API Key: " + it.get().value)
            } else {
               Log.e(TAG, "Error creating API key: ", it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().createApiKeyAsync("<name-of-the-api-key>", result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully created API key: " + result.get().getValue());
            } else {
               Log.e(TAG, "Error creating API key: " + result.getError());
            }
         });

.. _android-api-key-look-up-user-key:

Look up a User API Key
----------------------

To get a list of all user API keys associated with the logged in user,
call the ``fetchApiKeys()`` or ``fetchApiKeysAsync()`` methods of a
logged in user's ``apiKeyAuth`` instance.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.fetchAllApiKeys() {
            if (it.isSuccess) {
               Log.v(TAG, "Successfully fetched API keys: " + Arrays.toString(it.get().toTypedArray()))
            } else {
               Log.e(TAG, "Error fetching API keys: " + it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().fetchAllApiKeys(result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully fetched API keys: " + Arrays.toString(it.get().toTypedArray()));
            } else {
               Log.e(TAG, "Error fetching API keys: " + result.getError());
            }
         });

To look up a specific user API key for the logged in user, pass the
key's id to the ``fetchApiKey`` or ``fetchApiKeyAsync`` methods.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.fetchApiKeyAsync(<api-key-id>) {
            if (it.isSuccess) {
               Log.e(TAG, "Successfully fetched API key: " + it.get())
            } else {
               Log.e(TAG, "Error fetching API key: " + it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().fetchApiKeyAsync(api-key-id>, result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully fetched API key: " + result.get());
            } else {
               Log.e(TAG, "Error fetching API key: " + result.getError());
            }
         });

.. _android-api-key-enable-disable:

Enable or Disable a User API Key
--------------------------------

To disable a specific user API key without deleting it, pass the
key's id to the  ``disableApiKey()`` or ``disableApiKeyAsync()`` methods
of a logged in user's ``apiKeyAuth`` instance.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.disableApiKeyAsync(<api-key-id>) {
            if (it.isSuccess) {
               Log.v(TAG, "Successfully disabled API Key: " + it.get())
            } else {
               Log.e(TAG, "Error disabling API key: ", it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().disableApiKeyAsync(<api-key-id>, result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully disabled API key: " + result.get();
            } else {
               Log.e(TAG, "Error disabling API key: " + result.getError());
            }
         });


To enable a specific user API key that was previously disabled, pass the
key's id to the ``enableApiKey()`` or ``enableApiKeyAsync()`` methods of
a logged in user's ``apiKeyAuth`` instance.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.enableApiKeyAsync(<api-key-id>) {
            if (it.isSuccess) {
               Log.v(TAG, "Successfully enabled API Key: " + it.get())
            } else {
               Log.e(TAG, "Error enabling API key: ", it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().enableApiKeyAsync(<api-key-id>, result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully enabled API key: " + result.get();
            } else {
               Log.e(TAG, "Error enabling API key: " + result.getError());
            }
         });

.. _android-api-key-delete:

Delete a User API Key
---------------------

To permanently remove a specific user API key, pass the
key's id to the ``deleteApiKey()`` or ``deleteApiKeyAsync()`` methods of
a logged in user's ``apiKeyAuth`` instance.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin
      
      .. code-block:: kotlin

         user.apiKeyAuth?.deleteApiKeyAsync(<api-key-id>) {
            if (it.isSuccess) {
               Log.v(TAG, "Successfully deleted API Key: " + it.get())
            } else {
               Log.e(TAG, "Error deleting API key: ", it.error)
            }
         }
   
   .. tab::
      :tabid: java
      
      .. code-block:: java

         user.getApiKeyAuth().disableApiKeyAsync(<api-key-id>, result -> {
            if (result.isSuccess()) {
               Log.v(TAG, "Successfully deleted API key: " + result.get();
            } else {
               Log.e(TAG, "Error deleting API key: " + result.getError());
            }
         });
