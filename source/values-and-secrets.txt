.. _values-and-secrets:

================
Values & Secrets
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------


:ref:`{+values+} <app-value>` and :ref:`{+secrets+}
<app-secret>` are static, server-side constants that you can
access or link to from other components of your application.
You can :doc:`access {+values-short+}
</values-and-secrets/access-a-value>` directly from
:doc:`{+functions+} </functions>` and :doc:`Rule expressions
</services/json-expressions>` and link {+secrets-short+} to
configuration values for :doc:`authentication providers
</authentication/providers>`.

Concepts
--------

.. _app-value:

Value
~~~~~

A **value** is a named reference to a piece of static data
stored by {+backend+} that you can access in :doc:`{+functions+}
</functions>` and :doc:`{+rules+} </services/json-expressions>`.
Values provide an alternative to hardcoding configuration constants
directly into your {+functions-short+} and {+rules-short+}. In other
words, {+value-short+} allow you to separate deployment-specific
configuration data from the business logic of your app.

{+values+} can resolve to two types of data:

- A *plain text* {+value-short+} resolves to a regular JSON object,
  array, or string that you define.

- A *secret* {+value-short+} resolves to the value of a
  :ref:`{+secret-short+} <app-secret>`.

.. _app-secret:

Secret
~~~~~~

A **{+secret-short+}** is a private value that is stored on the
{+backend+} backend, hidden from users, and not included in exported
applications. {+secrets-short+} are useful for storing sensitive
information such as an API key or an internal identifier.

You cannot directly read the value of a {+secret-short+} after
defining it. Instead, you link to the {+secret-short+} by name in
authentication provider and service configurations. If you
need to access the {+secret-short+} from a {+function-short+} or
{+rule-short+}, you can link the {+secret-short+} to a
:ref:`{+value-short+} <app-value>`.

Related Content
---------------

Configuration Guides
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Define a Value </values-and-secrets/define-a-value>`
     - Learn how to store JSON data in a static, server-side {+value+}.

   * - :doc:`Define a Secret </values-and-secrets/define-a-secret>`
     - Learn how to securely store sensitive data such as API keys and
       client {+secrets+}.

Usage Guides
~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Access a Value </values-and-secrets/access-a-value>`
     - Learn how to reference the data stored in a {+value+} from a
       {+function-short+} or {+rule-short+} expression.

Summary
-------

- {+values+} and {+secrets+} are server-side constants you can use in
  your {+instance+}.

- {+values+} allow you to separate deployment-specific configuration
  data from the business logic of your app.

- {+secrets+} store sensitive data. You cannot export or directly read a
  {+secret-short+}. Instead, you access a {+secret-short+} indirectly
  via a named {+value+}.
