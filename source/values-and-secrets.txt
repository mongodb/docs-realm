.. _values-and-secrets:

================
Values & Secrets
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------


:ref:`{+service-short+} Values <app-value>` and :ref:`{+service-short+} Secrets
<app-secret>` are static, server-side constants that you can
access or link to from other components of your application.
You can :doc:`access Values
</values-and-secrets/access-a-value>` directly from
:doc:`{+service-short+} Functions </functions>` and :doc:`Rule expressions
</services/json-expressions>` and link Secrets to
configuration values for :doc:`authentication providers
</authentication/providers>`.

Concepts
--------

.. _app-value:

Value
~~~~~

A **value** is a named reference to a piece of static data
stored by {+backend+} that you can access in :doc:`{+service-short+} Functions
</functions>` and :doc:`{+service-short+} Rules </services/json-expressions>`.
Values provide an alternative to hardcoding configuration constants
directly into your Functions and Rules. In other
words, Value allow you to separate deployment-specific
configuration data from the business logic of your app.

{+service-short+} Values can resolve to two types of data:

- A *plain text* Value resolves to a regular JSON object,
  array, or string that you define.

- A *secret* Value resolves to the value of a
  :ref:`Secret <app-secret>`.

.. _app-secret:

Secret
~~~~~~

A **Secret** is a private value that is stored on the
{+backend+} backend, hidden from users, and not included in exported
applications. Secrets are useful for storing sensitive
information such as an API key or an internal identifier.

You cannot directly read the value of a Secret after
defining it. Instead, you link to the Secret by name in
authentication provider and service configurations. If you
need to access the Secret from a Function or
Rule, you can link the Secret to a
:ref:`Value <app-value>`.

A Secret value has a maximum character length of 500 characters.

Related Content
---------------

Configuration Guides
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Define a Value </values-and-secrets/define-a-value>`
     - Learn how to store JSON data in a static, server-side {+service-short+} Value.

   * - :doc:`Define a Secret </values-and-secrets/define-a-secret>`
     - Learn how to securely store sensitive data such as API keys and
       client {+service-short+} Secrets.

Usage Guides
~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Access a Value </values-and-secrets/access-a-value>`
     - Learn how to reference the data stored in a {+service-short+} Value from a
       Function or Rule expression.

Summary
-------

- {+service-short+} Values and {+service-short+} Secrets are server-side constants you can use in
  your {+app+}.

- {+service-short+} Values allow you to separate deployment-specific configuration
  data from the business logic of your app.

- {+service-short+} Secrets store sensitive data. You cannot export or directly read a
  Secret. Instead, you access a Secret indirectly
  via a named {+service-short+} Value.
