.. _expressions:
.. _json-expressions:
.. _rule-expressions:

================
Rule Expressions
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

A **rule expression** is a JSON document that you use to configure data access
in your application. For example, you can write a rule expression to control
whether a user can read or write to a given document or synced partition.

{+service-short+} evaluates expressions to boolean values and uses the result to
control your app's behavior and determine whether or not to allow specific user
actions.

Expression Syntax
-----------------

Each field name in an expression must be an :ref:`expansion <expansions>`, a
string that represents dynamic, runtime information, such as the logged in
:doc:`user </authentication>` that called an action (:json-expansion:`%%user`)
or the arguments that were passed the action (:json-expansion:`%%args`).

Expressions documents have the following general format:

.. code-block:: javascript

   {
     <field1>: <value1|expression1>,
     <field2>: <value2|expression2>,
     ...
   }

.. _embedded-expressions:

Embedded Expressions
~~~~~~~~~~~~~~~~~~~~

You can embed multiple expression documents in the fields of another expression
document to handle complex evaluation logic. {+service+} evaluates expressions
*depth-first, post-order*, i.e. it starts at the bottom of the expression tree
and works back to the root-level fields by evaluating each expression after all
of its embedded expressions.

.. example::

   This expression evaluates to ``true`` only if the number provided
   as the ``someNumber`` argument falls in a specific range.

   .. code-block:: json

      {
        "%%args.someNumber": {
           "%and": [
              { "$gt": 0 },
              { "$lte": 42 }
           ]
        }
      }

Multi-Field Expressions
~~~~~~~~~~~~~~~~~~~~~~~

When you have more than one field in an expression, that expression evaluates to
``true`` if and only if every field in the expression evaluates to true. In
other words, Realm treats multiple fields in a single expression as an "AND"
operation.

.. example::

   This third-party service rule expression evaluates to ``true`` only if both
   the ``url`` argument was provided *and* the ``body.userId`` argument matches
   the id of the user that called the action.

   .. code-block:: json

      {
        "%%args.url": { "%exists": true },
        "%%args.body.userId": "%%user.id"
      }

Expression Evaluation
---------------------

{+service+} evaluates expressions by first replacing expansions with their
runtime values and then evaluating each field of the expanded expression
document to a boolean expression. If all fields in an expression evaluate to
``true``, the expression also evaluates to ``true``.

Expression fields evaluate based on the following rules:

- If an expanded field name matches its value, it evaluates to ``true``.

- If a field's value is an embedded expression, it evaluates to the
  same value as the embedded expression. See :ref:`embedded expressions
  <embedded-expressions>`.

.. note::

   If a rule does not explicitly use the :json-expansion:`%%args` or
   :json-expansion:`%%root` expansion, expression field names default to
   checking for arguments or document fields of the same name. For
   example, the expression ``{ "url": "https://www.example.com" }``
   defaults to evaluating the value against ``%%args.url`` in a service
   rule and ``%%root.url`` in a MongoDB rule.

.. _expansions:

Expression Expansions
---------------------

An expression expansion is a variable that represents a dynamic, runtime value
in your app. Depending on the rule, these might represent the user that issued a
given request, the metadata for that request, a document that the user is trying
to access, and more.

Expansion variables are denoted by strings that begin with two percent signs
(``%%``).

General Logic
~~~~~~~~~~~~~

You can use the following expansions in any expression to represent boolean
values.

.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%true
     - boolean
     - Always evaluates to ``true``. This is useful when comparing with
       a function (:json-operator:`%function`) that returns a boolean
       value.

   * - .. json-expansion:: %%false
     - boolean
     - Always evaluates to ``false``. This is useful when comparing with
       a function (:json-operator:`%function`) that returns a boolean
       value.

.. _expansions-application:

Application Components
~~~~~~~~~~~~~~~~~~~~~~

You can use the following expansions in any expression to access components of
your application.

.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%values
     - Object
     - An object that includes all :doc:`global values </values-and-secrets>`.
       You can access a specific value from this document. Each property of the
       object maps the name of a value to its corresponding JSON or a secret.
       
       .. example::
          
          The following JSON expression evaluates to ``true`` if the current
          user's ``id`` value is listed in the ``admin_ids`` :doc:`value
          </values-and-secrets>`:
          
          .. code-block:: json
             
             {
               "%%user.id": { "%in": "%%values.admin_ids" }
             }
   
   * - .. json-expansion:: %%environment
     - Object
     
     - An object that represents the current environment as well as its
       :ref:`environment values <environment-values>`. Each property of the
       object maps the name of an environment value to its value in the current
       environment.
       
       .. example::
          
          The following is a rule expression that evaluates to ``true`` if the
          current environment is ``"production"`` and the ``"baseUrl"``
          environment value is defined:
          
          .. code-block:: json
          
             {
               "%%environment.tag": "production",
               "%%environment.values.baseUrl": { "%exists": true }
             }

   * - .. json-expansion:: %%request
     - Document
     - A document that includes :doc:`context request </functions/context>`
       information about the external HTTP request that triggered the function
       call.


.. _user-object:
.. _expansions-user:

Authenticated User
~~~~~~~~~~~~~~~~~~

The :json-expansion:`%%user` expansion represents the
currently authenticated :doc:`user </authentication>` and
allows you to access their information. You can use this
expansion to create expressions that evaluate based on the
user that initiated a request or action.

.. list-table::
   :header-rows: 1
   :widths: 15 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%user
     - Document
     - A document containing information and data about the
       authenticated :doc:`user </authentication>`.

   * - .. json-expansion:: %%user.id
     - String
     - The authenticated user's id.

   * - .. json-expansion:: %%user.type
     - String

     - The type of user that initiated the request. Evaluates to
       ``"server"`` for :doc:`API key </authentication/api-key>` users
       and ``"normal"`` for all other users.

   * - .. json-expansion:: %%user.custom_data
     - Document
     - The user's custom data. The exact contents vary depending on
       the :doc:`custom user data </users/enable-custom-user-data/>`
       available.

       .. example::

          .. code-block:: json

             "custom_data": {
               "primaryLanguage": "English",
             }

   * - .. json-expansion:: %%user.data
     - Document
     - The user's metadata. The exact contents will vary depending on
       the :doc:`authentication provider </authentication/providers>`
       identities associated with the user.

       .. example::

          .. code-block:: json

             "data": {
               "name": "Joe Mango",
               "email": "joe.mango@example.com"
             }

   * - .. json-expansion:: %%user.identities
     - Array of Documents

     - A list of all :doc:`authentication provider
       </authentication/providers>` identities associated with the user.
       An identity consists of a unique identifier given to a user by an
       authorization provider along with the provider's type:

       .. example::

          .. code-block:: json

             "identities": [
               {
                 "id": "5bce299457c70db9bd73b8-aajddbkuvomsvcrjjfoxs",
                 "providerType": "local-userpass"
               }
             ]

.. example::

   The following is a MongoDB role's Apply When expression
   that evaluates to ``true`` only if a document's ``owner_id`` and
   ``owner_name`` values match the values of ``%%user.id`` and
   ``%%user.data.name``:

   .. code-block:: javascript

      {
        "owner_id": "%%user.id",
        "owner_name": "%%user.data.name"
      }

.. _mongodb-expansions:

MongoDB Documents
~~~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`rule expressions <expressions>`
and :ref:`schema <schemas>` validation expressions:

.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%this
     - any
     - The value of a particular field as it exists at the end of a database operation.

   * - .. json-expansion:: %%prev
     - any

     - The value of a particular field before it is changed by a write operation.

   * - .. json-expansion:: %%root
     - Document
     - The full document as it exists at the end of a database operation.

   * - .. json-expansion:: %%prevRoot
     - Document
     - The full document before it is changed by a write operation.

.. example::

   The following is a MongoDB schema validation expression that
   evaluates to ``true`` if either the document previously existed (i.e.
   the action is not an insert) or the document's ``status`` field has a
   value of ``"new"``:

   .. code-block:: javascript

      {
        "%or": [
          { "%%prevRoot": { "%exists": %%true } },
          { "%%root.status": "new" }
        ]
      }

.. _service-expansions:

Service Expansions
~~~~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`third-party service rules
<service-rules>`:

.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%args
     - Document
     - A document containing the values passed as arguments to a
       :ref:`service action <service-actions>`. You can access each
       argument by its parameter name.

.. example::

   The following is a :doc:`Twilio service </services/twilio>` rule that
   evaluates to ``true`` if the sender's phone number (the ``from``
   argument) matches a specific value:

   .. code-block:: javascript

      {
        "%%args.from": "+15558675309"
      }

.. _sync-expansions:

Sync Expansions
~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`sync rules
<sync-rules>`:

.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%partition
     - any
     - The partition key value of the current partition being evaluated.

.. _expression-operators:

Expression Operators
--------------------

An expression operator represents an action or operation that Realm executes
whenever it evaluates an expression. Operators take in one or more arguments and
evaluate to a result value. The type and value of the result depends on the
operator you use and the arguments you pass to it.

Expression operators are denoted by strings that begin with a single percent
sign (``%``).

EJSON Conversion
~~~~~~~~~~~~~~~~

The following operators allow you to convert values between BSON/EJSON and JSON
representations:

.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %stringToOid

     - Converts a 12-byte or 24-byte string to an EJSON ``objectId`` object.

       .. example::

          .. code-block:: json
             
             {
               "_id": {
                 "%stringToOid": "%%user.id"
               }
             }

   * - .. json-operator:: %oidToString

     - Converts an EJSON ``objectId`` object to a string.

       .. example::

          .. code-block:: json
             
             {
               "string_id": {
                 "%oidToString": "%%root._id"
               }
             }

.. important:: No Inner Operations
   
   :json-operator:`%stringToOid` and :json-operator:`%oidToString` do not
   evaluate JSON operators. You must provide either a literal string/EJSON
   object or an expansion that evaluates to one.

Application Components
~~~~~~~~~~~~~~~~~~~~~~

The following operators allow you access other components of your Realm
application and are available in all expressions:

.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %function
     - Calls a :doc:`function </functions>` with the specified name and
       arguments. Evaluates to the value that the function returns.

       .. example::

          .. code-block:: json

             {
               "%%true": {
                 "%function": {
                   "name": "isEven",
                   "arguments": [42]
                 }
               }
             }

Existence Operators
~~~~~~~~~~~~~~~~~~~

The following operators allow you to determine if a value exists in a given
context and are available in all expressions:

.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %exists

     - Checks if the field it is assigned to has any value. Evaluates to
       a boolean representing the result.

       .. example::

          .. code-block:: json

             {
               "url": { "%exists": true }
             }

   * - .. json-operator:: %in

     - Checks a specified array of values to see if the array contains
       the value of the field that this operator is assigned to.
       Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             {
               "url": {
                 "%in": [
                   "https://www.example.com",
                   "https://www.mongodb.com"
                 ]
               }
             }

   * - .. json-operator:: %nin

     - Checks a specified array of values to see if the array does not
       contain the value of the field that this operator is assigned to.
       Evaluates to a boolean representing the result.


       .. example::

          .. code-block:: json

             {
               "url": {
                 "%nin": [
                   "https://www.example.com",
                   "https://www.mongodb.com"
                 ]
               }
             }

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The following operators allow you to compare values, including :ref:`expanded
<expansions>` values, and are available in all expressions:

.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %eq

     - Checks if the field it is assigned to is equal to the specified
       value. Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             { "score": { "%eq": 42 } }

   * - .. json-operator:: %ne

     - Checks if the field it is assigned to is not equal to the
       specified value. Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             { "numPosts": { "%ne": 0 } }

   * - .. json-operator:: %gt

     - Checks if the field it is assigned to is strictly greater than
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%gt": 0 } }

   * - .. json-operator:: %gte

     - Checks if the field it is assigned to is greater than or equal to
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%gte": 0 } }

   * - .. json-operator:: %lt

     - Checks if the field it is assigned to is strictly less than
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%lt": 0 } }

   * - .. json-operator:: %lte

     - Checks if the field it is assigned to is less than or equal to
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%lte": 0 } }
