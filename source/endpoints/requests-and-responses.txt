===================================
HTTPS Endpoint Requests & Responses
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

HTTPS Endpoints offer several ways to validate requests and customize
the response that {+service+} returns to the caller.

.. _request-validation-methods:
.. _endpoint-request-validation:

Request Validation Methods
--------------------------

There are two types of :guilabel:`Request Validation` for endpoints:
:ref:`Payload Signature Verification <endpoint-verify-payload-signature>`
and :ref:`Secret as a Query Parameter <endpoint-secret-query-parameter>`.

.. note::

   For maximum security, programmatically generate the ``secret`` string
   using a secure package such as the `Python secrets module
   <https://docs.python.org/3/library/secrets.html>`__. Make sure that
   you do not publish the secret or include it in your version control
   system.

.. _endpoint-secret-query-parameter:

Secret as a Query Parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :guilabel:`Require Secret as Query Param` request validation option
requires that incoming requests include the specified ``secret`` string
as a `query parameter <https://en.wikipedia.org/wiki/Query_string>`_
appended to the end of the URL.

.. _example-secret-query-parameter:

.. example::

   Consider a endpoint configured to use a :guilabel:`secret` value of
   ``12345``. All requests must be made to the endpoint URL appended with
   the secret as a query parameter:

   .. code-block:: none

      <endpoint URL>?secret=12345

   To test that requests to this URL are properly verified, we could run
   the following ``curl`` command:

   .. code-block:: none

      curl -H "Content-Type: application/json" \
           -d '{ "message": "HELLO" }' \
           -X POST '<endpoint URL>?secret=12345'

.. _endpoint-verify-payload-signature:

Payload Signature Verification
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The :guilabel:`Verify Payload Signature` request validation option
requires that incoming requests include a hexadecimal-encoded
:abbr:`HMAC (Hash-based Message Authentication Code)` SHA-256 hash
generated from the request body and ``secret`` string in the
``Endpoint-Signature`` header.

.. example::

   Consider the following endpoint request body and secret:

   .. code-block:: javascript

      const body = { "message":"MESSAGE" }
      const secret = 12345

   The following :doc:`{+service-short+} Function </functions>` generates the hash
   for this ``body`` and ``secret``:

   .. code-block:: javascript

      // Generate an HMAC request signature
      exports = function(secret, body) {
        // secret = the secret validation string
        // body = the endpoint request body
        return utils.crypto.hmac(EJSON.stringify(body), secret, "sha256", "hex");
      }
      // Returns: "828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862"

   The hash value must be assigned to the ``Endpoint-Signature`` HTTP
   request header on every request:

   .. code-block:: none

      Endpoint-Signature::sha256=<hex-encoded-hash>

   To test that the request was properly signed, we could run the
   following ``curl`` command:

   .. code-block:: shell

      curl -X POST \
        -H "Content-Type: application/json" \
        -H "Endpoint-Signature::sha256=828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862" \
        -d '{"message":"MESSAGE"}' \
        <endpoint URL>
