.. _dotnet-intro:

=============================
MongoDB Realm .NET SDK (Beta)
=============================

.. toctree::
   :titlesonly:
   :caption: Get Started

   Install Realm </dotnet/install>
   Quick Start </dotnet/quick-start>
   The Realm Data Model </dotnet/data-model>
   Realm Database </dotnet/database>
   MongoDB Realm </dotnet/mongodb-realm>
   Reference </dotnet/reference>

The {+service+} .NET SDK enables client applications written in C# for
the .NET, `UWP 
<https://docs.microsoft.com/en-us/windows/uwp/get-started/>`__,
and `Xamarin <https://dotnet.microsoft.com/apps/xamarin>`__
platforms to access data stored in local {+realms+} and
interact with {+backend+} services like Functions, MongoDB Data Access,
and authentication.

.. note::

   The Realm .NET SDK is currently in Beta.


.. _dotnet_supported-platforms:

Supported Platforms
-------------------
Realm supports the following platforms for developing Realm apps for iOS and 
Android devices:

- Xamarin.iOS for iOS 9 or later, using native UI or Xamarin Forms 
- Xamarin.Android for API level 16 or later, using native UI or Xamarin Forms 
- Xamarin.Mac for macOS 10.11 or later, using nativeUI or Xamarin Forms 
- .NET Framework 4.6.1 or later for Windows 8.1 or later 
- Universal Windows Platform applications using .NET Standard 2.0 or later (Fall Creators Update) 
- .NET Core 2.0 or later on the following:

  - Ubuntu 16.04 or later
  - Debian 8 or later
  - RHEL 7.1 or later
  - macOS 10.11 or later
  - Windows 8.1 or later

You can use the following development environments to build Realm apps with 
the .NET SDK:

- Visual Studio 2015 Update 2 or higher for Windows
- Visual Studio for Mac 7.0 or higher

Installation
------------

To learn how to add the {+service+} .NET SDK library as a dependency
to your application, see :ref:`Install Realm for .NET
<dotnet-install>`.

The Realm Data Model
--------------------

You can store a wide variety of data within {+realms+} stored on your
device, and if you enable :term:`{+sync+}`, updates to that data are available 
across multiple client devices. Data models are classes defined in your 
code and in {+realm+} schemas.

For information about the structure of data you can store in {+realms+},
see :ref:`Realms <dotnet-realms>`, :ref:`Objects
<dotnet-realm-objects>`, and :ref:`Relationships
<dotnet-client-relationships>`.

Building C# classes to represent the data you store in {+realm+} ensures data 
consistency when serializing/deserializing and makes working with the data 
simpler. 

Realm Database
--------------

Once you have defined the data model(s) for your application, you
can :ref:`write <dotnet-realm-database-writes>` and
:ref:`read <dotnet-realm-database-reads>` data to and from
your {+realm+}s.

To learn how to query for data in local {+realms+}, see
:ref:`Query Engine <dotnet-client-query-engine>`.

To learn about the results returned from {+realm+} queries, see
:ref:`Collections <dotnet-client-collections>`.

Mobile application development can be complicated by threading. To learn 
how to work with {+backend-short+} across threads in your application, 
see :ref:`Threading <dotnet-client-threading>`.

MongoDB Realm
-------------

The .NET SDK also connects your {+service-short+} client application
with your {+app+}'s backend services, including Functions, Services,
Webhooks, {+sync+}, and built-in third-party authentication.

To learn how to connect to a {+backend+} app to call
Functions, query data in an instance of {+atlas+}, and synchronize data
in {+realms+}, see :ref:`Call a Function <dotnet-call-a-function>`.

To learn how to handle schema updates in your client application, see
:ref:`Migrations <dotnet-client-migrations>`.
