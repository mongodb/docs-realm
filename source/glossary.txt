========
Glossary
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. glossary::
   :sorted:

   Atlas
      `MongoDB Atlas
      <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ is a hosted
      MongoDB service option in the cloud which requires no installation
      overhead and offers a free tier to get started. To learn more
      about Atlas, see the :atlas:`Atlas documentation <>`.

   App Services
      A cloud-hosted Backend-as-a-Service (BaaS) providing client-side
      functionality via the Realm SDK and an administrative interface
      via a website.

   MongoDB document
      See the MongoDB Manual's :manual:`definition of document
      </core/document/>`. For :term:`Apps <App>` that use
      :term:`Device Sync`, every MongoDB document in the App's
      :term:`data source` corresponds to a synced
      :term:`Realm object` in a client :term:`realm`.

   partition key
      A field within a :term:`MongoDB document` whose
      :term:`value <partition value>` determines which :term:`realm`
      contains the document's corresponding :term:`Realm object`.

   partition value
      A value of a :term:`App`'s :term:`partition key` field.
      Every unique partition value corresponds to a different
      :term:`realm` assignment.

   realm
      A collection of :term:`Realm objects <Realm object>` sharing the same
      :term:`partition key` value. Client instances subscribe to
      individual realms which passively synchronize changes as network
      availability allows.

   Realm
      The database whose docs you're reading.

   Realm client
      Anything that interacts with a :term:`App` using a
      :term:`Realm SDK`. Examples include phone apps, IoT devices,
      and server applications.

   Realm SDK
      A library used by a :term:`Realm client` to connect to a
      :term:`Realm` application or a local
      :term:`Realm Database`.

   App
      An instance of the :term:`Realm` Backend-as-a-Service that
      you can control from the App Services UI and interact with from SDKs. It is
      the central, server-side configuration that functions as the
      backend for your application. 

   Realm Database
      An :term:`ACID`-compliant offline-first object database for mobile
      devices. Using the :term:`Realm SDK`, you can query a local instance of
      the Realm Database and synchronize your local instance with data stored
      inside :term:`Atlas`. Offline-first design ensures that
      reads and writes query the local database instance only. When Device Sync
      is enabled, a separate background thread handles synchronization
      of changes between local realms and your
      :term:`synced Atlas cluster <synced cluster>`.
   
   Realm object
      An instance of a :term:`Realm object type`. An object that you
      can store in a :term:`realm` and :term:`sync <Device Sync>` with a
      :term:`synced Atlas cluster <synced cluster>`.

   Realm object type
      A declaration of an object structure that can be stored and synchronized
      using :term:`Realm`. This includes primitive fields, embedded lists,
      and object relations. Collectively referred to as the
      :term:`Realm data model`. You can customize Realm
      types for your App in two different ways: by altering or creating
      Object Schema definitions in the Realm SDK with
      :term:`Development Mode` enabled in your App or by creating or editing
      a :ref:`schema <schemas>` assigned to a collection in the App Services UI or
      :binary:`realm-cli`, which directly edits the App's
      :term:`Realm Schema`.

   Development Mode
      A toggle that, when enabled, automatically updates your 
      Realm Schema to match the :term:`Object Schema` used by 
      synced client applications. As the name suggests, this mode should not 
      be enabled for production use.

   GraphQL
      Open-source data query and manipulation language for APIs. Realm
      GraphQL supports reading and writing data as well as subscribing
      to data changes. An alternative to :term:`Realm Database` queries
      using the client's native query language.

   compaction
      Allocation and deallocation of data within a :term:`Realm Database`
      and/or exceeding the size of physical memory can lead to
      fragmentation on disk. Calling the ``compact`` method
      reorganizes internal data structures to reduce the storage
      overhead of local realms in the event of fragmentation.

   Schema Validation
      Rules for an instance of MongoDB that specify the form of documents
      that you can insert into each collection, including both fields
      and values.

   live objects
      Instances of :term:`Realm objects <Realm object>` that always
      reflect the state of the underlying object in the
      :term:`realm version` of the enclosing
      :term:`realm instance <realm instance>`. Implemented using
      :term:`zero-copy` objects that access object attributes via
      shallow pointers into memory-mapped data. You can subscribe to
      changes to any live object or collection of live objects,
      including realm instances.

   write transaction
      You can only write to a :term:`realm` during a write
      transaction. Beginning or committing a write transaction has the
      side effect of advancing the :term:`realm version` of the
      enclosing :term:`realm instance`.

   event loop
      A design pattern in which a central loop waits
      for signals from a UI or other source before updating underlying
      data structures. On iOS, known as a :apple:`run loop
      <documentation/foundation/runloop>`. On Android, known as a :android:`Looper
      <reference/android/os/Looper>`. Also known as the **main loop** or
      **main event loop** on some platforms.

   realm instance
      The result returned by a call to ``realm.open()``. An interface
      through which a :term:`Realm client` application can read and write
      to a local :term:`realm`. Every realm instance references a
      :term:`realm version`. You can update the realm version referenced
      by a realm instance by explicitly calling the ``refresh`` method
      on that realm instance. Beginning or committing a write
      transaction on your realm instance also advances the realm
      version. Platform with a built-in :term:`event loop` automatically
      refresh the realm instance on the event loop thread between
      iterations of the event loop.

   realm version
      A snapshot of data in a local :term:`realm` at a given moment.
      Each :term:`realm instance` references a realm version. The
      :term:`Realm SDK` cannot free resources for a realm version
      while any :term:`realm instance` continues to reference it.

   realm file
      File containing all data for a local :term:`realm` for an instance
      of :term:`Realm Database`.

   zero-copy
      A principle upon which :term:`Realm` is built. While traditional
      ORMs copy data from the database into native-language objects,
      :term:`Realm objects<Realm object>` read and write data using
      :wikipedia:`memory mapping <Memory-mapped_file>` to read and
      write data directly to and from the database via shallow object
      wrappers.

   ACID
      An acronym that expands to "Atomicity, Consistency, Isolation, and
      Durability". Realm is :term:`ACID-compliant <ACID compliance>`. See
      :wikipedia:`the Wikipedia entry for ACID <ACID>` for more
      information.

   ACID compliance
      - Realm Database establishes
        :wikipedia:`atomicity <Atomicity_(database_systems)>` by
        grouping operations in transactions and rolling back all
        operations in a transaction if any of them fail.
   
      - Realm Database establishes :wikipedia:`consistency
        <Consistency_(database_systems)>` and avoids data corruption by
        validating changes against the schema. If the result of any
        write operation is not valid, Realm Database cancels and
        rolls back the entire transaction.
   
      - Realm Database establishes :wikipedia:`isolation
        <Isolation_(database_systems)>` by allowing only one writer at a
        time. This ensures thread safety between transactions.
   
      - Realm Database establishes :wikipedia:`durability
        <Durability_(database_systems)>` by writing to disk immediately
        when a transaction is committed. In the event of an app crash,
        for example, the changes are not lost or corrupted.

   Realm webhook
      An HTTP endpoint that calls a function upon request.

   Realm Function
      Server-side logic for your App. You can call
      functions from any :term:`Realm client`, from other functions,
      with a :term:`Realm Trigger`, or a :term:`Realm webhook`.

   Realm Trigger
      Execute a function automatically when an event occurs or at a
      scheduled time. You can configure responses to :term:`data changes
      <database trigger>`, :term:`user logins <authentication trigger>`,
      and :term:`scheduled events <scheduled trigger>`. Every trigger
      activation calls a :term:`Realm Function`.

   database trigger
      Call a :term:`Realm Function` whenever a document is added,
      updated, or removed in a :term:`linked cluster`. Passes a
      change event describing the data that changed to the linked
      function.

   authentication trigger
      Call a :term:`Realm Function` whenever a user interacts with
      an :term:`authentication provider`, such as whenever a user logs into your
      :term:`App`. Passes an authentication event describing the user and
      interaction to the linked function.

   scheduled trigger
      Call a :term:`Realm Function` based on a schedule that you
      define using a :ref:`CRON expression <CRON-expressions>`.
   
   linked cluster
      A :term:`Atlas` database cluster that is associated with
      your :term:`App`. You can define data schemas and access
      rules to control who can access what in any linked cluster.
      :term:`Realm Database` data is automatically synchronized with
      your linked cluster when :term:`Device Sync` is enabled, which
      makes that linked cluster a :term:`synced cluster`. Access
      data in your synced cluster from a :term:`Realm client` using
      the Atlas service in the Realm SDK.

      .. seealso::

         :ref:`link-a-data-source`
   data source
      A :term:`Atlas` cluster or `Data Lake
      <https://www.mongodb.com/atlas/data-lake?tck=docs_realm>`_ that is
      associated with your :term:`App`.

      .. seealso::

         :ref:`link-a-data-source`
   
   synced cluster
      A :term:`Atlas` database cluster that is :ref:`partitioned
      <sync-partitions>` into client :term:`realms <realm>` that
      :term:`synchronizes data <Device Sync>` via your :term:`App`. Access data
      in your synced cluster from a :term:`Realm client` using
      Realm Database via the Realm SDK.

   partitioning
      A process that maps :term:`MongoDB documents <MongoDB document>` in a
      :term:`synced Atlas cluster <synced cluster>` into
      :term:`Realm objects <Realm object>` in client
      :term:`realms <realm>`. See :ref:`Partitions <sync-partitions>`
      for details.

   system function
      A :term:`Realm Function` that runs as the :term:`system user`.

   system user
      A user that communicates directly with the :term:`data source` and
      other services, bypassing collection :term:`Realm
      Rules` and :term:`Schema Validation`. This user bypasses most
      restrictions on the :ref:`CRUD & Aggregation APIs
      <mongodb-crud-and-aggregation-apis>`.
   
   custom user data
      A mapped :term:`MongoDB document` that stores arbitrary
      information about a given Realm user. For example, you can store
      a user's preferred language, local timezone, or an ID for an
      external service.

   custom user data collection
      The collection where Realm stores :term:`MongoDB documents
      <MongoDB document>` corresponding to :term:`custom user data`.

   custom user data database
      The database that contains the :term:`custom user data collection`.

   custom user data cluster
      The :term:`linked MongoDB Atlas cluster <linked cluster>` that
      that contains the :term:`custom user data database`.

   user ID field
      The field of :term:`MongoDB documents <MongoDB document>` in the
      :term:`custom user data collection` whose value is a user ID that
      maps custom user data documents to Realm users.

   user ID
      A unique BSON ObjectID that identifies a single user in a single
      App.

   external dependencies
      One or more JavaScript modules from ``npm`` that you have uploaded
      to your :term:`App`. You can import and use external
      dependencies from any :term:`Realm Function`.

   function context
      A global variable available that allows you to interface with
      components of your :term:`App` from a :term:`Realm Function`.
      For example, you can call another Function, communicate
      with an external service using the HTTP module, or access data in a
      :term:`data source`.

   Realm Value
      A named reference to a piece of static data defined in
      :term:`App Services`, accessible through :term:`Realm Function
      <Realm Function>` and :term:`Realm Rule <Realm Rules>` expressions.

   Realm Rules
      Boolean expressions that determine the read and write permissions
      for a given :ref:`user <user-objects>` for a particular resource.

   Realm Secret
      A private value stored in :term:`App Services` that
      cannot be directly read, but can be assigned to
      variables. Secrets are automatically obscured
      from App Services logs. Common use cases include
      :term:`authentication provider` and service configurations.

   App Services UI
      A web interface from which you can manage any
      :term:`App <App>`. For example, you
      can define :term:`Functions <Realm Function>`,
      create automated :term:`Triggers <Realm Trigger>`, view
      :ref:`logs <logs>`, and link :term:`Atlas` data sources.

   Device Sync
      Shares data changes between a :term:`App Services`
      :term:`linked cluster` and a :term:`Realm client`-local
      :term:`Realm Database`. Realm resolves conflicts between
      changes consistently between clients so all connected clients
      eventually arrive at the same state.

   sync protocol
      Procedure used by :term:`Realm Database` when :term:`Device Sync`
      is enabled to update local data to reflect remote data changes and
      push local changes to :term:`App Services`. This protocol merges
      changes and resolves conflicts between those changes consistently
      across all synced instances of a :term:`realm`.

      For more detailed information on the requests and process used by sync
      clients and servers, see :ref:`Realm Sync Protocol <sync-protocol>`.

   Realm CLI
      A command line interface named :binary:`realm-cli` from which you
      can manage any :term:`App
      <App>`. For
      example, you can define :term:`Functions <Realm Function>`,
      create automated :term:`Triggers <Realm Trigger>`,
      view :ref:`logs <logs>`, and link :term:`Atlas` data sources.

   Realm Administration API
      A :ref:`HTTP API <admin-api>` through which you can perform
      administrative tasks.

   Sync role
      A set of :term:`realm`-level permissions that App Services
      evaluates to determine whether a user may sync a
      given realm. See :ref:`Define Sync Rules
      <sync-rules>`.

   authentication provider
      An integration of a specific authentication mechanism
      into Realm's user authentication system. Realm
      provides several authentication providers -- such as
      :ref:`email/password <email-password-authentication>`
      authentication, :ref:`Google authentication
      <google-authentication>`, and :ref:`custom JWT
      authentication <custom-jwt-authentication>` -- that
      you can use in your client application to allow users
      to log in.

   Realm Schema
      The structure that defines the fields of and relationships between
      all :term:`MongoDB documents <MongoDB document>` that you can read
      or write into a :term:`App's <App>` :term:`linked
      Atlas cluster <linked cluster>`. Defined and enforced in your
      App.

   Object Schema
      The structure that defines the fields of and relationships between all
      :term:`Realm objects <Realm object>` that you can
      read or write into a client-local :term:`realm instance`. Defined
      natively in the code of your client application.

   Realm data model
      The collection of :term:`Realm object <Realm object>`
      definitions that describes all data synchronized
      via :term:`Device Sync` between mobile :term:`Realm clients
      <Realm client>` using the :term:`Object Schema` and a
      backend :term:`App` using :term:`Realm Schema`.

   Notifications
      The :term:`Realm Database` system that allows you
      to watch for and react to changes in your data
      independently of the writes that caused the changes.

   Application ID
      A unique identifier for your App Services application. Sometimes called by
      the shorthand "App ID". The App ID is used to connect to your App Services
      application via the client SDKs.

   client reset
      When using :ref:`sync`, a **client reset** is a serious error
      recovery task that your client app must perform if the server is restored
      to an older schema version than the version on the client.
      
      For more information on how to perform a client reset, see the client
      guide for your SDK:
      
      - :ref:`Java <java-client-resets>`
      - :ref:`Swift <ios-client-resets>`
      - :ref:`Node <node-client-resets>`
      - :ref:`React Native <react-native-client-resets>`
      - :ref:`.NET <dotnet-client-resets>`

   embedded object
      An embedded object is a special type of :term:`Realm object`
      that models complex data about a specific object. Embedded objects are
      similar to :term:`relationships <relationship>`, but they provide
      additional constraints and map more naturally to the denormalized
      :manual:`MongoDB document model </core/data-modeling-introduction/>`.
      
      For more information on how to define and work with embedded objects, see
      the client guide for your SDK:
      
      - :ref:`Java <java-embedded-objects>`
      - :ref:`Swift <ios-embedded-objects>`
      - :ref:`Node.js <node-embedded-objects>`
      - :ref:`React Native <react-native-embedded-objects>`
      - :ref:`.NET <dotnet-embedded-objects>`

   relationship
     A relationship is an object property that references another object rather
     than a scalar or embedded object.

   backlink
      A backlink is a link within a RealmObject that indicates that the RealmObject
      has an inverse relationship with another RealmObject. An 
      :term:`embedded object <embedded object>` should have a backlink to its parent object.
     
      For more information on how to define and work with backlinks and
      inverse relationships, see the client guide for your SDK:
       
      - :ref:`Java <java-inverse-relationship>`
      - :ref:`Swift <ios-inverse-relationship>`
      - :ref:`Node.js <node-inverse-relationship>`
      - :ref:`React Native <react-native-inverse-relationship>`
      - :ref:`.NET <dotnet-inverse-relationship>`

   null partition
      A null partition is the default :term:`realm` on the client 
      device.
