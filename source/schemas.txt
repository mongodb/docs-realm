.. _schemas:

=======
Schemas
=======

.. toctree::
   :titlesonly:
   
   Enforce a Schema </schemas/enforce-a-schema>
   Schema Types </schemas/types>

Overview
--------

What is a Schema?
~~~~~~~~~~~~~~~~~

A schema is a JSON object that allows you control the structure and contents of
your data. You can use schemas to require a specific set of fields in a document
and configure the type of each field's value.

Realm uses BSON schemas, which extend the `JSON Schema
<https://json-schema.org/>`_ standard, to validate your application data
whenever it's created, changed, or deleted. Schemas support all of the data
types in JSON Schemas as well as additional BSON types and dynamic change
validation logic.

For example, this is a basic schema for data about cars and some car objects
that conform to the schema:

.. tabs::
   
   .. tab:: Schema
      :tabid: schema
      
      .. code-block:: json
         
         {
           "title": "car",
           "required": [
              "_id",
              "year",
              "make",
              "model",
              "miles"
           ],
           "properties": {
             "_id": { "bsonType": "objectId" },
             "year": { "bsonType": "string" },
             "make": { "bsonType": "string" },
             "model": { "bsonType": "string" },
             "miles": { "bsonType": "number" }
           }
         }
   
   .. tab:: Objects
      :tabid: objects
      
      .. code-block:: json
         
         {
           "_id": ObjectId("5af712eff26b29dc5c51c60f"),
           "year": "2017",
           "make": "Honda",
           "model": "Civic",
           "miles": 117424
         }
         {
           "_id": ObjectId("5af714eff24b294c5251cf04"),
           "year": "2020",
           "make": "Ford",
           "model": "Mustang",
           "miles": 13579
         }

Why Define a Schema?
~~~~~~~~~~~~~~~~~~~~

A typed schema is a specification for your data model that you can use to define
your application's domain. Once you've defined a schema, Realm provides you with
additional tools and services to work with data that conforms to the schema.

Realm uses schemas in many application services:

- :ref:`Realm Sync <sync>` uses schemas to sync data between realms and MongoDB
  Atlas. Realm can also generate idiomatic SDK object models for you based on
  your schemas.

- The :ref:`GraphQL API <graphql-api>` uses schemas to automatically generate a
  GraphQL schema including types, queries, and mutations. You can extend your
  app's API with custom resolvers that reference the types defined by your
  schemas.

- :ref:`Data Acces Rules <rules>` validate that data conforms to your schema
  before and after every request. If any document fails validation, Realm
  prevents or rolls back the entire request.

.. _define-a-schema:

Define a Schema
---------------

You may define schemas to describe the documents in your linked MongoDB
collections. A root-level collection schema can contain additional schemas that
describe the type's properties.

A root level collection schema is an ``object`` schema that has the following
form:

.. code-block:: json
   
   {
     "bsonType": "object",
     "title": "<Type Name>",
     "required": ["<Required Field Name>", ...],
     "properties": {
       "<Field Name>": <Schema>
     }
   }

You can use any of the supported :ref:`schema types <schema-types>` to
configure the object's properties:

- :ref:`Object <schema-type-object>`
- :ref:`Array <schema-type-array>`
- :ref:`String <schema-type-string>`
- :ref:`Number <schema-type-number>`
- :ref:`Boolean <schema-type-boolean>`
- :ref:`UUID <schema-type-uuid>`
- :ref:`ObjectId <schema-type-objectid>`
- :ref:`Mixed <schema-type-mixed>`
- :ref:`Set <schema-type-set>`
- :ref:`Dictionary <schema-type-dictionary>`

.. note::

   To learn how to configure and deploy a schema in your app, see
   :ref:`enforce-a-schema`.

.. _schema-enforcement:

Schema Enforcement
------------------

{+backend+} validates all write operations (inserts, updates, and deletes) on a
MongoDB collection against its collection schema. It checks every document
before and after every request to ensure that all properties conform to the
schema and that no invalid changes occured.

Realm evaluates the result of all document writes and compares them against the
schema before committing the writes to your cluster. If the result of any write
operation in a request does not match the schema, {+backend+} returns an error
to the user without applying any changes in the request.

.. example::

   A collection has the following schema:

   .. code-block:: json

      {
        "title": "person",
        "properties": {
          "_id": { "bsonType": "objectId" },
          "name": { "bsonType": "string" }
        }
      }

   A user with permission to read and write all fields wants to update
   the ``name`` field of a particular document. They issue the following
   query:

   .. code-block:: javascript
      :copyable: False

      collection.updateOne(
        { "_id": BSON.ObjectId("5ae782e48f25b9dc5c51c4d0") },
        { "$set": { "name": 42 } }
      )

   The query attempts to set the value of ``name`` to the number ``42``,
   but the schema requires the value to be a ``string``. {+backend+} will
   reject this write operation even though the user had permission to
   update the document because the write result does not conform to the
   schema.
