.. _dotnet-tutorial:

================================
Xamarin (Android & iOS) Tutorial
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm provides a .NET SDK that allows you to create a multi-platform 
mobile application with Xamarin and C#. This tutorial is based on the 
.NET Flexible Sync Template App, named ``xamarin.todo.flex``, which illustrates
the creation of a Todo application. This application enables users to: 

- Register their email as a new user account.
- Sign in to their account with their email and password (and sign out later).
- View, create, modify, and delete tasks.

This tutorial adds on to the Template App. You will add a new ``Priority`` field 
to the existing ``Item`` model and update the 
:ref:`Flexible Sync subscription <queryable-fields>` to only show items within 
a range of priorities. 

Depending on your experience with Xamarin, this tutorial should take 
around 30 minutes.

.. note:: Check Out the Quick Start
   
   If you prefer to get started with your own application rather than follow a 
   guided tutorial, check out the :ref:`.NET Quick Start <dotnet-client-quick-start>`. 
   It includes copyable code examples and the essential information that you 
   need to set up an Atlas App Services backend.


Prerequisites
-------------

1. Ensure that you have the necessary software installed. Select the tab for 
   your development environment:

   .. tabs::

      .. tab:: MacOS
         :tabid: vs-mac

         - `Visual Studio for Mac <https://visualstudio.microsoft.com/downloads/>`__ 2019.
         - `Xcode <https://developer.apple.com/xcode/>`_ 10.0 or newer. Note that 
           Xcode 10 requires macOS High Sierra (10.13) or newer.
         - `iOS 12 SDK <https://developer.apple.com/ios/>`_.
         - `Android 6.0 / API level 23 <https://developer.android.com/studio>`_.

      .. tab:: Windows
         :tabid: vs-win

         - Windows 7 or newer. Windows 10 recommended. 
         - `Visual Studio <https://visualstudio.microsoft.com/downloads/>`_ 2017 
           (Visual Studio 2019 is recommended).
         - `Android 6.0 / API level 23 <https://developer.android.com/studio>`_.
         - To build iOS projects on Windows, you will also need a Mac computer, 
           network-accessible from the Windows computer, that 
           conforms to the minimum requirements for running Xamarin on macOS.

2. You need previous experience deploying a Xamarin app to an Android Emulator, 
   iOS Simulator, and/or a physical device.

Start with the Template
-----------------------
This tutorial is based on the .NET Flexible Sync Template App named 
"xamarin.todo.flex". We start with the default app and build new features 
on it. 

If you already have the latest Realm CLI installed, you can run the 
:ref:`realm-cli apps create <realm-cli-apps-create>` command to set up the 
backend and create the Xamarin base app. The following command creates a new 
app based on the xamarin.todo.flex template. The app is created in a 
development environment, is named "MyTutorialApp", and is deployed in the US-OR 
region:

.. code-block:: shell

   realm-cli apps create -n MyTutorialApp --template xamarin.todo.flex \
      --deployment-model global --location us-or --environment development

To learn more about the Template Apps, and to install the Template App that this 
tutorial uses in the Atlas App Services UI, see :ref:`Template Apps <template-apps>`.

Set up the Template App
-----------------------

.. procedure::

   .. step:: Open the App

      Navigate to the directory where the Realm CLI created the template app 
      and open the ``realm-todo-app.sln`` solution in Visual Studio. 

   .. step:: Explore the App Structure

      In Visual Studio, take a few minutes to explore how the solution is
      organized. This is a standard multi-platform solution, based on a template
      provided by Visual Studio, that has been modified for our specific use. The
      solution has 3 projects:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 40 60

         * - Project
           - Purpose

         * - ``realm-todo-dotnet``
           - Provides shared resources, including the view pages and the Item model 
             that represents the Realm object we will store in the database.

             To learn more about how Realm object models are used in .NET applications,
             see :ref:`Realm Objects <dotnet-objects>` in our .NET client guide.

         * - ``realm-todo-dotnet.Android``
           - Contains Android-specific resources, such as the Toolbar formatting.

         * - ``realm-todo-dotnet.iOS``
           - Contains iOS-specific resources.

      You will perform all of the steps in this tutorial within the shared
      ``realm-tutorial-dotnet`` project. Specifically, you will be working in 
      the following files:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 35 65

         * - File
           - Purpose

         * - Item.cs (in the ``Models`` folder)
           - Defines the Realm object we store in the database.

         * - ItemPage.xaml.cs
           - Provides the functionality for viewing, updating, and deleting items 
             in the user's todo list.

         * - NewItemPopup.xaml and NewItemPopup.xaml.cs
           - Provides the functionality to add a new item to the list.

   .. step:: Run the App

      Without making any changes to the code, you should be able to run the app 
      in either the Android emulator or the iOS Simulator, or on a physical device.
      When you installed the template app, the Realm CLI also set up a new 
      backend for you and populated the ``realm.json`` file with the correct app 
      ID. 

      Run the app, register a new user account, and then add a new Item to your 
      todo list.

   .. step:: Check the Backend

      Log in to `Atlas App Services <http://cloud.mongodb.com>`_. In the 
      :guilabel:`Atlas` tab, click on :guilabel:`Browse Collections`. In the list 
      of databases, find and expand the :guilabel:`todo` database, and then the 
      :guilabel:`Item` collection. You should see the document you created 
      in this collection.

Modify the Application
----------------------

.. procedure::

   .. step:: Add a New Property

      Now that you have confirmed everything is working as expected, we can 
      add changes. In this tutorial, we have decided that we want to add a 
      "Priority" property to each Item so that we can filter Items by their 
      priorities. The Priority property will be mapped to a PriorityLevel enum 
      to constrain the possible values.
      
      To do this, follow these steps:

      A. Expand the ``realm-todo-dotnet`` project. 

      #. Expand the ``Models`` folder and open the ``Item`` class file.

      #. Add the following public property:

         .. code-block:: csharp

            [MapTo("priority")]
            public int? Priority { get; set; }
            
      #. Also add a PriorityLevel enum below the ``Item`` class:
         
         .. code-block:: csharp

            public enum PriorityLevel
            {
               Severe = 0,
               High = 1,
               Medium = 2,
               Low = 3
            }
         
   .. step:: Set the Priority when Creating a New Item

      A. In ``NewItemPopup.xaml.cs``, add a new public property under the  
         existing ``ItemName`` and ``IsOK`` properties:

         .. code-block:: csharp
            :emphasize-lines: 3

            public string ItemName { get; set; }
            public bool IsOK { get; set; }
            public int Priority { get; set; }

      #. Open the ``NewItemPopup.xaml`` file. This file defines the UI 
         element for creating a new Item. We will add two UI elements: a label and a 
         Picker that enables the user to choose which priority level to set on the 
         new Item. Locate the ``OK`` button, and insert the following code *above* 
         it:

         .. code-block:: csharp

            <Label FontSize="18" HorizontalTextAlignment="Left" Text="Priority:"/>
            <Picker x:Name="newItemPriority">
               <Picker.Items>
                     <x:String>Severe</x:String>
                     <x:String>High</x:String>
                     <x:String>Medium</x:String>
                     <x:String>Low</x:String>
               </Picker.Items>
            </Picker>

      #. Now switch back to the NewItemPopup.xaml.cs file. Find the 
         ``OK_Button_Clicked`` event handler, which currently sets the 
         ``ItemName`` and ``IsOK`` properties. Add a line to also set the 
         ``Priority`` property:

         .. code-block:: csharp

            this.Priority = newItemPriority.SelectedIndex;

         .. note:: Using SelectedIndex

            Because we ordered the priorities in the Picker element from highest 
            to lowest, the lower the selected item's index, the higher that Item's 
            priority is: 0 for Severe, 1 for High, etc. Therefore, the index 
            matches the PriorityLevel enum values.

      #. Finally, open the ``ItemPage.xaml.cs`` file, and find the ``Popup_Popped`` 
         event handler, which fires when the NewItemPopup is closed. In this 
         method, we create a new Item and save it to the realm. Where we set the 
         other Item properties, add a line of code to set the new Priority 
         property:

         .. code-block:: csharp
            :emphasize-lines: 6

            var newItem = new Item()
            {
                OwnerId = _user.Id.ToString(),
                Summary = popup.ItemName,
                IsComplete = false,
                Priority = popup.Priority
            };

   .. step:: Run and Test
    
      At this point, you can run the application again. Log in using the account 
      you created earlier in this tutorial. You will see the one Item you 
      previously created. Add a new Item, and you will see that you can now 
      set the priority. Choose ``High`` for the priority and save the Item. 

      Now switch back to the Atlas data page in your browser, and refresh the 
      ``Item`` collection. You should now see the new Item with the ``priority`` 
      field added and set to **1**. You will also notice that the existing Item 
      now also has a ``priority`` field, and it is set to **null**, as shown in 
      the following screenshot:

      .. figure:: /images/dotnet-tutorial-two-new-items.png
         :alt:  Two items in a collection
         :figwidth: 300px

      .. note:: Why Didn't This Break Sync?
      
         Adding a property to a Realm object is not a breaking change and therefore 
         does not require a :ref:`client reset <client-resets>`. The template 
         app has Development Mode enabled, so changes to the client Realm object 
         are reflected in the server-side schema. For more information, see 
         :ref:`<concept-development-mode>` and :ref:`<additive-changes-synced-schema>`.

.. procedure:: Change the Subscription

   .. step:: Update the subscription

      In the ``ItemPage.xaml.cs`` file, we define the Flexible Sync subscription 
      that defines which documents we sync with the user's device & account. 
      Find the ``AddSubscriptionsToRealm`` method. Within the ``subscriptions.Update()`` 
      method, you can see that we are currently subscribing to all documents where 
      the ``OwnerId`` property matches the authenticated user. We want to maintain 
      that, but *only* sync Items that are marked as High or Severe priority. 

      As you may recall, the Priority field is of type ``int``, where the highest 
      priority ("Severe") has a value of 0, and the lowest priority ("Low") has 
      a value of 3. We can make direct comparisons between an int and the 
      Priority property. To do so, edit the LINQ statement to include documents 
      where the priority is equal to or *less* than PriorityLevel.High (or 1), as 
      shown here:

      .. code-block:: csharp
         :emphasize-lines: 5

         subscriptions.Update(() =>
            {
                var defaultSubscription = _itemsRealm.All<Item>()
                    .Where(t => t.OwnerId == _user.Id
                    && t.Priority <= (int)PriorityLevel.High
                    );
            });

   .. step:: Run and Test
    
      Run the application again. Log in using the account you created earlier 
      in this tutorial. You would expect to see the Item you most recently created, 
      since it has a priority of "High" (1). But it is not in the list. If you 
      check your application logs, you will see an entry that looks something 
      like this:

      .. code-block:: sh
         :copyable: false
         
         "Client provided query with bad syntax: unsupported query for table "Item": 
            key "priority" is not a queryable field" (error_code=300, query_version=1)

      This message tells us that we have added a field to our subscription without 
      configuring Flexible Sync to use that field. 
   
   .. step:: Update Flexible Sync on the Server

      A. Switch back to the Atlas page in your browser. Select the 
         :guilabel:`Atlas App Services` tab and open the app you are using.

      #. In the left-hand navigation, choose :guilabel:`Device Sync`, and then 
         click **OK** in the dialog box about Development Mode being enabled.
      
      #. Scroll down to the :guilabel:`Select Queryable Fields` section. In the 
         dropdown labeled **Select or create a queryable field**, choose 
         "priority". The priority field will be added to the fields shown:

         .. figure:: /images/dotnet-tutorial-priority-subscribed.png
            :alt:  Priority field is now queryable.

      #. Save your changes.
   
   .. step:: Test the changes

      Return to your mobile app. To ensure the subscription is re-run, log out 
      the current user, and then log in again. 
      After an initial moment when Realm resyncs the document collection, you 
      will see the new Item of High priority that you created.
      
      If you want to further test the functionality, you can create Items of various 
      priorities. You will see that a new Item with a lower priority briefly
      appears in the list of Items and then disappears. 
      Realm creates the Item locally, syncs it with the backend, and then filters 
      out the Item because it doesn't meet the subscription rules.

      You'll note, too, that the document you initially created is not synced, 
      because it has a priority of ``null``. If you want this Item to be synced, 
      you can edit the document in the Atlas UI and add a value for the priority 
      field, or you can change your subscription to include documents with null 
      values:


      .. code-block:: csharp
         :emphasize-lines: 5

         subscriptions.Update(() =>
            {
               var defaultSubscription = _itemsRealm.All<Item>()
                    .Where(t => t.OwnerId == _user.Id
                    && (t.Priority == null || t.Priority <= 1));
                subscriptions.Add(defaultSubscription);
            });

      .. note:: Priority as Int
      
         If you compare this subscription with the one above, you'll note we 
         specify the Priority as ``<= 1``, which is the same as comparing against 
         the ``PriorityLevel`` enum casted to an int.

Conclusion
----------
Adding a property to an existing Realm object is a non-breaking change, and 
Development Mode ensures that the schema change is reflected server-side. If 
you add or change a subscription to use an additional field, whether newly 
added or previously existent, you need to modify the Flexible Sync settings to 
enable querying against that field.

What's Next?
------------

- Read our :ref:`.NET SDK <dotnet-intro>` documentation.
- Find developer-oriented blog posts and integration tutorials on the 
  `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ 
  to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
