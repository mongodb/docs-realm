.. _ios-swift-tutorial:
.. _swift-swiftui-tutorial:

====================
SwiftUI iOS Tutorial
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

Realm provides a Swift SDK that allows you to create a native iOS 
mobile application with Swift or Objective-C. This tutorial is based on the 
SwiftUI Flexible Sync Template App, named ``swiftui.todo.flex``, which illustrates
the creation of a Task Tracker application. This application enables users to: 

- Register their email as a new user account.
- Sign in to their account with their email and password (and sign out later).
- View, create, modify, and delete tasks.

This tutorial adds on to the Template App. You will add a new ``priority`` field 
to the existing ``Item`` model and update the 
:ref:`Flexible Sync subscription <queryable-fields>` to only show items within 
a range of priorities. 

Depending on your experience with SwiftUI, this tutorial should take 
around 30 minutes.

.. note:: Check Out the Quick Start
   
   If you prefer to get started with your own application rather than follow a 
   guided tutorial, check out the :ref:`Swift Quick Start <ios-client-quick-start-with-sync>`. 
   It includes copyable code examples and the essential information that you 
   need to set up an Atlas App Services backend.

Prerequisites
-------------

1. Ensure that you have the necessary software installed. The Swift SDK requires
   `Xcode <https://developer.apple.com/xcode/>`_ version 13.1 or newer.

2. This tutorial starts with a Template App. You need an `Atlas Account 
   <https://cloud.mongodb.com/user/register?tck=docs_realm>`_, an API key, 
   and ``realm-cli`` to create a Template App.

   A. You can learn more about creating an Atlas account in the
      :atlas:`Atlas Getting Started </getting-started>`
      documentation. For this tutorial, you need an Atlas account with a free-tier
      cluster.

   B. You also need an Atlas :atlas:`API key 
      </configure-api-access/#programmatic-api-keys>`
      for the MongoDB Cloud account you wish to log in with. You must be a
      :atlas:`Project Owner </reference/user-roles/#project-roles>` to create a
      Template App using ``realm-cli``.

   C. To learn more about installing ``realm-cli``, see :ref:`Install realm-cli 
      <install-realm-cli>`. After you have installed ``realm-cli``, 
      :ref:`login <realm-cli-login>` using the API key for your Atlas project. 

Start with the Template
-----------------------
This tutorial is based on the SwiftUI Flexible Sync Template App named 
``swiftui.todo.flex``. We start with the default app and build new features 
on it. 

From Realm CLI, you can run the :ref:`realm-cli apps create 
<realm-cli-apps-create>` command to set up the backend and create the 
SwiftUI base app. The following command creates a new app based on the 
swiftui.todo.flex template. With the options flags we can pass during creation,
the command below creates an app:

- Named "MyTutorialApp"
- Deployed in the US-VA region
- With the environment set to "development" (instead of production or QA)

.. code-block:: shell

   realm-cli apps create -n MyTutorialApp --template swiftui.todo.flex \
      --deployment-model global --location us-va --environment development


To learn more about the Template Apps, and to install the Template App that this 
tutorial uses in the Atlas App Services UI, see :ref:`template applications <template-applications>`.

Explore the Template App
------------------------

.. procedure::

   .. step:: Open the App

      Navigate to the directory where the Realm CLI created the Template App. 
      The client code is in a ``frontend/swiftui.todo.flex`` directory.
      Open the ``App.xcodeproj`` in Xcode.

   .. step:: Explore the App Structure

      Take a few minutes to explore how the project is organized while 
      Swift Package Manager downloads the latest version of the Realm Swift 
      SDK. Within the App directory, you can see a few files worth noting:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 40 60

         * - File
           - Purpose

         * - ``AppConfig.swift``
           - This file contains the logic to read the ``appId`` and ``baseUrl`` 
             from the ``Realm.plist``. This is pre-populated with the 
             ``appId`` for your Template App.

         * - ``realmApp.swift``
           - This file uses the values from ``AppConfig.swift`` to initialize
             the ``realmApp``. The ``realmApp`` is how your app communicates 
             with the App Services backend. This provides access to login and 
             authentication.

             To learn more about how you can customize your app configuration,
             see: :ref:`Connect to an Atlas App Services Backend <ios-init-appclient>`.

             This file is also the entrypoint to the SwiftUI app. We pass the 
             ``realmApp`` to the ``ContentView`` that observes the app state 
             for user authentication state.

      In this tutorial, you'll be working in the following files:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 35 65

         * - File
           - Purpose

         * - ``Item.Swift``
           - This file, located at the root of the project, defines the 
             Realm object we store in the database.

         * - ``CreateItemView.swift``
           - This file, located in the ``Views`` directory, provides the 
             functionality to add a new item to the list.

         * - ``ContentView.Swift``
           - This file, located in the ``Views`` directory, defines the 
             Flexible Sync subscription.

   .. step:: Run the App

      Without making any changes to the code, you should be able to run the app 
      in the iOS Simulator or on a physical device. When you installed the 
      Template App, the Realm CLI also set up a new backend for you and 
      populated the ``realm.json`` file with the correct app ID. 

      Run the app, register a new user account, and then add a new Item to your 
      todo list.

   .. step:: Check the Backend

      Log in to `Atlas App Services <http://cloud.mongodb.com>`_. In the 
      :guilabel:`Atlas` tab, click on :guilabel:`Browse Collections`. In the list 
      of databases, find and expand the :guilabel:`Todo` database, and then the 
      :guilabel:`Item` collection. You should see the document you created 
      in this collection.

Modify the Application
----------------------

Add a New Property
~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Add a Property to the Model

      Now that you have confirmed everything is working as expected, we can 
      add changes. In this tutorial, we have decided that we want to add a 
      "priority" property to each Item so that we can filter Items by their 
      priorities. The priority property uses a PriorityLevel enum 
      to constrain the possible values.
      
      To do this, follow these steps:

      A. Open the ``App.xcodeproj`` in Xcode. 

      #. Open the ``Item.swift`` class file.

      #. Add the following property to the ``Item`` class:

         .. code-block:: swift

            @Persisted var priority: PriorityLevel
            
      #. Also add a PriorityLevel ``PersistableEnum`` below the ``Item`` class:
         
         .. code-block:: swift

            enum PriorityLevel: Int, PersistableEnum, CaseIterable {
                case severe = 0
                case high = 1
                case medium = 2
                case low = 3
    
                var description: String {
                    switch self {
                    case .severe: return "Severe"
                    case .high: return "High"
                    case .medium: return "Medium"
                    case .low: return "Low"
                    }
                }
            }

         :ref:`PersistableEnum is the protocol <ios-realm-enum>` that marks 
         enum types as persistable directly in Realm. We set the enum's type
         as ``Int`` here instead of ``String`` so we can query based on a 
         numeric priority level later. We use a ``description`` computed property
         to display a nice string representation of the priority in the UI.
         
   .. step:: Set the Priority when Creating a New Item

      A. In the ``Views`` directory, go to ``CreateItemView.swift``. 
         Add a new ``@State`` property under the existing ``itemSummary`` property.
         For now, set the default value to medium priority:

         .. code-block:: swift
            :emphasize-lines: 2

            @State var itemSummary = ""
            @State var priority = PriorityLevel.medium

      #. Now, in the ``Form`` body, add a Picker that enables the user to 
         choose which priority level to set on the new Item. Locate the 
         ``Section`` that contains the buttons, and insert the following 
         code *above* it:

         .. code-block:: swift

            Section(header: Text("Priority")) {
                Picker(selection: $priority, label: Text("Set priority")) {
                    ForEach(PriorityLevel.allCases, id: \.self) { priority in
                        Text(priority.description)
                    }
                }
            }

      #. Now, move down to the ``Button(action:`` that sets the values of the 
         ``newItem`` when the user presses the ``Save`` button. Add a line 
         below ``newItem.summary`` to also set the ``priority`` property:

         .. code-block:: swift
            :emphasize-lines: 2

            newItem.summary = itemSummary
            newItem.priority = priority

   .. step:: Run and Test
    
      At this point, you can run the application again. Log in using the account 
      you created earlier in this tutorial. You will see the one Item you 
      previously created. Add a new Item, and you will see that you can now 
      set the priority. Choose ``High`` for the priority and save the Item. 

      Now switch back to the Atlas data page in your browser, and refresh the 
      ``Item`` collection. You should now see the new Item with the ``priority`` 
      field added and set to **1**. The existing Item does not have a ``priority`` 
      field.

      .. figure:: /images/swiftui-tutorial-two-new-items.png
         :alt:  Two items in a collection
         :figwidth: 300px

      .. note:: Why Didn't This Break Sync?
      
         Adding a property to a Realm object is not a breaking change and therefore 
         does not require a :ref:`client reset <client-resets>`. The template 
         app has Development Mode enabled, so changes to the client Realm object 
         are reflected in the server-side schema. For more information, see 
         :ref:`<concept-development-mode>` and :ref:`<additive-changes-synced-schema>`.

Change the Subscription
~~~~~~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Update the subscription

      In the ``ContentView.swift`` file, we create the Flexible Sync subscription 
      that defines which documents we sync with the user's device & account. 
      Look for the ``let config = user.flexibleSyncConfiguration(initialSubscriptions:``
      variable where we set the initial subscriptions. Within the ``subscriptions.append()`` 
      method, you can see that we are currently subscribing to all documents where 
      the ``owner_id`` property matches the authenticated user's id. We want to maintain 
      that, but *only* sync Items that are marked as High or Severe priority. 

      This is why we set the ``PriorityLevel`` enum to type ``Int``, where the highest 
      priority (severe) has a value of 0, and the lowest priority (low) has 
      a value of 3. We can make direct comparisons between an Int and the 
      priority property. To do so, update the query statement to include documents 
      where the priority is equal to or *less* than PriorityLevel.High (or 1), as 
      shown here. 
      
      We'll also add the ``reRunOnOpen`` bool, and set it to ``true``, 
      to force the subscription query to recalculate which documents to sync
      every time we open the app.

      .. code-block:: swift
         :emphasize-lines: 3-5, 8, 11

         let config = user.flexibleSyncConfiguration(initialSubscriptions: { subs in
             if let foundSubscription = subs.first(named: "user_tasks") {
                 foundSubscription.updateQuery(toType: Item.self, where: {
                     $0.owner_id == user.id && $0.priority <= PriorityLevel.high
                 })
             } else {
                 subs.append(QuerySubscription<Item>(name: "user_tasks") {
                     $0.owner_id == user.id && $0.priority <= PriorityLevel.high
                 })
             }
         }, rerunOnOpen: true)

   .. step:: Run and Test
    
      Run the application again. Log in using the account you created earlier 
      in this tutorial. You would expect the list to change, since we added the
      ``reRunOnOpen`` to force the subscription query to recalculate which 
      documents to sync. If you check the console logs, you will see an entry 
      that looks something like this:

      .. code-block:: sh
         :copyable: false
         
         2022-08-08 17:54:24.128249-0400 App[17920:237672] Sync: Connection[2]: 
         Session[2]: Received QUERY_ERROR "Client provided query with bad syntax: 
         unsupported query for table "Item": key "priority" is not a queryable 
         field" (error_code=300, query_version=3)

      This message tells us that we have added a field to our subscription without 
      configuring Flexible Sync to use that field. 
   
   .. step:: Update Flexible Sync on the Server

      A. Switch back to the Atlas page in your browser. Select the 
         :guilabel:`Atlas App Services` tab and open the app you are using.

      #. In the left-hand navigation, choose :guilabel:`Device Sync`, and then 
         click **OK** in the dialog box about Development Mode being enabled.
      
      #. Scroll down to the :guilabel:`Select Queryable Fields` section. In the 
         dropdown labeled **Select or create a queryable field**, choose 
         "priority". The priority field will be added to the fields shown:

         .. figure:: /images/dotnet-tutorial-priority-subscribed.png
            :alt:  Priority field is now queryable.

      #. Save your changes.
   
   .. step:: Test the changes

      Return to your mobile app. Because we added ``reRunOnOpen``, the app
      should re-sync only the documents that match the Flexible Sync query.
      After an initial moment when Realm resyncs the document collection, you 
      will see the new Item of High priority that you created.
      
      If you want to further test the functionality, you can create Items of various 
      priorities. You will see that a new Item with a lower priority briefly
      appears in the list of Items and then disappears. You can see a message
      similar to this one in the logs:

      .. code-block:: sh
         :copyable: false

         2022-08-08 18:00:45.726138-0400 App[18133:242396] Sync: Connection[2]: 
         Session[2]: Received: ERROR "Client attempted a write that is outside 
         of permissions or query filters; it has been reverted" 
         (error_code=231, try_again=true, recovery_disabled=false)

      Realm creates the Item locally, syncs it with the backend, and then reverts 
      the write because it doesn't meet the subscription rules.

      You'll note, too, that the document you initially created is not synced, 
      because it does not have a ``priority`` field. If you want this Item to 
      be synced, you can edit the document in the Atlas UI and add a value for 
      the priority field.

Conclusion
----------
Adding a property to an existing Realm object is a non-breaking change, and 
Development Mode ensures that the schema change is reflected server-side. If 
you add or change a subscription to use an additional field, whether newly 
added or previously existent, you need to modify the Flexible Sync settings to 
enable querying against that field.

What's Next?
------------

- Consider adding the new ``Priority`` property to the ``ItemList``, ``ItemRow``, and ``ItemDetail`` Views.
- Read our :ref:`Swift SDK <ios-intro>` and :ref:`SwiftUI <ios-swiftui-examples>` documentation.
- Find developer-oriented blog posts and integration tutorials on the 
  `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ 
  to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
