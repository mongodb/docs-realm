.. _ios-swift-tutorial:

==================
iOS Swift Tutorial
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

In :ref:`Part 1 <ios-swift-tutorial-local>` of this tutorial, you will
create a task tracker app that allows users to manage a personal list of
tasks stored in Realm Database. Once you've completed the local
version of the app, you can enhance your application in
:ref:`Part 2 <ios-swift-tutorial-sync>` with Device Sync to:

- Register users with email and password.
- Sign users into accounts with email and password and sign out later.
- View a list of team members in a user's project.
- Add and remove team members to a user's project.
- View all projects a user is a member of and contribute tasks to those projects.

Part 1 should take around 30 minutes to complete. The optional part 2
should take an additional 30 minutes.

.. note:: Check Out the Quick Start
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   check out the :ref:`iOS Quick Start <ios-client-quick-start-with-sync>`. It includes
   copyable code examples and the essential information that you need to set up
   an Atlas App Services backend.

   Using SwiftUI and Combine? Check out :ref:`ios-swiftui-combine-quick-start`.


.. _ios-swift-tutorial-local:

Part 1: Set up the Mobile App
-----------------------------

.. important:: Prerequisites

   -  `Xcode <https://developer.apple.com/xcode/>`__ version 12.4 or higher, which requires macOS 10.15.4 or higher.
   - Target of iOS 13.0.

**Prefer to learn by watching? Follow along while we we complete Part 1 in this 
video tutorial walk-through!**

.. video:: https://youtu.be/j56jb1WweHg

Procedure
~~~~~~~~~

.. procedure::

   .. step:: Clone the Client App Repository

      We've already put together a task tracker iOS application that has most of the
      code you'll need. You can clone the client application repository directly
      from :github:`GitHub <mongodb-university/realm-tutorial-ios-swift>`:

      .. code-block:: shell

         git clone --branch start https://github.com/mongodb-university/realm-tutorial-ios-swift.git

      .. tip::

         The ``start`` branch is an incomplete version of the app that we will
         complete in this tutorial. To view a local-only version of the app:

         1. Navigate to the root directory of the client application repository:

            .. code-block:: shell

               cd realm-tutorial-ios-swift

         #. Check out the ``local`` branch:

            .. code-block:: shell

               git checkout local

         #. Run the app by clicking the "Play" button in the upper-left
            corner of the Xcode window.


   .. step:: Explore the App Structure


      In the Xcode Project Navigator, you can see the source files of the task
      tracker application in the ``Task Tracker`` folder. The relevant files are as follows:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 40 60

         * - File
           - Purpose

         * - Models.swift
           - Define the Realm object models used by this app.

         * - SceneDelegate.swift
           - Part 2: Declare the global App instance for the Device Sync
             portion of the tutorial.

         * - WelcomeViewController.swift
           - Implement the login and user registration functionality.

         * - TasksViewController.swift
           - Create the list view for the tasks in a given project.

         * - ProjectsViewController.swift
           - Display the user's list of projects. In the local app, there is
             only the local user's project. In Part 2, when we add Sync,
             we'll add the projects where the logged in user is a member.

         * - ManageTeamViewController.swift
           - Part 2: Manage members of a user's project.


   .. step:: Define the Object Models

      Navigate to the Models.swift file to implement the Realm Object Models used in
      this app. Realm object models derive from ``Object`` from the
      ``RealmSwift`` library, which allows us to store them in Realm Database.
      The Task class is currently just a normal Swift class. Let's turn it
      into a Realm object model:

      .. literalinclude:: /tutorial/generated/swift-ios/local/Models.snippet.task-model.swift
         :language: swift

      .. note::

         To learn more about how Realm Object models are used in iOS applications,
         see :ref:`ios-read-and-write-data` in our iOS client guide.


   .. step:: Specify the Realm to Open

      Navigate to the ProjectsViewController.swift file. For the local application,
      the user only has their own project - and their own realm - to open.
      We'll specify the :ref:`configuration <ios-configure-and-open-a-realm>` to use
      when we open the realm in ``init(userRealmConfiguration: Realm.Configuration)``:

      .. literalinclude:: /tutorial/generated/swift-ios/local/ProjectsViewController.snippet.user-in-realm-notification.swift
         :language: swift


   .. step:: Implement the Tasks List

      Navigate to the TasksViewController.swift file, where we'll implement the list
      of Tasks in a Project. The TasksViewController class holds an array of Task
      objects. We already converted the Task class to a Realm object model. In order
      to hold a live collection of Realm objects contained in a realm, we need to
      use ``RealmResults`` instead of a standard Swift array. Let's convert that
      property from an array of Tasks (``[Task]``) to a RealmResults collection
      of Tasks (``Results<Task>``) now:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.properties.swift
         :language: swift

      We can initialize the ``tasks`` property with a query on the project realm.
      Once we have the live tasks collection, we can observe that for changes:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.init.swift
         :language: swift

      Calls to ``observe`` Realm objects return a notificationToken. Retain
      the notificationToken as long as you want to continue observing. When
      done observing -- for example, because the user navigated away from this view
      -- be sure to invalidate the token. The ``deinit`` method is a good place to
      do this:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.deinit.swift
         :language: swift

      The TasksViewController already populates the UI using the Tasks in the list.
      Check out the ``tableView(_:numberOfRowsInSection:)`` and
      ``tableView(_:cellForRowAt:)`` methods to see how the Realm object model
      version of the Task class and the RealmResults object are drop-in replacements
      for the regular class and array respectively. No changes are required in these
      methods.

      The TasksViewController also wires up the Add button at the top of the view to
      the ``addButtonDidClick()`` method. We can implement the Task creation in this
      method:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.add-button-did-click.swift
         :language: swift

      When the user selects a Task in the list, we present them with an action sheet
      to allow them to update the Task's status. Complete the
      ``tableView(_:didSelectRowAt:)`` method implementation as follows:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.populate-action-sheet.swift
         :language: swift

      To handle swipes to delete a Task, we implement the
      ``tableView(_:commit:forRowAt:)`` method:

      .. literalinclude:: /tutorial/generated/swift-ios/local/TasksViewController.snippet.delete-task.swift
         :language: swift


   .. step:: Enable Sign-in

      Finally, go to the WelcomeViewController and implement the ``signIn()``
      method. Create a realm configuration that specifies which "project" to
      open and pass it to the TasksViewController:

      .. literalinclude:: /tutorial/generated/swift-ios/local/WelcomeViewController.snippet.sign-in.swift
         :language: swift

      .. note::

         TasksViewController works the same whether we're using Sync or not. That
         makes it easier to add Sync later in Part 2. We'll only need to change the
         configuration we pass into TasksViewController.


   .. step:: Run and Test

      Once you have completed the code, you can run the app and check functionality.

      Click the :guilabel:`Run` button in Xcode. If the app builds successfully,
      here are some things you can try in the app:

      - Create a user with username *test*
      - Navigate to "My Project"
      - Add, update, and remove some tasks

      .. tip::

         If something isn't working for you, you can check out the ``local`` branch of
         this repo to compare your code with our finished solution.


.. _ios-swift-tutorial-sync:

Part 2: Add Sync to the Mobile App
----------------------------------

.. important:: Prerequisites

   - Set up :ref:`the backend
     <tutorial-task-tracker-create-realm-app>`
   - Completed :ref:`Part 1 <ios-swift-tutorial-local>`.

.. tip::

   To view a complete synced version of the app:

   1. Navigate to the root directory of the client application repository:

      .. code-block:: shell

         cd realm-tutorial-ios-swift

   #. Check out the ``sync`` branch:

      .. code-block:: shell

         git checkout sync

   #. In SceneDelegate.swift, replace ``<your-realm-app-ID-here>`` with
      your Realm app ID, which you can
      :ref:`find in the Realm UI <find-your-app-id>`.

   #. Run the app by clicking the "Play" button in the upper-left
      corner of the Xcode window.

**Prefer to learn by watching? Follow along while we complete Part 2 in this 
video tutorial walk-through!**
   
.. video:: https://youtu.be/m-LejXyK92g


Procedure
~~~~~~~~~

.. procedure::

   .. step:: Connect to Your MongoDB Realm App

      To get the app working with your backend, you first need to add your Realm App
      ID to the SceneDelegate.swift file. Declare a global Realm App instance:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/SceneDelegate.snippet.initialize-app.swift
         :language: swift

      Change the value of ``id`` to your Realm app ID, which you can :ref:`find in
      the Realm UI <find-your-app-id>`.


   .. step:: Update Your App's Realm Models


      To support online functionality like shared projects, we'll need two
      additional models.

      Add an embedded object model for user projects:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/Models.snippet.project-model.swift
         :language: swift

      And a model for custom user data that stores the list of projects as user can
      access:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/Models.snippet.user-model.swift
         :language: swift


   .. step:: Enable Authentication

      Navigate to the WelcomeViewController.swift file, which is where we implement
      all login and user registration logic. This controller is set up with a text
      field for email and password, sign in and sign up buttons, and an activity
      indicator to show when the app is handling an authentication request.
      To enable users to log in with App Services accounts, we'll add a field
      where the user can enter a password and a button to register
      an account as variables in WelcomeViewController:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.password-field-and-sign-up-button.swift
         :language: swift

      We'll also need to add an accessor to get the password entered by the
      user when they register or log in:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.get-password.swift
         :language: swift

      In the ``viewDidLoad()`` method, update the ``infoLabel``
      value to mention both a username *and* password:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.info-label-password-add.swift
         :language: swift

      Change the placeholder value of the username entry field to "Email",
      since usernames for App Services accounts should be email addresses:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.username-field-placeholder.swift
         :language: swift

      And configure the password entry field with placeholder text and
      secure text entry:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.password-field-configure.swift
         :language: swift

      Configure a sign-up button that users can click to register an account:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.sign-up-button.swift
         :language: swift

      Next, in the ``setLoading()`` method, enable the password field alongside
      the username field when the view loads:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.password-field-enable.swift
         :language: swift

      Implement the ``signUp()`` method to register a new user, which uses the
      :ref:`email/password authentication provider <email-password-authentication>`
      of the App to register a new user:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.sign-up.swift
         :language: swift

      Finally, implement the ``signIn()`` method to authenticate user credentials
      with your backend App using email/password credentials. Once logged in
      successfully, open the user realm and navigate to the
      ProjectsViewController. We open the realm using ``asyncOpen()`` because it
      fully downloads any remote data before proceeding:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/WelcomeViewController.snippet.sign-in.swift
         :language: swift


   .. step:: Implement the Projects List


      Open the ProjectsViewController.swift file, which is where we present the user
      with a list of projects they are a member of.

      Let's provide a way for a user to log out and get back to the
      WelcomeViewController. The ``viewDidLoad()`` method hooks up the Log Out
      button at the top of the view to the ``logOutButtonDidClick()`` method. We can
      implement ``logOutButtonDidClick()`` as follows:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.log-out-button-did-click.swift
         :language: swift

      Next, open the realm with the configuration passed in from the previous
      controller. By receiving the configuration rather than creating one here, the
      ViewController does not need to know whether the realm is using Sync or
      not.

      Add a change listener at the end of the ``init`` method that watches for a new
      ``User`` object in the user realm. Because your backend app creates
      ``User`` objects with a Trigger, it can sometimes take a few seconds after
      account creation for the backend Trigger to generate a user's ``User`` object.

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.user-in-realm-notification.swift
         :language: swift

      The ProjectsViewController reads the list of projects the user has access to
      from a custom user data object. We added the model for the user custom data
      earlier in this tutorial.

      .. include:: /includes/note-tutorial-custom-user-data-permissions.rst

      Now add a ``deinit`` method to ensure that your application invalidates the
      notification token for that change listener when the view is destroyed:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.invalidate-token.swift
         :language: swift

      Since the ProjectsViewController implements the UITableViewDelegate protocol
      for its own list, let's implement these methods. First, implement the
      ``tableView(_:numberOfRowsInSection:)`` method to return the number of
      available projects to the current user. Use the count of projects that
      the user can access:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.number-of-rows-in-section.swift
         :language: swift

      Next, implement the ``tableView(_:cellForRowAt:)`` to fill out the project
      information for each cell:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.cell-for-row-at.swift
         :language: swift

      Implement the ``tableView(_:didSelectRowAt:)`` method to handle what
      happens when the user clicks a project in the list. We'll open the
      project realm before navigating to the TasksViewController so that
      if anything goes wrong, we can handle the error before launching a
      separate view:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ProjectsViewController.snippet.did-select-row-at.swift
         :language: swift


   .. step:: Add Project Member Management Button to the Tasks View

      Next, we'll add a menu to manage members of a project. You can open this menu
      with a button. Navigate to TaskViewController.swift. Add a new method that
      checks if a project is owned by the current user. This controls whether or not
      the user can manage the list of users allowed to access that project:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/TasksViewController.snippet.is-own-tasks.swift
         :language: swift

      Add the corresponding click handler for that method:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/TasksViewController.snippet.manage-button-did-click.swift
         :language: swift

      At the end of the ``viewDidLoad`` method, add logic that calls the
      method you just created:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/TasksViewController.snippet.check-if-own-tasks.swift
         :language: swift

      .. note:: ManageTeamViewController Error

         The ManageTeamViewController doesn't exist yet, so if you see an error
         about it here, it should go away after the next step.


   .. step:: Implement the Manage Team View

      A user can add and remove team members to their own Project using the Manage
      Team view. Since the client side cannot handle access management, we need to
      call out to our Atlas Functions we defined earlier.

      .. warning::

         This view heavily relies on the serverless functions we built into the
         backend. If you did not :ref:`import the backend
         <tutorial-task-tracker-create-realm-app>`, the code in this section will
         not work as expected.

      Navigate to the ManageTeamViewController.swift file, which defines the view
      that pops up when a user clicks the "Manage Team" action on the
      TasksViewController. The file should be empty except for a copyright
      disclaimer comment. Copy and paste the following code into the file:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ManageTeamViewController.snippet.complete.swift
         :language: swift

      You should now have a fully functional ManageTeamViewController
      implementation. However, it's worth taking a look at some of the core
      logic to get a sense of how team management works in Task Tracker.

      The ManageTeamViewController uses ``fetchTeamMembers()`` to get the
      list of team members, which calls the ``getMyTeamMembers`` Atlas
      Function to access a list of users with access to the project:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ManageTeamViewController.snippet.fetch-team-members.swift
         :language: swift

      The ManageTeamViewController wires up the add button and swipe to delete
      functionality to the ``addTeamMember()`` and ``removeTeamMember()`` methods,
      respectively.

      The ``addTeamMember()`` method calls the ``addTeamMember`` Atlas Function and
      can use the ``onTeamMemberOperationComplete()`` method as a completion
      handler:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ManageTeamViewController.snippet.add-team-member.swift
         :language: swift

      The ``removeTeamMember()`` method calls the ``removeTeamMember`` Atlas Function and
      also uses the ``onTeamMemberOperationComplete()`` method as a completion
      handler:

      .. literalinclude:: /tutorial/generated/swift-ios/sync/ManageTeamViewController.snippet.remove-team-member.swift
         :language: swift

      The ``onTeamMemberOperationComplete()`` method presents any errors to the user
      and refreshes the member list.


   .. step:: Run and Test

      Once you have completed the code, you can run the app and check functionality.

      Click the :guilabel:`Run` button in Xcode. If the app builds successfully,
      here are some things you can try in the app:

      - Create a user with email *first@example.com*
      - Explore the app, then log out or launch a second instance of the app on another device or simulator
      - Create another user with email second@example.com
      - Navigate to *second@example.com*'s project
      - Add, update, and remove some tasks
      - Click "Manage Team"
      - Add *first@example.com* to your team
      - Log out and log in as *first@example.com*
      - See two projects in the projects list
      - Navigate to *second@example.com*'s project
      - Collaborate by adding, updating, and removing some new tasks

      .. tip::

         If something isn't working for you, you can check out the ``sync`` branch of
         this repo to compare your code with our finished solution.

What's Next?
------------

- Read our :ref:`Swift SDK <ios-intro>` documentation.
- Try the :ref:`App Services Backend tutorial <backend-tutorial>`.
- Find developer-oriented blog posts and integration tutorials on the `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
