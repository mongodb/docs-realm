.. _tutorial-task-tracker-web:

==================
Task Tracker (Web)
==================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this tutorial, you'll build a functional web application backed by the
{+service+} GraphQL API. The app uses :reactjs:`React <>` to define UI
components and :apollo-docs:`Apollo Client <react>` to run queries and mutations
through the GraphQL API. We've already created most of the frontend application
for you, so you don't need to know React to follow along.

The app is a task tracker that allows users to:

- Register and log in with an email/password account.
- Create tasks, view existing tasks, and modify the status of tasks.

.. note::
   
   Want to get started right away with the frontend source code? Check out the
   :github:`MongoDB Realm Tutorial on GitHub
   <mongodb-university/realm-tutorial>`, which includes ready-to-compile source
   code, then follow the instructions in README.md to get started. Don't forget
   to update the AppDelegate.swift file with your {+app+} ID, which you can find
   in the {+ui+}.

Prerequisites
-------------

Before you get started, you'll need the following:

- A MongoDB Atlas account and cluster. For details on how to create an account
  and set up a free ``M0`` cluster, see :atlas:`Get Started with Atlas
  </getting-started>`.

- :nodejs:`Node.js <>` installed on your machine.

- `git <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__
  installed on your machine.

1. MongoDB Realm Backend
------------------------

A. Create a MongoDB Realm Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/task-tracker-web-create-realm-app.rst

B. Define Your Data Model
~~~~~~~~~~~~~~~~~~~~~~~~~

Tasks
+++++

.. code-block:: json
   
   {
     "title": "task",
     "required": [
       "_id",
       "description",
       "status"
     ],
     "properties": {
       "_id": { "bsonType": "objectId" },
       "assignee": { "bsonType": "string" },
       "description": { "bsonType": "string" },
       "status": {
         "bsonType": "string",
         "enum": [
           "Open",
           "InProgress",
           "Complete"
         ]
       }
     }
   }

.. code-block:: json
   
   {
     "projects": {
       "ref": "#/stitch/mongodb-atlas/tracker/projects",
       "foreign_key": "_id",
       "is_list": true
     }
   }

Users
+++++

.. code-block:: json

   {
     "title": "user",
     "required": [
       "_id",
       "user_id",
       "name"
     ],
     "properties": {
       "_id": { "bsonType": "objectId" },
       "user_id": { "bsonType": "string" },
       "name": { "bsonType": "string" },
       "image": { "bsonType": "string" }
     }
   }

C. Define Data Access Rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Define a Realm Schema for each collection
- This automatically generates GraphQL types

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. cssclass:: bordered-figure
      .. figure:: /images/task-tracker-web-roles-tasks.png
      
      .. cssclass:: bordered-figure
      .. figure:: /images/task-tracker-web-roles-users.png
   
   .. tab::
      :tabid: cli

      .. code-block:: json
      
         {
           "roles": [
             {
               "name": "isAssignee",
               "apply_when": {
                 "assignee": "%%user.id"
               },
               "insert": true,
               "delete": true,
               "write": true,
               "fields": {},
               "additional_fields": {}
             },
             {
               "name": "default",
               "apply_when": {},
               "insert": false,
               "delete": false,
               "read": true,
               "fields": {},
               "additional_fields": {}
             }
           ]
         }
      
      .. code-block:: json
      
         {
           "roles": [
             {
               "name": "isUser",
               "apply_when": { "user_id": "%%user.id" },
               "insert": false,
               "delete": false,
               "read": true,
               "fields": {},
               "additional_fields": {}
             }
           ]
         }

D. Configure User Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui

      .. include:: /includes/steps/task-tracker-web-auth.rst
   
   .. tab::
      :tabid: cli
      
      To enable the email/password authentication provider, paste the following
      into ``/auth_providers/local-userpass.json`` in your application
      directory.

      .. code-block:: json
         
         {
             "name": "local-userpass",
             "type": "local-userpass",
             "config": {
                 "autoConfirm": true,
                 "resetFunctionName": "resetFunc",
                 "runConfirmationFunction": false,
                 "runResetFunction": true
             },
             "disabled": false
         }
      
      You'll also need to define the password reset function. Create the
      ``/functions/resetFunc`` directory and add the following configuration and
      source code files to the directory:
      
      .. code-block:: json
         :caption: ``/functions/resetFunc/config.json``

         {
             "name": "resetFunc",
             "private": false,
             "can_evaluate": {}
         }
      
      .. code-block:: javascript
         :caption: ``/functions/resetFunc/source.js``
        
         exports = ({ token, tokenId, username, password }) => {
           // will not reset the password
           return { status: 'fail' };
         };

E. Deploy Your App
~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui

      - Click :guilabel:`Deploy` in the lefthand navigation
      - Click the :guilabel:`Review & Deploy Changes` button for the current draft
      - Review the diff to make sure that everything looks correct
      - Click :guilabel:`Deploy` 
   
   .. tab::
      :tabid: cli
      
      - Navigate to the app root
      - Ensure that you're logged in to Realm CLI
      - Import the app directory (make sure to use your App ID)
        
        .. code-block:: shell
           
           realm-cli import --app-id=task-tracker-abcde

2. Client Application
---------------------

- What this section is about
- What we already did for you
- What you'll do

A. Clone the Client App Repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can clone client application directly from GitHub:

.. code-block:: shell
   
   git clone git@github.com:mongodb-university/realm-tutorial.git

The ``realm-tutorial`` repo contains task tracker client applications for
multiple platforms. The code for this tutorial is located in the ``web``
directory.

In your terminal, run the following commands to navigate to the task tracker
client application and install its dependencies:

.. code-block:: shell
   
   cd realm-tutorial/web
   npm install

B. Explore the App Structure & Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The web client is a standard React web application written in
:typescript:`TypeScript <>` and scaffolded with `create-react-app
<https://facebook.github.io/create-react-app/>`__. We encourage you to explore
the files in the app for a few minutes before you continue the tutorial. This
will help you to familiarize yourself with what the app contains and where
you'll be working.

.. include:: /includes/task-tracker-web-client-base-file-structure.rst

Realm & Apollo
++++++++++++++

The ``/src/realm`` directory contains all of the modules that you'll use to
connect the application to Realm. These files are only incomplete scaffolds -
some are blank and others require you to make some modifications. This tutorial
walks through adding the missing code in these files to connect the task tracker
app to Realm.

React Components & Hooks
++++++++++++++++++++++++

The ``/src/components`` and ``/src/hooks`` directories contain pre-built React
components and hooks that handle local state management and UI rendering. The
components import code from the files in ``/src/realm`` and use them to interact
with Realm. We've already completely implemented these so you won't need to add
any code to these files. We'll make sure to show you along the way how these
components and hooks use the code that you write.

.. admonition:: React Components
   :class: note

   React is a `popular
   <https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-web-frameworks>`__
   modern web application framework that uses a component model to maintain
   application state and intelligently render pieces of the UI. If you're not
   familiar with React or want to brush up on your knowledge, check out the
   `official React website <https://reactjs.org>`_ which has excellent
   documentation and tutorials.

C. Connect to Your MongoDB Realm App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``src/realm/RealmApp.tsx``

.. code-block:: typescript

   // Let new users register an account
   const registerUser = async (email: string, password: string) => {
     return await app.auth.emailPassword.registerUser(email, password);
   }
   
   // Let registered users log in
   const logIn = async (email: string, password: string) => {
     const credentials = RealmWeb.Credentials.emailPassword(email, password);
     const loggedInUser = await app.logIn(credentials);
     setUser(loggedInUser);
     return loggedInUser;
   }
   
   // Let logged in users log out
   const logOut = async () => {
     await app.logOut();
     setUser(app.currentUser);
   }

D. Connect Apollo to the GraphQL API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``src/realm/RealmApolloProvider.tsx``

.. code-block:: typescript

   function createApolloClient(realmAppId: string, user: RealmWeb.User): ApolloClient<NormalizedCacheObject> {
     const graphql_url = `https://realm-dev.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;
     const httpLink = new HttpLink({ uri: graphql_url });
     const authorizationHeaderLink = setContext(async (_, { headers }) => ({
       headers: {
         ...headers,
         Authorization: `Bearer ${user.accessToken}`,
       },
     }));
     
     return new ApolloClient({
       link: authorizationHeaderLink.concat(httpLink),
       cache: new InMemoryCache(),
     });
   }

E. Define the GraphQL Schema & Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/steps/task-tracker-web-graphql-codegen.rst
