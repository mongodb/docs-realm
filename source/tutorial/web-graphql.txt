.. _tutorial-task-tracker-web:

==================
Task Tracker (Web)
==================

.. default-domain:: mongodb

.. raw:: html
   
   <!-- Hacky fix for step title headings -->
   <style>
   .sequence-block > .section > h4 {
      margin: 24px 0;
   }
   div.section h2+ul {
     margin-left: 0;
   }
   </style>

.. contents:: Tutorial Sections
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. admonition:: Check Out the Quick Start
   :class: note
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   check out the :ref:`Web Quick Start <web-quick-start>`. It includes copyable
   code examples and the essential information that you need to set up a MongoDB
   Realm application.

In this tutorial, you'll build a functional web application backed by the
{+service+} GraphQL API. The app uses :reactjs:`React <>` to define UI
components and :apollo:`Apollo Client <doc/react>` to run queries and mutations
through the GraphQL API. We've already created most of the frontend application
for you, so you don't need to know React to follow along.

The app is a task tracker that allows users to:

- Register and log in with an email/password account.
- View a list of their projects. 
- Add, view, and delete tasks for projects they are a member of.
- Switch tasks between Open, In Progress, and Complete statuses
- Add, view, and remove team members from projects.

This tutorial should take around 30 minutes.

.. admonition:: Realm Web SDK and Sync
   :class: important
   
   The Realm Web SDK does not support :ref:`sync <sync-overview>`, so the app
   you'll build in this tutorial won't update in real time when data changes.
   However, data that you create from the web app will automatically sync to any
   of the other :ref:`task tracker tutorial apps <tutorial>` that use Realm
   Database.

Prerequisites
-------------

Before you get started, you'll need the following:

- A complete task tracker app in MongoDB Realm. If you haven't yet completed
  :doc:`Set up the Task Tracker Tutorial Backend </tutorial/realm-app>`, do
  that before you continue.

- :nodejs:`Node.js <>` installed on your machine.

- `git <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>`__
  installed on your machine.

Once you're set up with these prerequisites, you're ready to start the tutorial.

A. Clone the Client App Repository
----------------------------------

We've already put together a task tracker browser application that has most of
the frontend code you'll need. You can clone client application repository
directly from GitHub:

.. code-block:: shell
   
   git clone https://github.com/mongodb-university/realm-tutorial-web.git

In your terminal, run the following commands to navigate to the task tracker
client application and install its dependencies:

.. code-block:: shell
   
   cd realm-tutorial-web
   npm install

The realm-tutorial-react-native repository contains two branches: ``final``
and ``start``. The ``final`` branch is a finished version of the app as it
should look *after* you complete this tutorial. To walk through this
tutorial, please check out the ``start`` branch:

.. code-block:: shell
   
   git checkout start

B. Explore the App Structure & Components
-----------------------------------------

The web client is a standard React web application written in JavaScript and
scaffolded with `create-react-app
<https://facebook.github.io/create-react-app/>`__. We encourage you to explore
the files in the app for a few minutes before you continue the tutorial. This
will help you to familiarize yourself with what the app contains and where
you'll be working.

The project uses the following file structure:

.. include:: /includes/task-tracker-web-client-base-file-structure.rst

Realm & Apollo
~~~~~~~~~~~~~~

The ``/src/realm`` directory contains all of the modules that you'll use to
connect the application to Realm. These files are only incomplete scaffolds -
some are blank and others require you to make some modifications. This tutorial
walks through adding the missing code in these files to connect the task tracker
app to Realm.

React Components & Hooks
~~~~~~~~~~~~~~~~~~~~~~~~

The ``/src/components`` and ``/src/hooks`` directories contain pre-built React
components and hooks that handle local state management and UI rendering. The
components import code from the files in ``/src/realm`` and use them to interact
with Realm. We've already completely implemented these so you won't need to add
any code to these files. We'll make sure to show you along the way how these
components and hooks use the code that you write.

.. admonition:: React Components
   :class: note

   React is a `popular
   <https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-web-frameworks>`__
   modern web application framework that uses a component model to maintain
   application state and intelligently render pieces of the UI. If you're not
   familiar with React or want to brush up on your knowledge, check out the
   `official React website <https://reactjs.org>`_, which has excellent
   documentation and tutorials.

C. Connect to Your MongoDB Realm App
------------------------------------

The client app needs to connect to your Realm app so that users can register and
log in. In ``src/RealmApp.js``, we import the Realm Web SDK to connect to
Realm and handle these actions. The file exports a React context provider that
encapsulates this behavior and makes it available to other components in the
app.

Some of the functionality in ``RealmApp.js`` is not fully defined. You need to
update the code to use the SDK to connect to your Realm app and handle user
authentication.

.. include:: /includes/steps/task-tracker-web-realmapp.rst

.. admonition:: How We Use It
   :class: admonition-example
   
   In ``src/App.js``, we use the ``useRealmApp()`` hook to determine
   when the main application is ready to render. We also check for an
   authenticated user and always render exclusively the login screen unless a
   user is logged in. This guarantees that only authenticated users can access
   the rest of the app.
   
   .. literalinclude:: /tutorial/generated/code/final/App.codeblock.requireLoggedInUser.js
      :caption: ``src/App.js``
      :language: javascript

In ``/components/LoginScreen.js``, we use the wrapped authentication methods
that you defined to log user in and register new users.

Find the the ``handleLogin`` function and add the following code to process a 
``emailPassword`` credential by calling the ``logIn()`` method. 
 
.. literalinclude:: /tutorial/generated/code/final/LoginScreen.codeblock.handleLogin.js
  :language: javascript

Next, find the ``handleRegistrationAndLogin`` function and add the following code 
to create a ``emailPassword`` credential.

.. literalinclude:: /tutorial/generated/code/final/LoginScreen.codeblock.handleRegistrationAndLogin.js


D. Define the GraphQL Schema & Operations
-----------------------------------------

A GraphQL schema defines all of the types, enums, and scalars that a GraphQL
API supports. Realm automatically generates a GraphQL schema for you, and you
can use it to generate useful TypeScript types for your data.

In addition to generating types from a schema file, you can also generate
functions and GraphQL objects for operations such as queries and mutations.
You can split operations across multiple files, but in this tutorial we'll
define all of the CRUD operations that the app uses to work with tasks and
user documents in a single file.

Navigate to the ``src/graphql/useTaskMutations.js`` file and define the 
following mutations:

* ``AddTaskMutation``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.addTaskMutation.js
     :language: javascript

* ``UpdateTaskMutation``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.updateTaskMutation.js
     :language: javascript

* ``DeleteTaskMutation``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.deleteTaskMutation.js
     :language: javascript

The custom query and mutation hooks are lightweight wrappers around Apollo's
``useQuery()`` and ``useMutation()`` hooks. Once you have completed defining 
the task mutations, you will need to implement functions that execute those 
mutations. In the same ``src/graphql/useTaskMutations.js``file, find the 
following functions and call the appropriate mutations: 

* ``useAddTask``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.useAddTask.js
     :language: javascript

* ``useUpdateTask``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.useUpdateTask.js
     :language: javascript

* ``useDeleteTask``

  .. literalinclude:: /tutorial/generated/code/final/useTaskMutations.codeblock.useDeleteTask.js
     :language: javascript

E. Connect Apollo to the GraphQL API
------------------------------------

We've defined GraphQL CRUD operations and created custom query and mutation hooks
for tasks. However, these hooks must be wrapped in an Apollo context provider 
that makes an ``ApolloClient`` object available.

In ``src/graphql/RealmApolloProvider.js``, we export a React component that
provides the ``ApolloClient`` object but the function that instantiates the
client is incomplete. You need to update the file to create a client that can
connect to your app's GraphQL API.

.. include:: /includes/steps/task-tracker-web-apollo.rst

F. Implement the Projects List
------------------------------

As defined by our data model, ``projects`` are an embedded object of the ``users`` object.
Therefore, if we want to retrieve a list of projects, we'll have to access the :ref:`user custom 
data object </users/enable-custom-user-data>`. 

In the file ``/graphql/useProjects.js``, we need to implement the retrieval of the 
current user's projects. We'll need to add the following code:

.. literalinclude:: /tutorial/generated/code/final/useProjects.codeblock.useProjects.js
   :language: javascript

G. Use Realm functions
----------------------

In the ``EditPermissionsModal.js`` file, there are functions that rely on :ref:`{+service-short+} 
functions </functions>`. {+service-short+} functions allow you to execute server-side 
logic for your client applications.

First, you need to import the functions for client-side usage. Next, you will need to 
implement the function ``updateTeamMembers()`` so that it calls the ``getMyTeamMembers``
function and updates the ``team`` variable with the current team members. Then you need to 
implement the ``addTeamMember()`` and  ``removeTeamMember()`` functions so that it adds/removes
the user as a team member when provided with their email.

.. literalinclude:: /tutorial/generated/code/final/EditPermissionsModal.codeblock.useTeamMembers.js
   :language: javascript

Try It Out
----------

The task tracker app is now fully configured so you can start it up to start
tracking tasks.

Start the App
~~~~~~~~~~~~~

To start the app, navigate to the project root in your shell and then enter the
following command:

.. code-block:: shell
   
   npm run start

If the app starts successfully, you should see output that resembles the
following:

.. code-block:: shell
   
   Compiled successfully!
   
   You can now view task-tracker in the browser.
   
     Local:            http://localhost:3000
     On Your Network:  http://191.175.1.124:3000

Open your browser to http://localhost:3000 to access the app.

If the app builds successfully, here are some things you can try in the app:

- Create a user with email *first@example.com*
- Explore the app, then log out or launch a second instance of the app in an incognito browser window
- Create another user with email *second@example.com*	  
- Navigate to *second@example.com*'s project
- Add, update, and remove some tasks	  
- Click "Manage Team"
- Add *first@example.com* to your team
- Log out and log in as *first@example.com*
- See two projects in the projects list
- Navigate to *second@example.com*'s project
- Collaborate by adding, updating, and removing some new tasks


What's Next?
------------

You just built a functional task tracker web application built with MongoDB
Realm. Great job!

Now that you have some hands-on experience with MongoDB Realm, consider these
options to keep practicing and learn more:

- Extend the task tracker app with additional features. For example, you could:
  
  - allow users to log in using another :ref:`authentication provider <authentication-providers>`

- Follow another tutorial to build a mobile app for the task tracker. We have
  task tracker tutorials for the following platforms:
  
  - :doc:`iOS (Swift) </tutorial/ios-swift>`
  - :doc:`Android (Kotlin) </tutorial/android-kotlin>`
  - :doc:`React Native (JavaScript) </tutorial/react-native>`
  - :doc:`Node.js (JavaScript) CLI </tutorial/nodejs-cli>`

- Dive deeper into the docs to learn more about MongoDB Realm. You'll find
  information and guides on features like:
  
  - Serverless :doc:`functions </functions>` that handle backend logic and
    connect your app to external services. You can call functions from a
    client app, either directly or as a :doc:`custom GraphQL resolver
    </graphql/custom-resolvers>`.
  
  - :doc:`Triggers </triggers>` and :ref:`incoming webhooks <service-webhooks>`,
    which automatically call functions in response to events as they occur. You
    can define :doc:`database triggers </triggers/database-triggers>` which
    respond to changes in your data, :doc:`authentication triggers
    </triggers/authentication-triggers>` which respond to user management and
    authentication events, and :doc:`scheduled triggers
    </triggers/scheduled-triggers>` which run on a fixed schedule.

  - Built-in :doc:`authentication providers </authentication/providers>` and
    and user management tools. You can allow users to log in through multiple
    methods, like API keys and Google OAuth, and associate :doc:`custom data
    </users/enable-custom-user-data>` with every user.

.. include:: /includes/tutorial-request-for-feedback-note.rst
