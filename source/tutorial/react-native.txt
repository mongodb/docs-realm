.. _react-native-tutorial:

=====================
React Native Tutorial
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm provides a Node SDK that allows you to create a Mobile Application with
React Native. This tutorial illustrates the creation of a "Task Tracker" React Native
application that allows users to: 

- Sign in to their account with their email and password and sign out later.
- View a list of projects they are a member of.
- View, create, modify, and delete tasks in projects.
- View a list of team members in their project.
- Add and remove team members to their project.

This tutorial should take around 30 minutes.

.. note:: Check Out the Quick Start
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   check out the :ref:`React Native Quick Start
   <react-native-client-quick-start>`. It includes copyable code examples and
   the essential information that you need to set up an Atlas App Services
   backend.

Prerequisites
-------------

Ensure that you have the following:

- `nodejs <https://nodejs.org/dist/latest-v10.x/>`_ version 10.x or later.

- If you plan to run the app on an iOS device or emulator: 
  `Xcode <https://developer.apple.com/xcode/>`__
  version 11.0 or higher, which requires macOS 10.14.4 or higher.

- If you plan to run the app on an Android device or emulator: `Android Studio
  <https://developer.android.com/studio>`_.

- The React Native CLI. Detailed instructions for setting up your development 
  environment, including the CLI tools, can be found in the 
  `React Native docs <https://reactnative.dev/docs/environment-setup>`_.

- :ref:`Set up the Atlas App Services backend <tutorial-task-tracker-create-realm-app>`.

Get Set Up
----------

.. procedure::

   .. step:: Clone the Client App Repository

      We've put together a React Native application that has
      most of the code you'll need. Clone the client application repository
      directly from :github:`GitHub <mongodb-university/realm-tutorial-react-native>`:

      .. code-block:: shell

         git clone --branch start https://github.com/mongodb-university/realm-tutorial-react-native.git

      .. tip::

         The ``start`` branch is an incomplete version of the app that we will
         complete in this tutorial. To view the finished app, check out the
         ``final`` branch, install dependencies (as described in the next step),
         and update ``realmApp.js`` with your :ref:`Realm app ID <find-your-app-id>`.


   .. step:: Install Dependencies and Launch the App

      In your terminal, run the following commands to navigate to the task tracker
      client application and install its dependencies:

      .. code-block:: shell

         cd realm-tutorial-react-native
         npm install

      If you plan to run the app on an iOS device or emulator, you need to install
      additional dependencies with
      `CocoaPods <https://guides.cocoapods.org/using/getting-started.html>`__. Change
      directories to the ``ios`` directory and run ``pod install``, as shown here:

      .. code-block:: shell

         cd ios
         pod install --repo-update
         cd ..

      Be sure to switch back to the :guilabel:`realm-tutorial-react-native` root
      directory after installing the pods.


   .. step:: Test the Setup

      At this point, you have a React Native app that can run on both iOS and Android.
      We haven't yet implemented the necessary code for app
      functionality, so there will be errors when the app loads, but you can
      ensure that the app deploys properly.

      Start by running `Metro <https://facebook.github.io/metro/>`__ in a terminal
      window by using the following command:

      .. code-block:: shell

         npx react-native start

      Leave Metro running, and in a **separate terminal window**, issue one of the
      following commands, depending on whether you want to run on iOS or Android:

      .. code-block:: shell

         npx react-native run-ios

      or

      .. code-block:: shell

         npx react-native run-android

      After the emulator is started and the bits have been deployed, you should see
      the app is "running" and one or more errors are displayed:

      .. figure:: /images/rn-app-initial-state.png
        :alt: The initial state of React Native app
        :width: 250px

      .. important:: CompileC Error

         If, when compiling the iOS app, you get a CompileC build error that involves
         "Flipper," you will need to edit ``/ios/Podfile``. Look for the section
         that enables Flipper and comment out those lines:

         .. code-block:: text

            # Enables Flipper.
            #
            # Note that if you have use_frameworks! enabled, Flipper will not work and
            # you should disable these next few lines.
            # use_flipper!
            #post_install do |installer|
            #  flipper_post_install(installer)
            #end

A Look Inside
-------------
For a better understanding of the files used in this tutorial, the following table 
highlights some of the more important files. :

.. cssclass:: config-table
.. list-table::
    :header-rows: 1
    :widths: 30 70
    
    * - File
      - Purpose

    * - realmApp.js
      - Provides access to the Realm app instance.

    * - App.js
      - Defines which screens are in the app and sets up the navigation system.

    * - schemas.js
      - Defines the Realm object models used in this app.

    * - providers/AuthProvider.js
      - Defines the AuthProvider, which handles user login, log out, and
        project membership information for the current user.

    * - providers/TasksProvider.js
      - Defines the TasksProvider, which handles fetching, adding, updating,
        and deleting tasks within a project.

    * - components/ActionSheet.js
      - A component that presents the user with a list of actions.

    * - components/AddTask.js
      - A button that, when pressed, prompts the user to enter new task
        information and creates it with the given createTask function.

    * - components/Logout.js
      - A button that handles user log out.

    * - components/ManageTeam.js
      - A list of team members on the current user's project that provides
        controls for adding and removing team members.

    * - components/TaskItem.js
      - A list item that represents a task in a list. When pressed, it presents
        an ActionSheet with actions corresponding to deleting the task or
        updating the task's status.

    * - views/ProjectsView.js
      - The screen that presents a list of projects that the current user is a
        team member of.

    * - views/TasksView.js
      - The screen showing the tasks for a given project. If this is the
        logged-in user's own project, the TasksView includes a button open a
        ManageTeam view.

    * - views/WelcomeView.js
      - The screen that allows a user to log in or register a user.


Build The App
-------------

.. procedure::

   .. step:: Connect to Your MongoDB Realm App

      To get the app working with your backend, you first need to instantiate the
      Realm app. The Realm app is the interface to the MongoDB App Services backend.
      Navigate to the ``realmApp.js`` file and create an instance of your Realm app:

      .. literalinclude:: /tutorial/generated/code/final/realmApp.snippet.instantiate-realm-app.js
         :language: javascript

      Be sure to enter your own Realm app ID, which you can
      :ref:`find in the Realm UI <find-your-app-id>`.


   .. step:: Implement the AuthProvider

      Navigate to ``providers/AuthProvider.js``. In this file, and in the
      ``providers/TasksProvider.js`` file that we will complete a bit later, we use
      React :reactjs:`Context <docs/context.html>` and :reactjs:`hooks
      <docs/hooks-overview.html>` to implement a data provider pattern. Don't worry
      if you aren't too familiar with these constructs yet. The basic idea is as
      follows:

      - The Provider component handles fetching and modifying data.
      - Any descendant of the Provider component can use a hook function to access
        the provider's data as well as its commands for modifying the data.

      The AuthProvider is responsible for logging in, registering a user, logging
      out, and retrieving the list of projects that a user is a member of from the
      custom user data object.

      First, let's implement the login functionality that a descendant component can
      pass an email and password in order to log in:

      .. literalinclude:: /tutorial/generated/code/final/AuthProvider.snippet.sign-in.js
         :language: javascript

      Next, implement the user registration functionality by using the
      email/password provider of the Realm app:

      .. literalinclude:: /tutorial/generated/code/final/AuthProvider.snippet.sign-up.js
         :language: javascript

      Next, implement the log out functionality:

      .. literalinclude:: /tutorial/generated/code/final/AuthProvider.snippet.sign-out.js
         :language: javascript


   .. step:: Open a Realm

      The AuthProvider must access the custom user data object so it can
      provide a list of projects associated with the user. We have set up our app
      so that the custom user data object exists in a specific realm, where only
      one user object exists.

      .. include:: /includes/note-tutorial-custom-user-data-permissions.rst

      To access the custom user data, we will create a Configuration object that
      specifies a partition value of the  pattern ``user=<USER_ID>`` and then add
      code to open the realm.

      Because there may be a delay between when a user first registers and when the
      authentication trigger creates the user custom data object, the
      realm may be empty when first opened. Rather than have an empty realm, we need
      to add an observer to the collection of users in that realm which watches for
      the appearance of the user object and any changes to its project memberships.
      When a user object is available, your code will read its ``memberOf`` field
      to populate the available project data for any descendant of the provider:

      .. literalinclude:: /tutorial/generated/code/final/AuthProvider.snippet.open-user-realm.js
         :language: javascript

      Finally, the Realm SDK requires you to close any realm you open when you are
      finished with it. You can return a cleanup function from the effect, which
      will close the realm any time the user changes or the component is unmounted:

      .. literalinclude:: /tutorial/generated/code/final/AuthProvider.snippet.user-realm-cleanup.js
         :language: javascript


      .. note::

         Check out the ``App.js``, ``views/WelcomeView.js``, and ``views/ProjectView.js``
         files to see how they use the AuthProvider's ``signIn``, ``signUp``, and
         ``signOut`` functions and the user data via the ``useAuth()`` hook function.
         The ProjectView also uses the project data to populate the list of projects
         available to the logged-in user.

      You should now be able to run the app, sign in, view your projects, and sign
      out. We will implement the task management functionality next.


   .. step:: Define the Task Schema

      In order to work with task objects in the Realm Database, we need to define
      their schema. Navigate to the ``schemas.js`` file to complete the task class's
      schema definition where it says ``TODO``:

      .. literalinclude:: /tutorial/generated/code/final/schemas.snippet.react-native-task-schema.js
         :language: javascript


   .. step:: Implement the TasksProvider

      The TasksProvider component, like the AuthProvider, manages the data that its
      descendants can use. As the name implies, the TasksProvider provides the task
      objects for a given project. The project partition is passed in as a prop.

      The first thing to implement is opening the realm for the specified
      project. When configuring the user realm, we used a partition key value pattern of
      ``user=<USER_ID>``. Similarly, projects use a partition key value pattern of
      ``project=<USER_ID>``. For the sake of this tutorial's simplicity, each user
      always has exactly one project, specified by the partition key value
      containing their own user ID.

      In the effect block of ``providers/TasksProvider.js``, configure and open the
      realm. Once opened, attach an observer that will update the tasks list when
      any changes come in:

      .. literalinclude:: /tutorial/generated/code/final/TasksProvider.snippet.open-project-realm.js
         :language: javascript

      Again, Realm requires you to close any realm you open once you are done with
      it. We can do that by returning a cleanup function from the effect:

      .. literalinclude:: /tutorial/generated/code/final/TasksProvider.snippet.clean-up.js
         :language: javascript

      A user can create, update, and delete tasks in a project that they are a
      member of. To implement the task creation functionality, find the
      ``createTask`` function and add the following code:

      .. literalinclude:: /tutorial/generated/code/final/TasksProvider.snippet.create-task.js
         :language: javascript

      For this application, we limit updates to changing the status of the task.
      Find the ``setTaskStatus`` function and implement the following code, which
      changes the Task's status:

      .. literalinclude:: /tutorial/generated/code/final/TasksProvider.snippet.set-task-status.js
         :language: javascript

      Finally, in the ``deleteTask`` function, implement the task deletion functionality:

      .. literalinclude:: /tutorial/generated/code/final/TasksProvider.snippet.delete-task.js
         :language: javascript

      Check out the ``views/TasksView.js`` and ``components/TaskItem.js`` files to see how
      they use the provider's task data and functionality via the ``useTasks()``
      hook function.


   .. step:: Implement Team Management

      A user can add other users to their team, which allows them to view, edit, and
      delete tasks on the user's project. The ``ManageTeam`` component implements this
      functionality by calling a few Realm functions on the backend that we defined
      earlier.

      Navigate to ``components/ManageTeam.js`` and find the ``getTeam`` function.
      In this function, we need to fetch the list of  current team members:

      .. literalinclude:: /tutorial/generated/code/final/ManageTeam.snippet.get-team.js
         :language: javascript

      Next, in the ``addTeamMember`` function, we will call the backend function
      ``addTeamMember`` to implement add team  member functionality:

      .. literalinclude:: /tutorial/generated/code/final/ManageTeam.snippet.add-team-member.js
         :language: javascript

      Finally, in the ``removeTeamMember`` function, we call another backend function,
      named ``removeTeamMember``, that removes a team member:

      .. literalinclude:: /tutorial/generated/code/final/ManageTeam.snippet.remove-team-member.js
         :language: javascript


   .. step:: Run and Test

      Congratulations! Now that you have completed the code, you can run the app and
      check functionality. Here are some things you can try in the app:

      - Create a user with email *first@example.com*
      - Explore the app, then log out or launch a second instance of the app on another device or simulator
      - Create another user with email *second@example.com*
      - Navigate to *second@example.com*'s project
      - Add, update, and remove some tasks
      - Click "Manage Team"
      - Add *first@example.com* to your team
      - Log out and log in as *first@example.com*
      - See two projects in the projects list
      - Navigate to *second@example.com*'s project
      - Collaborate by adding, updating, and removing some new tasks

      .. tip::

         If something isn't working for you, you can check out the ``final`` branch of
         this repo to compare your code with our finished solution.

What's Next?
------------

- Read our :ref:`React Native SDK <react-native-intro>` documentation.
- Try the :ref:`App Services Backend tutorial <backend-tutorial>`.
- Find developer-oriented blog posts and integration tutorials on the `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
