.. _flutter-tutorial:

================
Flutter Tutorial
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm provides a Flutter SDK that allows you to create a multi-platform
applications with Dart and Flutter. This tutorial is based on the
Flutter Flexible Sync Template App, named ``flutter.todo.flex``, which illustrates
the creation of a Todo application. This application enables users to:

- Register their email as a new user account.
- Sign in to their account with their email and password (and sign out later).
- View, create, modify, and delete task items.

This tutorial adds on to the Template App. You will add a new ``priority`` field
to the existing ``Item`` model and update the
:ref:`Flexible Sync subscription <queryable-fields>` to only show items within
a range of priorities.

Depending on your experience with Flutter, this tutorial should take
around 30 minutes.

.. note:: Check Out the Quick Start

   If you prefer to get started with your own application rather than follow a
   guided tutorial, check out the :ref:`Flutter Quick Start <flutter-quick-start>`.
   It includes copyable code examples and the essential information that you
   need to set up a Realm Flutter SDK application.


Prerequisites
-------------

Before you begin, You should have previous experience deploying a Flutter app
to an Android Emulator, iOS Simulator, and/or a physical device.

Start with the Template
-----------------------

This tutorial is based on the Flutter Flexible Sync Template App named
"flutter.todo.flex". We start with the default app and build new features
on it.

If you already have the latest Realm CLI installed, you can run the
:ref:`realm-cli apps create <realm-cli-apps-create>` command to set up the
backend and create the Flutter base app. The following command creates a new
app based on the flutter.todo.flex template. The app is created in a
development environment, is named "MyTutorialApp", and is deployed in the US-VA
region:

.. code-block:: sh

   realm-cli apps create -n MyTutorialApp --template flutter.todo.flex \
      --deployment-model global --location us-va --environment development

To learn more about the Template Apps, and to install the Template App that this
tutorial uses in the Atlas App Services UI, see :ref:`Template Apps <template-apps>`.

Set up the Template App
-----------------------

.. procedure::

   .. step:: Open the App

      Navigate to the :file:`MyTutorialApp/frontend/flutter.todo.flex` directory,
      which contains the template Realm Flutter app.
      Open the Flutter app with your code editor.

   .. step:: Explore the App Structure

      In your code editor, take a few minutes to explore how the project is
      organized. This is a standard multi-platform Flutter application
      that has been modified for our specific use. Specifically, the following
      files contain important uses of the Realm Flutter SDK:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 35 65

         * - File
           - Purpose

         * - :file:`lib/main.dart`
           - Entry point into the app. Contains routing and state management.

         * - :file:`lib/realm/schemas.dart`
           - Defines Realm Database schema.

         * - :file:`lib/realm/schemas.g.dart`
           - Generated Realm object class.

         * - :file:`lib/realm/app_services.dart`
           - Handles interaction with Atlas App Services.

         * - :file:`lib/realm/init_realm.dart`
           - Initializes the realm and adds a subscription to sync data
             with MongoDB Atlas using Device Sync.

         * - :file:`lib/viewmodels/todo_viewmodel.dart`
           - View model class that controls interaction between UI and Realm.

         * - :file:`lib/components/`
           - Component parts of app featuring Flutter widgets.

         * - :file:`lib/screens/`
           - Pages of the app.

   .. step:: Run the App

      Without making any changes to the code, you should be able to run the app
      in either the Android emulator, iOS Simulator, physical mobile device,
      or desktop emulator. When you installed the template app,
      the Realm CLI also set up a new backend for you and populated the
      ``realm.json`` file with the correct App ID.

      Attach to a device and run the Flutter application.

      Once the app is running, register a new user account,
      and then add a new Item to your todo list.

      .. tip::

         For more information on running a Flutter app with development tools,
         refer to the :flutter:`Flutter Test Drive documentation <get-started/test-drive>`.

   .. step:: Check the Backend

      Log in to `Atlas App Services <http://cloud.mongodb.com>`_. In the
      :guilabel:`Atlas` tab, click on :guilabel:`Browse Collections`. In the list
      of databases, find and expand the :guilabel:`todo` database, and then the
      :guilabel:`Item` collection. You should see the document you created
      in this collection.

Modify the Application
----------------------

.. procedure::

   .. step:: Add a New Property

      Now that you have confirmed everything is working as expected, we can
      add changes. In this tutorial, we have decided that we want to add a
      "priority" property to each Item so that we can filter Items by their
      priorities.

      To do this, follow these steps:

      A. In the :file:`flutter.todo.flex` project, open the file
         :file:`lib/realm/schemas.dart`.

      #. Add the following property to the ``_Item`` class:

         .. code-block:: dart
            :caption: lib/realm/schemas.dart

            late int? priority;

      #. Regenerate the ``Item`` Realm object class:

         .. code-block:: sh

            flutter pub run realm generate

   .. step:: Set the Priority when Creating and Updating Items

      A. In :file:`lib/viewmodels/item_viewmodel.dart`, add logic to set and update
         ``priority``. Also add a ``PriorityLevel`` abstract class below the
         ``ItemViewModel`` class to constrain the possible values.

         .. include:: /examples/generated/flutter/tutorial/item_viewmodel.snippet.item-viewmodel.dart.modified.rst

      #. Add a new file to contain a widget to set the priority for an Item.
         Create the file :file:`lib/components/select_priority.dart`.

         .. include:: /examples/generated/flutter/tutorial/select_priority.snippet.select-priority.dart.modified.rst

      #. Now add the ``SelectPriority`` widget to the
         ``CreateItem`` and ``ModifyItem`` widgets. You also need to add
         some additional logic to handle setting the priority. The code you must
         add is shown below.

         Some sections of the files you are adding to are
         replaced with comments in the below code examples to focus on the relevant
         sections of code that are changed.

         Edit the ``CreateItemForm`` widget in :file:`lib/components/create_item.dart`:

         .. include:: /examples/generated/flutter/tutorial/create_item.snippet.create-item.dart.modified.rst

         Edit the ``ModifyItemForm`` widget in :file:`lib/components/modify_item.dart`:

         .. include:: /examples/generated/flutter/tutorial/modify_item.snippet.modify-item.dart.modified.rst

      #. Now add a visual indicator for priority in the ``ItemCard`` widget
         in :file:`lib/components/item_card.dart`. Create a new widget ``_PriorityIndicator`` that gives
         a visual indicator of the Item's priority.

         Add a ``_PriorityIndicator`` widget you just created to the ``ItemCard``
         widget.

         .. include:: /examples/generated/flutter/tutorial/item_card.snippet.item-card.dart.modified.rst

   .. step:: Delete App from Device

      Delete the Flutter app and all associated data from the device or simulator
      that you're running it on.
      You should do this to prevent issues with the schema migration.
      Because the data is syncing, any Items you made still exist in MongoDB
      Atlas and will sync when you reopen the app.

      How to delete the app and associated data varies depending on where you're
      running the app. Refer to your device or simulator's documentation
      for help deleting app data.

   .. step:: Run and Test

      At this point, you can run the application again. Log in using the account
      you created earlier in this tutorial. You will see the one Item you
      previously created. Add a new Item, and you will see that you can now
      set the priority. Choose ``High`` for the priority and save the Item.

      Now switch back to the Atlas data page in your browser, and refresh the
      ``Item`` collection. You should now see the new Item with the ``priority``
      field added and set to **1**. You will also notice that the existing Item
      now also has a ``priority`` field, and it is set to **null**, as shown in
      the following screenshot:

      .. figure:: /images/dotnet-tutorial-two-new-items.png
         :alt:  Two items in a collection
         :figwidth: 300px

      .. note:: Why Didn't This Break Sync?

         Adding a property to a Realm object is not a breaking change and therefore
         does not require a :ref:`client reset <client-resets>`. The template
         app has Development Mode enabled, so changes to the client Realm object
         are reflected in the server-side schema. For more information, see
         :ref:`<concept-development-mode>` and :ref:`<additive-changes-synced-schema>`.

Now that we added the priority field, we want to update the Device Sync subscription
to only sync Items marked as a High or Severe priority.

.. procedure::

   .. step:: Update the subscription

      In the :file:`lib/realm/init_realm.dart` file, we define the Flexible Sync
      subscription that defines which documents we sync with the user's device
      and account. Currently, we are syncing all all documents where
      the ``owner`` property matches the authenticated user.

      The current subscription:

      .. literalinclude:: /examples/generated/flutter/tutorial/init_realm.snippet.base-version.dart
         :language: dart
         :caption: lib/realm/init_realm.dart
         :emphasize-lines: 3-5

      Now we're going to change the subscription to only sync High and Severe
      priority Items.
      As you may recall, the priority field is of type ``int``, where the highest
      priority ("Severe") has a value of 0, and the lowest priority ("Low") has
      a value of 3. We can make direct comparisons between an int and the
      priority property. To do so, we're going to refactor the subscription query
      to include Items where the priority is less than or equal to
      ``PriorityLevel.high`` (or 1). We will also give the subscription the new name
      ``"getUserItemsWithHighPriority"``.

      First, import :file:`lib/viewmodels/item_viewmodel.dart`:

      .. literalinclude:: /examples/generated/flutter/tutorial/init_realm.snippet.import-viewmodel.dart
         :caption: lib/realm/init_realm.dart
         :language: dart

      Update the subscription to delete the old subscription and add
      a new one that uses priority:

      .. include:: /examples/generated/flutter/tutorial/init_realm.snippet.updated-sub.dart.modified.rst

   .. step:: Run and Test

      Run the application again. Log in using the account you created earlier
      in this tutorial. You would expect to **not** see the first Item created,
      since doesn't have a priority. But it is in the list.
      If you check your application logs in the terminal,
      you will see an entry that looks something like this:

      .. code-block:: sh
         :copyable: false

         "Client provided query with bad syntax: unsupported query for table "Item":
            key "priority" is not a queryable field" (error_code=300, query_version=1)

      This message tells us that we have added a field to our subscription without
      configuring Flexible Sync to use that field.

   .. step:: Update Flexible Sync on the Server

      A. Switch back to the Atlas page in your browser. Select the
         :guilabel:`Atlas App Services` tab and open the app you are using.

      #. In the left-hand navigation, choose :guilabel:`Device Sync`, and then
         click **OK** in the dialog box about Development Mode being enabled.

      #. Scroll down to the :guilabel:`Select Queryable Fields` section. In the
         dropdown labeled **Select or create a queryable field**, choose
         "priority". The priority field will be added to the fields shown:

         .. figure:: /images/dotnet-tutorial-priority-subscribed.png
            :alt:  Priority field is now queryable.

      #. Save your changes.

   .. step:: Test the changes

      Return to your Flutter app. To ensure the subscription is re-run, log out
      the current user, and then log in again.

      After an initial moment when Realm resyncs the document collection, you
      *might* see an error message resembling the following:

      .. code-block::

         The following RangeError was thrown building StreamBuilder<RealmResultsChanges<Item>>(dirty, state:
         _StreamBuilderBaseState<RealmResultsChanges<Item>, AsyncSnapshot<RealmResultsChanges<Item>>>#387c4):
         RangeError (index): Invalid value: Only valid value is 0: 3

      This error can occur with the ``StreamBuilder`` widget as the subscription updates.
      In a production app, you could add error handling. But for the sake of
      this tutorial, just perform a hot refresh and the error will go away.

      Now you should see the new Item of High priority that you created.

      If you want to further test the functionality, you can create Items of various
      priorities. You will see that a new Item with a lower priority briefly
      appears in the list of Items and then disappears.
      Realm creates the Item locally, syncs it with the backend, and then filters
      out the Item because it doesn't meet the subscription rules.

      You'll note, too, that the document you initially created is not synced,
      because it has a priority of ``null``.
      If you want this Item to be synced,
      you can edit the document in the Atlas UI and add a value for the priority
      field, or you can change your subscription to include documents with null
      values. You must use the Realm Query Language ``nil`` type to represent the
      null value in your query.  We will also give the subscription the new name
      ``"getUserItemsWithHighOrNoPriority"``.

      .. include:: /examples/generated/flutter/tutorial/init_realm.snippet.post-update.dart.modified.rst

      Again, when a ``StreamBuilder`` error occurs the first time you open the
      app with the new subscription, perform a hot refresh to see the expected data.

Conclusion
----------

Adding a property to an existing Realm object is a non-breaking change, and
Development Mode ensures that the schema change is reflected server-side. If
you add or change a subscription to use an additional field, whether newly
added or previously existent, you need to modify the Flexible Sync settings to
enable querying against that field.

What's Next?
------------

- Read our :ref:`Flutter SDK <flutter-intro>` documentation.
- Find developer-oriented blog posts and integration tutorials on the
  `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__
  to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
