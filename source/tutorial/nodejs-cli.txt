.. _nodejs-cli-tutorial:

====================
Node.js CLI Tutorial
====================

.. default-domain:: mongodb

.. contents:: Tutorial Sections
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this tutorial, you will use Node.js to create a task
tracker command line interface (CLI) that allows users to:

- Register themselves with email and password.
- Sign in to their account with their email and password.
- View a list of projects they are a member of.
- View, create, modify, and delete tasks in projects.
- View a list of team members in their project.
- Add and remove team members to their project.

This tutorial should take around 30 minutes to complete.

.. note:: Check Out the Quick Start
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   check out the :ref:`Quick Start <node-client-quick-start>`. It
   includes copyable code examples and the essential information that you need
   to set up a MongoDB Realm application.

Prerequisites
-------------

Before you begin, ensure you have:

- `Node.js <https://nodejs.org/en/download/>`_ installed.
- :ref:`Set up the backend <tutorial-task-tracker-create-realm-app>`.

Once you're set up with these prerequisites, you're ready to start the tutorial.

A. Clone the Client App Repository
----------------------------------

We've already put together a task tracker CLI application that has most of
the code you'll need. You can clone the client application repository
directly from GitHub:

.. code-block:: console
   
   git clone https://github.com/mongodb-university/realm-tutorial-node-js.git

.. important::
   
   The ``final`` branch is a finished version of the app as it should look *after*
   you complete this tutorial. To walk through this tutorial, please check 
   out the ``start`` branch:

   .. code-block:: console
    
      git checkout start

In your terminal, run the following command to install its dependencies:

.. code-block:: console
   
   npm install

B. Explore the App Structure & Components
-----------------------------------------

This application has a flat project structure: all of the files are in the root 
directory. Open a text editor to explore the directory and files. In this tutorial, 
we'll be focusing on 5 files: ``config.js``, ``users.js``, ``tasks.js``, ``team.js``, 
``projects.js``. The other files provide the underlying structure for the CLI. The 
following table describes the role of important files in this project:

.. list-table::
   :header-rows: 1
   :widths: 15 85
   
   * - File
     - Purpose

   * - config.js
     - Provides a single location for configuration data. You will put your 
       Realm app ID here.
   
   * - index.js
     - The entry point for the app. Creates the Realm App that you app will use 
       throughout its lifecycle and displays the initial logon screen.
   
   * - main.js
     - Displays the main menu of choices. Users can view a list of projects 
       they are a member of or select a project. 
   
   * - output.js
     - Responsible for displaying text in the terminal window.
   
   * - tasks.js
     - Handles all task-related communication between the CLI and Realm. The 
       methods for listing, creating, editing, and deleting tasks live here.
   
   * - schemas.js
     - Contains the schema definitions for the collections used in this project.

   * - users.js
     - Handles Realm user authentication, including logging in, registering a 
       new user, and logging out.

   * - team.js
     - Handles the team member related communication between the CLI and Realm. 
       The methods for listing, adding, and removing team members are contained in
       this file. 
   
   * - projects.js
     - Handles project retrieval and listing. 

C. Connect to Your MongoDB Realm App
------------------------------------

To get the app working with your backend, you first need to add your Realm App ID 
to the ``config.js`` file. The ``config.js`` module exports a single property, 
``realmAppId``, which is currently set to "TODO":

.. literalinclude:: /tutorial/generated/code/final/config.codeblock.realmAppID.js
   :language: javascript

Change this value to your Realm App ID. 

.. note::

   To learn how to find your MongoDB Realm ``appId``, read the :doc:`Find
   Your App Id </get-started/find-your-app-id>` doc.

Once you have made that change, you now need to complete the code needed to 
open a {+realm+}. In ``index.js``, find the ``openRealm`` function. Replace the ``TODO`` 
line with a line of code that opens a {+realm+} and assigns it to the ``realm`` 
property. It will look like this:

.. literalinclude:: /tutorial/generated/code/final/index.codeblock.openRealm.js
   :language: javascript

Now that you have implemented the ``openRealm`` function, you will now need to 
complete the code that retrieves the {+realm+}. In ``index.js``, find the 
``getRealm`` function. It will look like this: 

.. literalinclude:: /tutorial/generated/code/final/index.codeblock.getRealm.js
   :language: javascript

At this point, your app is pointing to your backend and opens a connection 
to it when you start the app. However, users cannot log in yet, so let's update 
that code next.

D. Enable authentication
------------------------

In the ``users.js`` file, we have a ``logIn`` function that prompts the user for 
an email address and password, and then, within a try-catch block, creates an 
:js-sdk:`emailPassword <Realm.App.html#Realm.Credentials.html#.emailPassword>` 
credential and passes it to the Realm 
:js-sdk:`logIn() <Realm.App.html#logIn>` method. 

Find the the ``logIn`` function and add the following code to create a
``emailPassword`` credential and call the ``logIn()`` method. 

.. literalinclude:: /tutorial/generated/code/final/users.codeblock.userLogin.js
   :language: javascript

E. Implement the CRUD methods
-----------------------------

In the ``tasks.js`` and ``projects.js`` files, there are a number of functions to handle typical  
CRUD functionality: ``getTasks``, ``getTask``, ``createTask``, ``deleteTask``, 
``editTask``, ``changeStatus``, and ``getProjects``. Each of these functions 
(except ``getTasks`` and ``getProjects``) prompts the user for input and then makes 
the appropriate call to Realm. Your job is to implement the calls to {+service-short+}. 
The following list provides guidance on how to complete this task for each function.

In ``tasks.js``: 

* ``getTasks``

  To get all objects, call the :js-sdk:`objects() <Realm.html#objects>` method 
  and pass in the name of the collection:
  
  .. literalinclude:: /tutorial/generated/code/final/tasks.codeblock.getTasks.js
     :language: javascript


* ``getTask``
  
  In the Tasks collection, a task's ``id`` field is the primary key, so 
  we call the :js-sdk:`objectForPrimaryKey() <Realm.html#objectForPrimaryKey>`  
  function to get a task by its Id.

  .. literalinclude:: /tutorial/generated/code/final/tasks.codeblock.getTask.js
     :language: javascript


* ``createTask``

  Whenever we modify an object in realm, we must do so within a 
  :ref:`transaction <node-open-a-transaction>`. 
  The :js-sdk:`write() <Realm.html#write>` method takes care of 
  transaction handling for us. So, within the ``write`` function, we call
  the :js-sdk:`create() <Realm.html#create>` function, passing in all of the 
  required properties:

  .. literalinclude:: /tutorial/generated/code/final/tasks.codeblock.createTask.js
     :language: javascript

  .. note::
    
    The ``write`` function replaces the need to call the 
    :js-sdk:`beginTransaction() <Realm.html#beginTransaction>`,  
    :js-sdk:`commitTransaction() <Realm.html#commitTransaction>`, and 
    :js-sdk:`cancelTransaction() <Realm.html#cancelTransaction>`
    methods.


* ``deleteTask``
    
  Deleting objects must also take place within a transaction. As with modifying 
  an object, we'll use the write() function to handle the transaction for us.  
  We'll first call the ``objectForPrimaryKey`` method to get the specific we want
  to delete and then the :js-sdk:`delete() <Realm.html#delete>` function on that task:

  .. literalinclude:: /tutorial/generated/code/final/tasks.codeblock.deleteTask.js
     :language: javascript


* ``modifyTask``
    
  This function is called by both the ``editTask`` and ``changeStatus`` functions. 
  Like the ``createTask`` and ``deleteTask`` methods, when you change an object, 
  you do so within a transaction. Other than that, though, there is no specific 
  call to a Realm API to change an object. Rather, you change the *local* object 
  and Sync ensures the object is updated on the server.
  
  .. literalinclude:: /tutorial/generated/code/final/tasks.codeblock.modifyTask.js
     :language: javascript


  .. note::
    
     To learn more about Realm Sync, see :doc:`Sync Overview </sync/overview>`.

In ``projects.js``: 

* ``getProjects``
  
  As defined by our data model, ``projects`` are an embedded object of the ``users`` object. 
  To get all projects the user is a part of, we'll have to use the ``objectForPrimaryKey``
  method to get the current user and then access the current user's ``memberOf`` property.

  .. literalinclude:: /tutorial/generated/code/final/projects.codeblock.getProjects.js
     :language: javascript

  .. note::
     
     To learn more about how {+service-short+} Object models are used in Node.js applications, 
     see :doc:`Realm Objects </node/objects>` in our Node.js client guide. 

F. Use Realm Functions
----------------------

In the ``team.js`` file, there are functions that rely on :ref:`{+service-short+} 
functions <functions>`. {+service-short+} functions allow you to execute server-side 
logic for your client applications. Each of the following functions require you to 
implement the calls to {+service-short+}.

* ``getTeamMembers``

  To get all team members, call the ``getMyTeamMembers`` {+service-short+} function
  using the ``User.functions`` method. 

  .. literalinclude:: /tutorial/generated/code/final/team.codeblock.getTeamMembers.js
     :language: javascript

* ``addTeamMember``

  This function prompts the user for the email of the new team member. You will need 
  to call the ``addTeamMember`` {+service-short+} function and pass it the ``email`` 
  parameter. 

  .. literalinclude:: /tutorial/generated/code/final/team.codeblock.addTeamMember.js
     :language: javascript

* ``removeTeamMember`` 

  This functions prompts the user for the email of the team member they would like to 
  remove from their project. You will need to call the ``removeTeamMember`` 
  {+service-short+} function and pass it the ``email`` parameter.
  
  .. literalinclude:: /tutorial/generated/code/final/team.codeblock.removeTeamMember.js
     :language: javascript


H. Run and Test
---------------

Once you have completed the code, you should run the app and check functionality. 

1. Open a terminal window and change to your app's directory.

#. Run the following commands to install all of the dependencies and start the 
   app:

   .. code-block:: console
      
      npm install
      node index.js

#. Your terminal window will clear and you will see the initial menu prompting 
   you to log in or register as a new user:

   .. image:: /images/node-cli-start-screen.png
      :alt:  Initial menu
    
If the app builds successfully, here are some things you can try in the app:

- Create a user with email *first@example.com*
- Explore the app, then log out.
- Start up the app again and register as another user with email *second@example.com*	 
- Select *second@example.com*'s project
- Add, update, and remove some tasks	 
- Select the "Manage Team" menu option
- Add *first@example.com* to your team
- Log out and log in as *first@example.com*
- See two projects in the projects list
- Navigate to *second@example.com*'s project
- Collaborate by adding, updating, and removing some new tasks

.. tip::
   
   If something isn't working for you, you can check out the ``final`` branch of 
   this repo to compare your code with our finished solution. 

What's Next?
------------

You just built a functional task tracker web application built with MongoDB Realm. Great job!

Now that you have some hands-on experience with MongoDB Realm, consider these
options to keep practicing and learn more:

- Extend the task tracker app with additional features. For example, you could:

  - allow users to log in using another authentication provider

- Follow another tutorial to build a mobile app for the task tracker. We have
  task tracker tutorials for the following platforms:

  - :doc:`iOS (Swift) </tutorial/ios-swift>`
  - :doc:`Android (Kotlin) </tutorial/android-kotlin>`
  - :doc:`React Native (JavaScript) </tutorial/react-native>`
  - :doc:`Web with React and GraphQL (Javascript) </tutorial/web-graphql>`

- Dive deeper into the docs to learn more about MongoDB Realm. You'll find
  information and guides on features like:

  - Serverless :doc:`functions </functions>` that handle backend logic and
    connect your app to external services. You can call functions from a
    client app, either directly or as a :doc:`custom GraphQL resolver
    </graphql/custom-resolvers>`.
  - :doc:`Triggers </triggers>` and :ref:`incoming webhooks <service-webhooks>`,
    which automatically call functions in response to events as they occur. You
    can define :doc:`database triggers </triggers/database-triggers>` which
    respond to changes in your data, :doc:`authentication triggers
    </triggers/authentication-triggers>` which respond to user management and
    authentication events, and :doc:`scheduled triggers
    </triggers/scheduled-triggers>` which run on a fixed schedule.
  - Built-in :doc:`authentication providers </authentication/providers>` and
    and user management tools. You can allow users to log in through multiple
    methods, like API keys and Google OAuth, and associate :doc:`custom data
    </users/enable-custom-user-data>` with every user.

.. include:: /includes/tutorial-request-for-feedback-note.rst
