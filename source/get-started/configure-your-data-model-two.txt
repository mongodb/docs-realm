============================
Configure Your Data Model 2 
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol



Overview
--------

In modern applications, users expect their data to be accurate
cross-platform. Data modeling ensures the accuracy of application data
by performing type and format checks on fields. 

MongoDB Realm allows you to define, synchronize, and enforce your data
model in two formats. A :doc:`Realm Schema </mongodb/document-schemas>`
defines your data as MongoDB Documents and is used to enforce data
validation rules on your Atlas cluster. A :doc:`Realm Object Model
</data-model/realms>` defines your data as native objects in your mobile
application.

Approaches
----------

There are two parallel approaches to configuring both data models. 

- :ref:`Approach 1: <approach-1-use-an-automatically-created-realm-object-model>`
    If you have data in your Atlas cluster already, MongoDB generates a
    Realm Schema by sampling your data. MongoDB Realm can then translate
    that Realm Schema into a Realm Object Model to use in your mobile
    application. 

- :ref:`Approach 2: <approach-2-create-a-realm-schema-from-a-realm-object-model>`
    Alternatively, if you are developing mobile-first and do not
    already have data in your Atlas cluster, you can translate your Realm
    Object Model into a Realm Schema for use with Atlas. 

Regardless of the approach that you take, when you configure both your
Atlas cluster and Mobile application to use the respective data model,
changes between the server and client are auto-updated.  
 
Approach 1: Use an Automatically Created Realm Object Model
-----------------------------------------------------------

You can generate a Realm Schema if you already have data in MongoDB
Atlas. Navigate through the MongoDB Realm UI to sample the data in your
collection and automatically generate a schema. You can then edit that
schema and once you are done editing, MongoDB Realm automatically
translates it into a Realm Object Model for the language of your choice.

Procedure
~~~~~~~~~

.. include:: /includes/steps/auto-schema-generation.rst

Approach 2: Create a Realm Schema From a Realm Object Model
-----------------------------------------------------------

When you link a MongoDB Realm application to an atlas cluster, updating
your Realm Object Model will automatically update your Realm Schema if
:guilabel:`Development Mode` is turned on in the MongoDB Realm UI.
Turning off :guilabel:`Development Mode` will generate a Realm Schema,
based on your Realm Object Model, that your Atlas cluster uses. 

Procedure
~~~~~~~~~

.. note:: 

  To get started, sign up for MongoDB Atlas and create a cluster. Then
  :doc:`link your Atlas cluster</mongodb/link-a-cluster>` to your
  MongoDB Realm Application

.. include:: /includes/steps/development-mode-realm-schema.rst


Summary
-------
- MongoDB Realm uses two different data models, a Realm Object Model for mobile and a Realm Schema for Atlas. Changes to one data model are reflected in the other data model. 
- If you already have data in Atlas, MongoDB Realm creates a Realm Schema by sampling that data. That Realm Schema can be translated into a Realm Object Model to be used in your Realm mobile application code. 
- If you do not have data in Atlas or are developing with a mobile-first approach, you can turn on :guilabel:`Development Mode` to allow for data model changes from a Realm mobile client. When you are done developing your Realm Object Model, :guilabel:`Development Mode` can be turned off and your Realm Schema will be auto-updated with your updated data model configuration. Atlas will begin using this updated data model configuration for data validation on your cluster immediately. 