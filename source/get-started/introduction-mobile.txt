===================================================
Introduction to MongoDB Realm for Mobile Developers
===================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This introduction explains the MongoDB Realm product at a high level for
developers who primarily develop mobile applications. After
reading, you should understand what MongoDB Realm is, how it interacts
with Realm Database, and which benefits MongoDB Realm offers compared to
traditional mobile development stacks.

.. note::
   If you prefer working on the backend or on web
   applications, consider reading the
   :doc:`Introduction for Web Developers
   </get-started/introduction-web>` or the
   :doc:`Introduction for Back-end Developers
   </get-started/introduction-backend>`.

What Problem Does MongoDB Realm Solve?
--------------------------------------

As a developer, you face a number of challenges during the
development of any mobile application. To name a few, mobile developers
must:

- Program in the languages and frameworks for one or more mobile
  operating systems.

- Gracefully handle the unpredictable environment of mobile apps in
  which connections can be lost, devices can shut down at any time, and
  clients usually update with a significant delay after release, if at
  all.

- Coordinate between mobile clients, backend APIs, and databases to
  maintain a common schema of objects and endpoints with which to
  communicate.

- Stay aware of security vulnerabilities across all components in an
  ecosystem, from the HTTP protocol, to API endpoints, to data stored on
  the client.

- Consistently serialize objects between networks, database storage,
  and application memory.

All of these challenges present different obstacles. You can solve each
in isolation with a wide variety of libraries and frameworks. Deciding
which solution solves each problem with the right tradeoffs for your use
case is a challenge most developers know all too well.

In addition to the challenges presented by each component individually,
the combination of multiple components creates even more challenges.
For instance, you can use a Java library on your Android client to
serialize objects in that environment, but consistently serializing
across Android, iOS, the web, and each of your backend services
presents more of a challenge.

Realm Database
--------------

Many, but not all, of these challenges arise due to particularities of
the mobile environment, including network reliability, local storage,
and keeping UIs reactive (up-to-date as underlying data changes).
:term:`Realm Database` solves many common mobile programming headaches:

- **Network reliability**: Realm Database is offline-first: you always
  read from and write to the local database, not over the network.
  When :term:`Realm sync` is enabled, Realm Database synchronizes
  data with MongoDB Realm over the network in a background thread,
  pushing local data changes to MongoDB Realm and pulling remote changes
  down. The :term:`Realm sync protocol` resolves conflicts
  consistently on each client and in the
  :term:`linked MongoDB Atlas cluster <linked cluster>`.

- **Local storage**: Realm Database runs right on client devices, just
  like SQLite. Access data using the native query language for each
  platform, so storing, accessing, and updating your data is simple.

- **Reactive UI**: :term:`Live objects <live objects>` always reflect
  the latest data stored in Realm Database and allow you to subscribe to
  changes, so you can keep your UI up-to-date at all times.

MongoDB Atlas
-------------

Client applications generate a lot of data. Whether it's uploaded
reviews and ratings, posts and comments on a blog, or inventory
in a kitchen, you need to store that data somewhere. MongoDB Atlas
provides cloud-hosted managed instances of MongoDB that are always
available.

Atlas supports aggregations and other complex workloads with the full
capabilities of MongoDB. You can connect to your Atlas instance in your
backend services using MongoDB drivers for a wide range of languages. Or
connect your Atlas instance to MongoDB Charts to visualize your data in
real time.

MongoDB Realm
-------------

MongoDB Realm stitches together Realm Database and MongoDB Atlas in a
single backend service. To support these services, MongoDB Realm also
provides components to fulfill several common application requirements:

- :ref:`Realm functions <functions>` provide server-side logic for
  your :term:`Realm app`. Similar to endpoints in a REST API, except
  instead of manually constructing the URL, headers, body, and method
  for a call to an HTTP endpoint, you call Realm functions from a module
  of the Realm SDK in your client application.

- :ref:`Realm triggers <triggers>` automatically
  execute a function when an event occurs (such as a change to a
  database or a call to a HTTP endpoint), or at a scheduled time.

- :ref:`Realm Users and Authentication <users-and-authentication>`
  provide built-in user management with easy integration into
  :ref:`third-party authentication providers <auth-providers>`,
  like :ref:`Facebook <facebook-authentication>`,
  :ref:`Google <google-authentication>`, and
  :ref:`Apple <apple-id-authentication>`.

- :term:`Realm rules` let you control who accesses what data.

- Server-side :ref:`Realm values and Realm secrets <values-and-secrets>`
  enable you to define global variables and private credentials once and
  use them across your entire Realm app.

- Use the :ref:`GraphQL API <graphql-api>` to access data stored in a
  linked MongoDB cluster using any standard GraphQL client.

With the Realm SDK, you can call functions, authenticate users, sync
remote Realms, and query your local Realms.
