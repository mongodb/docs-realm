===================================================
Introduction to MongoDB Realm for Mobile Developers
===================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This introduction explains the {+service+} product for mobile application developers. After reading, you should understand:

- What {+service+} is and what problems it solves.
- How {+backend+} interacts with {+client-database+}.
- The benefits of {+service+} compared to traditional mobile development stacks.

.. note::
   If you prefer working on the backend or on web
   applications, consider reading the
   :doc:`Introduction for Web Developers
   </get-started/introduction-web>` or the
   :doc:`Introduction for Back-end Developers
   </get-started/introduction-backend>`.

What Problem Does MongoDB Realm Solve?
--------------------------------------

Mobile developers face a number of unique challenges. You must:

- Handle the unpredictable environment of mobile apps. Connections can be lost, 
  devices can shut down at any time, and clients often update long after release.
- Maintain common data schemas and APIs between mobile clients, backend APIs, and databases.
- Stay aware of security vulnerabilities across all components in an ecosystem. 
- Consistently serialize objects between networks, database storage, and application memory.
- Program in the languages and frameworks for one or more mobile operating systems.

All of these challenges present different obstacles. You can solve each in isolation 
with a wide variety of libraries and frameworks. Deciding the right solution for each 
problem with the right tradeoffs is a challenge mobile developers know all too well.

The combination of multiple environments creates even more challenges. 
For instance, you can use a Java library on your Android client to serialize objects,
but that library likely wouldn't work on iOS. And this doesn't even take into account
consistency across backend services.

Realm Database
--------------

Many of these challenges arise due to particularities of the mobile environment.
These challenges include network reliability, local storage, and keeping UIs 
:wikipedia:`reactive <Reactive_user_interface>`.
:term:`{+client-database+}` solves many common mobile programming headaches:

- **Local storage**: {+client-database+} runs right on client devices. Access objects
  using the native query language for each platform. Storing, accessing, and updating
  your data is simple and lightweight.
- **Network reliability**: {+client-database+} is offline-first. You
  always read from and write to the local database, not over the network.
  When :term:`{+sync+}` is enabled, {+client-database+} synchronizes
  data with {+backend+} over the network in a background thread.
  The :term:`sync protocol` resolves conflicts
  consistently on each client and in the
  :term:`linked {+atlas+} cluster <linked cluster>`.
- **Reactive UI**: :term:`Live objects <live objects>` always reflect
  the latest data stored in {+client-database+}. You can
  subscribe to changes, letting you keep your UI consistently up to date.

The {+service-short+} SDK lets you connect to local {+realms+} for Android, iOS,
Node.js, React Native, and UWP development.

MongoDB Atlas
-------------

Client applications generate a lot of data. Whether it's uploaded
reviews and ratings, posts and comments on a blog, or inventory
in a kitchen, you need to store that data somewhere. `{+atlas+}
<https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ provides
cloud-hosted managed instances of MongoDB that are always available.

Atlas supports aggregations and other complex workloads with the full
capabilities of MongoDB. You can connect to your {+atlas-short+}
instance in your backend services using MongoDB drivers for a wide range
of languages. Or connect your {+atlas-short+} instance to `{+charts+}
<https://www.mongodb.com/products/charts?tck=docs_realm>`_ to visualize
your data in real time. Storing your data in {+atlas-short+} makes it
easy to share data across users and platforms.

MongoDB Realm
-------------

{+backend+} also provides services to fulfill several common application backend requirements:

- :ref:`{+service-short+} Users and Authentication <users-and-authentication>`
  provide built-in user management. Integrate with
  :ref:`third-party authentication providers <auth-providers>`,
  like :ref:`Facebook <facebook-authentication>`,
  :ref:`Google <google-authentication>`, and
  :ref:`Apple <apple-id-authentication>`.
- :ref:`{+service-short+} Functions <functions>` provide server-side logic for
  your :term:`{+app+}`. You can call {+backend-short+} Functions from the {+service-short+} SDK in your client application.
- :ref:`{+service-short+} Triggers <triggers>` automatically
  execute a function at a scheduled time or when an event occurs, such
  as a change to a database or a call to a HTTP endpoint.
- :term:`{+service-short+} Rules` let you control who accesses what data.
- :ref:`{+service-short+} Values and {+service-short+} Secrets <values-and-secrets>`
  enable you to define global variables and private credentials once and
  use them across your entire {+app+}.
- The :ref:`GraphQL API <graphql-api>` lets you access data stored in a linked MongoDB cluster
  using any standard GraphQL client.

Get Started with MongoDB Realm
------------------------------

Jump right in and :ref:`create a {+backend+} application
<create-a-realm-app>` or check out our Task Tracker tutorial
for any of these platforms:

- :ref:`Android with Kotlin <android-kotlin-tutorial>`
- :ref:`iOS with Swift <ios-swift-tutorial>`
- :ref:`React Native with JavaScript <react-native-tutorial>`
- :ref:`Xamarin (iOS and Android) with C# <dotnet-tutorial>`

You can also refer to the documentation for each client SDK:

- :doc:`Android SDK </sdk/android>` for Kotlin and Java
- :doc:`Swift SDK </sdk/swift>` for Swift and Objective-C
- :doc:`.NET SDK </sdk/dotnet>` for C# / Xamarin
- :doc:`React Native SDK </sdk/react-native>` for TypeScript and JavaScript
- :doc:`Flutter SDK (Preview) </sdk/flutter>` for Flutter

Summary
-------

- {+service+} is a serverless application platform that takes care of
  the details of deployment and scaling for you. 
- You can customize your {+app+} with functions and triggers, custom
  permissions via rules, and authentication.
- {+client-database+} is an offline-first mobile object database in
  which you can directly access and store live objects without an
  :wikipedia:`ORM <Object-relational_mapping>`.
- Live Objects and {+sync+} offer significant benefits
  over traditional mobile development stacks:

  - Live Objects always reflect the latest state of data in the database,
    making it easier to keep your UI in sync with changes to your data.
  - {+sync+} synchronizes data between client-side {+realms+} and the
    server-side {+atlas+} cluster linked to your
    {+app+}.  
  - {+client-database+} synchronizes data in a background thread,
    abstracting away network usage so you don't have to worry about
    latency or dropped connections.
