====================================================
Introduction to MongoDB Realm for Backend Developers
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

As a backend developer, you can use {+service+} to rapidly develop cloud-based applications.
Realm apps can react to changes in your `{+atlas+}
<https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ data, connect that data to other systems,
and scale to meet demand. {+service-short+} does this without the need 
to manage database and server infrastructure.

.. note::
   If you prefer working on mobile or web applications,
   check out the :doc:`Introduction for Mobile Developers
   </get-started/introduction-mobile>` or the
   :doc:`Introduction for Web Developers
   </get-started/introduction-web>`.

What Problem Does MongoDB Realm Solve?
--------------------------------------

It takes time, resources, and expertise to build, administer, and maintain
backend infrastructure. However, a lot of these features are similar across applications.
{+service+} manages the backend infrastructure and user management for you.
This frees you to focus on the features that makes your app special, not boilerplate code.

{+service+} is:

Serverless:
  - Deploy server-side applications without having to set up and manage server infrastructure. 
    {+service-short+} includes provisioning, deployment, operating systems, web servers, logging, backups, and redundancy.
  - Run cloud-based :term:`{+service-short+} Functions <{+service-short+}
    Function>` that can crunch data or interact with Node.js modules.
  - Skip writing an authentication API on top of your {+service+} service.
    Authenticated clients can interact with parts of the database based on their permissions.

Dynamic and responsive:
  - React to data changes in :term:`{+atlas+}`, process data from HTTPS endpoints,
    or run {+service-short+} Functions on a schedule with 
    :term:`{+service-short+} Triggers <{+service-short+} Trigger>`.
  - Get up and running quickly for free, then scale according to the demands of your application.
  - Pay for and receive only the exact amount of compute you need at any given time
    with usage-based pricing. Usage under a certain amount per month is always free.

Simply secure:
  - Let users log in with familiar :term:`authentication providers
    <authentication provider>` that are built into {+service+}.
  - Control which users may read and write data on a per-field basis with
    :ref:`role-based permissions <roles>` that you can define declaratively or
    with a function.
  - Enforce data integrity by defining :ref:`validation logic
    <schemas>` with :term:`{+backend-schema+}`.

Synchronized:
  - Seamlessly sync data across devices with :term:`{+sync+} <{+sync+}>`.
  - Avoid writing complex synchronization logic with the :ref:`Database SDKs <realm-sdks>`.


Get Started with MongoDB Realm
------------------------------

To get started, follow our :ref:`GitHub Issue Tracker
tutorial <backend-tutorial>` or :ref:`create a MongoDB
{+app+} <create-a-realm-app>`.

Summary
-------

- {+service+} lets you deploy serverless applications without managing your own backend infrastructure.
- Backend use cases for {+service+} include:

  - Crunching data
  - Reacting to data changes in MongoDB Atlas
  - Interacting with third-party services.

- {+service+}'s built-in :doc:`authentication system </authentication>` simplifies user data access.
  You can add users to your app and define :ref:`permissions
  <permissions>` that control who can read and write data.
