====================================================
Introduction to MongoDB Realm for Backend Developers
====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

As a backend developer, you can use MongoDB Realm to create
lightweight, serverless applications without having to
manage your own database or server infrastructure.

.. note::
   If you prefer working on mobile or web applications,
   check out the :doc:`Introduction for Mobile Developers
   </get-started/introduction-mobile>` or the
   :doc:`Introduction for Web Developers
   </get-started/introduction-web>`.

What Problem Does MongoDB Realm Solve?
--------------------------------------

It takes time, resources, and expertise to build,
administer, and maintain backend infrastructure. User
authentication and access control are common but complex
systems that you do not need to write from scratch.
:term:`MongoDB Realm` manages all parts of the backend
infrastructure and user management for you, enabling you to
focus on what makes your app special so you can go to market
faster.

Built on `MongoDB Atlas
<https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_,
MongoDB Realm is:

Serverless:
  - Deploy server-side applications without having to set up and manage server infrastructure.
  - Run cloud-based :term:`Realm functions <Realm function>` that can crunch data or interact with third-party services, such as Slack, Twilio, or Twitter.
  - Upload and serve static documents and images with :doc:`Realm hosting </hosting>`.

Dynamic and responsive:
  - React to data changes in MongoDB Atlas or run functions on a schedule with :term:`Realm triggers <Realm trigger>`.
  - Like Atlas, MongoDB Realm has a free tier to get started and can scale according to the demands of your application.
  - Incorporate virtually any Node.js module in your functions with :ref:`dependency resolution <dependency-resolution>`.

Simply secure:
  - Enable authentication with major :term:`authentication providers <authentication provider>` and control which users may read and write data with :term:`Realm rules`.
  - Authenticated clients may interact with the database directly. There's no need to write an additional API on top of your MongoDB Realm service.

You can make entirely cloud-based applications with MongoDB
Realm or tie your MongoDB Realm application into mobile or
web clients and seamlessly :term:`sync` data across devices.

Get Started Now
---------------

You can start developing a MongoDB Realm application for
free by following the steps `here
<https://www.mongodb.com/download-center>`_.

Summary
-------

- MongoDB Realm allows you to deploy serverless, cloud-based applications based on :term:`MongoDB Atlas` without having to manage your own backend infrastructure.
- Typical use cases for backend developers using MongoDB Realm include processing data, reacting to data changes in Atlas, and interacting with third-party services.
- MongoDB Realm's built-in :doc:`authentication system </authentication>` allows you to add users to your app and control who can read and write data.
