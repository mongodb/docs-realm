============
Partitioning
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Your :term:`Realm app's <Realm app>` :term:`linked MongoDB Atlas cluster
<linked cluster>` contains all of the data stored by your application:
data for every client, every user, and every object you chose to persist
in a database.

Client applications only need the data relevant to that specific client.
Many clients only have permission to access certain data. And most
clients should never access private data for other clients,
like user settings or personal information.

Partitioning helps you turn the large amount of data stored by your
application into the small amount of data needed by invididual clients,
called :term:`Realms <Realm>`.

Partition Keys
--------------

MongoDB Realm uses the :term:`partition key` to sort
:term:`MongoDB document <MongoDB document>` in Atlas into Realms. The
partition key is a field that must exist in every document in every
collection of your MongoDB Atlas cluster. Each unique
:term:`partition value`, or value of a partition key, maps to a
different Realm. Documents that share the same parition value belong to
the same Realm, and as a result share the same set of permissions.

Choose a Partition Key
----------------------

The field selected as your partition key must exist in every document in
your linked MongoDB Atlas database. All documents that share the same
partition key also share the same permissions, so you should select a
key whose unique values correspond with permissions. For example, you
might use the ``owner_id`` field to partition a database into Realms
corresponding to individual users. If your application shares resources
across an entire company, but not across separate companies, you could
define and partition your data by ``company_id``.

Define a Partition Key
----------------------

You can define a partition key when enabling :term:`Realm sync` for your
Realm app. After selecting a cluster to sync, choose your partition key.
You can either use an existing field or create a new field.

Limitations of Partition Keys
-----------------------------

Partition keys are subject to certain limitations:

- You can only define partition keys using values of the String,
  ObjectID, Int, or Long types.

- Once you've chosed a partition key and enabled sync, you cannot change
  the partition key to a different field. To use a different field as
  your partition key, disable Realm sync and enable Realm sync again,
  selecting the new field as your partition key.

- You cannot change the field name for your partition key.

- Partition values should only change rarely. If you change a partition
  value from Atlas, Realm interprets the change as a deletion of the
  corresponding :term:`Realm object` from its original Realm and an
  insertion of a new Realm object into its new Realm.
  
- Changing a partition value from the Realm SDK is an error and will
  trigger a client reset.
