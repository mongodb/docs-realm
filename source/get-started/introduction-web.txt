================================================
Introduction to MongoDB Realm for Web Developers
================================================

.. default-domain:: mongodb

Modern web applications are more powerful than ever before. Frontend technologies 
like React and Angular let developers create web apps that behave like native applications. 
However, as the use of web applications grows, so do the demands of maintaining them.

Developers traditionally need to serve data to the browser from a server with a 
RESTful API. Developers also must secure the server with features like authentication
and data validation. A wide variety of libraries and frameworks exist to address these scenarios.
But deciding on the set of solutions with the right tradeoffs for your use case can be daunting.

{+backend+} is a serverless application backend that streamlines solving these 
common challenges. {+backend-short+} comes with configurable functions, integrated data access, and security rules.
With {+backend-short+}, you can focus on building unique features instead of boilerplate backend code.


.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _intro-web-users:

User Authentication and Management
----------------------------------
  
Secure user authentication is essential for most apps. Some apps authenticate
users with traditional email/password combinations. Others use API keys or third-party
authentication providers like Facebook and Google. These methods can get complicated,
and often require a lot of boilerplate code.
 
MongoDB Realm provides built-in user management and authentication methods. These
features encapsulate complexity and make it easy to integrate third-party authentication
providers. You can enable authentication providers in your server-side configuration then immediately log in from any client application using a {+backend-short+} SDK.


To learn more about authentication in MongoDB Realm, see :doc:`Users & Authentication </authentication>`.

.. _intro-web-schema:

Schema Validation and Data Access Rules
---------------------------------------

Modern applications require that data is available using consistent types and formats.
Data consistency guarantees that all the application's components can work together.
It's also important to make sure that any given piece of data is only accessible
to an authorized user.  For example, you might grant a user access
to only their own data.

{+backend+} validates data with a {+backend-short+} schema you define in the `JSON schema <https://json-schema.org/>`__ standard.
A {+backend-short+} schema serves as the source of truth for defining data types in your application.
{+backend-short+} also uses the schema to map data between your application and a 
`{+atlas+} <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ collection.

You can also configure {+backend-short+} to secure data with role-based data access rules.
These rules determine each user's access to every document for every request.
A user can only insert, read, or modify data if both they and the document
meet pre-defined conditions.


To learn more about defining a schema and access rules for your data, see
:ref:`collection rules <mongodb-rules>`.

.. _intro-web-functions:

Event-Driven Serverless Functions
---------------------------------

Many applications require that some business logic runs on a server. Usually this
logic deals with sensitive user data or interacting with external services. Apps might
also need to respond in real time when something happens in the app or in an external service.

{+backend+} lets you define serverless JavaScript functions called {+backend-short+} Functions.
You can use Realm Functions for the following common backend use cases:

- Call from client applications with the Realm Web SDK.
- Execute Realm Functions in response to trigger events, like an update to a document in MongoDB or at a scheduled time.
- Webhooks that execute a function in response to external applications.

To learn more about defining and using serverless functions, see :doc:`Functions
</functions>` and :ref:`Triggers <triggers>`.

.. _intro-web-query:

Secure Client-Side Queries
--------------------------

Web developers have to access their data efficiently and securely. 
If the data is on a server, you need an API to access the data and prevent unauthorized access.

The Realm Web SDK includes a :ref:`secure MongoDB client <intro-web-mql>` to interact with data. It uses
:ref:`GraphQL <intro-web-graphql>` and the :manual:`Query API </tutorial/query-documents>`
to access data in {+atlas+}. Use either or both of these APIs to work with
your application's data.

Realm's server-side rules ensures that users only read and modify permitted documents. 
Rules consist of one or more user roles for each collection. A role determines if
a given user has permission to access and edit a document. Realm determines a role
for each document in every request and enforces the role's permissions before responding.

.. _intro-web-graphql:

GraphQL for MongoDB
~~~~~~~~~~~~~~~~~~~

:graphql:`GraphQL <>` is a standard, open-source API architecture that is an
alternative to REST and other HTTP APIs. It features a query language that lets you 
access only the data you need.


GraphQL has a couple of primary benefits for web developers:

- **Minimize Bandwidth**: GraphQL queries specify the exact fields to return. 
  This lets you to avoid fetching unnecessary data.

- **Minimize Roundtrips**: A single GraphQL endpoint handles all requests. 
  You can group your GraphQL queries into a single request to one endpoint instead of
  sending requests to multiple endpoints.

MongoDB Realm generates a GraphQL API for your application based on your :ref:`data model <intro-web-schema>`. 
The API includes a set of CRUD operations that you can access with a GraphQL client
or in a HTTP request. You can also create custom resolvers backed by :ref:`functions <intro-web-functions>`.

To learn more about the Realm GraphQL API, see :doc:`GraphQL </graphql>`.

.. _intro-web-mql:

Client-Side MongoDB Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Traditionally developers query the database on the server and access the server
from the client through a HTTP API. This requires more developer resources and lacks
the flexibility of directly querying a database.

MongoDB Realm includes the :manual:`Query API </tutorial/query-documents>`,
a powerful API that lets you access {+atlas+} data from the client.
You can query {+atlas-short+} like you're using a database driver and {+service-short+} enforces 
:ref:`data access rules <intro-web-schema>` rules for all requests.

To learn more about the built-in MongoDB service, see :doc:`MongoDB Atlas
</mongodb>`.

Get Started with MongoDB Realm
------------------------------

You can ship your first web app built with MongoDB Realm in minutes.

To get started, follow the :doc:`Task Tracker application tutorial
</tutorial/web-graphql>` or :ref:`create a MongoDB Realm
application <create-a-realm-app>`.

You can also refer to the :doc:`Web SDK </web>` documentation for TypeScript and
JavaScript.

Summary
-------

- MongoDB Realm is a serverless application platform that makes it easy to deploy
  and scale.
- You can build a Realm app with custom logic via functions and triggers, 
  custom permissions via rules, and authentication via third-party SSO.
