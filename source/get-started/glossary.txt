========
Glossary
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. glossary::
   :sorted:

   {+atlas+}
      `MongoDB Atlas
      <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ is a hosted
      MongoDB service option in the cloud which requires no installation
      overhead and offers a free tier to get started. To learn more
      about {+atlas+}, see the :atlas:`Atlas documentation <>`.

   {+backend+}
      A cloud-hosted Backend-as-a-Service (BaaS) providing client-side
      functionality via the {+service-short+} SDK and an administrative interface
      via a website.

   MongoDB document
      See the MongoDB Manual's :manual:`definition of document
      </core/document/>`. For :term:`{+app+}s <{+app+}>` that use
      :term:`{+sync+}`, every MongoDB document in the {+app+}'s
      :term:`data source` corresponds to a synced
      :term:`{+service-short+} object` in a client :term:`{+realm+}`.

   partition key
      A field within a :term:`MongoDB document` whose
      :term:`value <partition value>` determines which :term:`{+realm+}`
      contains the document's corresponding :term:`{+service-short+} object`.

   partition value
      A value of a :term:`{+app+}`'s :term:`partition key` field.
      Every unique partition value corresponds to a different
      :term:`{+realm+}` assignment.

   {+realm+}
      A collection of :term:`{+service-short+} objects <{+service-short+} object>` sharing the same
      :term:`partition key` value. Client instances subscribe to
      individual {+realms+} which passively synchronize changes as network
      availability allows.

   {+service-short+} client
      Anything that interacts with a :term:`{+app+}` using a
      :term:`{+service-short+} SDK`. Examples include phone apps, IoT devices,
      and server applications.

   {+service-short+} SDK
      A library used by a :term:`{+service-short+} client` to connect to a
      :term:`{+service+}` application or a local
      :term:`{+client-database+}`.

   {+app+}
      An instance of the :term:`{+service+}` Backend-as-a-Service that
      you can control from the {+ui+} and interact with from SDKs. It is
      the central, server-side configuration that functions as the
      backend for your application. 

   {+client-database+}
      An :term:`ACID`-compliant offline-first object database for mobile
      devices. Using the :term:`{+service-short+} SDK`, you can query a local instance of
      the {+client-database+} and synchronize your local instance with data stored
      inside :term:`{+atlas+}`. Offline-first design ensures that
      reads and writes query the local database instance only. When {+sync+}
      is enabled, a separate background thread handles synchronization
      of changes between local {+realms+} and your
      :term:`synced {+atlas+} cluster <synced cluster>`.
   
   {+service-short+} object
      An instance of a :term:`{+service-short+} object type`. An object that you
      can store in a :term:`{+realm+}` and :term:`sync <{+sync+}>` with a
      :term:`synced {+atlas+} cluster <synced cluster>`.

   {+service-short+} object type
      A declaration of an object structure that can be stored and
      synchronized using :term:`{+service+}`. This includes primitive
      fields, embedded lists, and object relations. Collectively referred to
      as the :term:`{+service-short+} data model`. You can customize
      {+service-short+} types for your {+app+} in two different ways:
      by altering or creating {+frontend-schema+} definitions in the
      {+service-short+} SDK with :term:`development mode` enabled in your
      {+app+} or by creating or editing a
      :ref:`JSON schema <mongodb-schemas>` assigned to a collection in
      the {+ui+} or {+cli-bin+}, which directly edits the {+app+}'s
      :term:`{+backend-schema+}`.

   development mode
      A toggle that, when enabled, disables :term:`{+backend-schema+}`
      validation and automatically updates your {+backend-schema+} to match the
      :term:`{+frontend-schema+}` used by synced client applications. As the
      name suggests, this mode is insecure and should not be enabled for
      production use.

   GraphQL
      Open-source data query and manipulation language for APIs. {+service+}
      GraphQL supports reading and writing data as well as subscribing
      to data changes. An alternative to :term:`{+client-database+}` queries
      using the client's native query language.

   compaction
      Allocation and deallocation of data within a :term:`{+client-database+}`
      and/or exceeding the size of physical memory can lead to
      fragmentation on disk. Calling the ``compact`` method
      reorganizes internal data structures to reduce the storage
      overhead of local {+realms+} in the event of fragmentation.

   Schema Validation
      Rules for an instance of MongoDB that specify the form of documents
      that you can insert into each collection, including both fields
      and values.

   live objects
      Instances of :term:`{+service-short+} objects <{+service-short+} object>` that always
      reflect the state of the underlying object in the
      :term:`{+realm+} version` of the enclosing
      :term:`{+realm+} instance <{+realm+} instance>`. Implemented using
      :term:`zero-copy` objects that access object attributes via
      shallow pointers into memory-mapped data. You can subscribe to
      changes to any live object or collection of live objects,
      including {+realm+} instances.

   write transaction
      You can only write to a :term:`{+realm+}` during a write
      transaction. Beginning or committing a write transaction has the
      side effect of advancing the :term:`{+realm+} version` of the
      enclosing :term:`{+realm+} instance`.

   event loop
      A design pattern in which a central loop waits
      for signals from a UI or other source before updating underlying
      data structures. On iOS, known as a :apple:`run loop
      <documentation/foundation/runloop>`. On Android, known as a :android:`Looper
      <reference/android/os/Looper>`. Also known as the **main loop** or
      **main event loop** on some platforms.

   {+realm+} instance
      The result returned by a call to ``realm.open()``. An interface
      through which a :term:`{+service-short+} client` application can read and write
      to a local :term:`{+realm+}`. Every {+realm+} instance references a
      :term:`{+realm+} version`. You can update the {+realm+} version referenced
      by a {+realm+} instance by explicitly calling the ``refresh`` method
      on that {+realm+} instance. Beginning or committing a write
      transaction on your {+realm+} instance also advances the {+realm+}
      version. Platform with a built-in :term:`event loop` automatically
      refresh the {+realm+} instance on the event loop thread between
      iterations of the event loop.

   {+realm+} version
      A snapshot of data in a local :term:`{+realm+}` at a given moment.
      Each :term:`{+realm+} instance` references a {+realm+} version. The
      :term:`{+service-short+} SDK` cannot free resources for a {+realm+} version
      while any :term:`{+realm+} instance` continues to reference it.

   {+realm+} file
      File containing all data for a local :term:`{+realm+}` for an instance
      of :term:`{+client-database+}`.

   zero-copy
      A principle upon which :term:`{+service+}` is built. While traditional
      ORMs copy data from the database into native-language objects,
      :term:`{+service-short+} objects<{+service-short+} object>` read and write data using
      :wikipedia:`memory mapping <Memory-mapped_file>` to read and
      write data directly to and from the database via shallow object
      wrappers.

   ACID
      An acronym that expands to "Atomicity, Consistency, Isolation, and
      Durability". {+service+} is :term:`ACID-compliant <ACID compliance>`. See
      :wikipedia:`the Wikipedia entry for ACID <ACID>` for more
      information.

   ACID compliance
      - {+client-database+} establishes
        :wikipedia:`atomicity <Atomicity_(database_systems)>` by
        grouping operations in transactions and rolling back all
        operations in a transaction if any of them fail.
   
      - {+client-database+} establishes :wikipedia:`consistency
        <Consistency_(database_systems)>` and avoids data corruption by
        validating changes against the schema. If the result of any
        write operation is not valid, {+client-database+} cancels and
        rolls back the entire transaction.
   
      - {+client-database+} establishes :wikipedia:`isolation
        <Isolation_(database_systems)>` by allowing only one writer at a
        time. This ensures thread safety between transactions.
   
      - {+client-database+} establishes :wikipedia:`durability
        <Durability_(database_systems)>` by writing to disk immediately
        when a transaction is committed. In the event of an app crash,
        for example, the changes are not lost or corrupted.

   {+service-short+} webhook
      An HTTP endpoint that calls a function upon request.

   {+service-short+} Function
      Server-side logic for your {+app+}. You can call
      functions from any :term:`{+service-short+} client`, from other functions,
      with a :term:`{+service-short+} Trigger`, or a :term:`{+service-short+} webhook`.

   {+service-short+} Trigger
      Execute a function automatically when an event occurs or at a
      scheduled time. You can configure responses to :term:`data changes
      <database trigger>`, :term:`user logins <authentication trigger>`,
      and :term:`scheduled events <scheduled trigger>`. Every trigger
      activation calls a :term:`{+service-short+} Function`.

   database trigger
      Call a :term:`{+service-short+} Function` whenever a document is added,
      updated, or removed in a :term:`linked cluster`. Passes a
      change event describing the data that changed to the linked
      function.

   authentication trigger
      Call a :term:`{+service-short+} Function` whenever a user
      interacts with an :term:`authentication provider`,
      such as whenever a user logs into your :term:`{+service-short+}
      app`. Passes an authentication event describing the
      user and interaction to the linked function.

   scheduled trigger
      Call a :term:`{+service-short+} Function` based on a schedule that you
      define using a :ref:`CRON expression <CRON-expressions>`.
   
   linked cluster
      A :term:`{+atlas+}` database cluster that is associated with
      your :term:`{+app+}`. You can define data schemas and access
      rules to control who can access what in any linked cluster.
      :term:`{+client-database+}` data is automatically synchronized with
      your linked cluster when :term:`{+sync+}` is enabled, which
      makes that linked cluster a :term:`synced cluster`. Access
      data in your synced cluster from a :term:`{+service-short+} client` using
      the {+atlas+} service in the {+service-short+} SDK.

      .. seealso::

         :ref:`link-a-data-source`
   data source
      A :term:`{+atlas+}` cluster or `Data Lake
      <https://www.mongodb.com/atlas/data-lake?tck=docs_realm>`_ that is
      associated with your :term:`{+app+}`.

      .. seealso::

         :ref:`link-a-data-source`
   synced cluster
      A :term:`{+atlas+}` database cluster that is
      :term:`partitioned <partitioning>` into
      client :term:`{+realms+} <{+realm+}>` that
      :term:`synchronizes data <{+sync+}>` via your
      :term:`{+app+}`. Access data in your synced cluster from a
      :term:`{+service-short+} client` using {+client-database+} via the {+service-short+} SDK.

   partitioning
      A process that maps :term:`MongoDB documents <MongoDB document>`
      in a :term:`synced {+atlas+} cluster <synced cluster>` into
      :term:`{+service-short+} objects <{+service-short+} object>` in client
      :term:`{+realms+} <{+realm+}>`. See the :ref:`partitioning`
      documentation for details.

   system function
      A :term:`{+service-short+} Function` that runs as the :term:`system user`.

   system user
      A user that communicates directly with the :term:`data source` and
      other services, bypassing collection :term:`{+service-short+}
      Rules` and :term:`Schema Validation`. This user bypasses most
      restrictions on the :ref:`CRUD & Aggregation APIs
      <mongodb-crud-and-aggregation-apis>`.
   
   custom user data
      A mapped :term:`MongoDB document` that stores arbitrary
      information about a given {+service+} user. For example, you can store
      a user's preferred language, local timezone, or an ID for an
      external service.

   custom user data collection
      The collection where {+service+} stores :term:`MongoDB documents
      <MongoDB document>` corresponding to :term:`custom user data`.

   custom user data database
      The database that contains the :term:`custom user data collection`.

   custom user data cluster
      The :term:`linked MongoDB Atlas cluster <linked cluster>` that
      that contains the :term:`custom user data database`.

   user ID field
      The field of :term:`MongoDB documents <MongoDB document>` in the
      :term:`custom user data collection` whose value is a user ID that
      maps custom user data documents to {+service+} users.

   user ID
      A unique BSON ObjectID that identifies a single user in a single
      {+app+}.

   external dependencies
      One or more JavaScript modules from ``npm`` that you have uploaded
      to your :term:`{+app+}`. You can import and use external
      dependencies from any :term:`{+service-short+} Function`.

   function context
      A global variable available that allows you to interface with
      components of your :term:`{+app+}` from a :term:`{+service-short+} Function`.
      For example, you can call another Function, communicate
      with an external service using the HTTP module, or access data in a
      :term:`data source`.

   {+service-short+} Value
      A named reference to a piece of static data defined in
      :term:`{+backend+}`, accessible through :term:`{+service-short+} Function
      <{+service-short+} Function>` and :term:`{+service-short+} Rule <{+service-short+} Rules>` expressions.

   {+service-short+} Rules
      Boolean expressions that determine the read and write permissions
      for a given :ref:`user <user-objects>` for a particular resource.

   {+service-short+} Secret
      A private value stored in :term:`{+backend+}` that
      cannot be directly read, but can be assigned to
      variables. Secrets are automatically obscured
      from {+backend+} logs. Common use cases include
      :term:`authentication provider` and service configurations.

   {+ui+}
      A web interface from which you can manage any
      :term:`{+app+} <{+app+}>`. For example, you
      can define :term:`Functions <{+service-short+} Function>`,
      create automated :term:`Triggers <{+service-short+} Trigger>`, view
      :ref:`logs <logs>`, and link :term:`{+atlas+}` data sources.

   {+sync+}
      Shares data changes between a :term:`{+backend+}`
      :term:`linked cluster` and a :term:`{+service-short+} client`-local
      :term:`{+client-database+}`. {+service+} resolves conflicts between
      changes consistently between clients so all connected clients
      eventually arrive at the same state.

   sync protocol
      Procedure used by :term:`{+client-database+}` when :term:`{+sync+}`
      is enabled to update local data to reflect remote data changes and
      push local changes to :term:`{+backend+}`. This protocol merges
      changes and resolves conflicts between those changes consistently
      across all synced instances of a :term:`{+realm+}`.

      For more detailed information on the requests and process used by sync
      clients and servers, see :ref:`Realm Sync Protocol <sync-protocol>`.

   {+cli+}
      A command line interface named {+cli-bin+} from which you
      can manage any :term:`{+app+}
      <{+app+}>`. For
      example, you can define :term:`Functions <{+service-short+} Function>`,
      create automated :term:`Triggers <{+service-short+} Trigger>`,
      view :ref:`logs <logs>`, and link :term:`{+atlas+}` data sources.

   {+service-short+} Administration API
      A :ref:`HTTP API <admin-api>` through which you can perform
      administrative tasks.

   Sync role
      A set of :term:`{+realm+}`-level permissions that {+backend+}
      evaluates to determine whether a user may sync a
      given {+realm+}. See :ref:`Define Sync Rules
      <sync-rules>`.

   authentication provider
      An integration of a specific authentication mechanism
      into {+service+}'s user authentication system. {+service+}
      provides several authentication providers -- such as
      :ref:`email/password <email-password-authentication>`
      authentication, :ref:`Google authentication
      <google-authentication>`, and :ref:`custom JWT
      authentication <custom-jwt-authentication>` -- that
      you can use in your client application to allow users
      to log in.

   {+backend-schema+}
      The structure that defines the fields of and relationships between
      all :term:`MongoDB documents <MongoDB document>` that you can read
      or write into a :term:`{+app+}'s <{+app+}>` :term:`linked
      {+atlas+} cluster <linked cluster>`. Defined and enforced in your
      {+app+}.

   {+frontend-schema+}
      The structure that defines the fields of and relationships between all
      :term:`{+service-short+} objects <{+service-short+} object>` that you can
      read or write into a client-local :term:`{+realm+} instance`. Defined
      natively in the code of your client application.

   {+service-short+} data model
      The collection of :term:`{+service-short+} object <{+service-short+} object>`
      definitions that describes all data synchronized
      via :term:`{+sync+}` between mobile :term:`{+service-short+} clients
      <{+service-short+} client>` using the :term:`{+frontend-schema+}` and a
      backend :term:`{+app+}` using :term:`{+backend-schema+}`.

   Notifications
      The :term:`{+client-database+}` system that allows you
      to watch for and react to changes in your data
      independently of the writes that caused the changes.

   Application ID
      A unique identifier for your MongoDB Realm application. Sometimes
      called by the shorthand "App ID". The App ID is used to connect
      to your MongoDB Realm application via the client SDKs.

   client reset
      When using :doc:`{+sync+} </sync>`, a **client reset** is a serious error
      recovery task that your client app must perform if the server is restored
      to an older schema version than the version on the client.
      
      For more information on how to perform a client reset, see the client
      guide for your SDK:
      
      - :ref:`Android <android-client-reset>`
      - :ref:`iOS, macOS, tvOS, and watchOS <ios-client-reset>`
      - :ref:`Node.js <node-client-reset>`
      - :ref:`React Native <react-native-client-reset>`

   embedded object
      An embedded object is a special type of :term:`{+service-short+} object`
      that models complex data about a specific object. Embedded objects are
      similar to :term:`relationships <relationship>`, but they provide
      additional constraints and map more naturally to the denormalized
      :manual:`MongoDB document model </core/data-modeling-introduction/>`.
      
      For more information on how to define and work with embedded objects, see
      the client guide for your SDK:
      
      - :ref:`iOS <ios-embedded-objects>`
      - :ref:`Node.js <node-embedded-objects>`
      - :ref:`React Native <react-native-embedded-objects>`

   relationship
     A relationship is an object property that references another object rather
     than a scalar or embedded object.
     
   null partition
      A null partition is the default :term:`{+realm+}` on the client 
      device.
