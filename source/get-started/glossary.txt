========
Glossary
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. glossary::
   :sorted:

   MongoDB Atlas
      `MongoDB Atlas
      <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ is a hosted
      MongoDB service option in the cloud which requires no installation
      overhead and offers a free tier to get started. To learn more
      about MongoDB Atlas, see the :atlas:`Atlas documentation <>`. 

   MongoDB Realm
      Cloud-hosted Backend-as-a-Service (BaaS) providing client-side
      functionality via the Realm SDK and an administrative interface
      via a website.

   MongoDB Document
      See the MongoDB Manual's :manual:`definition of document
      </core/document/>`.

   Partition Key
      A field within a :term:`MongoDB Document` that determines which realm
      contains the corresponding Realm Object.

   realm
      A collection of :term:`Realm Objects <Realm Object>` sharing the same
      :term:`Partition Key` value. Client instances subscribe to
      individual realms which passively synchronize changes as network
      availability allows.

   Realm Client
      Anything that interacts with a :term:`Realm App` using the
      :term:`Realm SDK`. Examples include phone apps, IoT devices,
      and server applications.

   Realm App
      An instance of the :term:`MongoDB Realm` Backend-as-a-Service.

   Realm Database
      An :ref:`ACID`-compliant offline-first object database for mobile devices.
      Using the Realm SDK, you can query a local instance of the Realm
      Database and synchronize your local instance with data stored
      inside :term:`MongoDB Atlas`. Offline-first design ensures that
      reads and writes query the local database instance only. When Sync
      is enabled, a separate background thread handles synchronization
      of changes between the local instance and your instance of MongoDB
      Atlas.
   
   Realm Object
      Object that you can store in a :term:`realm`, defined by a
      :term:`Realm Schema` through either any Realm SDK or the
      Realm Schema editor on the MongoDB Realm admin site. Object schemas
      can define primitive fields as well as embedded lists and relations.

   GraphQL
      Open-source data query and manipulation language for APIs. Realm
      GraphQL supports reading and writing data as well as subscribing
      to data changes. An alternative to :term:`Realm Database` queries
      using the client's native query language.

   Compaction
      Allocation and deallocation of data within a :term:`Realm Database`
      can lead to memory fragmentation. Calling the ``compact()`` method
      reorganizes internal data structures to reduce the storage
      overhead of your local Realm instance in the event of
      fragmentation.

   Realm Schema
      Definition of all :term:`Realm Objects` that you can read or write
      into a client :term:`Realm Instance` or :term:`MongoDB Atlas`
      instance.

   Schema Validation
      Rules for an instance of MongoDB that specify the form of documents
      that you can insert into each collection, including both fields
      and values.

   Live Objects
      Instances of objects from your :term:`Realm Schema` that
      automatically update in value to match the value of the underlying
      object in the enclosing :term:`Read Transaction`. Note that the
      enclosing read transaction might not reference the latest
      :term:`version <Realm Version>`.

   Write Transaction
      You can only write to a :term:`Realm Instance` during a write
      transaction.

   Read Transaction
      Every :term:`Realm Instance` uses an implicit "read transaction" to
      generate valid instances of :term:`Live Objects`. As a result,
      the ``realm.open()`` method begins a read transaction and the
      ``realm.close()`` method closes the read transaction. Read
      transactions always use the :term:`Realm Version` that was most
      current when the realm was opened unless the client explicitly
      advances the version. You can explicitly advance the version of a
      read transaction by starting or committing a write transaction on
      the same thread as the read transaction, or by calling the
      ``realm.refresh()`` method. Platforms with a built in
      :term:`Event Loop` also refresh UI-thread read transactions in
      between instances of the event loop.

   Loop Thread
      A design pattern in which a central loop waits
      for signals from a UI or data source before updating underlying
      data structures. On iOS, known as a :apple-dev:`run loop
      <foundation/runloop>`. On Android, known as a :android-dev:`Looper
      <reference/android/os/Looper>`. Also known as the **main loop** or
      **main event loop** on some platforms.

   Realm Instance
      An interface through which a client application can read and write
      to a local :term:`realm`.

   Realm Version
      A snapshot of data in a local :term:`realm` at a given moment.

   Realm File
      File containing all data for a local :term:`realm` for an instance
      of :term:`Realm Database`. Because Realm Database reads and
      writes Realm data using :wikipedia:`memory mapping
      </Memory-mapped_file>`, Realm files should not exceed the amount of
      RAM on a mobile device.

   ACID
      Acronym for "Atomicity, Consistency, Isolation, and Durability".
      See :wikipedia:`the Wikipedia entry for ACID </ACID>` for more
      information.
