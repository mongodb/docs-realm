========
Glossary
========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. glossary::
   :sorted:

   {+atlas+}
      `MongoDB Atlas
      <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ is a hosted
      MongoDB service option in the cloud which requires no installation
      overhead and offers a free tier to get started. To learn more
      about {+atlas+}, see the :atlas:`Atlas documentation <>`.

   {+backend+}
      A cloud-hosted Backend-as-a-Service (BaaS) providing client-side
      functionality via the Realm SDK and an administrative interface
      via a website.

   MongoDB document
      See the MongoDB Manual's :manual:`definition of document
      </core/document/>`. For :term:`{+instances+} <{+instance+}>` that use
      :term:`{+sync+}`, every MongoDB document in the {+instance+}'s
      :term:`linked Atlas cluster <linked cluster>` corresponds to
      a synced :term:`Realm object` in a client :term:`Realm`.

   partition key
      A field within a :term:`MongoDB document` whose
      :term:`value <partition value>` determines which :term:`{+realm+}`
      contains the document's corresponding :term:`Realm object`.

   partition value
      A value of a :term:`{+instance+}`'s :term:`partition key` field.
      Every unique partition value corresponds to a different
      :term:`{+realm+}` assignment.

   {+realm+}
      A collection of :term:`Realm objects <Realm Object>` sharing the same
      :term:`partition key` value. Client instances subscribe to
      individual {+realms+} which passively synchronize changes as network
      availability allows.

   Realm client
      Anything that interacts with a :term:`{+instance+}` using the
      :term:`Realm SDK`. Examples include phone apps, IoT devices,
      and server applications.

   Realm SDK
      A library used by a :term:`Realm client` to connect to a
      :term:`{+service+}` application or a local
      :term:`{+client-database+}`.

   {+instance+}
      An instance of the :term:`{+service+}` Backend-as-a-Service.

   {+client-database+}
      An :term:`ACID`-compliant offline-first object database for mobile
      devices. Using the Realm SDK, you can query a local instance of
      the {+client-database+} and synchronize your local instance with data stored
      inside :term:`{+atlas+}`. Offline-first design ensures that
      reads and writes query the local database instance only. When {+sync+}
      is enabled, a separate background thread handles synchronization
      of changes between local {+realms+} and your
      :term:`synced {+atlas+} cluster <synced cluster>`.
   
   Realm object
      An object that you can store in a :term:`{+realm+}`, defined by a
      :term:`{+schema+}` through either any Realm SDK or the
      {+backend-schema+} editor on the {+service+} admin site. {+schema+}s
      can define primitive fields as well as embedded lists and relations.
      For :term:`{+instances+} <{+instance+}>` that use :term:`{+sync+}`,
      every Realm object in a client {+realm+} corresponds to a synced
      :term:`MongoDB document` in the {+instance+}'s
      :term:`linked Atlas cluster <linked cluster>`.

   GraphQL
      Open-source data query and manipulation language for APIs. {+service+}
      GraphQL supports reading and writing data as well as subscribing
      to data changes. An alternative to :term:`{+client-database+}` queries
      using the client's native query language.

   compaction
      Allocation and deallocation of data within a :term:`{+client-database+}`
      and/or exceeding the size of physical memory can lead to
      fragmentation on disk. Calling the ``compact`` method
      reorganizes internal data structures to reduce the storage
      overhead of local {+realms+} in the event of fragmentation.

   Schema Validation
      Rules for an instance of MongoDB that specify the form of documents
      that you can insert into each collection, including both fields
      and values.

   live objects
      Instances of :term:`Realm objects <Realm Object>` that always
      reflect the state of the underlying object in the
      :term:`Realm version` of the enclosing
      :term:`{+realm+} instance <{+realm+} instance>`. Implemented using
      :term:`zero-copy` objects that access object attributes via
      shallow pointers into memory-mapped data. You can subscribe to
      changes to any live object or collection of live objects,
      including {+realm+} instances.

   write transaction
      You can only write to a :term:`{+realm+}` during a write
      transaction. Beginning or committing a write transaction has the
      side effect of advancing the :term:`Realm version` of the
      enclosing :term:`{+realm+} instance`.

   event loop
      A design pattern in which a central loop waits
      for signals from a UI or data source before updating underlying
      data structures. On iOS, known as a :apple-dev:`run loop
      <foundation/runloop>`. On Android, known as a :android-dev:`Looper
      <reference/android/os/Looper>`. Also known as the **main loop** or
      **main event loop** on some platforms.

   {+realm+} instance
      The result returned by a call to ``realm.open()``. An interface
      through which a :term:`Realm client` application can read and write
      to a local :term:`{+realm+}`. Every {+realm+} instance references a
      :term:`Realm version`. You can update the Realm version referenced
      by a {+realm+} instance by explicitly calling the ``refresh`` method
      on that {+realm+} instance. Beginning or committing a write
      transaction on your {+realm+} instance also advances the Realm
      version. Platform with a built-in :term:`event loop` automatically
      refresh the {+realm+} instance on the event loop thread between
      iterations of the event loop.

   Realm version
      A snapshot of data in a local :term:`{+realm+}` at a given moment.
      Each :term:`{+realm+} instance` references a Realm version. The
      :term:`Realm SDK` cannot free resources for a Realm version
      while any :term:`{+realm+} instance` continues to reference it.

   Realm file
      File containing all data for a local :term:`{+realm+}` for an instance
      of :term:`{+client-database+}`.

   zero-copy
      A principle upon which :term:`{+service+}` is built. While traditional
      ORMs copy data from the database into native-language objects,
      :term:`Realm objects<Realm object>` read and write data using
      :wikipedia:`memory mapping </Memory-mapped_file>` to read and
      write data directly to and from the database via shallow object
      wrappers.

   ACID
      An acronym that expands to "Atomicity, Consistency, Isolation, and
      Durability". {+service+} is :ref:`ACID-compliant <acid-compliance>`. See
      :wikipedia:`the Wikipedia entry for ACID </ACID>` for more
      information.

   Realm webhook
      An HTTP endpoint that calls a function upon request.

   {+function+}
      Server-side logic for your {+instance+}. You can call
      functions from any :term:`Realm client`, from other functions,
      with a :term:`{+trigger+}`, or a :term:`Realm webhook`.

   {+trigger+}
      Execute a function automatically when an event occurs or at a
      scheduled time. You can configure responses to :term:`data changes
      <database trigger>`, :term:`user logins <authentication trigger>`,
      and :term:`scheduled events <scheduled trigger>`. Every trigger
      activation calls a :term:`{+function+}`.

   database trigger
      Call a :term:`{+function+}` whenever a document is added,
      updated, or removed in a :term:`linked cluster`. Passes a
      change event describing the data that changed to the linked
      function.

   authentication trigger
      Call a :term:`{+function+}` whenever a user
      interacts with an :term:`authentication provider`,
      such as whenever a user logs into your :term:`Realm
      app`. Passes an authentication event describing the
      user and interaction to the linked function.

   scheduled trigger
      Call a :term:`{+function+}` based on a schedule that you
      define using a :ref:`CRON expresssion <CRON-expresssions>`.
   
   linked cluster
      A :term:`{+atlas+}` database cluster that is associated with
      your :term:`{+instance+}`. You can define data schemas and access
      rules to control who can access what in any linked cluster.
      :term:`{+client-database+}` data is automatically synchronized with
      your linked cluster when :term:`{+sync+}` is enabled, which
      makes that linked cluster a :term:`synced cluster`. Access
      data in your synced cluster from a :term:`Realm client` using
      the {+atlas+} service in the Realm SDK.

   synced cluster
      A :term:`{+atlas+}` database cluster that is
      :term:`partitioned <partitioning>` into
      client :term:`{+realms+} <{+realm+}>` that
      :term:`synchronizes data <{+sync+}>` via your
      :term:`{+instance+}`. Access data in your synced cluster from a
      :term:`Realm client` using {+client-database+} via the Realm SDK.

   partitioning
      A process that maps :term:`MongoDB documents <MongoDB document>`
      in a :term:`synced {+atlas+} cluster <synced cluster>` into
      :term:`Realm objects <Realm object>` in client
      :term:`{+realms+} <{+realm+}>`. See the :ref:`partitioning`
      documentation for details.

   system function
      A :term:`{+function+}` that runs as the :term:`system user`.
   
   system user
      A user that communicates directly with the :term:`linked cluster`
      and other services, bypassing collection :term:`{+rules+}` and
      :term:`Schema Validation`. This user bypasses most restrictions on
      the
      :ref:`CRUD & Aggregation APIs <mongodb-crud-and-aggregation-apis>`.
   
   custom user data
      A mapped :term:`MongoDB document` that stores arbitrary
      information about a given {+service+} user. For example, you can store
      a user's preferred language, local timezone, or an ID for an
      external service.
   
   external dependencies
      One or more JavaScript modules from ``npm`` that you have uploaded
      to your :term:`{+instance+}`. You can import and use external
      dependencies from any :term:`{+function+}`.

   function context
      A global variable available that allows you to interface with
      components of your :term:`{+instance+}` from a :term:`{+function+}`.
      For example, you can call another {+function-short+}, communicate
      with an external service using the HTTP module, or access data in a
      :term:`linked cluster`.

   {+value+}
      A named reference to a piece of static data defined in
      :term:`{+backend+}`, accessible through :term:`{+function+}
      <{+function+}>` and :term:`{+rule+} <{+rules+}>` expressions.

   {+rules+}
      Boolean expressions that determine the read and write permissions
      for a given :ref:`user <user-objects>` for a particular resource.

   {+secret+}
      A private value stored in :term:`{+backend+}` that
      cannot be directly read, but can be assigned to
      variables. {+secrets-short+} are automatically obscured
      from {+backend+} logs. Common use cases include
      :term:`authentication provider` and service configurations.

   {+ui+}
      A web interface from which you can manage any
      :term:`{+service+}` :term:`{+instance-short+} <{+instance+}>`. For example, you
      can define :term:`{+functions-short+} <{+function+}>`,
      create automated :term:`{+triggers-short+} <{+trigger+}>`, view
      :ref:`logs <logs>`, and link :term:`{+atlas+}` clusters.

   {+sync+}
      Shares data changes between a :term:`{+backend+}`
      :term:`linked cluster` and a :term:`Realm client`-local
      :term:`{+client-database+}`. {+service+} resolves conflicts between
      changes consistently between clients so all connected clients
      eventually arrive at the same state.

   {+sync-protocol+}
      Procedure used by :term:`{+client-database+}` when :term:`{+sync+}`
      is enabled to update local data to reflect remote data changes and
      push local changes to :term:`{+backend+}`. This protocol merges
      changes and resolves conflicts between those changes consistently
      across all synced instances of a :term:`{+realm+}`.

   {+cli+}
      A command line interface named ``realm-cli`` from which you
      can manage any :term:`{+service+}` :term:`{+instance-short+}
      <{+instance+}>`. For
      example, you can define :term:`{+functions-short+} <{+function+}>`,
      create automated :term:`{+triggers-short+} <{+trigger+}>`,
      view :ref:`logs <logs>`, and link :term:`{+atlas+}` clusters.

   Realm Administration API
      A :ref:`HTTP API <admin-api>` through which you can perform
      administrative tasks.

   developer mode
      Allows you to synchronize data between an instance of
      :term:`{+client-database+}` and a :term:`linked {+atlas+} cluster
      <linked cluster>` without defining a strict, inviolable
      :term:`schema <{+schema+}>`. Intended for fast interation during
      early stages of development before defining a schema.

   Sync role
      A set of :term:`{+realm+}`-level permissions that {+backend+}
      evaluates to determine whether a user may sync a
      given {+realm+}. See :ref:`Define Sync Rules
      <sync-rules>`.

   authentication provider
      An integration of a specific authentication mechanism
      into {+service+}'s user authentication system. {+service+}
      provides several authentication providers -- such as
      :ref:`email/password <email-password-authentication>`
      authentication, :ref:`Google authentication
      <google-authentication>`, and :ref:`custom JWT
      authentication <custom-jwt-authentication>` -- that
      you can use in your client application to allow users
      to log in.

   {+backend-schema+}
      The structure that defines the fields of and relationships between
      all :term:`MongoDB documents <MongoDB document>` that you can read
      or write into a :term:`{+instance+}'s <{+instance+}>`
      :term:`linked {+atlas+} cluster <linked cluster>`. Defined and
      enforced in your {+instance+}.

   {+frontend-schema+}
      The structure that defines the fields of and relationships between
      all :term:`Realm objects <Realm object>` that you can read or write
      into a client-local :term:`{+realm+} instance`. Defined natively in
      the code of your client application.

   {+schema+}
      The structure of :term:`Realm objects <Realm object>` synchronized
      via :term:`{+sync+}` between mobile :term:`Realm clients
      <Realm client>` using the :term:`{+frontend-schema+}` and a
      backend :term:`{+instance+}` using :term:`{+backend-schema+}`.
