.. _tutorial:

=========================
Create a Task Tracker App
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In this tutorial, you will build a collaborative task tracker app with
{+service+}. 

For more details, check out 

- :doc:`What you will build <tutorial/preview>`


To get started, first:

- :doc:`Set up the backend for the tutorial </tutorial/realm-app>`

Next, complete any of the following clients to work with your new backend:

- :doc:`iOS with Swift </tutorial/ios-swift>`
- :doc:`Android with Kotlin </tutorial/java-sdk>`
- :doc:`Xamarin (iOS and Android) with C# </tutorial/dotnet>`
- :doc:`React Native (iOS and Android) with JavaScript </tutorial/react-native>`
- :doc:`The browser with GraphQL, JavaScript, and React </tutorial/web-graphql>`
- :doc:`A Node.js Command Line Interface (CLI) </tutorial/nodejs-cli>`

Additionally, you can learn how to:

- :doc:`Write a GitHub Issue Tracker with MongoDB Realm </tutorial/backend>` 
- :doc:`Set up JWT Authentication with MongoDB Realm </tutorial/jwt>`
- :doc:`Create a Unity Game with Realm </tutorial/unity>`

.. toctree::
   :titlesonly:
   :caption: 1: Setup
   :hidden:
   
   What You Will Build </tutorial/preview>
   Set up the Backend </tutorial/realm-app>

.. toctree::
   :titlesonly:
   :caption: 2: Write a Client
   :hidden:
   
   iOS with Swift </tutorial/ios-swift>
   Android with Kotlin </tutorial/java-sdk>
   React Native with JavaScript </tutorial/react-native>
   Xamarin (iOS and Android) with C# </tutorial/dotnet>
   Web app with React, JavaScript, and GraphQL </tutorial/web-graphql>
   A Node.js Command Line Interface (CLI) </tutorial/nodejs-cli>

.. toctree::
   :titlesonly:
   :caption: Additional Tutorial
   :hidden:
   
   GitHub Issue Tracker with MongoDB Realm </tutorial/backend>
   Set up JWT Authentication with MongoDB Realm </tutorial/jwt>
   Create a Unity Game with Realm </tutorial/unity>
