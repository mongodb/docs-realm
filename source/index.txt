:template: product-landing
:hidefeedback: header
:noprevnext:

====================================
Welcome to the Atlas Device SDK Docs
====================================

.. meta:: 
   :description: Atlas Device SDK is an offline-first, cloud-syncable database for mobile, web, desktop, and IoT apps.

.. toctree::
   :titlesonly:
   :hidden:

   Introduction </introduction>
   Install </sdk/install>
   Quick Start </sdk/quick-start>
   Model Data </sdk/model-data>
   Open & Manage Database Files </sdk/files>
   Live vs. Frozen Objects </sdk/live-frozen-objects>
   Read & Write Data </sdk/crud>
   React to Changes </sdk/react-to-changes>
   Access Atlas </sdk/atlas>
   Manage Users </sdk/users>
   Sync Data </sdk/sync>
   Test and Debug </sdk/test-and-debug>
   Serialization </sdk/serialization>
   SDK Telemetry </sdk/telemetry>
   API Reference </sdk/api-reference>
   Release Notes </sdk/release-notes>
   Build with Frameworks </frameworks>
   Build for Platforms </platforms>
   Realm Studio </studio>
   Example Projects </example-projects>
   Get Help </help>
   Atlas App Services <https://mongodb.com/docs/atlas/app-services>

.. introduction::

   Atlas Device SDK is a suite of app development tools optimized for 
   data access and persistence on mobile and edge devices. Use the SDKs to 
   build data-driven mobile, edge, web, desktop, and IoT apps.

   .. button:: Get started with a tutorial
      :uri: https://mongodb.com/docs/atlas/app-services/get-started/

   :doc:`Read the 5-Minute Introduction <introduction>`

.. image:: /images/hero.png
   :alt: Atlas Device SDK landing page hero image
   :class: hero-img

The SDKs provide tools to read and write Atlas data from devices. Your app 
can sync automatically with MongoDB Atlas and other devices using Device Sync. 
You can call Atlas Functions from a device. The device persistence layer is
Realm, an embedded, object-oriented database that lets you build real-time,
offline-first applications. 

We provide SDKs for most popular languages, frameworks, and platforms. Each 
SDK is language-idiomatic and includes:

- The core database APIs for creating and working with on-device databases.

- The APIs you need for connecting to the App Services backend so you can
  make use of server-side features like :ref:`Device Sync <sync>`,
  :ref:`Authentication <users-and-authentication>`, :ref:`Functions <functions>`,
  :ref:`Triggers <trigger-types>`, and more.

.. kicker:: Learning Paths

Get Started with Atlas Device SDK
---------------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://https://preview-mongodbdacharyc.gatsbyjs.io/realm/scaffold-consolidated-sdk-toc/sdk/quick-start
      :icon: /images/icons/branding_2022/Technical_ATLAS_Functions3x.png
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the Swift SDK. 
      Write to the device database, and sync with other devices.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: /images/icons/branding_2022/Technical_REALM_Mobile3x.png
      :icon-alt: Realm Mobile Icon

      Learn from example by dissecting a working mobile client app that
      uses Atlas Device SDK.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://www.mongodb.com/docs/atlas/app-services/tutorials/
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working app.

.. kicker:: What You Can Do

Develop Apps with the SDK
--------------------------

Use the SDK's open-source database - Realm - as an object store on the device. 
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and 
other clients.

.. tabs::

   .. tab:: Store Data with the SDK
      :tabid: device-persistence

      .. procedure::

         .. step:: Install the SDK

            Use popular package managers and build tools to
            :ref:`sdks-install` in your project.

            Import the relevant dependency in your project files to get started.

         .. step:: Define an Object Schema

            Use your preferred programming language to idiomatically 
            :ref:`define an object model <sdks-object-models>`.

         .. step:: Open a Database

            The SDK's database - Realm - stores objects in files on your 
            device. Or you can open an in-memory database which does not 
            create a file. 
            :ref:`Configure and open a database <sdks-configure-and-open-database>`
            to specify the options for your database file.

         .. step:: Read and Write Data

            :ref:`Create <sdks-crud-create>`, :ref:`read <sdks-crud-read>`,
            :ref:`update <sdks-crud-update>`, and :ref:`delete <sdks-crud-delete>`
            objects from the device database. Filter data using the 
            :ref:`query engines <sdks-read-query-objects>` provided by the SDK.

         .. step:: React to Changes

            Live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <sdks-react-to-changes>`
            to watch for changes and perform some logic, such as updating
            your UI. Or use our React Native or SwiftUI support to
            idiomatically to update Views when data changes.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Atlas Device SDK Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules. Use
            Development Mode to infer your schema from your client data model.

            Then, :ref:`connect to Atlas <sdks-connect-to-atlas>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a
            user <sdks-authenticate-users>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or
            Facebook. Use our built-in email/password provider to manage
            users without a third-party, or use custom JWT authentication to
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Database

            :ref:`Configure and open a synced database <sdks-configure-and-open-synced-database>`.
            :ref:`Subscribe to a query <sdks-manage-sync-subscriptions>`
            to determine what data the synced database can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data are the same whether you're 
            using a synced or non-synced database. Data that you read and write 
            to the device is automatically kept in sync with your Atlas 
            cluster and other clients. Apps keep working offline and 
            deterministically sync changes whenever a network connection 
            is available.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Device Sync Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <sdks-call-function>`
         from your client application that run in an App Services backend.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         You can :ref:`query data stored in MongoDB <sdks-access-mongodb>`
         directly from your client application code.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <sdks-authenticate-users>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration


   .. tab:: Develop with Popular Frameworks
      :tabid: realm-frameworks

      .. container::

         Our SDKs offer framework-idiomatic tools to streamline your 
         Atlas Device SDK development. In React Native, use our ``@realm/react``
         hooks to manage the Atlas connection, authenticate users, and write to
         the database. In Swift, use property wrappers and convenience 
         features designed to make it easier to work with SwiftUI.

         .. literalinclude:: /examples/generated/swiftui/FilterData.snippet.searchable.swift
            :language: swift
            :caption: SwiftUI Property Wrappers Offer Realm/SwiftUI Integration
            :copyable: false

      .. image:: /images/illustrations/Spot_MauvePurple_Logic_Tech_RealmApp2x.png
         :alt: Atlas Device SDK Mobile Illustration
