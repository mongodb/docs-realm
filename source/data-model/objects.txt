=============
Realm Objects
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm applications model data as objects composed of field-value pairs
that each contain one or more primitive data types or other Realm
objects. Realm objects are essentially the same as regular objects in
most programming languages but they also include additional features
like :ref:`real-time updating data views <live-object>` and reactive
change event handlers.

Every object in a realm has a *type* which is analagous to an object
class. Object types configure the properties and relationships of a
class of objects with an :ref:`object schema <object-schema>`. Realm
client applications typically use native classes in their respective
language as the schema for an object type.

.. example::

   The following code block shows an object schema that describes a Dog.
   In most most languages Realm uses native classes to define the
   schema.

   .. include:: /examples/DogSchema/DogSchema.rst

Key Concepts
------------

.. _live-object:

Live Object
~~~~~~~~~~~

Objects in Realm applications are **live objects** that allow you to
work with object-oriented data natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool. Live objects update automatically to
reflect data changes, including synced remote changes, and emit
notification events that you can subscribe to whenever their underlying
data changes.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object :wikipedia:`lazy loads <Lazy_loading>` data when a read operation
accesses it. This means that a realm can contain many objects but only
pay the performance cost for data that the application is actually
using.

Write operations on a live object automatically persist to the realm and
propagate to any other synced clients. You do not need to call an update
method, modify the realm, or otherwise "push" updates.

.. _object-schema:

Object Schema
~~~~~~~~~~~~~

An **object schema** is a configuration object that defines the shape,
contents, and relationships of a Realm object type. Object schemas
specify constraints on object properties such as the data type of each
property, whether or not a property is required, and the default value
for optional properties. Schemas can also define :doc:`relationships
</data-model/relationships>` between object types in a realm.

Client applications define a :ref:`realm schema <realm-schema>` by
providing a list of object schemas for each type of object that a realm
may contain. Realm guarantees that all objects in a realm conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _primary-key:

Primary Key
~~~~~~~~~~~

A **primary key** is a String or Integer property that uniquely
identifies an object. You may optionally define a primary key for an
object type as part of the :ref:`object schema <object-schema>`.
Realm automatically indexes primary key properties, which allows you to
efficiently read and modify objects based on their primary key.

Primary key properties are always required and the value of an object's
primary key must be unique among objects of the same type in a realm.
You cannot change the primary key for an object type after any object of
that type is added to the realm.

.. _property-schema:

Property Schema
~~~~~~~~~~~~~~~

A **property schema** is a field-level configuration that defines and
constrains a specific property in an object schema. Every object schema
must include a property schema for each property in the object. At
minimum, a property schema defines a property's data type and indicates
whether or not the property is required

You can configure the following constraints for a given property:

.. list-table::
   :header-rows: 1
   :widths: 20 80
   
   * - Parameter
     - Description

   * - Type
     - Every property in a Realm object has a strongly defined data
       type. A property's type can be a primitive data type or an object
       type defined in the same realm. The type also specifies whether
       the property contains a single value or a list of values.
       
       Realm supports the following primitive data types:

       - Boolean
       - Integer
       - Float
       - Double
       - String
       - Date
       - Data
       
       .. admonition:: Language-Specific Syntax
          :class: important
          
          Realm supports language-specific data types for each SDK by
          internally mapping them to one of the core supported types.
          Check the :doc:`client guide </clients>` for your platform to
          see the full list of supported data types in your preferred
          language.

   * - Optional
     - Optional properties may contain a null value or be entirely
       omitted from an object. By default, all properties are required
       unless explicitly marked as optional.

   * - Default
     - If a client application creates a new object that does not have a
       value for a defined property, the object uses the default value
       instead.
       
       Objects that are missing a required field without a defined
       default value will fail validation when you attempt to create
       them and will not persist to the realm.

   * - Indexed
     - A property index significantly increases the speed of certain
       read operations at the cost of additional overhead for write
       operations. Indexes are particularly useful for equality
       comparison, such as querying for an object based on the value of
       a property.
