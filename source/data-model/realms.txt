======
Realms
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

A **realm** is a set of related objects that conform to a pre-defined
schema and share user-level access permissions. Realms may contain more
than one type of data as long as a schema exists for each type.

Realms allow you to partition data according to who uses it and when
they use it. Every realm stores data in a separate realm file that
contains a binary encoding of each object in the realm. You can
automatically synchronize realms across multiple devices and set up
:doc:`reactive event handlers </crud/notifications>` that call a
function any time an object in a realm is created, modified, or deleted.

Comparison with Other Databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The MongoDB Realm data model is similar to both relational and document
databases but has distinct differences from both. To underscore these
differences, it's helpful to highlight what a realm **is not**:

A realm is not a single, application-wide database.
    Unlike other applications, which store all of their data in a single
    database, Realm apps often split data across multiple realms to
    organize data more efficiently and to enforce access controls.

A realm is not a table.
    Tables typically only store one kind of information, such as street
    addresses or items in a store inventory, whereas a realm can contain
    any number of object types.

A realm is not a collection of schemaless documents.
    Application objects are similar to documents, but every object in a
    realm conforms to a defined schema for its object type. An object
    cannot contain a field that is not described by its schema.

Key Concepts
------------

.. _realm-schema:

Realm Schema
~~~~~~~~~~~~

A **realm schema** is a list of valid :doc:`object schemas
</data-model/objects>` that each define an object type that the realm
may contain. All objects in a realm must conform to the realm schema.

Client applications provide a realm schema when they open a realm. If a
realm already contains data, then Realm validates each existing object
to ensure that an object schema was provided for its type and that it
meets all of the constraints specified in the schema.

.. example::
   
   A realm that contains basic data about books in libraries might use a
   schema like the following:
   
   .. code-block:: json
      
      [
        {
          "type": "Library",
          "properties": {
            "address": "string",
            "books": "Book[]"
          }
        },
        {
          "type": "Book",
          "primaryKey": "isbn",
          "properties": {
            "isbn": "string",
            "title": "string",
            "author": "string",
            "numberOwned": { "type": "int?", "default": 0 },
            "numberLoaned": { "type": "int?", "default": 0 }
          }
        }
      ]

.. _schema-version:

Schema Version
~~~~~~~~~~~~~~

A **schema version** identifies the state of a :ref:`realm schema
<realm-schema>` at some point in time. Realm tracks the schema version
that each realm conforms to and uses it to map the objects in each realm
to the correct schema.

Schema versions are ascending integers that you can optionally include
in the realm configuration when you open a realm. If a client
application does not specify a version number when it opens a realm then
the realm defaults to version ``0``.

.. admonition:: Increase Versions Monotonically
   :class: important
   
   :doc:`Migrations </data-model/migrations>` must update a realm to a
   higher schema version. Realm will throw an error if a client
   application opens a realm with a schema version that is lower than
   the realm's current version or if the specified schema version is the
   same as the realm's current version but includes different
   :ref:`object schemas <object-schema>`.

.. _realm-permissions:

Realm Permissions
~~~~~~~~~~~~~~~~~

A **permission** is a boolean flag that indicates that a user is
authorized to access, modify, or manage a realm. Permissions are defined
individually for each realm and either apply to a specific user or
configure the default permission for all users that don't have
permissions specified on the realm.

Realms are private by default, which means that the owner has full
permissions and no other user has any permissions unless explicitly
granted by the owner or a user with manage permissions on the realm.

MongoDB Realm supports the following permissions:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Permission
     - Description

   * - ``mayRead``
     - If ``true``, the user has read access to all objects in the
       realm.
       
       Read access does not imply write access, so a user may not
       be able to modify a realm that they can read.

   * - ``mayWrite``
     - If ``true``, the user has read and write access to all objects in
       the realm.
       
       Write access requires read access, so the ``mayWrite``
       permission also sets ``mayRead`` to ``true`` for the user.

   * - ``mayManage``
     - If ``true``, the user has read and write access to all objects in
       the realm and can set permissions on the realm for other users.
       
       Manage access requires write access, so the ``mayManage``
       permission also sets ``mayWrite`` and ``mayRead`` to ``true`` for
       the user.

.. _realm-path:

Realm Path
~~~~~~~~~~

A realm's **path** is a string that serves as the realm's unique ID. The
path can also optionally include the ID of a specific Realm user that
owns and manages the realm. A realm path determines the default read,
write, and manage permissions for its associated realm. There are two
types of realm path - *public* and *private* - based on whether or not a
path includes a user ID.

The following table describes the default permissions and syntax for
each type of realm path:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Realm Path Type
     - Description

   * - Public
     - A realm that does not specify an owner is a **public realm**. By
       default in a public realm, non-admin users have read-only
       privileges and admin users have read-write-manage privileges.
       
       Public realm paths begin with a slash (``/``) followed by any
       string that is not a Realm user's ID or a tilde (``~``), such as
       the following example:
       
       .. code-block:: text
          :copyable: False
          
          /someGlobalRealm

   * - Private
     - A realm that specifies an owner is a **private realm**. By
       default in a private realm, the owner has read-write-manage
       privileges, all other non-admin users have no read or write
       privileges, and admin users have read-write-manage permissions.
       
       Private realm paths begin with a slash (``/``) followed by a
       specific Realm user's ID, another slash, and then a string, such
       as the following example:
       
       .. code-block:: text
          :copyable: False
          
          /user-id/someUserRealm
       
       .. admonition:: Use a Tilde to Represent the Current User
          :class: note
       
          You can represent the current user's ID by specifying a tilde
          (``~``) in place of the user id. This shorthand removes the
          need to manually interpolate the current user's ID when you
          refer to a private realm.
          
          .. code-block:: text
             :copyable: False
             
             /~/someUserRealm
