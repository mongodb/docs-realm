.. _web-authenticate:

===================
Authenticate a User
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Web SDK provides developers with a unified API to authenticate application
users for any authentication provider. Users log in by providing authentication
credentials for a given authentication provider and the SDK automatically
manages authentication tokens and refreshes data for logged in users.

.. _web-login:

Log In
------

.. _web-login-anonymous:

Anonymous
~~~~~~~~~

The :doc:`Anonymous </authentication/anonymous>` provider allows users to log in
to your application with ephemeral accounts that have no associated information.

To log in, create an anonymous credential and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6
         
         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6

         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })

.. _web-login-email-password:

Email/Password
~~~~~~~~~~~~~~

The :doc:`email/password </authentication/email-password>` authentication
provider allows users to log in to your application with an email address and a
password.

To log in, create an email/password credential with the user's email address and
password and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email, password) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("joe.jasper@example.com", "passw0rd").then(user => {
           console.log("Successfully logged in!", user)
         })

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email: string, password: string) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("joe.jasper@example.com", "passw0rd").then(user => {
           console.log("Successfully logged in!", user)
         })

.. _web-login-api-key:

API Key
~~~~~~~

The :doc:`API key </authentication/api-key>` authentication provider allows
server processes to access your app directly or on behalf of a user.

To log in with an API key, create an API Key credential with a server or user
API key and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginApiKey(apiKey) {
           // Create an API Key credential
           const credentials = Realm.Credentials.apiKey(apiKey);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginApiKey("To0SQOPC...ZOU0xUYvWw").then(user => {
           console.log("Successfully logged in!", user)
         })
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginApiKey(apiKey: string) {
           // Create an API Key credential
           const credentials = Realm.Credentials.apiKey(apiKey);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginApiKey("To0SQOPC...ZOU0xUYvWw").then(user => {
           console.log("Successfully logged in!", user)
         })

.. _web-login-custom-function:

Custom Function
~~~~~~~~~~~~~~~

The :doc:`Custom Function </authentication/custom-function>` authentication
provider allows you to handle user authentication by running a :doc:`function
</functions>` that receives a payload of arbitrary information about a user.

To log in with the custom function provider, create a Custom Function credential
with a payload object and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload: Realm.Credentials.FunctionPayload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _web-login-custom-jwt:

Custom JWT
~~~~~~~~~~

The :doc:`Custom JWT </authentication/custom-jwt>` authentication provider
allows you to handle user authentication with any authentication system that
returns a :ref:`JSON web token <json-web-tokens>`.

To log in, create a Custom JWT credential with a JWT from the external system
and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt: Realm.Credentials.JWTPayload) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _web-login-facebook:

Facebook OAuth
~~~~~~~~~~~~~~

The :doc:`Facebook </authentication/facebook>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account. You can use the :ref:`built-in authentication flow
<web-facebook-builtin>` or :ref:`authenticate with the Facebook SDK
<web-facebook-auth-token>`.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

.. _web-facebook-builtin:

Built-In OAuth 2.0 Flow
+++++++++++++++++++++++

The Realm Web SDK includes methods to handle the OAuth 2.0 process and does not
require you to install the Facebook SDK. The built in flow follows three main steps:

1. You call ``app.logIn()`` with a Facebook credential. The credential must
   specify a URL for your app that is also listed as a redirect URI in the
   provider configuration.

2. A new window opens to a Facebook authentication screen and the user
   authenticates and authorizes your app in that window. Once complete, the new
   window redirects to the URL specified in the credential.

3. You call ``handleAuthRedirect()`` on the redirected page, which stores the
   user's Realm access token and closes the window. Your original app window will
   automatically detect the access token and finish logging the user in.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // The redirect URI should be on the same domain as this app and
         // specified in the auth provider configuration.
         const redirectUri = "https://app.example.com/handleOAuthLogin";
         const credentials = Realm.Credentials.facebook(redirectUri);
         
         // Calling logIn() opens a Facebook authentication screen in a new window.
         app.logIn(credentials).then(user => {
           // The logIn() promise will not resolve until you call `handleAuthRedirect()`
           // from the new window after the user has successfully authenticated.
           console.log(`Logged in with id: ${user.id}`);
         })
         
         // When the user is redirected back to your app, handle the redirect to
         // save the user's access token and close the redirect window. This
         // returns focus to the original application window and automatically
         // logs the user in.
         Realm.handleAuthRedirect();

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // The redirect URI should be on the same domain as this app and
         // specified in the auth provider configuration.
         const redirectUri = "https://app.example.com/handleOAuthLogin";
         const credentials = Realm.Credentials.facebook(redirectUri);
         
         // Calling logIn() opens a Facebook authentication screen in a new window.
         app.logIn(credentials).then((user: Realm.User) => {
           // The logIn() promise will not resolve until you call `handleAuthRedirect()`
           // from the new window after the user has successfully authenticated.
           console.log(`Logged in with id: ${user.id}`);
         })
         
         // When the user is redirected back to your app, handle the redirect to
         // save the user's access token and close the redirect window. This
         // returns focus to the original application window and automatically
         // logs the user in.
         Realm.handleAuthRedirect();

.. _web-facebook-auth-token:

Authenticate with the Facebook SDK
++++++++++++++++++++++++++++++++++

You can use the :facebook:`official Facebook SDK <docs/facebook-login/web/>` to
handle the user authentication and redirect flow. Once authenticated, the
Facebook SDK returns an access token that you can use to finish logging the user
in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the access token from the Facebook SDK
         const { accessToken } = FB.getAuthResponse();
         // Define credentials with the access token from the Facebook SDK
         const credentials = Realm.Credentials.facebook(accessToken);
         // Log the user in to your app
         app.logIn(credentials).then(user => {
           console.log(`Logged in with id: ${user.id}`);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the access token from the Facebook SDK
         const { accessToken } = FB.getAuthResponse();
         // Define credentials with the access token from the Facebook SDK
         const credentials = Realm.Credentials.facebook(accessToken);
         // Log the user in to your app
         app.logIn(credentials).then((user: Realm.User) => {
           console.log(`Logged in with id: ${user.id}`);
         });

.. _web-login-google:

Google OAuth
~~~~~~~~~~~~

The :doc:`Google </authentication/google>` authentication provider allows you to
authenticate users through a Google project using their existing Google account.

.. note:: Enable the Google Auth Provider
   
   To authenticate a Google user, you must configure the :doc:`Google
   authentication provider </authentication/google>`.

You can use the :google:`official Google SDK <identity/sign-in/web/sign-in>` to
handle the user authentication and redirect flow. Once authenticated, the Google
SDK returns an authorization code that you can use to finish logging the user in
to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the access token from the Google SDK
         function getGoogleAuthCode() {
           return new Promise(() => {
             gapi.auth2.authorize({
               client_id: "<Google Client ID>",
               // Scopes should match the metadata fields in the provider configuration
               scope: "<scopes>",
               response_type: "code",
             }, ({ code, error }) => {
               if(error) {
                 reject(error)
               }
               resolve(code)
             })
           })
         }
         getGoogleAuthCode()
           .then(code => {
             // Define credentials with the authorization code from the Google SDK
             const credentials = Realm.Credentials.google(code)
             // Log the user in to your app
             return app.logIn(credentials)
           })
           .then(user => {
             console.log(`Logged in with id: ${user.id}`);
           });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the access token from the Google SDK
         function getGoogleAuthCode(): Promise<string> {
           return new Promise(() => {
             gapi.auth2.authorize({
               client_id: "<Google Client ID>",
               // Scopes should match the metadata fields in the provider configuration
               scope: "<scopes>",
               response_type: "code",
             }, ({ code, error }) => {
               if(error) {
                 reject(error)
               }
               resolve(code)
             })
           })
         }
         getGoogleAuthCode()
           .then((code: string) => {
             // Define credentials with the authorization code from the Google SDK
             const credentials = Realm.Credentials.google(code)
             // Log the user in to your app
             return app.logIn(credentials)
           })
           .then((user: Realm.User) => {
             console.log(`Logged in with id: ${user.id}`);
           });

.. important:: Built-In OAuth 2.0 Redirect Limitations for Google
   
   The Realm Web SDK includes a built-in process to handle OAuth 2.0 redirect
   flows. The process opens a new window where the user authorizes your app and
   then redirects to URL that you provide, which allows you to get an access
   token and finish logging the user in.
   
   Due to changes in OAuth application verification requirements, the built-in
   process faces limitations when authenticating :ref:`Google
   <google-authentication>` users. If you use the Google login redirect flow
   using Realm's redirect flow, a maximum of 100 Google users may authenticate
   while the app is in development/testing/staging and all users will see an
   unverified application notification before they authenticate.
   
   To avoid these limitations, we advise that you use the official Google SDK to
   get a user access token as described above.

.. _web-login-apple:

Apple OAuth
~~~~~~~~~~~

The :doc:`Apple </authentication/apple>` authentication provider allows you to
authenticate users through Sign-in With Apple. You can use the :ref:`built-in
authentication flow <web-apple-builtin>` or :ref:`authenticate with the Apple
SDK <web-apple-auth-token>`.

.. note:: Enable the Apple Auth Provider
   
   To authenticate an Apple user, you must configure the :doc:`Apple
   authentication provider </authentication/apple>`.

.. _web-apple-builtin:

Built-In OAuth 2.0 Flow
+++++++++++++++++++++++

The Realm Web SDK includes methods to handle the OAuth 2.0 process and does not
require you to install the Apple JS SDK. The built in flow follows three main
steps:

1. You call ``app.logIn()`` with an Apple credential. The credential must
   specify a URL for your app that is also listed as a redirect URI in the
   provider configuration.

2. A new window opens to an Apple authentication screen and the user
   authenticates and authorizes your app in that window. Once complete, the new
   window redirects to the URL specified in the credential.

3. You call ``handleAuthRedirect()`` on the redirected page, which stores the
   user's Realm access token and closes the window. Your original app window will
   automatically detect the access token and finish logging the user in.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // The redirect URI should be on the same domain as this app and
         // specified in the auth provider configuration.
         const redirectUri = "https://app.example.com/handleOAuthLogin";
         const credentials = Realm.Credentials.apple(redirectUri);
         
         // Calling logIn() opens an Apple authentication screen in a new window.
         app.logIn(credentials).then(user => {
           // The logIn() promise will not resolve until you call `handleAuthRedirect()`
           // from the new window after the user has successfully authenticated.
           console.log(`Logged in with id: ${user.id}`);
         })
         
         // When the user is redirected back to your app, handle the redirect to
         // save the user's access token and close the redirect window. This
         // returns focus to the original application window and automatically
         // logs the user in.
         Realm.handleAuthRedirect();

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // The redirect URI must be on the same domain as this app and
         // must be specified in the auth provider configuration.
         const redirectUri = "https://app.example.com/handleOAuthLogin";
         const credentials = Realm.Credentials.apple(redirectUri);
         
         // Calling logIn() opens an Apple authentication screen in a new window.
         app.logIn(credentials).then((user: Realm.User) => {
           // The logIn() promise will not resolve until you call `handleAuthRedirect()`
           // from the new window after the user has successfully authenticated.
           console.log(`Logged in with id: ${user.id}`);
         })
         
         // When the user is redirected back to your app, handle the redirect to
         // save the user's access token and close the redirect window. This
         // returns focus to the original application window and automatically
         // logs the user in.
         Realm.handleAuthRedirect();

.. _web-apple-auth-token:

Authenticate with the Apple SDK
+++++++++++++++++++++++++++++++

You can use the :apple:`official Sign in with Apple JS SDK
<documentation/sign_in_with_apple/sign_in_with_apple_js>` to handle the user
authentication and redirect flow. Once authenticated, the Apple JS SDK returns
an ID token that you can use to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Get the ID token from the Apple SDK
         AppleID.auth.signIn()
           .then(({ id_token }) => {
             // Define credentials with the ID token from the Apple SDK
             const credentials = Realm.Credentials.apple(id_token)
             // Log the user in to your app
             return app.logIn(credentials)
           })
           .then(user => {
             console.log(`Logged in with id: ${user.id}`);
           });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Get the ID token from the Apple SDK
         AppleID.auth.signIn()
           .then(({ id_token: string }) => {
             // Define credentials with the ID token from the Apple SDK
             const credentials = Realm.Credentials.apple(id_token)
             // Log the user in to your app
             return app.logIn(credentials)
           })
           .then((user: Realm.User) => {
             console.log(`Logged in with id: ${user.id}`);
           });

.. _web-logout:

Log Out
-------

To log any user out, call the ``User.logOut()`` on their user instance.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
