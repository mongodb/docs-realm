.. _graphql-apollo-react:

=====================
Apollo Client (React)
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can use :apollo:`Apollo Client <docs/react>` to connect to your Realm app's
:doc:`exposed GraphQL API </graphql/expose-data>` from a React application.
Apollo Client runs queries and mutations, maintains a client-side data cache,
and integrates into your app with idiomatic React components and hooks.

.. note:: See a Working Demo Application
   
   Check out the :github:`MongoDB Realm GraphQL - Apollo (React)
   <mongodb-university/realm-graphql-apollo-react>` repository on GitHub to see
   a fully set-up React & Apollo application that's ready to connect to your own
   MongoDB Realm app. It uses the ``sample_mflix.movies`` collection that's
   included in the MongoDB Atlas :atlas:`sample data sets </sample-data>`.
   
   If you don't want to clone the repository, the demo application is also
   available in-browser in the :codesandbox:`Realm GraphQL CodeSandbox
   <s/github/mongodb-university/realm-graphql-apollo-react?file=/src/index.js>`.

.. _graphql-apollo-react-setup:

Set Up Apollo Client
--------------------

.. include:: /includes/steps/graphql-apollo-react-setup.rst

.. _graphql-apollo-react-queries-mutations:

Run Queries and Mutations
-------------------------

The ``@apollo/client`` package includes a set of declarative React hooks that
connect your components to the GraphQL API and handle query and mutation
execution.

To define queries and mutations that you can pass to the hooks, install
:npm:`graphql-tag <package/graphql-tag>`:

.. code-block:: shell
   
   npm install graphql-tag

Import the hooks you're using and the GraphQL query constructor at the top of 
the file where you're using the hooks. 

.. literalinclude:: /examples/generated/web/apollo-graphql-queries-mutations.test.codeblock.import-dependencies-query.jsx
  :language: javascript

.. note:: Apollo Hooks Must Have An ApolloProvider
   
   Components that call the query and mutation hooks must be descendants of the
   :apollo:`ApolloProvider <docs/react/api/react/hooks/#apolloprovider>` that
   you configured for your MongoDB Realm app. The hooks call the :apollo:`query
   <docs/react/api/core/ApolloClient/#ApolloClient.query>` and :apollo:`mutation
   <docs/react/api/core/ApolloClient/#ApolloClient.mutation>` methods on the
   provided ``client`` object.

.. _graphql-apollo-react-run-a-query:

Run a Query
~~~~~~~~~~~

Apollo Client includes two hooks for executing queries. The hooks accept
identical parameters but differ in when they execute the query:

- :apollo:`useQuery() <docs/react/api/react/hooks/#usequery>` runs automatically
  when its component mounts. It also returns a callback that re-runs the query
  whenever you call it.

- :apollo:`useLazyQuery() <docs/react/api/react/hooks/#uselazyquery>` returns a
  callback function that executes the query whenever you call it. It does not
  run the query on component mount.

Both hooks accept a query definition and additional options, including
``variables`` that Apollo passes to the query. They also both return information
about the query's current execution status and data returned from the most
recent execution.

.. literalinclude:: /examples/generated/web/apollo-graphql-queries-mutations.test.codeblock.run-query.jsx
  :language: javascript


.. _graphql-apollo-react-run-a-mutation:

Run a Mutation
~~~~~~~~~~~~~~

The :apollo:`useMutation() <docs/react/api/react/hooks/#usemutation>` hook
accepts a mutation definition and an optional configuration object. The most
common option you'll need to pass is a ``variables`` object that maps to
:graphql:`GraphQL variables <learn/queries/#variables>` in the mutation
definition.

The hook returns several objects in an array:

- a callback function that executes the mutation

- an object that includes information on the mutation's execution status and
  data returned from the most recent execution.

.. literalinclude:: /examples/generated/web/apollo-graphql-queries-mutations.test.codeblock.run-mutation.jsx
  :language: javascript
