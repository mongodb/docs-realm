.. _nextjs-realm-integrate:

==============================
Use Next.js with Realm Web SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following guide teaches how to integrate the Realm Web SDK into a
Next.js application. You can use the Realm Web SDK to access
data from MongoDB Atlas in web applications, such as those created using
Next.js with Atlas App Services. Next.js is a React-based web framework that
handles app configuration and structure, and supports client-side,
server-side, and static rendering.

- **Client-side rendering**: query MongoDB directly from the browser
  using the Atlas GraphQL API or MongoDB Data Access.
- **Server-side rendering**: authenticate users with App Services from
  the browser and query using the GraphQL API on the server
- **Static rendering**: fetch data from MondoDB Atlas to generate HTML
  content at build time.

Before You Begin
----------------

Before using this integration guide, you should:

- Be familiar with Next.js. Consider referring to the
  `Next.js documentation <https://nextjs.org/docs/getting-started>`__.
- :ref:`Create an Atlas App Services backend application <create-a-realm-app>`.
- Create a Next.js app. If creating a Next.js application for the first time,
  consider referring to the `Next.js Tutorial <https://nextjs.org/learn/basics/create-nextjs-app>`__.

Install the Realm Web SDK in Your Next.js App
---------------------------------------------

This section shows you how to install the Realm Web SDK to use with your application.

.. include:: includes/web-quickstart-install.txt

For more information, see the :ref:`Realm Web Installation <web-install>` documentation.

Add Authentication
------------------

Before you can query MongoDB from your app, you must initialize the
App Services client and authenticate a user. You can follow the steps
below to connect the Realm Web SDK to client-side Next.js.
In this example, we're going to expose an authenticated ``Realm.App`` instance
throughout the app using :js-sdk:`Realm.App.getApp("<App ID>") <Realm.App.html#getApp>`.
For additional ways to expose Realm authentication throughout your application,
refer to the `Next.js authentication
<https://nextjs.org/docs/authentication#authentication-providers>`__ documentation.

.. procedure::

   .. step:: Add App ID to environmental variables

      Add your App Services **App ID** to the Next.js app's environmental variables.
      The App ID must be accessed from both browser and server-side environments.
      To make the App ID accessible from the browser, you must preface its name
      with ``NEXT_PUBLIC_``. Add the App ID as an environmental variable to
      :file:`.env.local`.

      .. code-block::
         :caption: .env.local

         NEXT_PUBLIC_APP_ID=<YOUR App Services App ID>

      .. seealso::

         - :ref:`Find an App ID <find-your-app-id>`
         - `Next.js Environmental Variable Documentation <https://nextjs.org/docs/basic-features/environment-variables>`__

   .. step:: Create a custom app wrapper

      Create a custom ``App`` page wrapper that creates a ``Realm.App`` instance
      that you can later expose to child components on all pages.
      Create the file :file:`pages/_app.js`, and initialize a ``Realm.App`` instance
      using your App ID.

      .. literalinclude:: /examples/generated/web/_app.snippet.custom-app-wrapper.js
         :language: javascript

   .. step:: Log the user in

      Now you can access the ``app`` instance with ``Realm.App.getApp("<App ID>")``,
      and use it to log a user in.
      Automatically authenticate a user anonymously in :file:`pages/index.js`
      file to create a user when a user arrives to the app home page.

      .. literalinclude:: /examples/generated/web/index.snippet.log-in-index-js.js
         :language: javascript

      In a real application, you probably would want to have
      a more complex authentication flow.

.. seealso::

    :ref:`Quick Start (React) <realm-react-quick-start>`.

Client-Side Rendering
---------------------

This section shows how you can integrate Next.js client-side rendering
with the Realm Web SDK. Following these steps, you can directly query MongoDB
and interact with an Atlas App Services serverless backend through
client-side JavaScript in your Next.js application. You can query MongoDB
using either MongoDB Data Access or the Atlas GraphQL API.

MongoDB Data Access
~~~~~~~~~~~~~~~~~~~

Once the ``App`` client is initialized and a user is authenticated,
you can use MongoDB Data Access to directly query MongoDB from
client code in your application.

Access the MongoDB Data Access interface from the ``app`` object you exposed with
React Context. Use :js-sdk:`App.User.mongoClient() <Realm-MongoDB.html>`
to query MongoDB.

.. literalinclude:: /examples/generated/web/mongodb-data-access.snippet.mongo-data-access.js
    :language: javascript

.. tip::

   For more comprehensive documentation of using MongoDB Data Access,
   refer to :ref:`Query MongoDB <web-query-mongodb>`.

Atlas GraphQL API
~~~~~~~~~~~~~~~~~

Alternatively, you can use the Atlas GraphQL API to query MongoDB
via GraphQL from Next.js client-side code.

.. procedure::

   .. step:: Install the Apollo client

      Apollo provides a package called `@apollo/client <https://www.npmjs.com/package/@apollo/client>`__
      containing the relevant components needed to create a client.
      You must also install the `graphql <https://www.npmjs.com/package/graphql>`__ package.

      .. code-block:: shell

         npm install @apollo/client graphql

   .. step:: Create GraphQL page.

      Create a new page for our GraphQL queries, :file:`pages/graphql.js`.

   .. step:: Import Dependencies

      Import relevant Apollo Client dependencies and Realm:

      .. literalinclude:: /examples/generated/web/graphql.snippet.apollo-imports.js
         :language: javascript

   .. step:: Create GraphQLProvider

      Create an ``ApolloClient`` GraphQL client and add it to the
      ``GraphQLProvider`` component.  Wrap any components that call
      the GraphQL API with the ``GraphQLProvider``.

      .. literalinclude:: /examples/generated/web/graphql.snippet.apollo-provider.js
         :language: javascript

   .. step:: Query MongoDB with GraphQL

      Once the connection to the Apollo Client has been established,
      you can query MongoDB. For example, you can query MongoDB
      to find a single entry in a database by name.

      .. literalinclude:: /examples/generated/web/graphql.snippet.mongo-query.js
         :language: javascript

   .. step:: Export

      Export ``GraphQLConsumer`` wrapped in ``GraphQLProvider``.

      .. literalinclude:: /examples/generated/web/graphql.snippet.full-graphql-page.js
         :language: javascript

All together, the GraphQL page should look as follows:

.. literalinclude:: /examples/generated/web/graphql.snippet.whole-code-ex.js
    :language: javascript

.. tip::

   For more information on querying Atlas with the GraphQL API, refer
   to the :ref:`Atlas GraphQL API <graphql-api>`
   and :ref:`Apollo Client (React) <graphql-apollo-react>` documentation.

Server-Side Rendering
---------------------

This section shows how you can integrate Next.js server-side rendering
with the Realm Web SDK. Using the Realm Web SDK with server-side rendering allows
you to access data as a specific user. In doing so, you apply
:ref:`App Services Rules and Permissions <mongodb-rules>` to those user queries.
To query MongoDB Atlas directly from the Next.js server,
you must set up two different components: Atlas GraphQL API on the Next.js
server and Realm Web on the browser. This section explains the setup of both.

You may want to integrate the Web SDK and Next.js because it allows you to:

- Access data stored in Atlas directly on page load.
- Apply Atlas App Services rules and permissions to requests to reduce server-side code.
- Reduce use of client-side JavaScript.
- Perform server-side data manipulation.

On a high level, the process for using the Realm Web SDK with Next.js
server-side rendering is as follows:

TODO: rewrite these steps

1. Create an instance of your App Services backend app and log in a
   user. Save the user's accessToken as a cookie.
#. Add functions to your Next.js app, including ``getServerSideProps()``.
   In this function, the server accesses the previously-saved cookie
   and allows you to set up pre-render.
#. Add the data from ``getServerSideProps()`` to your web page,
   which allows it to pre-render for every request.

.. note::

   While possible to use the MongoDB Data Access in server-side environments
   to query MongoDB, it is not generally advisable.
   You would need to persist user credentials in the browser to pass
   to the server on every request, which is a security vulnerability.
   Plus, MongoDB Data Access makes requests from a user object,
   which would need to be re-authenticated on every request.

The following steps outline using the Realm Web SDK with Next.js server-side rendering.

.. procedure::

   .. step:: Install dependencies

      Install the following npm packages:

      .. code-block:: shell

         npm install nookies
         npm install @apollo/client graphql


   .. step:: Update authentication to use cookies

      Update :file:`pages/_app.js` to save the access token as a cookie.
      This transfers the cookie from the client to the server on every request.
      Set your cookie in a ``useEffect`` hook that runs every time
      there's a change in the user object, as shown below.
      ``setInterval`` resets the credential in cookies before the cookie expires.

      .. literalinclude:: /examples/generated/web/_app.snippet.custom-app-wrapper.js
          :language: javascript

   .. step:: Server-side Render the Data

      #. Create a new page file to perform the server-side rendering.
      #. Import the relevant dependencies.

         .. literalinclude:: /examples/generated/web/server-side-rendering.snippet.server-side-imports.js
            :language: javascript

      #. Add a function that creates a server-side GraphQL client
         on every request with the user's current auth token.

         .. literalinclude:: /examples/generated/web/server-side-rendering.snippet.function-create.js
            :language: javascript

      #. Create the GraphQL request which the server uses to fetch data.

         .. literalinclude:: /examples/generated/web/server-side-rendering.snippet.gql-request.js
            :language: javascript

      #. Use the Next.js `getServerSideProps <https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props>`__
         function to perform the following:

         a. Parse access token from  cookies.
         #. Create a GraphQL client with the access token.
         #. Run the GraphQL query.
         #. Return data to be used in the server-side render.

            .. literalinclude:: /examples/generated/web/server-side-rendering.snippet.server-side-props.js
               :language: javascript

         #. Render the data.

            .. literalinclude:: /examples/generated/web/server-side-rendering.snippet.render-page.js
               :language: javascript

All together, the server-side rendering page looks as follows:

.. literalinclude:: /examples/generated/web/server-side-rendering.snippet.whole-code-ex.js
        :language: javascript

.. seealso::

   :ref:`Alternative ways to Query MongoDB from Next.js section <nextjs-mongodb-alternate-ways>`

Static Rendering
----------------

You can use Next.js static rendering function ``getStaticProps()``
with the Realm Web SDK to pull data from MondoDB Atlas and generate page HTML
at build time.

This integration can supplement your app by adding:

- Content Management System Data
- Configuration Information
- Internationalized Content

.. procedure::

   .. step:: Creating and guarding your API key

      You need to create a Server API key for authentication. Follow the steps
      on the API Key Configuration page to complete this step.
      Then, in your next.js app, add the API key to your :file:`.env.local` file.
      The variable stored is not accessible from the browser,
      as long as you **do not** prefix it with ``PUBLIC_NEXT_``.

      .. code-block::
         :caption: .env.local

         REALM_API_KEY = secret_code

      Now you can access the variable in your app, except for in client-side rendering.

      .. code-block:: javascript

         const { REALM_API_KEY } = process.env;

   .. step:: Perform static rendering with  ``getStaticProps()``.

      You can use ``getStaticProps()`` to query MongoDB during static generation.

      In order to pre-render your page using ``getStaticProps()``,
      connect your Next.js app to the Realm Web SDK.
      Then, you can use ``getStaticProps()`` to fetch data from MongoDB.
      The following example shows how to query MongoDB while static rendering.

      .. literalinclude:: /examples/generated/web/static.snippet.static-render-ex.js
            :language: javascript

.. _nextjs-mongodb-alternate-ways:

Alternate Ways to Query MongoDB from Next.js
--------------------------------------------

In addition to the Realm Web SDK, you can query MongoDB from Next.js in several ways:

- Integrate MongoDB with your Next.js application, then execute your MongoDB queries
  using the MongoDB Node Driver. For more information, see the blog post
  `How to Integrate MongoDB Into Your Next.js App
  <https://www.mongodb.com/developer/languages/javascript/nextjs-with-mongodb/>`__.
- Use the MongoDB Data API to query MongoDB Atlas from the Next.js server.  For
  more information, see :ref:`Data API Endpoints <data-api>`.

.. note::

    These alternate methods are incompatible with App Services rules and permissions.
    See :ref:`Rules — Atlas App Services <mongodb-rules>`.
