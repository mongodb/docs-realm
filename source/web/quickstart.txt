.. _web-quick-start:

=====================
Realm Web Quick Start
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page shows you how to connect the Realm Web SDK to a MongoDB Realm
application, authenticate a user, and work with data. Before you begin, you'll
need to :ref:`create a {+app+} <create-a-realm-app>` for your web app to use.

.. admonition:: Check Out the Tutorial
   :class: note
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the :ref:`Web
   Tutorial <tutorial-task-tracker-web>` where you'll build a React web app that
   connects to the :ref:`Task Tracker backend
   <tutorial-task-tracker-create-realm-app>` and uses the :doc:`GraphQL API
   </graphql>`.
   

.. _web-quickstart-install:

Install the Web SDK
-------------------

.. tabs::
   
   .. tab:: npm
      :tabid: npm
      
      .. code-block:: shell
         
         npm install realm-web
   
   .. tab:: yarn
      :tabid: yarn
      
      .. code-block:: shell
         
         yarn add realm-web
   
   .. tab:: CDN
      :tabid: CDN
      
      To load the Realm Web SDK from a content delivery network as a global
      variable, add the following ``<script>`` tag to the ``<head>`` of your
      HTML file:
      
      .. code-block:: html
         
         <script src="https://unpkg.com/realm-web@0.8.0/dist/bundle.iife.js"></script>

.. _web-quickstart-import-realm:

Import the Web SDK
------------------

Near the top of any JavaScript or TypeScript file that uses Realm, add the
following import statement:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         import * as Realm from "realm-web";
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         import * as Realm from "realm-web";

.. note::
   
   If you loaded the SDK using a ``<script>`` tag then you don't need to import
   the SDK to use it. Instead, you can access it using the global ``Realm``
   variable.

.. _web-quickstart-init-app:

Initialize the App
------------------

To use {+backend+} features such as user authentication and functions, you must
access your {+app+} using your App ID. You can find your App ID in the {+ui+}.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         const app = new Realm.App({ id: "<Your App ID>" });
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         const app: Realm.App = new Realm.App({ id: "<Your App ID>" });

.. _web-quickstart-authenticate:

Authenticate a User
-------------------

When :ref:`anonymous authentication <anonymous-authentication>` is enabled,
users can log into your app without providing any identifying information:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Create an anonymous credential
         const credentials = Realm.Credentials.anonymous();
         try {
           // Authenticate the user
           const user = await app.logIn(credentials);
           // `App.currentUser` updates to match the logged in user
           assert(user.id === app.currentUser.id)
           return user
         } catch(err) {
           console.error("Failed to log in", err);
         }
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript

         // Create an anonymous credential
         const credentials = Realm.Credentials.anonymous();
         try {
           // Authenticate the user
           const user: Realm.User = await app.logIn(credentials);
           // `App.currentUser` updates to match the logged in user
           assert(user.id === app.currentUser.id)
           return user
         } catch(err) {
           console.error("Failed to log in", err);
         }

{+service-short+} provides many additional ways to authenticate, register, and
link users.

.. seealso:: :ref:`Authenticate a User <web-authenticate>`

.. _web-quickstart-function:

Call a Function
---------------

To call a :doc:`function </functions>`, use the ``App.functions`` interface to
call your serverless functions as if they were a regular JavaScript function
defined on the object.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         const summed = await app.functions.sum(2,3);
         assert(summed === 5);
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         const summed: number = await app.functions.sum(2,3);
         assert(summed === 5);

.. _web-use-graphql:

Use the GraphQL API
-------------------

To execute CRUD operations and call custom resolvers through the :doc:`GraphQL
API </graphql>`, we recommend that you use a third-party GraphQL library such as
:ref:`Apollo Client <graphql-apollo-react>`. To authenticate your GraphQL
request, include a valid user token in the Authorization header of the request.

.. seealso::
  - :doc:`Apollo Client (React) </web/graphql-apollo-react>`
  - :doc:`Run GraphQL Operations from a CLI </graphql/cli>`
