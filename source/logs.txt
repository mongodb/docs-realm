.. _logs:

================
Application Logs
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:
   
   Access Logs with the Admin API </logs/api>
   Authentication Logs </logs/authentication>
   Change Stream Logs </logs/changestream>
   Function Logs </logs/function>
   Service Logs </logs/service>
   Trigger Logs </logs/trigger>
   Schema Logs </logs/schema>
   Sync Logs </logs/sync>

Introduction
------------

{+service+} logs all incoming requests and application events such as user
authentication, trigger execution, and service interactions. You
can access your application's logs from the :guilabel:`Logs` page in the
{+ui+} or request them programmatically through the
:doc:`{+service-short+} Admin API </logs/api>`. {+service+} saves logs for 30 days.

Concepts
--------

Log Entry
~~~~~~~~~

A log entry describes a single event within {+backend+}.
Different events in {+backend+} execute in different ways, requiring
various permissions, underlying components and services.
{+backend+} groups log entries based on the type of event or request that
they record. Each type of log contains fields that describe that
particular event or request. As a result, your application
logs may include entries of the following types:

- :doc:`Authentication Requests </logs/authentication>`, including user
  creation, login, and deletion.

- :doc:`Functions </logs/function>`, including both {+service-short+} Functions
  as well as individual queries to :term:`linked {+atlas+} data sources
  <data source>` made using the MongoDB service of the {+service-short+} SDK.

- :doc:`Triggers </logs/trigger>`, including Database Triggers,
  Authentication Triggers, and Scheduled Triggers.

- :doc:`Service Requests </logs/service>`, including webhooks and
  service action calls issued from the {+service-short+} SDK.

- :doc:`Change Stream </logs/changestream>`, including any time a user
  opens or closes a stream of change events.

- :doc:`Schema changes </logs/schema>`, including any events related to
  changes to an application's schema.

- :doc:`Sync events </logs/sync>`, including all events related to
  data synchronization between client devices and MongoDB Atlas.

Parts of a Log Entry
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Section
     - Description

   * - Metadata
     - {+backend+} logs contain details like the status, timestamp,
       elapsed time, unique id, user, name, and type of a given log
       entry.

   * - Request Info
     - Log entries can contain several types of request details,
       including event arguments, service name, function call location,
       compute resources used, remote IP address, SDK, platform version,
       and performance metrics. Requesting log entries via the {+service-short+}
       Admin API will expose these as top-level fields in log entry
       objects. On the {+ui+}, clicking on a log entry will expose
       this information.

   * - Arguments
     - {+backend+} logs the arguments passed to Functions,
       including requests made via the MongoDB service. Other log
       entries do not preserve a record of arguments.

   * - Error Info
     - When a {+backend+} event exits unsuccessfully, it generates an Error
       log entry containing debugging information that can help diagnose
       what caused the issue.

Log Filters
~~~~~~~~~~~

Because {+backend+} creates log entries for most common kinds of user
interaction, it can become difficult to find a specific group of logs
due to the sheer volume of logs an application generates.
For performance reasons, {+backend+} limits individual queries to a maximum
of 100 log entries per page. You can filter entries by type, status,
timestamp, user, and request ID to return only logs that are relevant to
your query.

Error Logs
~~~~~~~~~~

All {+service+} log entries have one of two possible statuses:
``OK`` and ``Error``. If an event exits successfully, {+backend+}
generates an ``OK`` log entry based on the event. If an
event does not exit successfully for any reason, {+backend+}
creates a log entry with a status of the {+backend+} error that
caused the problem. You may encounter errors if you:

- Attempt to access data from `{+atlas+} <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ for which there is no applicable rule
- Fail to catch an exception or promise rejection in a {+service-short+} Function
- Call ``context.services.get()`` for a service which does not exist
- Call a {+atlas+} service action with invalid or missing
  parameters

Constraints
-----------

Log Lines
~~~~~~~~~

Functions can log information using JavaScript's ``console.log()``
method. {+backend+} stringifies each console log and stores each string
as a single line. {+backend+} truncates lines to 256 bytes in length.
For ASCII character sets, this translates to 256 characters; depending
on the character set you use, you may see truncation at lower character
counts.

{+backend+} saves only the first 10 log lines for a given log entry.

{+backend+} stores each output as a single string in the log entry's
``Logs`` field.

Log Retention
~~~~~~~~~~~~~~

{+service+} retains logs for 30 days, after which point they are
deleted. If you require logs older than 30 days, you can use the
:doc:`admin log API </logs/api>` prior to the 30 day expiration date of
each log to extract and externally store your log history.

Reference Documentation
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Subject
     - Description

   * - :doc:`Authentication Logs </logs/authentication>`
     - This page describes the form and content of authentication logs
       as well as the events that lead to their creation.

   * - :doc:`Change Stream Logs </logs/changestream>`
     - This page describes the form and content of change stream logs as
       well as the events that lead to their creation.

   * - :doc:`Function Logs </logs/function>`
     - This page describes the form and content of function logs as well
       as the events that lead to their creation.

   * - :doc:`Trigger Logs </logs/trigger>`
     - This page describes the form and content of trigger logs as well
       as the events that lead to their creation.

   * - :doc:`Schema Logs </logs/schema>`
     - This page describes the form and content of schema logs as well
       as the events that lead to their creation.

   * - :doc:`Sync Logs </logs/sync>`
     - This page describes the form and content of sync logs as well
       as the events that lead to their creation.
