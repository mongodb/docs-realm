.. _concept-development-mode:

================
Development Mode
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Development mode is a {+sync+} configuration setting for your {+app+}.
Enable development mode to streamline schema design, but disable it in
production applications.

{+sync+} development mode enables developers to develop faster, and design
:ref:`schemas <configure-your-data-model>` directly in client application 
code.

.. seealso::
   
   For a guided walkthrough of how to enable or disable development mode, see:
   :ref:`Enable/Disable Development Mode <enable-disable-development-mode>`.

Design Schemas in Code
----------------------

With development mode enabled, you can design schemas directly in client 
code. The objects and relationships that you define in your application 
become the server-side document schema based on your SDK models. 
:ref:`Realm SDKs <realm-sdks>` give you language-specific tools to define 
and work with these objects.

Create Schemas
~~~~~~~~~~~~~~

In practice, here's how the server-side document schema definition process 
works with development mode:

1. Enable development mode.
2. Sync {+realm+} files from your local {+client-database+}.
3. The objects in the files become the definitions for your schema.

After you have synced {+realm+} files to define your schema, you can view the 
schema, and you can also export your data model for any or all of the {+service+}
SDKs.

Update Schemas
~~~~~~~~~~~~~~

Schemas change as applications evolve. Development mode isn't just for 
creating schemas. You can also make additive changes to schemas in the 
same way. 

When you sync a {+realm+} file, {+backend+} maps every synced object type 
to its own collection. {+backend-short+} then updates the collection schema 
to match the synced type. 

When you later sync an updated object, {+backend-short+} automatically 
updates the collection schema. 

This lets you update objects in your client code as you develop your app, 
while {+backend+} updates the schema to match.

.. seealso:: Modifying synced object schemas
 
   For more information about modifying synced object schemas, including
   how to make destructive changes, see: :ref:`<synced-schema-overview>`.

Bypass Rules and Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you enable development mode, {+service-short+} bypasses data access 
rules and schema validation. This lets developers iterate quickly to develop 
new features or fix bugs. However, this aspect of development mode means 
it's vital to disable it in production. Leaving development mode enabled 
in production can expose your app to security vulnerabilities. 

.. warning::

   Ensure your development database does not contain production data. When 
   you enable development mode, {+service-short+} does not enforce data access 
   rules. If your development database contains production data, developer
   mode would leave that data vulnerable to inadvertent or malicious access.

Key Concepts
------------

.. _sync-development-database:

Development Database
~~~~~~~~~~~~~~~~~~~~

When you enable Development Mode, you specify a database to store synced 
objects. {+service-short+} creates new collections in this Development Mode 
database for every type of synced object.

{+service-short+} does not enforce data access rules while in Development 
Mode. Your Development Mode Database should not contain any production 
or user data.

.. example::

   Specify a Development Mode database of ``myapp``. Your iOS client has a 
   ``Person`` model. You sync a {+realm+} that contains an instance of the 
   ``Person`` object. Developer Mode creates a server-side schema associated 
   with the model. The object syncs to the ``myapp.Person`` collection. 

   {+service-short+} continues creating new server-side schemas and collections 
   for each new object type. If you later add a ``Dog`` object, that object 
   will sync to a new ``myapp.Dog`` collection that {+service-short+} will 
   create.

Summary
-------

- Enable Development Mode to create and update schemas from client code.
- Sync to a Development Mode Database, where {+service-short+} will 
  automatically create collections to match your object types.
- Keep in mind that {+service-short+} does not enforce data access rules 
  and schema validation while Development Mode is enabled.
- Do not use Development Mode in production.
