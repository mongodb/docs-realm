.. _concept-development-mode:

================
Development Mode
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Development mode is a {+sync+} configuration setting for your {+app+}.
Enable development mode to streamline schema design, but disable it in
production applications.

.. seealso::
   
   For the procedure to enable or disable development mode, see:
   :ref:`Enable/Disable Development Mode <enable-disable-development-mode>`.

Benefits of Enabling Development Mode
-------------------------------------

{+sync+} development mode enables developers to develop faster, and design
:ref:`schemas <configure-your-data-model>` directly in client application 
code.

Design Schemas in Code
~~~~~~~~~~~~~~~~~~~~~~

With development mode enabled, you can design schemas directly in client 
code. The objects and relationships that you define in your application 
become your schema. :ref:`Realm SDKs <realm-sdks>` give you language-specific 
tools to define and work with these objects.

In practice, here's how the schema definition process works with 
development mode:

1. Enable development mode.
2. Sync {+realm+} files from your local {+client-database+}.
3. The objects in the files become the definitions for your schema.

After you have synced {+realm+} files to define your schema, you can view
the schema through the Realm UI. Go to your Realm App -> :guilabel:`Data Access` 
-> :guilabel:`Schema`.

Create and Update Schemas
`````````````````````````

Schemas change as applications evolve. Development mode isn't just for 
creating schemas. You can also make additive changes to schemas in the 
same way. 

When you sync a {+realm+} file, {+backend+} maps every synced object type 
to its own collection. {+backend-short+} then updates the collection schema 
to match the synced type. 

When you later sync an updated object, {+backend-short+} automatically 
updates the collection schema. 

This lets you update objects in your client code as you develop your app, 
while {+backend+} updates the schema to match.

.. seealso:: Modifying synced object schemas
 
   For more information about modifying synced object schemas, including
   how to make destructive changes, see: :ref:`Modify a Synced Object 
   Schema <modify-synced-object-schema>`.

Bypass Rules and Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you enable development mode, {+service-short+} bypasses data access 
rules and schema validation. This lets developers iterate quickly to develop 
new features or fix bugs. However, this aspect of development mode means 
it's vital to disable it in production. Leaving development mode enabled 
in production can expose your app to security vulnerabilities. 

Development Mode in Workflows
-----------------------------

Because development mode disables schema validation and data access rules, 
use it only in development. Following are {+service-short+} best practices 
for using development mode in workflows.

Use Separate Realm Apps for Development, Staging, and Production
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ensure your team does not accidentally enable development mode in a 
production application. Use separate {+service-short+} applications with 
different settings for your respective environments. Always keeps development 
mode disabled in production.

Leaving development mode enabled in production exposes your app to potential
security vulnerabilities. Additionally, if a developer makes changes to 
schema via developer mode while an app is in production, schema mismatch 
issues can leave your production client applications buggy or unable to
open.

Do Not Use Production Data in Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ensure your development database does not contain production data. When 
you enable development mode, {+service-short+} does not enforce data access 
rules. If your development database contains production data, developer
mode would leave that data vulnerable to inadvertent or malicious access.

Automate Development Mode in CI/CD Workflows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your team uses CI/CD workflows, add a step to your workflow to disable 
development mode. You might set an automation to disable development mode
when merging from development to testing, and again when merging to production.
This is an additional safeguard against a developer inadvertently committing
a config that contains ``developer_mode_enabled``: ``true``.

You can update this in your :ref:`{+sync+} configuration 
<appconfig-sync>` by setting ``development_mode_enabled`` to ``false``.

Key Concepts
------------

Development Database
~~~~~~~~~~~~~~~~~~~~

When you enable Development Mode, you specify a database to store synced 
objects. {+service-short+} creates new collections in this Development Mode 
database for every type of synced object.

For example, you specify a Development Mode database of ``myapp``. Your 
iOS client has a ``Person`` model. You sync a {+realm+} that contains an 
instance of the ``Person`` object. Developer Mode creates a server-side 
schema associated with the model. The object syncs to the ``myapp.Person`` 
collection. 

{+service-short+} continues creating new server-side schemas and collections 
for each new object type. If you later add a ``Dog`` object, that object 
will sync to a new ``myapp.Dog`` collection that {+service-short+} will 
create.

{+service-short+} does not enforce data access rules while in Development 
Mode. Your Development Mode Database should not contain any production 
or user data.

Summary
-------

- Enable Development Mode to create and update schemas from client code.
- Sync to a Development Mode Database, where {+service-short+} will 
  automatically create collections to match your object types.
- Keep in mind that {+service-short+} does not enforce data access rules 
  and schema validation while Development Mode is enabled.
- Do not use Development Mode in production.
