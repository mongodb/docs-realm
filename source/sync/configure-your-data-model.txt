.. _configure-your-data-model:

=========================
Configure Your Data Model
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/sync-beta-note.rst

Overview
--------

In modern applications, users expect their data to be accurate no matter
which device or browser they connect from. Data modeling ensures the
accuracy of application data by performing type and format checks on
fields. 

MongoDB Realm allows you to define, synchronize, and enforce your data
model in two formats: 

- :doc:`Realm Schema </mongodb/document-schemas>`, which defines your
  data as MongoDB documents to enforce validation and synchronization
  in the cloud.

- :term:`{+service-short+} data model`, which defines your data as native objects in your mobile application.

Having these two forms of data models allows your data to be consistent
and :doc:`synced</sync>` regardless of which clients
write the data.

.. _object-schema:

Object Schema
-------------

An **object schema** defines the properties and relationships of a
{+service-short+} object. Object schemas are defined using JSON schema
in the :guilabel:`Schema` sidebar entry of the {+ui+}:

.. code-block:: json

   {
     "title": "Dog",
     "bsonType": "object",
     "required": [
       "_id",
       "_partition",
       "name"
     ],
     "properties": {
       "_id": {
         "bsonType": "objectId"
       },
       "_partition": {
         "bsonType": "string"
       },
       "name": {
         "bsonType": "string"
       },
       "age": {
         "bsonType": "int"
       }
       "breed": {
         "bsonType": "string"
       }
     }
   }

.. _property-schema:

Property Schema
~~~~~~~~~~~~~~~

A **property schema** is a field-level configuration that defines and
constrains a specific property in an object schema. Every object schema
must include a property schema for each property in the object. At
minimum, a property schema defines a property's data type and indicates
whether the property is required.

You can configure the following constraints for a given property:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Parameter
     - Type
     - Description

   * - Type
     - String
     - Every property in a {+service-short+} object has a strongly defined data
       type. A property's type can be a primitive data type or an object
       type defined in the same {+realm+}. The type also specifies whether
       the property contains a single value or a list of values.

       {+client-database+} supports the following property types:

       - boolean
       - integer
       - double
       - string
       - date
       - decimal128
       - objectId
       - array
       - object

   * - Optional
     - Boolean
     - Optional properties may contain a null value or be entirely
       omitted from an object. By default, all properties are required
       unless explicitly marked as optional.

   * - Default
     - Boolean
     - If a client application creates a new object that does not have a
       value for a defined property, the object uses the default value
       instead.

       When you attempt to create an object that is missing a value
       for a required field, it fails validation and does not persist
       to the {+realm+}.

   * - Indexed
     - Boolean
     - A property index significantly increases the speed of certain
       read operations at the cost of additional overhead for write
       operations. Indexes are particularly useful for equality
       comparison, such as querying for an object based on the value of
       a property. However, indexes consume additional storage.

Approaches
----------

There are two alternative approaches to configuring both data models: 

- :ref:`Create a Realm Object Model from a Realm Schema <create-rom-from-schema>`: If you have data in your `{+atlas+} <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ cluster already, MongoDB generates a Realm Schema by sampling your data. MongoDB Realm can then translate that Realm Schema into a Realm Object Model to use in your mobile application. 

- :ref:`Create a Realm Schema from a Realm Object Model <create-schema-from-rom>`: Alternatively, if you are developing mobile-first and do not already have data in your Atlas cluster, you can translate your Realm Object Model into a Realm Schema for use with Atlas. Regardless of the approach that you take, when you configure both your Atlas cluster and Mobile application to use the respective data model, changes to the data model between the server and client are auto-updated.  


.. _create-rom-from-schema:

Create a Realm Object Model from a Realm Schema
-----------------------------------------------

.. note:: Link a MongoDB Atlas Data Source
   
   Your Realm app must have at least one :doc:`linked Atlas data source
   </mongodb/link-a-data-source>` in order to define a Realm Data Model.

.. include:: /includes/steps/auto-schema-generation.rst

.. _create-schema-from-rom:

Create a Realm Schema from a Realm Object Model
-----------------------------------------------

.. note:: Link a MongoDB Atlas Cluster
   
   Your Realm app must have at least one :doc:`linked Atlas data source
   </mongodb/link-a-data-source>` in order to define a Realm Data Model.

.. include:: /includes/steps/development-mode-realm-schema.rst


Summary
-------
- MongoDB Realm uses two different data models: a Realm Object Model for mobile and a Realm Schema for Atlas. Changes to one data model match the other data model. 
- If you already have data in Atlas, MongoDB Realm creates a Realm Schema by sampling that data. That Realm Schema can be translated into a Realm Object Model to be used in your Realm mobile application code. 
- If you do not have data in Atlas or are developing with a mobile-first approach, you can turn on :guilabel:`Development Mode` to allow for data model changes from a Realm mobile client. When you finish developing your Realm Object Model, you can turn off :guilabel:`Development Mode`, and your Realm Schema will be auto-updated with your updated data model configuration. Atlas will begin using this updated data model configuration for data validation on your cluster immediately. 
