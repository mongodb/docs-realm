.. _pause-or-terminate-sync:
.. _terminating-and-reenabling-sync:

=============================
Alter Your Sync Configuration
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You may want to alter your sync configuration after you have already
:ref:`enabled sync <enable-realm-sync>`. 

If you are using Partition-Based Sync, and want to change the ``Partition Key``,
you can terminate and re-enable sync.

You can also pause sync to prevent clients from accessing your cluster, however
this will not allow you to make changes to your sync configuration. 

If you are using Flexible Sync and want to add or remove queryable
fields, you can do so immediately, without terminating sync.

Pause or Terminate Sync
-----------------------

If you want to disable {+sync+} for your app, you can temporarily pause or 
permanently terminate it. You can also re-enable {+sync-short+} after 
disabling it.

You can temporarily :ref:`pause <pause-sync>` {+sync-short+} if 
you need to pause your cluster. With a temporary pause, you can 
:ref:`resume <resume-sync>` without resetting your :ref:`{+sync-short+} 
configuration <appconfig-sync>` or losing {+sync-short+} metadata.

You can permanently :ref:`terminate <terminating-realm-sync>` and 
:ref:`re-enable <re-enable-realm-sync>` {+sync-short+} for troubleshooting or
if you want to change your :ref:`{+sync-short+} configuration <appconfig-sync>`.

.. _pause-sync:

Pause Sync
~~~~~~~~~~

You can pause {+sync+} for a period of time without disabling
it entirely. When you pause {+sync-short+}, you stop syncing changes between 
Atlas and your application. 

.. important::

   If you need to pause your cluster, pause {+sync+} first. Otherwise, you
   must :ref:`terminate <terminating-realm-sync>` and :ref:`re-enable 
   <re-enable-realm-sync>` {+sync-short+} and perform a client reset.

Pausing {+sync-short+} rejects any incoming client connections. This means that 
pausing {+sync+} for your {+app+} stops syncing changes for all clients. To 
pause {+sync-short+} from the client side, using logic that situationally 
pauses {+sync-short+} during a session, see your preferred SDK:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      Learn how to :ref:`pause or resume a {+sync-short+} session using the 
      Android SDK <android-pause-or-resume-a-sync-session>`.

   .. tab::
      :tabid: ios

      Learn how to :ref:`pause or resume a {+sync-short+} session using the 
      iOS SDK <ios-suspend-or-resume-a-sync-session>`.

   .. tab::
      :tabid: react-native
      
      Learn how to :ref:`pause or resume a {+sync-short+} session using the 
      React Native SDK <react-native-pause-or-resume-a-sync-session>`.

   .. tab::
      :tabid: node
      
      Learn how to :ref:`pause or resume a {+sync-short+} session using the 
      Node SDK <node-pause-or-resume-a-sync-session>`.

   .. tab::
      :tabid: dotnet

      Learn how to :ref:`pause or resume a {+sync-short+} session using the 
      .Net SDK <dotnet-pause-or-resume-a-sync-session>`.

After pausing {+sync-short+}, you can :ref:`re-enable it <resume-sync>`. 
Pausing {+sync-short+} maintains the configuration settings and all of the 
{+sync-short+} metadata, which contains the sync history. When you re-enable 
paused {+sync-short+}, your clients can reconnect normally.

.. include:: /includes/warn-cannot-renable-paused-sync.rst

Procedure
~~~~~~~~~

.. include:: /includes/steps/pause-sync-ui.rst

.. _resume-sync:

Resume Sync
~~~~~~~~~~~

After you have paused {+sync+}, you can resume it to begin syncing again for
all clients. 

.. include:: /includes/warn-cannot-renable-paused-sync.rst

Procedure
~~~~~~~~~

The process to resume {+sync-short+} is the same as the process to re-enable 
{+sync-short+}. However, when you pause {+sync-short+}, {+service+} preserves 
your configuration settings and {+sync-short+} metadata.  

To re-enable {+sync+}, follow the steps in the :ref:`Enable Realm Sync
<enable-sync>` guide. You can skip the **Configure Sync** 
step. 

Clients do not need to perform a client reset when reconnecting after a pause.

.. _terminating-realm-sync:

Terminate Sync
~~~~~~~~~~~~~~

If you have :ref:`enabled Realm Sync <enable-sync>`, you may have to 
terminate and re-enable {+sync+} under a few different circumstances:

- An upgrade from a Shared Tier {+atlas-short+} Cluster to a Shared or Dedicated instance
- A move to an {+atlas-short+} cluster that is distributed across regions/cloud providers
- An upgrade to NVMe Atlas clusters
- An :manual:`oplog </core/replica-set-oplog/>` rollover
- A paused {+sync+} session on a shared tier cluster due to infrequent usage 
- Troubleshooting, at the request of MongoDB Support

.. warning:: Recovering Unsynchronized Changes after Terminating Sync
 
 Terminating and re-enabling {+sync+} prevents unsynchronized client changes
 from automatically syncing. To recover any unsynchronized changes, implement a
 manual client reset that handles this case in your client applications:

 .. tabs-realm-sdks::

   .. tab::
      :tabid: android

      Learn how to perform a :ref:`Client Reset using the Android SDK <android-client-resets>`.

   .. tab::
      :tabid: ios

      Learn how to perform a :ref:`Client Reset using the iOS SDK <ios-client-resets>`.

   .. tab::
      :tabid: node
      
      Learn how to perform a :ref:`Client Reset using the Node SDK <node-client-resets>`.

   .. tab::
      :tabid: react-native
      
      Learn how to perform a :ref:`Client Reset using the React Native SDK <react-native-client-resets>`.

   .. tab::
      :tabid: dotnet

      Learn how to perform a :ref:`Client Reset using the .NET SDK <dotnet-client-reset>`.


Terminate {+sync+} in your {+app+} to stop syncing data across
devices. 

.. include:: /includes/steps/terminate-sync-ui.rst

.. _re-enable-realm-sync:

Re-Enable Sync
~~~~~~~~~~~~~~

After you have terminated {+sync+}, you can re-enable it. Re-enabling 
{+sync-short+} enables your {+app+} to begin syncing changes to Atlas again. 
After you re-enable {+sync-short+}, your {+app+} begins accepting incoming
client connections again. However, if a client had previously connected to
your {+app+} before you terminated {+sync+}, you must perform a manual client 
reset for that client to enable it to connect to {+service+} again.

When you pause {+sync-short+}, {+service+} preserves your configuration 
settings, and you can skip the **Configure Sync** step. 
When you terminate {+sync-short+}, or when the :manual:`oplog 
</core/replica-set-oplog/>` rolls past the time that you paused {+sync-short+}, 
you must specify the configuration settings again.

To re-enable {+sync+}, follow the steps in the :ref:`Enable Realm Sync
<enable-sync>` guide. 

If you are re-enabling {+sync+} after you have terminated it, you must 
perform a manual client reset in your client applications:

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      Learn how to perform a :ref:`Client Reset using the Android SDK <android-client-resets>`.

   .. tab::
      :tabid: ios

      Learn how to perform a :ref:`Client Reset using the iOS SDK <ios-client-resets>`.

   .. tab::
      :tabid: node
      
      Learn how to perform a :ref:`Client Reset using the Node SDK <node-client-resets>`.

   .. tab::
      :tabid: dotnet

      Learn how to perform a :ref:`Client Reset using the .NET SDK <dotnet-client-reset>`.

.. alter-partition-based-sync-config:

Alter Your Partition-Based Sync Configuration
---------------------------------------------

You must :ref:`Terminate Sync <terminating-realm-sync>` and :ref:`Re-enable Sync
<re-enable-realm-sync>` to make changes to your Partition-Based Sync
Configuration. While you are re-enabling Realm Sync, you can specify a new
Partition Key, or changes to your Read/Write Permissions. Making changes to your
sync configuration while terminating and re-enabling sync will trigger a client
reset. To learn more about handling client resets, read the :ref:`client reset
<client-resets>` documentation.


.. alter-flexible-sync-config:

Alter Your Flexible Sync Configuration
--------------------------------------
To alter your Flexible Sync Configuration, you can add or remove fields in the {+ui+} while
Sync is enabled without terminating and re-enabling sync. 

.. add-a-queryable-field:

Add a Queryable Field
~~~~~~~~~~~~~~~~~~~~~
To add a queryable field, navigate to the :guilabel:`Sync` configuration screen
through the {+leftnav+}. Under the :guilabel:`Select Queryable Fields` heading,
you can create a new field(s) to construct a query on. Finally, make sure to
click :guilabel:`Enable Sync` to finish adding your queryable field and enable
sync.

.. note:: 

   Devices using this new field will only be able to sync on this field once the
   device has caught up to the point in time in :ref:`Sync History <sync-history>`
   where the field was added. 

.. image:: /images/FS-add-queryable-field.png
   :alt: Add a Queryable Field

.. remove-a-queryable-field:

Remove a Queryable Field
~~~~~~~~~~~~~~~~~~~~~~~~
To remove a queryable field, navigate to the :guilabel:`Sync` configuration
screen through the {+leftnav+}. Under the :guilabel:`Select Queryable Fields`
heading, you can click the :guilabel:`x` button next to the field you wish to
delete. Finally, make sure to click :guilabel:`Enable Sync` to finish adding
your queryable field and enable sync.

.. note:: Removing a Queryable Field Triggers a Client Reset on Devices Using That Field

   When you remove a queryable field, any devices still using that field will
   have their sync session dropped and receive a client reset. To learn more
   about handling client resets, read the :ref:`client reset <client-resets>`
   documentation. Clients that are not using this field, will continue syncing
   data normally without receiving any errors. To avoid triggering a client
   reset when you remove the queryable field in the :guilabel:`Sync`
   configuration screen, you should also remove this field on the client-side.

.. image:: /images/FS-remove-queryable-field.png
   :alt: Remove a Queryable Field

Implicit Permission Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Making changes to permissions, whether implicitly through user metadata, or
explicitely through changing configuration filters, will trigger a client reset
and re-download of all sync data with the new permissions applied. 

However, adding a new collection to a sync schema, and defining permissions for
the new namespace or using default roles, will not trigger a client reset, since
permissions have not been applied previously. The most simple way to avoid a
client reset when creating a new collection is to have a default role.
Alternatively, custom permissions for the new collection will need to be
deployed in the same draft as the new schema to avoid a client reset. If custom
permissions for the new collection are deployed after the new schema, the
default permissions will be applied, and a client reset will be triggered.

