.. _sync-rules:

=================
Define Sync Rules
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In order to control who can sync, read, and write sections
of data, MongoDB Realm allows you to configure **rules**.
Rules enforce two essential data access principles:

- Users can only read the objects that they are allowed to see.
- Users can only make changes to the objects that they are allowed to write to.

You can edit rules in the Rules UI in MongoDB Realm. You can
also import rules using the Realm CLI.

Rules and Partitions
--------------------

Rules apply to entire :ref:`partitions <partitions>`. This
level of access control is suitable for most applications
without compromising sync performance.

For example, consider an app that manages a chain of stores.
By using the individual store ID as the :term:`partition
key`, we divide each store's data into its own partition. We
can grant the manager of each store write access only to the
store they manage. In other words, the manager gets
permission to modify any object within that partition.

However, with the store ID as partition key, we cannot grant
write access to only *part* of a store. If we needed to
grant access to specific sections of the store, we would
instead design the app to use section IDs as the partition
keys. How you intend to grant access should inform how you
partition your data.

.. _sync-roles:

Users and Sync Roles
--------------------

A **sync role** is a set of partition-level permissions that
Realm evaluates when determining whether a user may sync a
given partition. You select a property of the :ref:`user
object <user-objects>` that determines whether 

There are two initial roles:

- :guilabel:`Read-only`: the user may sync the partition and read the data.
- :guilabel:`Read/Write`: the user may sync the partition, read the data, and modify the data.

You may define custom roles with a rules :ref:`expression
<expressions>`. In a sync rules expression, access the
partition key value with the ``%%partition``
:ref:`expression expansion <expansions>`.

.. example::

   Suppose the store management application uses
   :ref:`custom JWT authentication
   <custom-jwt-authentication>`. In order to control who can
   read and write store data, we provide the user object
   with two custom properties:
   
   - ``Store_List``: an array of IDs of the stores that the user can read from.
   - ``Managed_Stores``: an array of IDs of the store that the user manages and can modify.

   By adding store IDs to these arrays on the user object,
   we can:
   
   - Grant an employee read-only access to their own store.
   - Grant a manager read/write access to their own store, and read-only access to other stores.
   - Grant a regional manager read/write access to many stores.

   The roles part of the realm configuration file would
   looks like this:

   .. code-block:: json
      :emphasize-lines: 5-7, 14-16

      {
        "roles": [
          {
            "name": "Read-Write Role",
            "apply_when": {
              "StoreID" : "%%user.Managed_Stores"
            },
            "insert": true,
            "delete": true,
            "write": true
          },
          {
            "name": "Read Only",
            "apply_when": {
              "StoreID": "%%user.Store_List"
            },
            "insert": false,
            "delete": false,
            "read": true
          }
        ],
        ...
      }


Procedure
---------

.. tabs-realm-admin-interfaces::

   tabs:
     - id: ui
       content: |
         .. include:: /includes/steps/define-sync-rules-ui.rst
     - id: cli
       content: |
         .. include:: /includes/steps/define-sync-rules-cli.rst

Summary
-------

- **Sync rules** allow you to control who can read and write on which :ref:`partition <partitions>`.
- **Roles** are collections of permissions that Realm evaluates to determine whether a user may sync a partition.
- You can define rules in the Realm UI or by importing them with the Realm CLI.

