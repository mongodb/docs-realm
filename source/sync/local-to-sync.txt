.. _realm-sync-local-to-sync:

=======================================
Add Sync to a Local-Only App
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
If you have a mobile app that uses a local {+client-database+} and you want to 
convert the app to use {+sync+}, there are a few steps you 
need to follow. You first need to set up a {+backend-short+} 
backend, and then you make code changes in your client app(s). 

In the following sections, you will learn to do the following on the backend:

- Create a new {+realm+} app in {+atlas+},
- Configure at least one User Authentication provider, and
- Choose a partition strategy.

And then, in your client app, you will:

- Update your {+service-short+} object models,
- Connect to the new synced {+realm+} with a sync configuration file,
- Authenticate the user.

Finally, if needed, you will also need to copy your local data to the new 
synced {+realm+}.

Create a Backend App
--------------------
To sync your data between devices and with {+atlas+}, you first need to create 
a {+app+}. This app serves -- at a minimum -- two purposes: it provides a 
gateway to the data, and it provides data security in the form of user 
authentication, data encryption, and access control.

To get started creating the backend app, follow the steps in 
:ref:`<create-a-realm-app>`.

Enable Authentication
~~~~~~~~~~~~~~~~~~~~~
User authentication plays a crucial role in {+sync+}. {+service-short+} provides 
many different :ref:`Authentication Providers <authentication-providers>` such 
as email/password and OAuth; once you have configured one or more providers,
you can then control exactly who has access to which data.

To set up an auth provider, choose one of the  
authentication providers and follow the configuration steps for the provider(s) 
of your choice.

Partition the Data 
~~~~~~~~~~~~~~~~~~

Data :ref:`partitions <sync-partitions>` let you configure which users have
access to which data. This process is often the most time-consuming part of
setting up {+sync+}, as you as you consider what partition strategy is the best
fit for your use case and data.

As part of determining your :ref:`partition strategy <partition-strategies>`, 
you'll choose a :ref:`partition key <partition-key>`. You might choose a 
partition key that is already a part of your object models, which you can then 
specify when you set up {+sync+}. If you have chosen a partition key that 
isn't already a part of your object models, you'll need to update those models.

Update the Client App
---------------------
Now that you have the backend set up for {+sync-short+}, you need to make a few 
changes in your client app. Follow the steps in the Quick Start for your 
language/platform:

- :ref:`<android-client-quick-start-sync>`
- :ref:`<ios-client-quick-start-with-sync>`
- :ref:`<dotnet-client-quick-start>`
- :ref:`<react-native-client-quick-start>`
- :ref:`<node-client-quick-start>`

.. _copy-local-data-to-synced-realm:

Copy Existing Data
----------------------
None of the data in your local {+realm+} will be automatically transferred to your 
new synced {+realm+}; it is up to you to ensure the data you want to preserve is 
copied to the new {+realm+}. How you go about doing this depends, in part, on your 
specific needs, but the following diagram and steps outline the process for 
copying all of the data from the local {+realm+} to the synced {+realm+}. If done 
correctly, the impact on app performance after the initial copy will be 
minimal.

App Logic
~~~~~~~~~

.. figure:: /images/local_to_sync.png
   :alt: Flow chart showing the steps to convert from local to sync

1. Check if a synced {+realm+} already exists.

2. If not, create one. Open a connection to it and to the local {+realm+}.

3. Read each record from the local {+realm+} and modify it to meet the needs of the 
   synced {+realm+} (adding a partition key, for example).

4. Copy the modified record to the new synced {+realm+}. Sync will automatically 
   copy the record to Atlas.

5. Confirm that all records you want to preserve are in the new {+realm+}.

6. Delete the local {+realm+} file.

7. On each subsequent app load, simply check if the local {+realm+} has been 
   deleted.
