.. _flexible-sync:

=============
Flexible Sync
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} Flexible Sync lets you define a query in the client, and 
sync only the objects that match the query. With client-side subscriptions, 
client applications can:

- Maintain queries
- React to changes
- Add, change, or delete queries

Together with :ref:`rules and permissions <sync-rules>`, Flexible Sync 
provides a powerful way to configure Sync around your business logic.

When a client makes a query, {+service-short+} searches the server-side 
data set for documents matching the query. Then, the sync engine applies 
a set of rules to determine which documents in the results set the user 
should be able to access. {+service-short+} returns only the matching 
documents where the user has read or read/write access, and assigns the 
user the appropriate permissions.

Client applications can add, update, or remove queries dynamically at 
run-time from the device.

.. include:: /includes/note-flexible-sync-preview.rst

.. _queryable-fields:

Queryable Fields
----------------

When you configure Flexible Sync, you specify one or more fields 
from your :ref:`Sync Schema <sync-schema-overview>` that your client 
application can query. 

.. example::

   In a task tracker app, you might set ``assignee`` or ``owner`` 
   as queryable fields. On the client side, you can then query for tasks 
   whose ``assignee`` or ``owner`` matches the logged-in user. 

Queryable fields apply across all collections in a {+app+}'s Sync Schema.
You can use :ref:`rules and permissions 
<flexible-sync-rules-and-permissions>` to configure more granular access 
control on individual collections.

.. _flexible-sync-eligible-field-types:

Eligible Field Types
~~~~~~~~~~~~~~~~~~~~

Any top-level primitive field with a scalar type can be a queryable field. 
Flexible Sync does not currently support embedded objects or arrays as 
queryable fields.

Performance and Storage
~~~~~~~~~~~~~~~~~~~~~~~

Queryable fields use storage on the backing Atlas cluster. The more 
queryable fields you configure, the more storage you use on the backing 
cluster.

You can configure up to 10 queryable fields per application for Flexible 
Sync. If you have a large number of collections in a {+app+}, you may need to
use the same queryable field across multiple collections. Combine this with 
:ref:`rules and permissions <flexible-sync-rules-and-permissions>` for 
more granular control over who can access which collections.

.. example::

   Your {+app+} may contain 20 or 30 collections, but you can only configure
   10 queryable fields. You must re-use queryable fields across collections 
   in order to sync objects from every collection.

For best performance, open a synced {+realm+} with a broad query. Then, add 
more refined queries to expose targeted sets of data in the client 
application. Slicing off working sets from a broad query provides
better performance than opening multiple synced {+realm+}s using more 
granular queries.

When you configure queryable fields, consider the broad queries you use 
for Sync, and select fewer fields that support those broad queries.

.. example::

   In a task tracker app, prefer broad queries such as ``assignee == currentUser`` 
   or ``projectName == selectedProject`` for a Sync query. This gives you a 
   couple of broad fields against which to Sync documents. In the client, you 
   can further refine your query for things like tasks of a certain priority 
   or completion status to slice off a working set.

.. _get-started-flexible-sync:

Get Started with Flexible Sync
------------------------------

Define a Schema
~~~~~~~~~~~~~~~

To use Flexible Sync, create a schema for your {+app+}. The :ref:`eligible 
fields <flexible-sync-eligible-field-types>` in your schema become queryable fields
you can select when you enable Flexible Sync.

If you're not yet ready to create a schema, you can manually define queryable
fields with :ref:`Development Mode <concept-development-mode>`.

.. seealso::

   :ref:`create-schema-for-backend-realm-app`

Enable Sync
~~~~~~~~~~~

After you have defined a schema, or decided to create your data model on the 
client side and use :ref:`Development Mode <concept-development-mode>` to 
define a schema, you can enable Flexible Sync. 

During the process of enabling Sync, you select queryable fields and 
define roles that control how users can access your data. 

.. seealso::

   :ref:`enable-sync`

Select Fields to Query
``````````````````````

When you enable Flexible Sync, you can select queryable fields in two ways:

- If you have defined your schema, you can select queryable fields from 
  :ref:`eligible fields <flexible-sync-eligible-field-types>` in your schema.
- If you are using :ref:`Development Mode <concept-development-mode>`, you 
  can type a queryable field name that matches an :ref:`eligible field type 
  <flexible-sync-eligible-field-types>` in your client application.

You can configure up to 10 queryable fields per {+app+}. These 
fields apply across all of the collections in your application.

Define Roles
````````````

When a user submits a query to the {+app+}, Sync determines which role 
applies for the user. 

Roles consist of:

- A role name
- A rule for when to apply the role 
- Read and write permissions for users with the role 

You can define multiple roles to tailor your access permissions for each
collection. Collections can have more than one role, or none at all. 

You can also create default roles, which do not apply to a specific collection.
Instead, default roles apply to any collection where you do not define custom 
roles.

.. seealso::

   :ref:`flexible-sync-rules-and-permissions`

Create Queries in Your Client Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With Flexible Sync enabled, you can start creating queries from 
your client application. 

The {+service+} SDKs provide methods to create, update, and remove queries 
from the client application. The SDKs use subscriptions to maintain those 
queries on the client side. Through these subscriptions, your applications
sync objects with the backend {+app+} and can watch for and react to changes.

.. tabs-realm-sdks::

   .. tab::
      :tabid: android

      To create queries from the Android Client SDK, see the
      Android SDK guide to Sync Changes Between Devices with 
      Flexible Sync.

   .. tab::
      :tabid: ios

      To create queries from the Swift Client SDK, see the Swift SDK guide 
      to Sync Changes Between Devices with Flexible Sync.

   .. tab::
      :tabid: node
      
      To create queries from the Node Client SDK, see the Node SDK 
      guide to Sync Changes Between Devices with Flexible Sync.

   .. tab::
      :tabid: react-native

      To create queries from the React Native Client SDK, see the React 
      Native SDK guide to Sync Changes Between Devices with Flexible 
      Sync.

   .. tab::
      :tabid: dotnet

      To create queries from the .NET Client SDK, see the .NET SDK 
      guide to Sync Changes Between Devices with Flexible Sync.
