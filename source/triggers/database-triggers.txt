.. _database-trigger:

-----------------
Database Triggers
-----------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Database Triggers allow you to execute server-side logic whenever a
document is added, updated, or removed in a
:term:`linked {+atlas+} cluster <linked cluster>`.
You can use database Triggers to implement complex data interactions,
including updating information in one document when a related document
changes or interacting with a :doc:`service </services>` upon the insertion
of a new document.

Database Triggers use MongoDB :manual:`change streams </changeStreams>`
to listen for changes to documents in a collection and pass
:ref:`database events <database-events>` to their associated Trigger
function.

.. important:: Change Stream Limitations
   
   {+backend+} opens a single change stream for each collection with at least
   one enabled Trigger and limits the total number of open change
   streams on each linked cluster across all {+app+}s based on the
   cluster's size. See :ref:`change stream limitations
   <mongodb-service-limitations-change-streams>` for more information.

.. note::

   Database Triggers are only available for `{+atlas+} <https://www.mongodb.com/realm?tck=realm-docs#atlas-form-container>`_ 
   clusters that are running MongoDB version 3.6 or newer.

.. _create-a-database-trigger:

Create a Database Trigger
-------------------------

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      To open the database trigger configuration screen in the {+ui+}, click
      :guilabel:`Triggers` in the {+leftnav+}, select the
      :guilabel:`Database Triggers` tab, and then click :guilabel:`Add a
      Trigger`.
         
      Configure the trigger and then click :guilabel:`Save` at the bottom of
      the page to add it to your current deployment draft.
         
      A database trigger has the following configuration options:
         
      .. list-table::
         :header-rows: 1
         :widths: 15 30
         
         * - Field
           - Description
         
         * - :guilabel:`Trigger Type`
         
           - Required. The type of the Trigger. Set this value to ``DATABASE`` for database Triggers
         
         * - :guilabel:`Trigger Name`
         
           - Required. The name of the Trigger.
         
         * - :guilabel:`Linked Function`
         
           - Required. The name of the {+service-short+} Function that the Trigger
             executes whenever it fires. The Trigger passes the
             :ref:`database event object <database-events>` that
             caused it to fire as the only argument to this Function.
         
         * - :guilabel:`Cluster`
         
           - Required. The name of the MongoDB Service that the Trigger is
             associated with.
         
         * - :guilabel:`Database Name`
         
           - Required. The MongoDB database that contains the watched
             collection.
         
         * - :guilabel:`Collection Name`
         
           - Required. The name of the collection that the Trigger watches for
             change events.
         
         * - :guilabel:`Operation Types`
         
           - Required. A list of one or more :ref:`database operation
             types <database-event-operation-types>` that cause the Trigger to
             fire. Format each operation type as an uppercase string, e.g.,
             ``"INSERT"``.
         
             .. warning::
         
                Update operations executed from {+compass+} or the {+atlas+}
                Data Explorer fully replace the previous document. As a result,
                update operations from these clients will generate ``REPLACE``
                change events rather than ``UPDATE`` events.
         
         * - :guilabel:`Full Document`
         
           - If enabled, ``UPDATE`` change events include the latest
             :manual:`majority-committed </reference/read-concern-majority/>`
             version of the modified document *after* the change was applied in
             the ``fullDocument`` field.
         
             .. note::
         
                Regardless of this setting:
                
                - ``INSERT`` and ``REPLACE`` events always include the
                  ``fullDocument`` field.
                
                - ``DELETE`` events never include the ``fullDocument`` field.
         
         * - :guilabel:`Document Preimage (Beta)`
         
           - If enabled, change events include a copy of the modified document
             from immediately *before* the change was applied in the
             ``fullDocumentBeforeChange`` field. All change events except for
             ``INSERT`` events include the document preimage.
             
             .. important:: Collection-Level Preimage Settings
                
                Document preimages use extra information stored in the oplog.
                The extra data may have performance implications for some apps.
                
                Once you've enabled document preimages for any trigger on a
                given collection, that collection will include preimage data in
                the oplog and other triggers on the collection can use preimages
                with no additonal overhead.
                
                You can disable document preimages on a per-trigger basis to
                exclude the preimage from change events. Regardless of your
                trigger-level settings, a collection's oplog entries will
                continue to include preimage data unless you explicitly disable
                preimages for the collection.
                
                For more information, see :ref:`trigger-preimages`.
         
         * - :guilabel:`Event Ordering`
         
           - 
             .. tabs-realm-admin-interfaces::
                :hidden: true
                
                .. tab::
                   :tabid: ui
                       
                   Default: Enabled.
                       
                   Indicates whether event ordering is enabled for this Trigger.
                       
                .. tab::
                   :tabid: cli
                       
                   Optional. Default: ``false``.
                       
                   If ``true``, indicates that event ordering is disabled for
                   this trigger.
                
             .. include:: /includes/trigger-event-ordering.rst
         
         * - :guilabel:`Match Expression`
         
           - Optional.
             
             .. include:: /includes/trigger-match-expression.rst
         
         * - :guilabel:`Project Expression`
         
           - Optional.
             
             .. include:: /includes/trigger-project-expression.rst

      .. figure:: /images/db-trigger-example-config-1.png
         :alt: Example UI that configures the trigger, including its type and name
         :width: 750px
         :lightbox:
      
      .. figure:: /images/db-trigger-example-config-2.png
         :alt: Example UI that configures the trigger function
         :width: 750px
         :lightbox:
   
   .. tab::
      :tabid: cli
      
      .. include:: /includes/note-procedure-uses-cli-v1.rst
      
      To create a database trigger with :doc:`realm-cli
      </deploy/realm-cli-reference>`:
      
      1. Add a database trigger :ref:`configuration file
         <database-trigger-configuration>` to the ``triggers`` subdirectory of a
         local application directory.
      
      2. :doc:`Import </deploy/deploy-cli>` the application directory into your
         application.
      
         .. code-block:: shell
      
            realm-cli import
      
      .. note::
      
         {+service+} does not enforce specific filenames for Trigger
         configuration files. However, once imported, {+backend+} will rename
         each configuration file to match the name of the Trigger it defines,
         e.g. ``mytrigger.json``.

Restart a Database Trigger
--------------------------

Database Triggers may enter a :guilabel:`suspended` state in response to
an event that prevents the Trigger's change stream from continuing, such
as a network disruption or change to the underlying cluster. When a
Trigger enters a suspended state, it does not receive change events and will not
fire.

.. note:: 

   In the event of a suspended or failed trigger, {+service-short+} sends the 
   project owner an email alerting them of the issue. 

You can attempt to restart a suspended Trigger from the {+ui+} or by
importing an application directory with {+cli-bin+}.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. include:: /includes/steps/restart-db-trigger-realm-ui.rst

   .. tab::
      :tabid: cli
      
      .. include:: /includes/note-procedure-uses-cli-v1.rst
      
      .. include:: /includes/steps/restart-db-trigger-import-export.rst

.. _database-events:

Database Change Events
----------------------

.. _database-event-operation-types:

Database change events represent individual changes in a specific
collection of your linked {+atlas+} cluster.

Every database event has the same operation type and structure as the
:manual:`change event </reference/change-events/>` object that was
emitted by the underlying change stream. Change events have the
following operation types:

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Operation Type
     - Description

   * - ``INSERT``
     - Represents a new document added to the collection.

   * - ``UPDATE``
     - Represents a change to an existing document in the collection.

   * - ``REPLACE``
     - Represents a new document that replaced a document in the collection.

   * - ``DELETE``
     - Represents a document deleted from the collection.

Database change event objects have the following general form:

.. code-block:: json

   {
      _id : <ObjectId>,
      "operationType": <string>,
      "fullDocument": <document>,
      "fullDocumentBeforeChange": <document>,
      "ns": {
         "db" : <string>,
         "coll" : <string>
      },
      "documentKey": {
        "_id": <ObjectId>
      },
      "updateDescription": <document>,
      "clusterTime": <Timestamp>
   }
