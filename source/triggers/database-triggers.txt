-----------------
Database Triggers
-----------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Database Triggers allow you to execute server-side logic whenever a
document is added, updated, or removed in a
:term:`linked {+atlas+} cluster <linked cluster>`.
You can use database Triggers to implement complex data interactions,
including updating information in one document when a related document
changes or interacting with a :doc:`service </services>` upon the insertion
of a new document.

Database Triggers use MongoDB :manual:`change streams </changeStreams>`
to listen for changes to documents in a collection and pass
:ref:`database events <database-events>` to their associated Trigger
function.

.. important:: Change Stream Limitations
   
   {+backend+} opens a single change stream for each collection with at least
   one enabled Trigger and limits the total number of open change
   streams on each linked cluster across all {+app+}s based on the
   cluster's size. See :ref:`change stream limitations
   <mongodb-service-limitations-change-streams>` for more information.

.. note::

   Database Triggers are only available for `{+atlas+} <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ 
   clusters that are running MongoDB version 3.6 or newer.

.. _create-a-database-trigger:

Create a Database Trigger
-------------------------

.. tabs-realm-admin-interfaces::

   tabs:
     - id: ui
       content: |
         To create a database Trigger in the {+ui+}:

         1. Click :guilabel:`Triggers` under :guilabel:`MongoDB
            Cluster` in the {+leftnav+}.

         2. Select the :guilabel:`Database Triggers` tab.

         3. Click :guilabel:`Add Database Trigger` in the top
            right to open the Trigger configuration page.

         4. Enter :ref:`configuration values <database-trigger-configuration>`
            for the Trigger and click :guilabel:`Save` at the bottom of
            the page.
         
         .. figure:: /images/db-trigger-example-config-1.png
            :alt: Example UI that configures the trigger, including its type and name
            :width: 750px
            :lightbox:
         
         .. figure:: /images/db-trigger-example-config-2.png
            :alt: Example UI that configures the trigger function
            :width: 750px
            :lightbox:

     - id: cli
       content: |
         To create a database trigger with :doc:`realm-cli
         </deploy/realm-cli-reference>`:

         1. Add a database trigger :ref:`configuration file
            <database-trigger-configuration>` to the ``triggers``
            subdirectory of a local application directory.

         2. :doc:`Import </deploy/deploy-cli>` the
            application directory into your application.

            .. code-block:: shell

               realm-cli import

         .. note::

            {+service+} does not enforce specific filenames for Trigger
            configuration files. However, once imported, {+backend+} will
            rename each configuration file to match the name of the
            Trigger it defines, e.g. ``mytrigger.json``.

Restart a Database Trigger
--------------------------

Database Triggers may enter a :guilabel:`suspended` state in response to
an event that prevents the Trigger's change stream from continuing, such
as a network disruption or change to the underlying cluster. When a
Trigger enters a suspended state, it does not receive change events and will not
fire.

.. note:: 

   In the event of a suspended or failed trigger, {+service-short+} sends the 
   project owner an email alerting them of the issue. 

You can attempt to restart a suspended Trigger from the {+ui+} or by
importing an application directory with {+cli-bin+}.

.. tabs-realm-admin-interfaces::

   tabs:
     - id: ui
       content: |
         .. include:: /includes/steps/restart-db-trigger-realm-ui.rst
     - id: cli
       content: |
         .. include:: /includes/steps/restart-db-trigger-import-export.rst

Reference
---------

.. _database-trigger-configuration:

Database Trigger Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::

   tabs:
     - id: cli
       content: |
         Configuration files for database Triggers have the
         following form:

         .. code-block:: none
            :caption: /triggers/<trigger name>.json

            {
               "type": <string>,
               "name": <string>,
               "function_name": <string>,
               "config": {
                 "service_name": <string>,
                 "database": <string>,
                 "collection": <string>,
                 "operation_types": [<string>, ...],
                 "full_document": <boolean>,
                 "unordered": <boolean>,
                 "match": <document>,
                 "project": <document>
               },
               "disabled": <boolean>
            }

     - id: ui
       content: |
         Database Triggers have the following configuration parameters:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - | :guilabel:`Trigger Type`
       | *type*

     - Required. The type of the Trigger. Set this value to ``DATABASE`` for database Triggers

   * - | :guilabel:`Trigger Name`
       | *name*

     - Required. The name of the Trigger.

   * - | :guilabel:`Linked Function`
       | *function_name*

     - Required. The name of the {+service-short+} Function that the Trigger
       executes whenever it fires. The Trigger passes the
       :ref:`database event object <database-events>` that
       caused it to fire as the only argument to this Function.

   * - | :guilabel:`Cluster`
       | *config.service_name*

     - Required. The name of the MongoDB Service that the Trigger is
       associated with.

   * - | :guilabel:`Database Name`
       | *config.database*

     - Required. The MongoDB database that contains the watched
       collection.

   * - | :guilabel:`Collection Name`
       | *config.collection*

     - Required. The name of the collection that the Trigger watches for
       change events.

   * - | :guilabel:`Operation Types`
       | *config.operation_types*

     - Required. A list of one or more :ref:`database operation
       types <database-event-operation-types>` that cause the Trigger to
       fire. Format each operation type as a fully capitalized string, e.g., ``"INSERT"``.

   * - | :guilabel:`Full Document`
       | *config.full_document*

     - Required. If true, indicates that ``UPDATE`` change events should
       include the most current :manual:`majority-committed
       </reference/read-concern-majority/>` version of the modified
       document in the ``fullDocument`` field.

       .. note::

          This option only affects ``UPDATE`` change events. ``INSERT``
          and ``REPLACE`` events always include the ``fullDocument``
          field. ``DELETE`` events never include the ``fullDocument``
          field. For more information, see the :manual:`change events
          </reference/change-events/>` reference page.

       .. warning::

          Update operations executed from {+compass+} or the
          {+atlas+} Data Explorer fully replace the previous
          document. As a result, update operations from these clients
          will generate ``REPLACE`` change events rather than ``UPDATE``
          events.

   * - | :guilabel:`Event Ordering`
       | *config.unordered*

     - 
       .. tabs-realm-admin-interfaces::
          :hidden: true

          .. tab::
             :tabid: ui
             
             Default: Enabled.
             
             Indicates whether event ordering is enabled for this Trigger.
             
          .. tab::
             :tabid: cli
             
             Optional. Default: ``false``.
             
             If ``true``, indicates that event ordering is disabled for
             this trigger.
       
       If event ordering is enabled, multiple executions of this Trigger
       will occur sequentially based on the timestamps of the change
       events. If event ordering is disabled, multiple executions of
       this Trigger will occur independently.
       
       .. tip::
          
          Consider disabling event ordering if your trigger fires on a
          collection that receives short bursts of events (e.g.
          inserting data as part of a daily batch job).
          
          Ordered Triggers wait to execute a Function for a particular
          event until the Functions of previous events have finished
          executing. As a consequence, ordered Triggers are effectively
          rate-limited by the run time of each sequential Trigger
          function. This may cause a significant delay between the
          database event and the Trigger firing if a sufficiently large
          number of Trigger executions are currently in the queue.

          Unordered Triggers execute functions in parallel if possible,
          which can be significantly faster (depending on your use case)
          but does not guarantee that multiple executions of a Trigger
          Function occur in event order.

   * - | :guilabel:`Match Expression`
       | *config.match*

     - Optional.
       A :manual:`$match </reference/operator/aggregation/match>`
       expression document that {+service-short+} uses to filter which change
       events cause the Trigger to fire. The Trigger
       evaluates all change event objects that it receives against this
       match expression and only executes if the expression evaluates to
       ``true`` for a given change event.
          
       .. note:: Use Dot-Notation for Embedded Fields
          
          MongoDB performs a full equality match for embedded
          documents in a match expression. If you want to match a
          specific field in an embedded document, refer to the field
          directly using :manual:`dot-notation
          </core/document/#document-dot-notation>`. For more
          information, see :manual:`Query on Embedded Documents
          </tutorial/query-embedded-documents>` in the MongoDB server
          manual.

       .. example::

          The following :guilabel:`Match Expression` configures a
          trigger to fire only if the change event object specifies that
          the ``status`` field in a document changed.
          
          .. code-block:: javascript

             {
               "updateDescription.updatedFields.status": {
                 "$exists": true
               }
             }

   * - | :guilabel:`Project Expression`
       | *config.project*

     - Optional.
       A :manual:`$project </reference/operator/aggregation/project>` expression
       document that {+service-short+} uses to filter the fields that appear in
       change event objects.
       
       .. example::

          A trigger is configured with the following :guilabel:`Project
          Expression`:
          
          .. code-block:: json

             {
               "_id": 0,
               "operationType": 1,
               "updateDescription.updatedFields.status": 1
             }
          
          The change event object that {+service-short+} passes to the trigger
          function only includes the fields specifed in the projection, as in
          the following example:
          
          .. code-block:: json
             
             {
               "operationType": "update",
               "updateDescription": {
                 "updatedFields": {
                   "status": "InProgress"
                 }
               }
             }

.. _database-events:

Database Change Events
~~~~~~~~~~~~~~~~~~~~~~

.. _database-event-operation-types:

Database change events represent individual changes in a specific
collection of your linked {+atlas+} cluster.

Every database event has the same operation type and structure as the
:manual:`change event </reference/change-events/>` object that was
emitted by the underlying change stream. Change events have the
following operation types:

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Operation Type
     - Description

   * - ``INSERT``
     - Represents a new document added to the collection.

   * - ``UPDATE``
     - Represents a change to an existing document in the collection.

   * - ``REPLACE``
     - Represents a new document that replaced a document in the collection.

   * - ``DELETE``
     - Represents a document deleted from the collection.

Database change event objects have the following general form:

.. code-block:: json

   {
      _id : <ObjectId>,
      "operationType": <string>,
      "fullDocument": <document>,
      "ns": {
         "db" : <string>,
         "coll" : <string>
      },
      "documentKey": {
        "_id": <ObjectId>
      },
      "updateDescription": <document>,
      "clusterTime": <Timestamp>
   }
