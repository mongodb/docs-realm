-----------------
Database Triggers
-----------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Database {+triggers-short+} allow you to execute server-side logic whenever a
document is added, updated, or removed in a
:term:`linked {+atlas+} cluster <linked cluster>`.
You can use database {+triggers-short+} to implement complex data interactions,
including updating information in one document when a related document
changes or interacting with a :doc:`service </services>` upon the insertion
of a new document.

Database {+triggers-short+} use MongoDB :manual:`change streams </changeStreams>`
to listen for changes to documents in a collection and pass
:ref:`database events <database-events>` to their associated {+trigger-short+}
function.

.. admonition:: Change Stream Limitations
   :class: important

   {+backend+} opens a single change stream for each collection with at least
   one enabled {+trigger-short+} and limits the total number of open change
   streams on each linked cluster across all {+instance+}s based on the
   cluster's size. See :ref:`change stream limitations
   <mongodb-service-limitations-change-streams>` for more information.

.. note::

   Database {+triggers-short+} are only available for {+atlas+} clusters
   that are running MongoDB version 3.6 or newer.

.. _create-a-database-trigger:

Create a Database Trigger
-------------------------

.. tabs-realm-admin-interfaces::

   tabs:
     - id: ui
       content: |
         To create a database {+trigger-short+} in the {+ui+}:

         1. Click :guilabel:`Triggers` under :guilabel:`MongoDB
            Cluster` in the left-hand navigation.

         2. Select the :guilabel:`Database Triggers` tab.

         3. Click :guilabel:`Add Database Trigger` in the top
            right to open the {+trigger-short+} configuration page.

         4. Enter :ref:`configuration values <database-trigger-configuration>`
            for the {+trigger-short+} and click :guilabel:`Save` at the bottom of
            the page.

         .. figure:: /images/database-trigger-config.png
            :width: 750px
            :lightbox:

     - id: cli
       content: |
         To create a database trigger with :doc:`realm-cli
         </deploy/realm-cli-reference>`:

         1. Add a database trigger :ref:`configuration file
            <database-trigger-configuration>` to the ``triggers``
            subdirectory of a local application directory.

         2. :doc:`Import </deploy/deploy-cli>` the
            application directory into your application.

            .. code-block:: shell

               realm-cli import

         .. note::

            {+service+} does not enforce specific filenames for {+trigger-short+}
            configuration files. However, once imported, {+backend+} will
            rename each configuration file to match the name of the
            {+trigger-short+} it defines, e.g. ``mytrigger.json``.

Restart a Database Trigger
--------------------------

Database {+triggers-short+} may enter a :guilabel:`suspended` state in response to
an event that prevents the {+trigger-short+}'s change stream from continuing, such
as a network disruption or change to the underlying cluster. When a
{+trigger-short+} enters a suspended state, it does not receive change events and will not
fire.

.. note:: 

   In the event of a suspended or failed trigger, {+service-short+} sends the 
   project owner an email alerting them of the issue. 

You can attempt to restart a suspended {+trigger-short+} from the {+ui+} or by
importing an application directory with {+cli+}.

.. tabs-realm-admin-interfaces::

   tabs:
     - id: ui
       content: |
         .. include:: /includes/steps/restart-db-trigger-stitch-ui.rst
     - id: cli
       content: |
         .. include:: /includes/steps/restart-db-trigger-import-export.rst

Reference
---------

.. _database-trigger-configuration:

Database Trigger Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-admin-interfaces::

   tabs:
     - id: cli
       content: |
         Configuration files for database {+triggers-short+} have the
         following form:

         .. cssclass:: wide-container
         .. code-block:: none
            :caption: ``/triggers/<trigger name>.json``

            {
               "type": <string>,
               "name": <string>,
               "function_name": <string>,
               "config": {
                 "service_name": <string>,
                 "database": <string>,
                 "collection": <string>,
                 "operation_types": [<string>, ...],
                 "full_document": <boolean>,
                 "unordered": <boolean>,
                 "match": <document>
               },
               "disabled": <boolean>
            }

     - id: ui
       content: |
         Database {+triggers-short+} have the following configuration parameters:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - :guilabel:`Trigger Type`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *type*

     - Required. The type of the {+trigger-short+}. Set this value to ``DATABASE`` for database {+triggers-short+}

   * - :guilabel:`Trigger Name`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *name*

     - Required. The name of the {+trigger-short+}.

   * - :guilabel:`Linked Function`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *function_name*

     - Required. The name of the {+function+} that the {+trigger-short+}
       executes whenever it fires. The {+trigger-short+} passes the
       :ref:`database event object <database-events>` that
       caused it to fire as the only argument to this {+function-short+}.

   * - :guilabel:`Cluster`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.service_name*

     - Required. The name of the MongoDB Service that the {+trigger-short+} is
       associated with.

   * - :guilabel:`Database Name`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.database*

     - Required. The MongoDB database that contains the watched
       collection.

   * - :guilabel:`Collection Name`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.collection*

     - Required. The name of the collection that the {+trigger-short+} watches for
       change events.

   * - :guilabel:`Operation Types`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.operation_types*

     - Required. A list of one or more :ref:`database operation
       types <database-event-operation-types>` that cause the {+trigger-short+} to
       fire. Format each operation type as a fully capitalized string, e.g., ``"INSERT"``.

   * - :guilabel:`Full Document`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.full_document*

     - Required. If true, indicates that ``UPDATE`` change events should
       include the most current :manual:`majority-committed
       </reference/read-concern-majority/>` version of the modified
       document in the ``fullDocument`` field.

       .. note::

          This option only affects ``UPDATE`` change events. ``INSERT``
          and ``REPLACE`` events always include the ``fullDocument``
          field. ``DELETE`` events never include the ``fullDocument``
          field. For more information, see the :manual:`change events
          </reference/change-events/>` reference page.

       .. warning::

          Update operations executed from {+compass+} or the
          {+atlas+} Data Explorer fully replace the previous
          document. As a result, update operations from these clients
          will generate ``REPLACE`` change events rather than ``UPDATE``
          events.

   * - :guilabel:`Event Ordering`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.unordered*

     - .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: ui

          Default: Enabled.

          Indicates whether event ordering is enabled for this {+trigger-short+}.

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          Optional. Default: ``false``.

          If ``true``, indicates that event ordering is disabled for
          this trigger.

       If event ordering is enabled, multiple executions of this {+trigger-short+}
       will occur sequentially based on the timestamps of the change
       events. If event ordering is disabled, multiple executions of
       this {+trigger-short+} will occur independently.

       .. tip::

          Consider disabling event ordering if your trigger fires on a
          collection that receives short bursts of events (e.g.
          inserting data as part of a daily batch job).

          Ordered {+triggers-short+} wait to execute a {+function-short+} for a particular
          event until the {+functions-short+} of previous events have finished
          executing. As a consequence, ordered {+triggers-short+} are effectively
          rate-limited by the run time of each sequential {+trigger-short+}
          function. This may cause a significant delay between the
          database event and the {+trigger-short+} firing if a sufficiently large
          number of {+trigger-short+} executions are currently in the queue.

          Unordered {+triggers-short+} execute functions in parallel if possible,
          which can be significantly faster (depending on your use case)
          but does not guarantee that multiple executions of a {+trigger-short+}
          {+function-short+} occur in event order.

   * - :guilabel:`Match Expression`

       .. tab-content:: tabs-realm-admin-interfaces
          :tab-id: cli

          | *config.match*

     - Optional.
       A :manual:`$match </reference/operator/aggregation/match>`
       expression document that {+service+} uses to filter which change
       events cause the {+trigger-short+} to fire. The {+trigger-short+}
       evaluates all change event objects that it receives against this
       match expression and only executes if the expression evaluates to
       ``true`` for a given change event.
          
       .. admonition:: Use Dot-Notation for Embedded Fields
          :class: note
          
          MongoDB performs a full equality match for embedded
          documents in a match expression. If you want to match a
          specific field in an embedded document, refer to the field
          directly using :manual:`dot-notation
          </core/document/#document-dot-notation>`. For more
          information, see :manual:`Query on Embedded Documents
          </tutorial/query-embedded-documents>` in the MongoDB server
          manual.

       .. example::

          The following :guilabel:`Match Expression` configures a
          trigger to fire only if the change event object specifies that
          the ``status`` field in a document changed.
          
          .. code-block:: javascript

             {
               "updateDescription.updatedFields.status": {
                 "$exists": true
               }
             }

.. _database-events:

Database Change Events
~~~~~~~~~~~~~~~~~~~~~~

.. _database-event-operation-types:

Database change events represent individual changes in a specific
collection of your linked {+atlas+} cluster.

Every database event has the same operation type and structure as the
:manual:`change event </reference/change-events/>` object that was
emitted by the underlying change stream. Change events have the
following operation types:

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Operation Type
     - Description

   * - ``INSERT``
     - Represents a new document added to the collection.

   * - ``UPDATE``
     - Represents a change to an existing document in the collection.

   * - ``REPLACE``
     - Represents a new document that replaced a document in the collection.

   * - ``DELETE``
     - Represents a document deleted from the collection.

Database change event objects have the following general form:

.. code-block:: json

   {
      _id : <ObjectId>,
      "operationType": <string>,
      "fullDocument": <document>,
      "ns": {
         "db" : <string>,
         "coll" : <string>
      },
      "documentKey": {
        "_id": <ObjectId>
      },
      "updateDescription": <document>,
      "clusterTime": <Timestamp>
   }
