.. _create-a-database-trigger:

=========================
Create a Database Trigger
=========================

.. default-domain:: mongodb

Database Triggers have the following configuration options:

.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - :guilabel:`Trigger Type`

     - Required. The type of the Trigger. Set this value to ``DATABASE`` for database Triggers

   * - :guilabel:`Trigger Name`

     - Required. The name of the Trigger.

   * - :guilabel:`Linked Function`

     - Required. The name of the {+service-short+} Function that the Trigger
       executes whenever it fires. The Trigger passes the
       :ref:`database event object <database-events>` that
       caused it to fire as the only argument to this Function.

   * - :guilabel:`Cluster`

     - Required. The name of the MongoDB Service that the Trigger is
       associated with.

   * - :guilabel:`Database Name`

     - Required. The MongoDB database that contains the watched
       collection.

   * - :guilabel:`Collection Name`

     - Required. The name of the collection that the Trigger watches for
       change events.

   * - :guilabel:`Operation Types`

     - Required. A list of one or more :ref:`database operation
       types <database-event-operation-types>` that cause the Trigger to
       fire. Format each operation type as an uppercase string, e.g.,
       ``"INSERT"``.

       .. warning::

          Update operations executed from {+compass+} or the {+atlas+}
          Data Explorer fully replace the previous document. As a result,
          update operations from these clients will generate ``REPLACE``
          change events rather than ``UPDATE`` events.

   * - :guilabel:`Full Document`

     - If enabled, ``UPDATE`` change events include the latest
       :manual:`majority-committed </reference/read-concern-majority/>`
       version of the modified document *after* the change was applied in
       the ``fullDocument`` field.

       .. note::

          Regardless of this setting:
          
          - ``INSERT`` and ``REPLACE`` events always include the
            ``fullDocument`` field.
          
          - ``DELETE`` events never include the ``fullDocument`` field.

   * - :guilabel:`Document Preimage`

     - If enabled, change events include a copy of the modified document
       from immediately *before* the change was applied in the
       ``fullDocumentBeforeChange`` field. All change events except for
       ``INSERT`` events include the document preimage.
       
       .. important:: Collection-Level Preimage Settings
          
          Document preimages use extra information stored in the oplog.
          The extra data may have performance implications for some apps.
          
          Once you've enabled document preimages for any trigger on a
          given collection, that collection will include preimage data in
          the oplog and other triggers on the collection can use preimages
          with no additonal overhead.
          
          You can disable document preimages on a per-trigger basis to
          exclude the preimage from change events. Regardless of your
          trigger-level settings, a collection's oplog entries will
          continue to include preimage data unless you explicitly disable
          preimages for the collection.
          
          For more information, see :ref:`trigger-preimages`.

   * - :guilabel:`Event Ordering`

     - 
       .. tabs-realm-admin-interfaces::
          :hidden: true
          
          .. tab::
             :tabid: ui
                 
             Default: Enabled.
                 
             Indicates whether event ordering is enabled for this Trigger.
                 
          .. tab::
             :tabid: cli
                 
             Optional. Default: ``false``.
                 
             If ``true``, indicates that event ordering is disabled for
             this trigger.
          
       .. include:: /includes/trigger-event-ordering.rst

   * - :guilabel:`Match Expression`

     - Optional.
       
       .. include:: /includes/trigger-match-expression.rst

   * - :guilabel:`Project Expression`

     - Optional.

       .. include:: /includes/trigger-project-expression.rst

.. tabs-realm-admin-interfaces::

   .. tab::
      :tabid: ui
      
      To open the database trigger configuration screen in the {+ui+}, click
      :guilabel:`Triggers` in the {+leftnav+}, select the
      :guilabel:`Database Triggers` tab, and then click :guilabel:`Add a
      Trigger`.
         
      Configure the trigger and then click :guilabel:`Save` at the bottom of
      the page to add it to your current deployment draft.

      .. figure:: /images/db-trigger-example-config-1.png
         :alt: Example UI that configures the trigger, including its type and name
         :width: 750px
         :lightbox:
      
      .. figure:: /images/db-trigger-example-config-2.png
         :alt: Example UI that configures the trigger function
         :width: 750px
         :lightbox:
   
   .. tab::
      :tabid: cli
      
      To create a database trigger with :doc:`realm-cli
      </cli>`:
      
      1. Add a database trigger :ref:`configuration file
         <config-database-trigger>` to the ``triggers`` subdirectory of a
         local application directory.
      
      2. :doc:`Deploy </deploy/deploy-cli>` the trigger:
      
         .. code-block:: shell
      
            realm-cli push
      
      .. note::
      
         {+service+} does not enforce specific filenames for Trigger
         configuration files. However, once imported, {+backend+} will rename
         each configuration file to match the name of the Trigger it defines,
         e.g. ``mytrigger.json``.
