.. _authentication-triggers:

=======================
Authentication Triggers
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Authentication triggers allow you to execute server-side logic
whenever a user interacts with an :doc:`authentication provider
</authentication/providers>`. You can use authentication triggers
to implement advanced user management, including storing new user data
in your :term:`linked cluster`, maintaining data integrity upon user
deletion, or calling a service with a user's information when they log
in.

Example
-------

An online store wants to store custom metadata for each of its customers
in `{+atlas+} <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_.
Each customer should have a document in the ``store.customers``
collection where metadata about them can be recorded and queried.

To guarantee that the collection represents each customer, the store
creates an authentication Trigger that listens for newly created users
in the :doc:`email/password </authentication/email-password>` authentication
provider. When the trigger observes a ``CREATE`` event, it passes the
:ref:`authentication event object <authentication-events>` to its linked
function, ``createNewUserDocument``. The {+service-short+} Function creates a new document
describing the user and their activity and inserts it into the
``store.customers`` collection.

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. figure:: /images/auth-trigger-example-config.png
         :alt: Example UI that configures the trigger
      
   .. tab::
      :tabid: cli
      
      .. code-block:: json
         :caption: Trigger Configuration
         
         {
           "type": "AUTHENTICATION",
           "name": "newUserHandler",
           "function_name": "createNewUserDocument",
           "config": {
             "providers": ["local-userpass"],
             "operation_type": "CREATE"
           },
           "disabled": false
         }

.. code-block:: javascript
   :caption: createNewUserDocument

   exports = async function(authEvent) {
     const mongodb = context.services.get("mongodb-atlas");
     const customers = mongodb.db("store").collection("customers");

     const { user, time } = authEvent;
     const newUser = { ...user, eventLog: [ { "created": time } ] };
     await customers.insertOne(newUser);
   }

.. _authentication-triggers-configuration:

Configuration
-------------

Authentication Triggers have the following configuration options:
      
.. list-table::
   :header-rows: 1
   :widths: 15 30

   * - Field
     - Description

   * - :guilabel:`Trigger Type`

     - The type of the trigger. For authentication triggers,
       this value should be set to ``AUTHENTICATION``.

   * - :guilabel:`Trigger Name`

     - The name of the trigger.

   * - :guilabel:`Linked Function`

     - The name of the {+service-short+} Function that the trigger
       executes whenever it fires. The trigger passes the :ref:`authentication
       event object <authentication-events>` that caused it to fire as the only
       argument to this function.

   * - :guilabel:`Operation Type`

     - The :ref:`authentication operation
       type <authentication-event-operation-types>` that causes the trigger to
       fire.

   * - :guilabel:`Providers`

     - A list of one or more :doc:`authentication provider
       </authentication/providers>` types. The trigger will only listen for
       :ref:`authentication events <authentication-events>` produced by these
       providers.

.. _authentication-events:

Authentication Events
----------------------

.. _authentication-event-operation-types:

Authentication events represent user interactions with an authentication
provider. Each event corresponds to a single user action with one of the
following operation types:

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Operation Type
     - Description

   * - ``LOGIN``
     - Represents a single instance of a user logging in.

   * - ``CREATE``
     - Represents the creation of a new user.

   * - ``DELETE``
     - Represents the deletion of a user.

Authentication event objects have the following form:

.. code-block:: json
   :copyable: false

   {
     "operationType": <string>,
     "providers": <array of strings>,
     "user": <user object>,
     "time": <ISODate>
   }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description
   * - ``operationType``
     - The :ref:`operation type <authentication-event-operation-types>`
       of the authentication event.
   * - ``providers``
     - The :doc:`authentication providers </authentication/providers>`
       that emitted the event.

       One of the following names represents each authentication provider:

       .. include:: /includes/auth-provider-internal-names.rst

       .. note::

          Generally, only one authentication provider emits each event.
          When a you delete a user linked to
          multiple providers, the ``DELETE`` event for
          that user includes all linked providers. 
   * - ``user``
     - The :doc:`user object </authentication>` of the user that interacted with
       the authentication provider.
   * - ``time``
     - The time at which the event occurred.
