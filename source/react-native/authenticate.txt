.. _react-native-authenticate:

===================
Authenticate a User
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The React Native SDK provides developers with a unified API to authenticate
application users for any authentication provider. Users log in by providing
authentication credentials for a given authentication provider and the SDK
automatically manages authentication tokens and refreshes data for logged in
users.

.. _react-native-login:

Log In
------

.. _react-native-login-anonymous:

Anonymous
~~~~~~~~~

The :doc:`Anonymous </authentication/anonymous>` provider allows users to log in
to your application with ephemeral accounts that have no associated information.

To log in, create an anonymous credential and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6
         
         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6

         async function loginAnonymous() {
           // Create an anonymous credential
           const credentials = Realm.Credentials.anonymous();
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginAnonymous().then(user => {
           console.log("Successfully logged in!", user)
         })

.. _react-native-login-email-password:

Email/Password
~~~~~~~~~~~~~~

The :doc:`email/password </authentication/email-password>` authentication
provider allows users to log in to your application with an email address and a
password.

To log in, create an email/password credential with the user's email address and
password and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email, password) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("cal.kestis@example.com", "Bogano123!").then(user => {
           console.log("Successfully logged in!", user)
         })

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginEmailPassword(email: string, password: string) {
           // Create an anonymous credential
           const credentials = Realm.Credentials.emailPassword(email, password);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser ` updates to match the logged in user
             assert(user.id === app.currentUser.id)
             return user
           } catch(err) {
             console.error("Failed to log in", err);
           }
         }
         loginEmailPassword("cal.kestis@example.com", "Bogano123!").then(user => {
           console.log("Successfully logged in!", user)
         })

.. _react-native-login-api-key:

API Key
~~~~~~~

The :doc:`API key </authentication/api-key>` authentication provider allows
server processes to access to access your app directly or on behalf of a user.

To log in with an API key, create an API Key credential with a server or user
API key and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/authenticate.codeblock.server-api-key-login.js
         :language: javascript
   
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/authenticate.codeblock.server-api-key-login.ts
         :language: typescript


.. _react-native-login-custom-function:

Custom Function
~~~~~~~~~~~~~~~

The :doc:`Custom Function </authentication/custom-function>` authentication
provider allows you to handle user authentication by running a :doc:`function
</functions>` that receives a payload of arbitrary information about a user.

To log in with the custom function provider, create a Custom Function credential
with a payload object and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomFunction(payload: Realm.Credentials.FunctionPayload) {
           // Create a Custom Function credential
           const credentials = Realm.Credentials.function(payload);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomFunction({ username: "mongolover" }).then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _react-native-login-custom-jwt:

Custom JWT
~~~~~~~~~~

The :doc:`Custom JWT </authentication/custom-jwt>` authentication provider
allows you to handle user authentication with any authentication system that
returns a :ref:`JSON web token <json-web-tokens>`.

To log in, create a Custom JWT credential with a JWT from the external system
and pass it to ``App.logIn()``:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         :emphasize-lines: 3, 6, 14
         
         async function loginCustomJwt(jwt: Realm.Credentials.JWTPayload) {
           // Create a Custom JWT credential
           const credentials = Realm.Credentials.jwt(jwt);
           try {
             // Authenticate the user
             const user: Realm.User = await app.logIn(credentials);
             // `App.currentUser` updates to match the logged in user
             assert(user.id === app.currentUser.id);
             return user;
           } catch (err) {
             console.error("Failed to log in", err);
           }
         }
         loginCustomJwt("eyJ0eXAi...Q3NJmnU8oP3YkZ8").then((user) => {
           console.log("Successfully logged in!", user);
         });

.. _react-native-login-facebook:

Facebook OAuth
~~~~~~~~~~~~~~

The :doc:`Facebook </authentication/facebook>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-enable-facebook-auth.rst

.. include:: /includes/note-facebook-profile-picture-url.rst

You can use the :facebook:`official Facebook React Native SDK
<docs/react-native/getting-started/>` to handle the user authentication and
redirect flow from a client application. Once authenticated, the Facebook SDK
returns an access token that you can use to finish logging the user in to your
app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import { LoginButton, AccessToken } from "react-native-fbsdk";
         
         const Login = ({ app }) => {
           return (
             <View>
               <LoginButton
                 onLoginFinished={async (error, result) => {
                   if (error) {
                     console.error(`Failed to log in: ${result.error}`);
                   } else if (result.isCancelled) {
                     console.log("Facebook login was cancelled");
                   } else {
                     const { accessToken } = await AccessToken.getCurrentAccessToken();
                     const credential = Realm.Credentials.facebook(accessToken);
                     const user = await app.logIn(credential);
                     console.log(`Logged in with id: ${user.id}`);
                   }
                 }}
               />
             </View>
           );
         };
         export default Login;

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import { LoginButton, AccessToken } from "react-native-fbsdk";
         
         const Login: React.FC<{ app: Realm.App }> = ({ app }) => {
           return (
             <View>
               <LoginButton
                 onLoginFinished={async (error, result) => {
                   if (error) {
                     console.error(`Failed to log in: ${result.error}`);
                   } else if (result.isCancelled) {
                     console.log("Facebook login was cancelled");
                   } else {
                     const { accessToken } = await AccessToken.getCurrentAccessToken();
                     const credential = Realm.Credentials.facebook(accessToken);
                     const user: Realm.User = await app.logIn(credential);
                     console.log(`Logged in with id: ${user.id}`);
                   }
                 }}
               />
             </View>
           );
         };
         export default Login;

.. _react-native-login-google:

Google OAuth
~~~~~~~~~~~~

The :doc:`Google </authentication/google>` authentication provider allows you to
authenticate users through a Google project using their existing Google account.

.. note:: Enable the Google Auth Provider
   
   To authenticate a Google user, you must configure the :doc:`Google
   authentication provider </authentication/google>`.

You can use a community-maintained package, such as :github:`React Native Google
Sign In <react-native-community/google-signin>`, to render a sign-in button and
handle the user authentication flow. Once authenticated, get the user's server
authorization code to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import { GoogleSignin, GoogleSigninButton, statusCodes } from '@react-native-community/google-signin';
         
         // You must configure `webClientId` and `offlineAccess` to get the auth code
         GoogleSignin.configure({
           webClientId: '<Google Project Client ID>',
           offlineAccess: true,
         });
         
         // Handle the Google Sign In flow and return the auth code
         async function getGoogleAuthCode() {
           try {
             await GoogleSignin.hasPlayServices();
             const { serverAuthCode } = await GoogleSignin.signIn()
             return serverAuthCode
           } catch (error) {
             switch(error.code) {
               case statusCodes.SIGN_IN_CANCELLED: {
                 // user cancelled the login flow
               }
               case statusCodes.IN_PROGRESS: {
                 // operation (e.g. sign in) is in progress already
               }
               case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: {
                 // play services not available or outdated
               }
               default: {
                 // some other error happened
               }
             }
           }
         }
         
         const Login = ({ app }) => {
           return (
             <View>
               <GoogleSigninButton
                 size={GoogleSigninButton.Size.Standard}
                 color={GoogleSigninButton.Color.Auto}
                 onPress={async () => {
                   const serverAuthCode = await getGoogleAuthCode();
                   const credential = Realm.Credentials.google(serverAuthCode);
                   const user = await app.logIn(credential);
                   console.log(`Logged in with id: ${user.id}`);
                 }}
               />
             </View>
           );
         };
         export default Login;

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import { GoogleSignin, GoogleSigninButton, statusCodes } from '@react-native-community/google-signin';
         
         // You must configure `webClientId` and `offlineAccess` to get the auth code
         GoogleSignin.configure({
           webClientId: '<Google Project Client ID>',
           offlineAccess: true,
         });
         
         // Handle the Google Sign In flow and return the auth code
         async function getGoogleAuthCode(): Promise<string> {
           try {
             await GoogleSignin.hasPlayServices();
             const { serverAuthCode } = await GoogleSignin.signIn()
             return serverAuthCode
           } catch (error) {
             switch(error.code) {
               case statusCodes.SIGN_IN_CANCELLED: {
                 // user cancelled the login flow
               }
               case statusCodes.IN_PROGRESS: {
                 // operation (e.g. sign in) is in progress already
               }
               case statusCodes.PLAY_SERVICES_NOT_AVAILABLE: {
                 // play services not available or outdated
               }
               default: {
                 // some other error happened
               }
             }
           }
         }
         
         const Login: React.FC<{ app: Realm.App }> = ({ app }) => {
           return (
             <View>
               <GoogleSigninButton
                 size={GoogleSigninButton.Size.Standard}
                 color={GoogleSigninButton.Color.Auto}
                 onPress={async () => {
                   const serverAuthCode: string = await getGoogleAuthCode();
                   const credential = Realm.Credentials.google(serverAuthCode);
                   const user: Realm.User = await app.logIn(credential);
                   console.log(`Logged in with id: ${user.id}`);
                 }}
               />
             </View>
           );
         };
         export default Login;

.. _react-native-login-apple:

Sign-in with Apple
~~~~~~~~~~~~~~~~~~

The :doc:`Apple </authentication/apple>` authentication provider allows you to
authenticate users through Sign-in With Apple.

.. note:: Enable the Apple Auth Provider
   
   To authenticate an Apple user, you must configure the :doc:`Apple
   authentication provider </authentication/apple>`.

You can use a community-maintained package, such as :github:`React Native Apple
Authentication <invertase/react-native-apple-authentication>`, to render a
sign-in button and handle the user authentication flow. Once authenticated, get
the user's ID token to finish logging the user in to your app.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import appleAuth, {
           AppleButton,
           AppleAuthRequestOperation,
           AppleAuthRequestScope,
           AppleAuthCredentialState,
         } from '@invertase/react-native-apple-authentication';
         
         async function getAppleIdentityToken() {
           // performs login request
           const appleAuthRequestResponse = await appleAuth.performRequest({
             requestedOperation: AppleAuthRequestOperation.LOGIN,
             requestedScopes: [AppleAuthRequestScope.EMAIL, AppleAuthRequestScope.FULL_NAME],
           });
         
           // get current authentication state for user
           // /!\ This method must be tested on a real device. On the iOS simulator it always throws an error.
           const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);
           
           // use credentialState response to ensure the user is authenticated
           if (credentialState === AppleAuthCredentialState.AUTHORIZED) {
             return appleAuthRequestResponse.identityToken;
           } else {
             throw new Error("Failed to get Apple ID token.")
           }
         }
         
         const Login = ({ app }) => {
           return (
             <View>
               <AppleButton
                 buttonStyle={AppleButton.Style.WHITE}
                 buttonType={AppleButton.Type.SIGN_IN}
                 onPress={async () => {
                   const identityToken = await getAppleIdentityToken();
                   const credential = Realm.Credentials.apple(identityToken);
                   const user = await app.logIn(credential);
                   console.log(`Logged in with id: ${user.id}`);
                 }}
               />
             </View>
           );
         };
         export default Login;

   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         import React from "react";
         import { View } from "react-native";
         import Realm from "realm";
         import appleAuth, {
           AppleButton,
           AppleAuthRequestOperation,
           AppleAuthRequestScope,
           AppleAuthCredentialState,
         } from '@invertase/react-native-apple-authentication';
         
         async function getAppleIdentityToken(): Promise<string> {
           // performs login request
           const appleAuthRequestResponse = await appleAuth.performRequest({
             requestedOperation: AppleAuthRequestOperation.LOGIN,
             requestedScopes: [AppleAuthRequestScope.EMAIL, AppleAuthRequestScope.FULL_NAME],
           });
         
           // get current authentication state for user
           // /!\ This method must be tested on a real device. On the iOS simulator it always throws an error.
           const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);
           
           // use credentialState response to ensure the user is authenticated
           if (credentialState === AppleAuthCredentialState.AUTHORIZED) {
             return appleAuthRequestResponse.identityToken;
           } else {
             throw new Error("Failed to get Apple ID token.")
           }
         }
         
         const Login = ({ app }) => {
           return (
             <View>
               <AppleButton
                 buttonStyle={AppleButton.Style.WHITE}
                 buttonType={AppleButton.Type.SIGN_IN}
                 onPress={async () => {
                   const identityToken = await getAppleIdentityToken();
                   const credential = Realm.Credentials.apple(identityToken);
                   const user: Realm.User = await app.logIn(credential);
                   console.log(`Logged in with id: ${user.id}`);
                 }}
               />
             </View>
           );
         };
         export default Login;

.. _react-native-logout:

Log Out
-------

You can log out any user, regardless of the authentication provider used
to log in, using the ``User.logOut()`` method:

.. include:: /includes/log-out-queries-in-progress.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // Log out the current user
         await app.currentUser.logOut();
         // Log out a specific user
         await app.allUsers[2].logOut();
