.. _react-native-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the Node SDK <react-native-install>` to use with your Realm Native app.

.. note:: Check Out the Tutorial
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the :ref:`React
   Native Tutorial <react-native-tutorial>` where you'll build a mobile app that
   connects to the :ref:`Task Tracker backend
   <tutorial-task-tracker-create-realm-app>`.

.. _react-native-quick-start-import:

Import Realm
------------

At the top of your source files where you want to use {+service+}, add
the following line to import the SDK.

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         import Realm from 'realm';
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript

.. _react-native-quick-start-init-app:

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID
in the {+ui+}.

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         import Realm from 'realm';

         // Returns the shared instance of the Realm app.
         export function getRealmApp() {
            const appId = '<enter your Realm app ID here>'; // Set Realm app ID here.
            const appConfig = {
              id: appId,
              timeout: 10000,
            };
           return new Realm.App(appConfig);
         }

.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript

.. _react-native-quick-start-define-model:

Define Your Object Model
------------------------

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled
{+sync-short+} with :term:`development mode` in the {+ui+}, you can
define your :ref:`object model <react-native-realm-objects>` directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode, you can copy and paste the object model definitions that {+backend-short+} generated for you from the :guilabel:`SDKs` tab in the {+ui+}. You must re-enable Developer Mode if you want to make changes to the object model definition from client side code. See :ref:`Configure Your Data Model <configure-your-data-model>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         import {ObjectId} from 'bson';
         
         class Task {
           constructor({
             name,
             partition,
             status = Task.STATUS_OPEN,
             id = new ObjectId(),
           }) {
             this._partition = partition;
             this._id = id;
             this.name = name;
             this.status = status;
           }
         
           static STATUS_OPEN = 'Open';
           static STATUS_IN_PROGRESS = 'InProgress';
           static STATUS_COMPLETE = 'Complete';
         
           static schema = {
             name: 'Task',
             properties: {
               _id: 'objectId',
               _partition: 'string',
               name: 'string',
               status: 'string',
             },
             primaryKey: '_id',
           };
         }

         export {Task};
 
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript

.. _react-native-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication
<anonymous-authentication>` in the {+ui+}, users can immediately log
into your app without providing any identifying information:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         :emphasize-lines: 8,9

         import Realm from 'realm';         

         async function anonymousLogin() {
           let user;
           try {
             const app = new Realm.App(appConfig); // pass in the appConfig variable that you created earlier
 
             const credentials = Realm.Credentials.anonymous(); // create an anonymous credential
             user = await app.logIn(credentials);
             return user;
             
           } catch (error) {
               throw `Error logging in anonymously: ${JSON.stringify(error,null,2)}`;
           }
         }
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript


{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso::

   :ref:`Authenticate a User <react-native-authenticate>`
.. _react-native-quick-start-open-realm:

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a
user, you can open a synced :ref:`{+realm+} <react-native-realms>`:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         :emphasize-lines: 16

         import Realm from 'realm';
         async function openRealm() {
           let user;
           let realm;
           try {
             // ...
             console.log(`Logged in with the user: ${user.identity}`);
             const config = {
               schema: [Task.schema],
               sync: {
                 user: user, 
                 partitionValue: "myPartition",
               },
             };
 
             realm = await Realm.open(config);
           } catch (error) {
               throw `Error opening realm: ${JSON.stringify(error,null,2)}`;
           }
         }
    
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript


.. seealso::

   :ref:`Sync Data <react-native-sync-data>`
.. _react-native-quick-start-crud:

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its
:ref:`objects <react-native-realm-objects>` in a :ref:`write transaction
<react-native-realm-database-writes>` block.


To create a new Task run the method "realm.create()" inside the
"realm.write()" callback. Pass the string "Task" as the first parameter to
"realm.create()". Pass a task object as the second parameter. 

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         realm.write(() => {
           realm.create("Task", {
             _id: new ObjectId(),
             name: "go grocery shopping",
             status: "Open",
           });
         });
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript



You can retrieve a live :ref:`collection <react-native-client-collections>` of
all tasks in the {+realm+}:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         // Query realm for all instances of the "Task" type.
         const tasks = realm.objects("Task");

.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript



You can also filter that collection using a :ref:`filter <react-native-client-query-engine>`:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         let filteredTasks = tasks.filtered("status = 'Open');
         console.log(`filtered tasks: ${JSON.stringify(filteredTasks, null, 2)}\n`);
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript



To modify a task, update its properties in a write transaction block:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         realm.write(() => {
           task.status = 'InProgress';
         });
.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript


Finally, you can delete a task:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         realm.write(() => {
           // Delete the task from the realm.
           realm.delete(task);
 
           // Discard the reference.
           task = null;
         });

.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript

.. _react-native-quick-start-watch:

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<react-native-client-notifications>` by adding a listener event handler
with the "addListener()" method.

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         export function watch(realm) {
           // Query realm for all instances of the "Task" type.
           const tasks = realm.objects('Task');
 
           // Define the collection notification listener
           function listener(tasks, changes) {
             // Update UI in response to deleted objects
             changes.deletions.forEach(index => {
               // Deleted objects cannot be accessed directly,
               // but we can update a UI list, etc. knowing the index.
             });
 
             // Update UI in response to inserted objects
             changes.insertions.forEach(index => {
               let insertedTasks = tasks[index];
               // ...
             });
 
             // Update UI in response to modified objects
             changes.modifications.forEach(index => {
               let modifiedTask = tasks[index];
               // ...
             });
           }
 
           // Observe collection notifications.
           return tasks.addListener(listener);
         }

.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript


To stop watching for changes, run the "realm.removeAllListeners()"
method. Alternatively, to remove a specific listener, call
"removeListener()" on the object that is being watched and pass in the
listener function:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         // Unregister all listeners
         realm.removeAllListeners();
 
         // Unregister a specific listener:
         tasks.removeListener(listener);

.. .. tab::
..    :tabid: typescript

..    .. code-block:: typescript

.. _react-native-quick-start-logout:

Log Out
-------

Once logged in, you can log out:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         user.logOut();

.. 
   .. tab::
      :tabid: typescript
      code-block:: typescript
