.. _react-native-mongodb-data-access:

===================
MongoDB Data Access
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The following actions enable access to a linked MongoDB Atlas cluster
from a React Native application using the {+service-short+} Node SDK.

.. include:: /includes/mongodb-data-access-query-filter-indeterminate-order-note.rst


.. _react-native-mongodb-set-up:

Set Up Your Project
-------------------

.. include:: /includes/steps/crud-snippets-react-native.rst

.. _react-native-mongodb-example-dataset:

Example Data
------------

.. include:: /includes/mongodb-data-access-example-plant-documents.rst

.. _react-native-mongodb-create-documents:

Create Documents
----------------

These code snippets demonstrate how to insert one or more documents into
a MongoDB collection from a React Native application. Insert operations take a
document or documents to add to MongoDB as an argument and return a
:mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to an object that contains the results of the execution of the
operation.

.. _react-native-mongodb-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can insert a single document by calling :js-sdk:`collection.insertOne()
<Realm.MongoDBCollection.html#insertOne>`.

The following snippet inserts a single document describing a "lily of the
valley" plant into a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document-result.ts
         :language: typescript

.. _react-native-mongodb-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can insert multiple documents at the same time using
:js-sdk:`collection.insertMany() <Realm.MongoDBCollection.html#insertMany>`.

The following snippet inserts three documents describing plants into a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents-result.ts
         :language: typescript

.. _react-native-mongodb-read-documents:

Read Documents
--------------

These code snippets demonstrate how to read data stored in a MongoDB
collection from a mobile application. Read operations use :manual:`query
filters </core/document/#document-query-filter>` to specify which
documents to return from the database. Read operations return a
:mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to either a single matched document (in the case of
``findOne()``), a numeric value (in the case of ``count()``) or an array
of matched documents (in the case of ``find()``).

.. _react-native-mongodb-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~

You can find a single document using :js-sdk:`collection.findOne() <Realm.MongoDBCollection.html#findOne>`.

The following snippet finds the document that describes venus flytraps in the
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document-result.ts
         :language: typescript

.. _react-native-mongodb-findMany:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

You can find multiple documents using :js-sdk:`collection.find() <Realm.MongoDBCollection.html#find>`.

The following snippet finds all documents that describe perennial plants in the
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`:

The following snippet finds all documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<android-mongodb-example-dataset>` that contain a field named
``_partition`` with a value of "Store 42":

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents-result.ts
         :language: typescript

.. _react-native-mongodb-count:

Count Documents in the Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can count documents in a collection using
:js-sdk:`collection.count() <Realm.MongoDBCollection.html#count>`.
You can specify an optional query filter to
determine which documents to count. If you don't specify a query, the
action counts all documents in the collection.

The following snippet counts the number of documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection-result.ts
         :language: typescript

.. _react-native-mongodb-update-documents:

Update Documents
----------------

These code snippets demonstrate how to update data stored in a MongoDB
collection from a mobile application. Update operations use query filters to
specify which documents to update and :manual:`update operators
</reference/operator/update>` to describe how to mutate documents that match the
query. Update operations return a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to an object
that contains the results of the execution of the operation.

.. _react-native-mongodb-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using
:js-sdk:`collection.updateOne() <Realm.MongoDBCollection.html#updateOne>`.

The following snippet updates a single document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`. This operation queries for a document
where the ``name`` field contains the value "petunia" and changes the value
of the first matched document's ``sunlight`` field to "partial":

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document-result.ts
         :language: typescript

.. _react-native-mongodb-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a single document using
:js-sdk:`collection.updateMany() <Realm.MongoDBCollection.html#updateMany>`.

The following snippet updates multiple documents in a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>`. This operation queries for documents
where the ``_partition`` field contains the value "Store 47" and changes
the value of the ``_partition`` field of each matching document to "Store 51":

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents-result.ts
         :language: typescript

.. _react-native-mongodb-upsert:

Upsert Documents
~~~~~~~~~~~~~~~~

If an update operation does not match any document in the collection,
you can automatically insert a single new document into the collection
that matches the update query by setting the ``upsert`` option to
``true``.

The following snippet updates a document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<react-native-mongodb-example-dataset>` or inserts a
new document if no document matches the query filter. This operation
queries for documents where:

- the ``sunlight`` field has a value of "full"
- the ``type`` field has a value of "perennial"
- the ``color`` field has a value of "green"
- the ``_partition`` field has a value of "Store 47"

Because this snippet sets the ``upsert`` option to ``true``, if no
document matches the query, MongoDB creates a new document that includes
both the query filter and specified updates:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents-result.ts
         :language: typescript

.. _react-native-mongodb-delete-documents:

Delete Documents
----------------

These code snippets demonstrate how to delete documents that
are stored in a MongoDB collection from a mobile application.
Delete operations use a query filter to specify which documents to delete
and return a :mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>`
that resolves to an object that contains the results of the execution
of the operation.

.. _react-native-mongodb-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

You can delete a single document from a collection using
:js-sdk:`collection.deleteOne() <Realm.MongoDBCollection.html#deleteOne>`.

The following snippet deletes one document in a
:ref:`collection of documents that describe plants for sale in a group of stores
<android-mongodb-example-dataset>`. This operation queries for a
document where the ``color`` field has a value of "green" and deletes
the first document that matches the query:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document-result.ts
         :language: typescript

.. _react-native-mongodb-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

You can delete multiple items from a collection using
:js-sdk:`collection.deleteMany() <Realm.MongoDBCollection.html#deleteMany>`.

The following snippet deletes all documents for plants that are in "Store 51" in
a :ref:`collection of documents that describe plants for sale in a group of
stores <react-native-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents-result.ts
         :language: typescript

.. _react-native-mongodb-watch:

Watch for Changes
-----------------

You can call :js-sdk:`collection.watch() <Realm.MongoDBCollection.html#watch>`
to automatically react whenever a document in the collection is added, modified,
or deleted. Each notification specifies a document that changed, how it changed,
and the full document after the operation that caused the event.

.. note::

   ``collection.watch()`` returns an :mdn:`async generator
   <Web/JavaScript/Reference/Statements/for-await...of#Iterating_over_async_generators>`
   that allows you to asynchronously pull :manual:`change events
   </reference/change-events/>` for operations as they occur.

.. _react-native-mongodb-watch-a-collection:

Watch for Changes in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for all changes in a collection, call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` without any arguments:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection.ts
         :language: typescript


.. _react-native-mongodb-watch-a-collection-with-filter:

Watch for Changes in a Collection with a Filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for specific changes in a collection, call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` with a query filter that specifies
specific change event values to watch:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection-with-filter.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection-with-filter.ts
         :language: typescript

.. _react-native-mongodb-aggregation-pipelines:

Aggregate Documents
-------------------

These code snippets demonstrate how to configure and run
aggregation operations on a collection. Aggregation operations run all
documents in a collection through a series of data :ref:`aggregation stages
<realm-aggregation-stages>` called an
:manual:`aggregation pipeline </core/aggregation-pipeline>` that allow
you to filter and shape documents as well as collect summary data about
groups of related documents.

Aggregation operations accept a list of aggregation stages as input, and
return a :mdn:`Promise <Web/JavaScript/Reference/Global_Objects/Promise>` that
resolves to a collection of documents processed by the pipeline.

.. _react-native-mongodb-aggregate:

Aggregate Documents in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can execute an aggregation pipeline using
:js-sdk:`collection.aggregate() <Realm.MongoDBCollection.html#aggregate>`.

The following snippet groups all documents in the ``plants``
collection by their ``type`` value and aggregates a count of the
number of each type:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection-result.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection-result.ts
         :language: typescript

Aggregation Stages
------------------

.. include:: /includes/aggregation-stages.rst
