---
ref: mongodb-action-params-find
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Optional. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         documents to find. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`, or
         :manual:`bitwise </reference/operator/query/#bitwise>` selectors.

         Specify an empty query filter (``{}``) or omit this parameter to
         return the all documents in the collection.

     * - :guilabel:`Projection`

         | ``projection: <document>``

       - Optional. A document that specifies which fields MongoDB
         should return or withhold in each document that matches the
         query.

         To return all fields in the matching documents, omit this
         parameter or specify an empty projection document (``{}``).

         To return specific fields and the document's ``_id``, specify the
         fields in the projection document with a value of ``1``:

         .. code-block:: javascript

            // Includes the field in returned documents
            { <Field Name>: 1 }

         To withhold specific fields, specify the fields in the projection
         document with a value of ``0``:

         .. code-block:: javascript

            // Withholds the field from returned documents
            { <Field Name>: 0 }

         .. note::

            You may specify either fields to include or fields to withhold
            but not both. For example, the following projection is
            **invalid** because it simultaneously includes the ``name``
            field and withholds the ``address`` field:

            .. code-block:: javascript

               // Invalid
               // Can't simultaneously include and withhold
               { "name": 1, "address": 0 }

            The exception to this rule is the ``_id`` field, which you
            may withhold from any query:

            .. code-block:: javascript

               // Valid
               // Can exclude _id while including other fields
               { "_id": 0, "name": 1 }
---
ref: mongodb-action-params-findOne
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Optional. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         documents to find. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`, or
         :manual:`bitwise </reference/operator/query/#bitwise>` selectors.

         Specify an empty query filter (``{}``) or omit this parameter to
         return the first document in the collection.

     * - :guilabel:`Projection`

         | ``projection: <document>``

       - Optional. A document that specifies which fields MongoDB
         should return or withhold from a returned document.

         To return all fields in the document, omit this parameter or
         specify an empty projection document (``{}``).

         To return specific fields and the document's ``_id``, specify the
         fields in the projection document with a value of ``1``:

         .. code-block:: javascript

            // Includes the field in returned documents
            { <Field Name>: 1 }

         To withhold specific fields, specify the fields in the projection
         document with a value of ``0``:

         .. code-block:: javascript

            // Withholds the field from returned documents
            { <Field Name>: 0 }

         .. note::

            You may specify either fields to include or fields to withhold
            but not both. For example, the following projection is
            **invalid** because it simultaneously includes the ``name``
            field and withholds the ``address`` field:

            .. code-block:: javascript

               // Invalid
               // Can't simultaneously include and withhold
               { "name": 1, "address": 0 }

            The exception to this rule is the ``_id`` field, which you
            may withhold from any query:

            .. code-block:: javascript

               // Valid
               // Can exclude _id while including other fields
               { "_id": 0, "name": 1 }
---
ref: mongodb-action-params-count
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Optional. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         documents to count. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`, or
         :manual:`bitwise </reference/operator/query/#bitwise>` selectors.

         Specify an empty query filter (``{}``) or omit this parameter
         to count all documents in the collection.
---
ref: mongodb-action-params-updateMany
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``filter: <document>``

       - Required. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         documents to update. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         Specify an empty query filter (``{}``) to update all documents
         in the collection.

     * - :guilabel:`Update Operation`

         | ``update: <document>``

       - Required. A standard :manual:`MongoDB update
         </tutorial/update-documents/>` document that specifies the
         update operation to perform on all documents that match the
         query. You can use most :manual:`update operators
         </reference/operator/update/>`.

     * - :guilabel:`Update Options`

         | ``options: <document>``

       - A document that specifies configuration options for the query.
         The ``options`` document has the following form:

         .. code-block:: json

            {
               "upsert": <boolean>
            }

     * - :guilabel:`Upsert`

         | ``options.upsert: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that MongoDB should insert a new document that
         matches the query filter when the query does not match any
         existing documents in the collection.
---
ref: mongodb-action-params-updateOne
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Required. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         document to update. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         If multiple documents match the query, only the first document
         in sort order or :term:`natural order` will be updated.

     * - :guilabel:`Update Operation`

         | ``update: <document>``

       - Required. A standard :manual:`MongoDB update
         </tutorial/update-documents/>` document that specifies the
         update operation to perform on the document that matches the
         query. You can use most :manual:`update operators
         </reference/operator/update/>`.

     * - :guilabel:`Update Options`

         | ``options: <document>``

       - A document that specifies configuration options for the query.
         The ``options`` document has the following form:

         .. code-block:: json

            {
               "upsert": <boolean>
            }

     * - :guilabel:`Upsert`

         | ``options.upsert: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that MongoDB should insert a new document that
         matches the query filter when the query does not match any
         existing documents in the collection.
---
ref: mongodb-action-params-deleteOne
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Optional. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         document to delete. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         If multiple documents match the query, only the first document
         in sort order or :term:`natural order` will be deleted.
---
ref: mongodb-action-params-deleteMany
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Optional. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         documents to delete. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.
---
ref: mongodb-action-params-insertOne
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Insert Document`

         | ``document: <document>``

       - A document to insert into the collection.
---
ref: mongodb-action-params-insertMany
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Insert Document`

         | ``documents: Array<document>``

       - An array of documents to insert into the collection.
---
ref: mongodb-action-find-cursor
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 40 60

     * - Method
       - Description

     * - ``cursor.sort(sort)``
       - Sorts documents in the result set according to the ``sort``
         filter. Sort documents specify one or more fields to sort on. The
         value of each field indicates whether MongoDB should sort it in
         ascending (``1``) or descending (``-1``) order. For more
         information, see :manual:`cursor.sort
         </reference/method/cursor.sort>`.

         .. note::

            You cannot call this method after retrieving one or more
            documents using ``cursor.next()`` or ``cursor.toArray()``.

         .. example::

            The following sort document specifies that documents should be
            sorted first by ``age`` from highest to lowest. Once sorted by
            age, the result set should further be sorted by ``name`` in
            alphabetical order for each distinct age value.

            .. code-block:: javascript

               { age: -1, name: 1 }

     * - ``cursor.limit(limit)``
       - Specifies the maximum number of documents to include in the
         query result set. If the result set contains more documents than
         the specified ``limit``, the cursor will return documents in
         order up to the limit.

         .. note::

            You cannot call this method after retrieving one or more
            documents using ``cursor.next()`` or ``cursor.toArray()``.

     * - ``cursor.next()``
       - Iterates the cursor and returns a :mdn:`Promise
         <Web/JavaScript/Reference/Global_Objects/Promise>` that
         resolves to the next document in the cursor. If the cursor is
         exhausted, the promise resolves to ``undefined``.

         .. example::

            .. code-block:: javascript

               collection.find().next()
                 .then(doc => console.log("next document", doc))

     * - ``cursor.toArray()``
       - Iterates the cursor to exhaustion and returns a :mdn:`Promise
         <Web/JavaScript/Reference/Global_Objects/Promise>` that
         resolves to an array that contains all of the iterated
         documents.

         .. example::

            .. code-block:: javascript

               collection.find().toArray()
                 .then(docs => console.log("all documents", docs))
---
ref: mongodb-action-aggregate-cursor
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 45 55

     * - Method
       - Description

     * - ``cursor.next()``
       - Iterates the cursor and returns a :mdn:`Promise
         <Web/JavaScript/Reference/Global_Objects/Promise>` that resolves to the
         next document in the cursor. If the cursor is exhausted, the
         promise resolves to ``undefined``.

         .. example::

            .. code-block:: javascript

               collection.aggregate(pipeline).next()
                 .then(doc => console.log("next document", doc))

     * - ``cursor.toArray()``
       - Iterates the cursor to exhaustion and returns a :mdn:`Promise
         <Web/JavaScript/Reference/Global_Objects/Promise>` that
         resolves to an array that contains all of the iterated documents.

         .. example::

            .. code-block:: javascript

               collection.aggregate(pipeline).toArray()
                 .then(docs => console.log("all documents", docs))
---
ref: mongodb-action-params-findOneAndUpdate
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Required. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         document to update. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         If multiple documents match the query, only the first document
         in sort order or :term:`natural order` will be updated.

     * - :guilabel:`Update Operation`

         | ``update: <document>``

       - Required. A standard :manual:`MongoDB update
         </tutorial/update-documents/>` document that specifies the
         update operation to perform on the document that matches the
         query. You can use most :manual:`update operators
         </reference/operator/update/>`.

     * - :guilabel:`Update Options`

         | ``options: <document>``

       - A document that specifies configuration options for the query.
         The ``options`` document has the following form:

         .. code-block:: json

            {
               "upsert": <boolean>,
               "sort": <document>,
               "projection": <document>,
               "returnNewDocument": <boolean>
            }

     * - :guilabel:`Upsert`

         | ``options.upsert: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that MongoDB should insert a new document that
         matches the query filter when the query does not match any
         existing documents in the collection.

     * - :guilabel:`Sort`

         | ``options.sort: <document>``

       - Optional. Specifies the query sort order. Sort documents
         specify one or more fields to sort on where the value of each
         field indicates whether MongoDB should sort it in ascending
         (``1``) or descending (``-1``) order. The sort order determines
         which document :method:`collection.findOneAndUpdate()` affects.

         .. example::

            The following sort document specifies that documents should be
            sorted first by ``age`` from highest to lowest. Once sorted by
            age, the result set should further be sorted by ``name`` in
            alphabetical order for each distinct age value.

            .. code-block:: javascript

               { age: -1, name: 1 }

     * - :guilabel:`Projection`

         | ``options.projection: <document>``

       - Optional. A document that specifies which fields MongoDB
         should return or withhold in each document that matches the
         query.

         To return all fields in the matching documents, omit this
         parameter or specify an empty projection document (``{}``).

         To return specific fields and the document's ``_id``, specify the
         fields in the projection document with a value of ``1``:

         .. code-block:: javascript

            // Includes the field in returned documents
            { <Field Name>: 1 }

         To withhold specific fields, specify the fields in the projection
         document with a value of ``0``:

         .. code-block:: javascript

            // Withholds the field from returned documents
            { <Field Name>: 0 }

         .. note::

            You may specify either fields to include or fields to withhold
            but not both. For example, the following projection is
            **invalid** because it simultaneously includes the ``name``
            field and withholds the ``address`` field:

            .. code-block:: javascript

               // Invalid
               // Can't simultaneously include and withhold
               { "name": 1, "address": 0 }

            The exception to this rule is the ``_id`` field, which you
            may withhold from any query:

            .. code-block:: javascript

               // Valid
               // Can exclude _id while including other fields
               { "_id": 0, "name": 1 }

     * - :guilabel:`Return New Document`

         | ``options.returnNewDocument: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that the action should return the document in its
         updated form instead of its original, pre-update form.
---
ref: mongodb-action-params-findOneAndReplace
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Required. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         document to replace. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         If multiple documents match the query, only the first document
         in sort order or :term:`natural order` will be updated.

     * - :guilabel:`Replacement Document`

         | ``replacement: <document>``

       - Required. The document that should replace the found document.
         The document cannot contain any MongoDB :manual:`update
         operators </reference/operator/update/>`.

     * - :guilabel:`Replacement Options`

         | ``options: <document>``

       - A document that specifies configuration options for the query.
         The ``options`` document has the following form:

         .. code-block:: json

            {
               "upsert": <boolean>,
               "sort": <document>,
               "projection": <document>,
               "returnNewDocument": <boolean>
            }

     * - :guilabel:`Upsert`

         | ``options.upsert: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that MongoDB should insert a new document that
         matches the query filter when the query does not match any
         existing documents in the collection.

     * - :guilabel:`Sort`

         | ``options.sort: <document>``

       - Optional. Specifies the query sort order. Sort documents
         specify one or more fields to sort on where the value of each
         field indicates whether MongoDB should sort it in ascending
         (``1``) or descending (``-1``) order. The sort order determines
         which document :method:`collection.findOneAndReplace()`
         affects.

         .. example::

            The following sort document specifies that documents should be
            sorted first by ``age`` from highest to lowest. Once sorted by
            age, the result set should further be sorted by ``name`` in
            alphabetical order for each distinct age value.

            .. code-block:: javascript

               { age: -1, name: 1 }

     * - :guilabel:`Projection`

         | ``options.projection: <document>``

       - Optional. A document that specifies which fields MongoDB
         should return or withhold in each document that matches the
         query.

         To return all fields in the matching documents, omit this
         parameter or specify an empty projection document (``{}``).

         To return specific fields and the document's ``_id``, specify the
         fields in the projection document with a value of ``1``:

         .. code-block:: javascript

            // Includes the field in returned documents
            { <Field Name>: 1 }

         To withhold specific fields, specify the fields in the projection
         document with a value of ``0``:

         .. code-block:: javascript

            // Withholds the field from returned documents
            { <Field Name>: 0 }

         .. note::

            You may specify either fields to include or fields to withhold
            but not both. For example, the following projection is
            **invalid** because it simultaneously includes the ``name``
            field and withholds the ``address`` field:

            .. code-block:: javascript

               // Invalid
               // Can't simultaneously include and withhold
               { "name": 1, "address": 0 }

            The exception to this rule is the ``_id`` field, which you
            may withhold from any query:

            .. code-block:: javascript

               // Valid
               // Can exclude _id while including other fields
               { "_id": 0, "name": 1 }

     * - :guilabel:`Return New Document`

         | ``options.returnNewDocument: <boolean>``

       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that the action should return the document in its
         post-replace form instead of its original form from before the
         replace operation.
---
ref: mongodb-action-params-findOneAndDelete
content: |
  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 2 3

     * - Parameter
       - Description

     * - :guilabel:`Query Filter`

         | ``query: <document>``

       - Required. A standard :manual:`MongoDB query
         </tutorial/query-documents/>` document that specifies which
         document to delete. You can use most :manual:`query selectors
         </reference/operator/query/#query-selectors>` except for
         :manual:`evaluation </reference/operator/query/#evaluation>`,
         :manual:`geospatial </reference/operator/query/#geospatial>`,
         or :manual:`bitwise </reference/operator/query/#bitwise>`
         selectors.

         If multiple documents match the query, only the first document
         in sort order or :term:`natural order` will be updated.

     * - :guilabel:`Delete Options`

         | ``options: <document>``

       - A document that specifies configuration options for the query.
         The ``options`` document has the following form:

         .. code-block:: json

            {
               "sort": <document>,
               "projection": <document>
            }

     * - :guilabel:`Sort`

         | ``options.sort: <document>``

       - Optional. Specifies the query sort order. Sort documents
         specify one or more fields to sort on where the value of each
         field indicates whether MongoDB should sort it in ascending
         (``1``) or descending (``-1``) order. The sort order determines
         which document :method:`collection.findOneAndReplace()`
         affects.

         .. example::

            The following sort document specifies that documents should be
            sorted first by ``age`` from highest to lowest. Once sorted by
            age, the result set should further be sorted by ``name`` in
            alphabetical order for each distinct age value.

            .. code-block:: javascript

               { age: -1, name: 1 }

     * - :guilabel:`Projection`

         | ``options.projection: <document>``

       - Optional. A document that specifies which fields MongoDB
         should return or withhold in each document that matches the
         query.

         To return all fields in the matching documents, omit this
         parameter or specify an empty projection document (``{}``).

         To return specific fields and the document's ``_id``, specify the
         fields in the projection document with a value of ``1``:

         .. code-block:: javascript

            // Includes the field in returned documents
            { <Field Name>: 1 }

         To withhold specific fields, specify the fields in the projection
         document with a value of ``0``:

         .. code-block:: javascript

            // Withholds the field from returned documents
            { <Field Name>: 0 }

         .. note::

            You may specify either fields to include or fields to withhold
            but not both. For example, the following projection is
            **invalid** because it simultaneously includes the ``name``
            field and withholds the ``address`` field:

            .. code-block:: javascript

               // Invalid
               // Can't simultaneously include and withhold
               { "name": 1, "address": 0 }

            The exception to this rule is the ``_id`` field, which you
            may withhold from any query:

            .. code-block:: javascript

               // Valid
               // Can exclude _id while including other fields
               { "_id": 0, "name": 1 }
...
