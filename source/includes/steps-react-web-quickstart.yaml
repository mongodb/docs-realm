title: Set up a New React App
ref: set-up-a-new-react-app
level: 4
content: |
  Generate a new application template using `create-react-app
  <https://create-react-app.dev/>`__:

  .. tabs-realm-languages::

     .. tab:: JavaScript
        :tabid: javascript

        .. code-block:: shell

           npx create-react-app realm-web-react-quickstart

     .. tab:: TypeScript
        :tabid: typescript

        .. code-block:: shell
           
           npx create-react-app realm-web-react-quickstart --template=typescript

  Navigate into the new app and install the ``realm-web`` package:

  .. code-block:: shell
     
     cd realm-web-react-quickstart
     npm install --save realm-web
---
title: Import Dependencies & Connect to Your Realm App
ref: import-dependencies-connect-to-your-realm-app
level: 4
content: |
  The Realm Web SDK contains everything you need to connect to a MongoDB Realm
  application from a browser application. In ``/src/App.js``, add the following
  code to import the Web SDK.

  .. literalinclude:: /examples/generated/web/quick-start.test.codeblock.import-realm.js
     :language: javascript

  Now uses the imported package to instantiate a new ``Realm.App``. 
  The ``app`` object represents your Realm app. You'll use it to authenticate
  and manage the users that interact with your app.

  .. literalinclude:: /examples/generated/web/quick-start.test.codeblock.initialize-realm-app.js
    :language: javascript

---
title: Create React Components
ref: create-react-components
level: 4
content: |
  In ``/src/App.js``, add the following components that display details about a
  given user and allow users to log in.

  .. tabs-realm-languages::

     .. tab:: JavaScript
        :tabid: javascript

        .. literalinclude:: /examples/generated/web/react-quick-start.test.codeblock.basic-user-management.jsx
           :language: javascript

     .. tab:: TypeScript
        :tabid: typescript

        .. literalinclude:: /examples/generated/web/react-quick-start.test.codeblock.basic-user-management.tsx
           :language: typescript
---
title: Create and Export the App Component
ref: create-and-export-the-app-component
level: 4
content: |
  In ``/src/App.js``, overwrite the existing ``App`` component with the following
  component that stores the current user in local state and conditionally
  renders either details about the current user or a login screen if no user is
  currently authenticated.

  .. tabs-realm-languages::

     .. tab:: JavaScript
        :tabid: javascript
        
        .. literalinclude:: /examples/generated/web/react-quick-start.test.codeblock.create-export-app.jsx
           :language: javascript

     .. tab:: TypeScript
        :tabid: typescript

        .. literalinclude:: /examples/generated/web/react-quick-start.test.codeblock.create-export-app.tsx
           :language: typescript

---
title: Run the App
ref: run-the-app
level: 4
content: |
  You're now ready to connect to your Realm app and log in! Make sure you've
  saved your changes to ``/src/App.js`` and then run the following command from
  the project root:

  .. code-block:: shell
     
     yarn start

  This starts a local web server that serves your application. If successful,
  you should see the following output in your shell:

  .. code-block:: shell
     
     Compiled successfully!
     
     You can now view realm-quickstart-web in the browser.
     
       Local:  http://localhost:3000

  Open http://localhost:3000 in your browser and test that you can successfully
  log in as an anonymous user.
