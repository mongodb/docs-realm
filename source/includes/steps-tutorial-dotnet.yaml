---
title: Clone the Client App Repository
ref: clone-the-client-app-repository
content: |
  We've already put together a task tracker Xamarin application that has
  most of the code you'll need. You can clone the client application repository
  directly from GitHub:

  .. code-block:: shell

     git clone https://github.com/mongodb-university/realm-tutorial-dotnet.git

  .. important::
   
     The ``realm-tutorial-dotnet`` repository contains two branches: ``final``
     and ``start``. The ``final`` branch is a finished version of the app as it
     should look *after* you complete this tutorial. To walk through this
     tutorial, please check out the ``start`` branch:

     .. code-block:: shell
    
        git checkout start

---
title: Explore the App Structure
ref: explore-the-app-structure
content: |
  Double-click the ``realm-tutorial-dotnet.sln`` file to open the solution in 
  Visual Studio. Once open, take a few minutes to explore how the solution is 
  organized. This is a standard multi-platform solution, based on a template 
  provided by Visual Studio, that has been modified for our specific use. The 
  solution has 3 projects:

  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 40 60

     * - Project
       - Purpose

     * - ``realm-tutorial-dotnet``
       - Provides shared resources, including the 4 ``Navigation Elements`` (the 
         individual "screens" of the app) and the App.xaml file, which provides 
         initialization code. 

         This project also includes a ``Models`` folder, which contains the data 
         models that Realm uses to serialize and deserialize data. To learn more 
         about how {+service-short+} object models are used in .NET applications, 
         see :doc:`Realm Objects </dotnet/objects>` in our .NET client guide. 

     * - ``realm-tutorial-dotnet.Android``
       - Contains Android-specific resources, such as the Toolbar formatting. 

     * - ``realm-tutorial-dotnet.iOS``
       - Contains iOS-specific resources. 

  You will perform all of the steps in this tutorial within the shared 
  ``realm-tutorial-dotnet`` project. Specifically, you will be working in the following
  files:

  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 25 75
     
     * - File
       - Purpose

     * - AddMemberPage.xaml.cs
       - Provides the UI for adding and removing members of a project.

     * - App.xaml.cs
       - Initializes the app, creates a public static Realm app, and defines 
         the primary startup page.

     * - EditTaskPage.xaml.cs
       - Provides the UI for editing an existing Task.

     * - LoginPage.xaml.cs
       - Provides the functionality to log on with an existing user account, or 
         to register a new user account. When the app starts, if no user is 
         currently logged on, this page is displayed first.

     * - ProjectPage.xaml.cs
       - Provides the UI for viewing all Projects that the user is in.

     * - TaskPage.xaml.cs
       - Provides the UI for viewing the list of Tasks in a Project..

---
title: Connect to Your MongoDB Realm App
ref: connect-to-your-mongodb-realm-app
content: |
  To get the app working with your backend, you first need to instantiate the
  Realm app. The Realm app is the interface to the MongoDB Realm backend.
  Navigate to the ``App.xaml.cs`` file and complete the ``OnStart()``
  method:

  .. literalinclude:: /tutorial/generated/code/final/App.codeblock.open-realm.cs
     :language: csharp

  Be sure to enter your own Realm app ID, which you can :ref:`find in the Realm
  UI <find-your-app-id>`. 

  At this point, we have a static, public 
  :dotnet-sdk:`Realms.Sync.App <reference/Realms.Sync.App.html>` object that we 
  can use elsewhere in the project.

---
title: Implement the AuthProvider
ref: implement-the-auth-provider
content: |
  Navigate to ``LoginPage.xaml.cs``. In this file, we will implement the logon 
  functionality for the app. We are using  
  :dotnet-sdk:`EmailPasswordAuth <reference/Realms.Sync.App.html#Realms_Sync_App_EmailPasswordAuth>` 
  to authenticate users. To do this, we need to be able to log on existing users 
  with the 
  :dotnet-sdk:`LogInAsync() <reference/Realms.Sync.App.html#Realms_Sync_App_LogInAsync_Realms_Sync_Credentials_>`
  method, and be able to register new users with the 
  :dotnet-sdk:`RegisterUserAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RegisterUserAsync_System_String_System_String_>`
  method.

  The ``LoginPage.xaml`` file provides a UI for the user to enter an email address, 
  password, and then click either the **Log In** or **Create New Account** button. 
  You will implement the functionality of each buttons' ``Clicked`` event.

  In the ``DoLogin()`` method, call ``LogInAsync``, passing the credentials 
  that the user entered. If that call succeeds, we have a valid 
  :dotnet-sdk:`Realms.Sync.User <reference/Realms.Sync.User.html>`, and we can 
  return to the default screen, which is defined in ``Projects.xaml``.

  .. literalinclude:: /tutorial/generated/code/final/LoginPage.codeblock.login-async.cs
     :language: csharp

  Next, implement the user registration functionality in the ``RegisterUser()`` 
  method by calling the ``RegisterUserAsync()`` method. On success, you then call 
  ``DoLogin()`` to log on the new user: 

  .. literalinclude:: /tutorial/generated/code/final/LoginPage.codeblock.register-user.cs
     :language: javascript

---
title: View the Schemas
ref: view-schemas
content: |
  In the ``realm-tutorial-dotnet`` project, find the ``Models`` folder and expand 
  it. These C# classes define the schemas for the objects we store in our realms. 
  Note the following about the schemas:

  - A User has a string property that defines the User's unique partition.

  - A User also has a collection (IList) of Projects of which they are a member.

  - A Project also has its own unique Partition value.

  - A Task has an Owner property that maps to the Project to which it belongs. 

  - A Task also has a Status, which is a string, but we use a TaskStatus enum to 
    ensure consistency in the values we store.

  - The Member class does not map to a collection, but is instead used as a 
    simplified User object for matching a User to a Project.

  In summary, a User has an array of projects of which it is a member. Each Project 
  has a name and partition value. Each Task has a name, status, and a list of 
  Projects in which it is contained. 

---
title: Get the Projects
ref: get-projects
content: |
  Now that we have an authenticated user, the app must access the list of projects 
  in which the user is a member. To do this, we will first connect to the ``User`` 
  realm, get the user object, and then display each of the projects listed in the 
  User's ``MemberOf`` property.

  The ``ProjectPage.xaml.cs`` file is the default screen for this app. In the 
  ``OnAppearing()`` method, we check to see if we have an authenticated user 
  already. If not, we redirect to the Login page. If we do, or when control is 
  returned from the Login page, we can then instantiate a
  :dotnet-sdk:`SyncConfiguration <reference/Realms.Sync.SyncConfiguration.html>` 
  object and pass that to the 
  :dotnet-sdk:`GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>` 
  method to get the user's custom realm. From this realm, we fetch the specific 
  user document that has an ``_id`` value matching the ``Id`` property. 
  Each ``User`` object contains a read-only ``IList<Project>`` 
  property called ``MemberOf``, and we iterate through this list to display the 
  Projects in the UI. 

  To implement this functionality, find the ``OnAppearing()`` method in 
  ``ProjectPage.xaml.cs``. You see the conditional checking to see if we already 
  have an authenticated user. In the ``else`` block (we have an authenticated user),
  instantiate the ``userRealm`` object by creating a ``SyncConfiguration`` object 
  and passing that to the ``Realm.GetInstanceAsync()`` method. When building the 
  SyncConfiguration object, we set the partition string to ``user=<USER_ID>``:
  
  .. literalinclude:: /tutorial/generated/code/final/ProjectPage.codeblock.user-realm-config.cs
     :language: csharp

  We then find the user from the User realm that matches the authenticated user's
  Id:

  .. literalinclude:: /tutorial/generated/code/final/ProjectPage.codeblock.find-user.cs
     :language: csharp

  Once you have the user, call ``SetUpProjectList()``. In that method, you populate 
  the ``MyProjects`` collection (an ``ObservableCollection<Project>``), which is 
  used to keep the list of projects up-to-date.
  .. implement SetUpProjectList
  
  When the app user touches one of the Projects in the list, we pass 
  control to the ``TaskPage.xaml.cs`` class and display the list of Tasks within 
  the selected Project. 

---
title: Implement the Task Page
ref: implement-task-page
content: |
  Open the ``TaskPage.xaml.cs`` file. In the ``OnAppearing()`` method, we will create 
  another realm, this time for the Task collection. In the user realm we used a 
  partition key value of ``user=<USER_ID>``; the project realm uses a partition 
  key value of ``project=<USER_ID>``. For the sake of simplicity in this tutorial, 
  each user has exactly one project they own, and it is specified by the partition 
  key value containing their own user ID:

  .. literalinclude:: /tutorial/generated/code/final/TaskPage.codeblock.task-realm-config.cs
     :language: csharp

  In the ``SetUpTaskList()`` method, find all of the tasks. We find all tasks because 
  we configured our ``taskRealm`` to use the partition specific to the user, removing 
  the need to filter by "owner":

  .. literalinclude:: /tutorial/generated/code/final/TaskPage.codeblock.setup-tasks.cs
     :language: csharp

  At the bottom of the Task view, we have added a button for creating a new Task. 
  In the ``Button_Clicked`` handler, we display a modal dialog to get the name 
  of the new task and then create a new Task, setting the Task's status to 
  ``TaskStatus.Open``. We then add the Task to the ``taskRealm``:

  .. literalinclude:: /tutorial/generated/code/final/TaskPage.codeblock.new-task.cs
     :language: csharp

  .. note::

     Whenever you write or delete from a realm, you must wrap your call within 
     a transaction. The simplest way to do this is to use 
     :dotnet-sdk:`Write() <reference/Realms.Realm.html#Realms_Realm_Write__1_System_Func___0__>`
     to create a temporary transaction.

  The final Task-related work is providing a way for the user to edit a Task, 
  including changing its state. Within our UI, when a user taps on a task in the 
  list, the TaskEdit page displays. The logic here is similar to creating a Task, 
  where the updated information is wrapped in a temporary transaction using the 
  ``taskRealm.Write()`` method. To view this code, find the ``Save_Button_Clicked`` 
  event handler in the ``EditTaskPage.xaml.cs`` file.

---
title: Implement Team Management
ref: implement-team-management
content: |
  A user can add other users to their team, which allows them to view, edit, and
  delete tasks on the user's project. The ``AddMember`` page implements this
  functionality by calling a few Realm functions on the backend that we defined
  in the backend tutorial.

  Find the ``AddMemberPage.xaml.cs`` file. First, we need to fetch the list of
  current team members. We do this in the ``OnAppearing()`` method:

  .. literalinclude:: /tutorial/generated/code/final/AddMemberPage.codeblock.call-function-1.cs
     :language: csharp

  The UI provides two buttons for team management: an ``Add Member`` button at 
  the bottom of the screen, and, next to each team member in the list, a 
  ``Delete`` button to remove that specific member.

  Find the ``Add_Button_Clicked`` handler. We display a modal dialog prompting 
  the user to provide the email of an existing user. When the user clicks OK, 
  we call the ``addTeamMember`` function on the backend to add the specified team
  member:

  .. literalinclude:: /tutorial/generated/code/final/AddMemberPage.codeblock.call-function-2.cs
     :language: csharp

  Finally, in the ``Delete_Button_Clicked`` handler, we use the button's 
  ``CommandParameter`` to retrieve the team member's email, display a 
  confirmation dialog, and then call the ``removeTeamMember`` function on the 
  backend. The final step is to refresh the the list of members:

  .. literalinclude:: /tutorial/generated/code/final/AddMemberPage.codeblock.call-function-3.cs
     :language: csharp

---
title: Run and Test
ref: run-and-test
content: |
  Congratulations! Now that you have completed the code, you can run the app and
  check functionality. Here are some things you can try in the app:

  - Create a user with email *first@example.com*
  - Explore the app, then log out or launch a second instance of the app on 
    another device or simulator
  - Create another user with email *second@example.com*
  - Navigate to *second@example.com*'s project
  - Add, update, and remove some tasks
  - Click "Manage Team"
  - Add *first@example.com* to your team
  - Log out and log in as *first@example.com*
  - See two projects in the projects list
  - Navigate to *second@example.com*'s project
  - Collaborate by adding, updating, and removing some new tasks

  .. tip::
   
     If something isn't working for you, you can check out the ``final`` branch of 
     this repo to compare your code with our finished solution.
