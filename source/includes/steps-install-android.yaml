title: Update the Project-Level ``build.gradle`` File
ref: update-project-level-gradle
content: |

   Create or open your project in Android Studio. Select the
   "Project" view in the top-left panel:

   .. image:: /images/android-studio-project-view.png   
      :alt: The project view is in the top-left panel.
   
   Open the project-level ``build.gradle`` file:

   .. image:: /images/project-level-build-gradle.png
      :alt: Location of the project-level build.gradle file.

   Paste the {+service-short+} classpath into the dependencies block:

   .. code-block:: text
    
      classpath "io.realm:realm-gradle-plugin:6.0.1"

   When done, your project-level ``build.gradle`` should look something like this:

   .. code-block:: text
      :emphasize-lines: 14

      // Top-level build file where you can add configuration options common to all sub-projects/modules.

      buildscript {
          repositories {
              google()
              jcenter()
              
          }
          dependencies {
              classpath 'com.android.tools.build:gradle:3.5.1'
              
              // NOTE: Do not place your application dependencies here; they belong
              // in the individual module build.gradle files
              classpath "io.realm:realm-gradle-plugin:6.0.1"
          }
      }

      allprojects {
          repositories {
              google()
              jcenter()
          }

          dependencies {
          }
      }

      task clean(type: Delete) {
          delete rootProject.buildDir
      }

---
title: Add Realm to the Application-Level ``build.gradle`` File
ref: update-app-level-gradle
content: |

   Expand the ``app`` folder on the "Project" view in the
   top-left panel to reveal the application files. Open the
   application-level ``build.gradle`` file in this folder:

   .. image:: /images/application-level-build-gradle.png
      :alt: Location of the application-level build.gradle file.

   Paste the realm-android plugin line near the top of the file:

   .. code-block:: text

      apply plugin: 'realm-android'

   When done, your application-level ``build.gradle`` file should look something like this:

   .. code-block:: text
      :emphasize-lines: 2

      apply plugin: 'com.android.application'
      apply plugin: 'realm-android'

      android {
          compileSdkVersion 28
          defaultConfig {
              applicationId "com.mongodb.exampleapplication"
              minSdkVersion 15
              targetSdkVersion 28
              versionCode 1
              versionName "1.0"
              testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          }
          buildTypes {
              release {
                  minifyEnabled false
                  proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
              }
          }
      }

      dependencies {
          implementation fileTree(dir: 'libs', include: ['*.jar'])
          implementation 'androidx.appcompat:appcompat:1.0.2'
          implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
          testImplementation 'junit:junit:4.12'
          androidTestImplementation 'androidx.test.ext:junit:1.1.0'
          androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
      }
---
title: Sync Project with Gradle Files
ref: sync-gradle-dependencies
content: |

   Now that you have updated the ``build.gradle`` files,
   resolve the dependencies by clicking :guilabel:`File >
   Sync Project with Gradle Files`.

   Once Android Studio has resolved the dependencies, you
   can get started with {+service-short+}. Import the {+service-short+} SDK with
   this import statement in your .java or .kt files:

   .. tabs-realm-languages::

      .. tab::
         :tabid: java
      
         .. code-block:: java

            import io.realm.Realm;
      
      .. tab::
         :tabid: kotlin

         .. code-block:: kotlin
      
            import io.realm.Realm


