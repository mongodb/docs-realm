title: Export Your Realm Application
ref: export-your-application
content: |
  You can set up and enable the Custom Function authentication provider
  through {+cli-bin+} or automatic GitHub deployment. To configure the
  provider, you need the latest version of the :ref:`application
  directory <application-directory>` for your application.

  You can :doc:`export </deploy/export-realm-app>` your application from the
  :guilabel:`Import/Export App` tab of the :guilabel:`Deploy` page in the
  {+ui+}, or by running the following command from an authenticated instance of
  :doc:`realm-cli </deploy/realm-cli-reference>`:

  .. code-block:: shell

     realm-cli export --app-id=<App ID>
---
title: Define the Authentication Function
ref: define-the-authentication-function
content: |
  The authentication function must return a string ID value or an object 
  containing a string ID value that uniquely identifies the user. {+service+} uses 
  this value to look up an existing {+service-short+} user and automatically 
  creates a new user if it does not match an existing user. If the function does 
  not return a valid return value, {+backend+} throws an error and does not 
  create or authenticate a user.
  
  Valid return values options include: 
  
  .. example:: 
  
    A string ID value that uniquely identifies the user
    
    .. code-block:: shell
    
      return "5f650356a8631da45dd4784c"
    
    An object that contains a string ID value that uniquely identifies the user
    
    .. code-block:: shell

      return { "id": "5f650356a8631da45dd4784c" }
      return { "id": "5f650356a8631da45dd4784c", "name": "James Bond" }
      
  .. important:: Realm Generates New User ID Values
     
     The ID value that you return from the authentication function is
     **not** the internal {+service-short+} user id (i.e. the value that
     :json-expansion:`%%user` and :ref:`context.user <context-user>`
     resolve to). {+backend+} automatically generates a unique id for Custom
     Function users when it creates them.
  
  To create the authentication function, write the function code and
  then follow the steps in :doc:`Define a Function
  </functions/define-a-function>` to add it to your application.
  
  .. example::
     
     An application implements a Custom Function authentication provider
     that stores user data in the ``app.users`` MongoDB collection. The
     app lets users log in by specifying their ``username`` but does not
     require a password or any other type of authentication.
     
     The application's authentication function queries the ``users``
     collection for an existing user with the specified username. If the
     user already exists, the function returns their stored ``id`` value. If
     the user does not exist, the function stores a new user document in
     the collection and returns that document's ``id`` value.
     
     .. code-block:: javascript
        :emphasize-lines: 9, 12, 16, 20
        
        exports = async function(loginPayload) {
          // Get a handle for the app.users collection
          const users = context.services
            .get("mongodb-atlas")
            .db("app")
            .collection("users");
          
          // Parse out custom data from the FunctionCredential
          const { username } = loginPayload;
          
          // Query for an existing user document with the specified username
          const user = await users.findOne({ username });
          
          if (user) {
            // If the user document exists, return its unique ID
            return user._id.toString();
          } else {
            // If the user document does not exist, create it and then return its unique ID
            const result = await users.insertOne({ username });
            return result.insertedId.toString();
          }
        };
---
title: Add a Provider Configuration File
ref: add-a-provider-configuration-file
content: |
  To configure the Custom Function authentication provider, create a new
  authentication provider configuration file named
  ``custom-function.json`` in the ``auth_providers`` directory and set
  the value of ``config.authFunctionName`` the name of the
  authentication function:

  .. code-block:: json
     :caption: /auth_providers/custom-function.json
     :emphasize-lines: 5

     {
         "name": "custom-function",
         "type": "custom-function",
         "config": {
           "authFunctionName": "<Authentication Function Name>"
         },
         "disabled": false
     }
---
title: Deploy the Updated Application
ref: deploy-the-updated-application
content: |
  Once you have created the authentication function and configured the
  provider, you can make Custom Function authentication available to
  client applications by deploying your application.
  
  To deploy a draft application with {+cli-bin+}:

  .. code-block:: shell

     realm-cli import
  
  To deploy a draft application with automatic :doc:`GitHub deployment
  </deploy/deploy-automatically-with-github>`:

  .. code-block:: shell
     
     git add functions/<Authentication Function Name>
     git add auth_providers/custom-function.json
     git commit -m "Configure and Enable Custom Function Authentication"
     git push

  Once the application successfully deploys, you will be able to create
  a user and log in with the Custom Function provider from a client
  application.
...
