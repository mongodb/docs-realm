---
title: Enable Realm Sync
ref: enable-realm-sync
content: |
  Before you can add {+sync-short+} functionality within your game, you must
  enable {+sync+} in your {+backend+} app. 

  To enable {+sync+}, follow the steps in the :doc:`Get Started with Sync
  </sync/get-started>` guide. When enabling {+sync-short+}, you will need to configure your app to:

  - use ``Development Mode``. 
  - have a required :doc:`Partition Key </sync/partitions>` with the name ``"_partition"`` and with the type ``string``.
---
title: Connect to Your MongoDB Realm App
ref: connect-your-mongodb-realm-app
content: |
  To get the app working with your backend, you first need to add your {+backend+} App
  ID to the ``Constants.cs`` file:

  .. code-block:: csharp
 
     public const string AppId = "<your-realm-app-ID-here>";

  Change the value of ``AppId`` to your {+backend+} app ID, which you can :ref:`find in
  the {+backend+} UI <find-your-app-id>`.

  In the ``RealmController.cs`` file, replace the existing ``GetRealm()`` method
  with the one that takes in a User as a parameter and asynchronously gets a
  synced {+realm+} instance: 

  .. code-block:: csharp
 
     public static async Task<Realm> GetRealm(Realms.Sync.User loggedInUser)
     {
         var syncConfiguration = new SyncConfiguration("UnityTutorialPartition", loggedInUser);
         return await Realm.GetInstanceAsync(syncConfiguration);
     }
  
  Opening a synced {+realm+} requires a logged-in {+realm+} user; you'll set
  that up in the next step.
---
title: Update the Authentication Screen and Manager
ref: update-authentication-screen
content: |
  To add support for :doc:`Email/Password
  Authentication </sdk/dotnet/examples/manage-email-password-users>`, you'll need to update your
  Authentication Screen to have a password field and a button that allows
  players toggle between a registration mode and login mode. 

  Replace the code in your ``Authentication.uxml`` with the following:

  .. code-block:: xml
 
     <ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" xsi="http://www.w3.org/2001/XMLSchema-instance" engine="UnityEngine.UIElements" editor="UnityEditor.UIElements" noNamespaceSchemaLocation="../../UIElementsSchema/UIElements.xsd" editor-extension-mode="False">
         <Style src="Stylesheet.uss" />
         <ui:VisualElement name="auth-wrapper" class="auth-wrapper" >
             <ui:Label text="Realm Platformer" display-tooltip-when-elided="true" name="game-title" class="game-title" />
             <ui:Label text="Defeat Enemies and  Collect Tokens!" display-tooltip-when-elided="true" name="defeat-enemies-subtitle" class="game-subtitle"/>
             <ui:Label text="Earn Bonus Points by Completing the Game Quicker!" display-tooltip-when-elided="true" name="earn-bonus-points-subtitle" class="game-subtitle"/>
             <ui:Label text="Play Your Way to the Top of the Leaderboard!" display-tooltip-when-elided="true" name="play-to-leaderboard-subtitle" class="game-subtitle" />
             <ui:Label text="Login:" display-tooltip-when-elided="true" name="subtitle" class="subtitle" />
             <ui:TextField picking-mode="Ignore" label="username" value="username" text="your.name@example.com" name="username-input" class="auth-input" />
             <ui:TextField input-type="password" picking-mode="Ignore" label="password" value="password" name="password-input" class="auth-input" />
             <ui:Button text="Login &amp; Start Game" display-tooltip-when-elided="true" name="start-button" class="start-button" />
             <ui:Button text="Don&apos;t have an account yet? Register" display-tooltip-when-elided="true" name="toggle-login-or-register-ui-button" class="toggle-login-or-register-ui-button" />
         </ui:VisualElement>
     </ui:UXML>

  You'll need to refactor your AuthenticationManager's ``Start()`` method to contain code that does the following:

  - Defines the ``passInput`` variable as a `password TextField <https://docs.unity3d.com/ScriptReference/UIElements.TextInputBaseField_1-isPasswordField.html>`_.
  - Defines the ``toggleLoginOrRegisterUIButton`` variable as a `button <https://docs.unity3d.com/ScriptReference/UIElements.Button.html>`_.
  - Handles the toggle register/login button's click event and toggles between a register mode and login mode

  In ``AuthenticationManager.cs``, add the following code to your ``Start()`` method, replacing the existing ``startButton.clicked`` event handler with the one below:

  .. code-block:: csharp
 
     passInput = root.Q<TextField>("password-input");
     passInput.isPasswordField = true;
     
     startButton.clicked += () =>
     {
         if (isInRegistrationMode == true)
         {
             onPressRegister();
         }
         else
         {
             onPressLogin();
         }
     };
     toggleLoginOrRegisterUIButton = root.Q<Button>("toggle-login-or-register-ui-button");
     toggleLoginOrRegisterUIButton.clicked += () =>
     {
         // if the registerUI is already visible, switch to the loginUI and set isShowingRegisterUI to false	
         if (isInRegistrationMode == true)
         {
             switchToLoginUI();
             isInRegistrationMode = false;
         }
         else
         {
             switchToRegisterUI();
             isInRegistrationMode = true;
         }
     };
  
  Next, create a ``switchToLoginUI()`` and ``switchToRegisterUI()`` method to toggle between authentication UI modes:

  .. code-block:: csharp
 
     public static void switchToLoginUI()
     {
         subtitle.text = "Login";
         startButton.text = "Login & Start Game";
         toggleLoginOrRegisterUIButton.text = "Don't have an account yet? Register";
     }
     public static void switchToRegisterUI()
     {
         subtitle.text = "Register";
         startButton.text = "Signup & Start Game";
         toggleLoginOrRegisterUIButton.text = "Have an account already? Login";
     }

  Replace the existing ``onPressLogin()`` method with the one below that uses
  :doc:`Email/Password Authentication
  </sdk/dotnet/examples/manage-email-password-users>`:

  .. code-block:: csharp
 
     public static async void onPressLogin()
     {
         try
         {
             var currentPlayer = await RealmController.setLoggedInUser(userInput.value, passInput.value);
             if (currentPlayer != null)
             {
                 root.AddToClassList("hide");
             }
             ScoreCardManager.setLoggedInUser(currentPlayer.Name);
             LeaderboardManager.Instance.setLoggedInUser(currentPlayer.Name);
         }
         catch (Exception ex)
         {
             Debug.Log("an exception was thrown:" + ex.Message);
         }
     }
  
  Notice that there is now a password parameter for the ``RealmController.setLoggedInUser()`` method, you will update that method in the next step.

  Finally, create an ``onPressRegister()`` method that calls a ``RealmController.OnPressRegister()`` method that you will create in the next step:

  .. code-block:: csharp
 
     public static async void onPressRegister()
     {
         try
         {
             var currentPlayer = await RealmController.OnPressRegister(userInput.value, passInput.value);
 
             if (currentPlayer != null)
             {
                 root.AddToClassList("hide");
             }
             ScoreCardManager.setLoggedInUser(currentPlayer.Name);
             LeaderboardManager.Instance.setLoggedInUser(currentPlayer.Name);
 
         }
         catch (Exception ex)
         {
             Debug.Log("an exception was thrown:" + ex.Message);
         }
     }

---
title: Setup Authentication in your Game
ref: enable-email-pass-auth
content: |
  Currently, the project's only form of authentication is a username input,
  lets replace that in the code with {+realm+} :doc:`Email/Password
  Authentication </sdk/dotnet/examples/manage-email-password-users>`

  In the ``RealmController.cs`` replace the ``setLoggedInUser()`` with an
  asynchronous method that logs in using the :dotnet-sdk:`LogInAsync()
  <reference/Realms.Sync.App.html#Realms_Sync_App_LogInAsync_Realms_Sync_Credentials_>`
  method to authenticate and obtain a :dotnet-sdk:`User
  <reference/Realms.Sync.User.html>` instance:

  .. code-block:: csharp
 
     public static async Task<Player> setLoggedInUser(string userInput, string passInput)
     {        
        syncUser = await realmApp.LogInAsync(Credentials.EmailPassword(userInput, passInput));
        if (syncUser != null)
        {
            realm = await GetRealm(syncUser);
            currentPlayer = realm.Find<Player>(syncUser.Id);

            if (currentPlayer != null)
            {
                var s1 = new Stat();
                s1.StatOwner = currentPlayer;

                realm.Write(() =>
                {
                    currentStat = realm.Add(s1);
                    currentPlayer.Stats.Add(currentStat);
                });

                startGame();
            }
            else
            {
                Debug.Log("This player exists a MongoDB Realm User but not as a Realm Object, please delete the MongoDB Realm User and create one using the register button");
            }
        }

        return currentPlayer;
     }

  Next, in the ``RealmController.cs`` file, create an asynchronous method that
  registers a new user by passing a user-provided email and password to the
  :dotnet-sdk:`RegisterUserAsync()
  <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RegisterUserAsync_System_String_System_String_>`
  method:

  .. code-block:: csharp
 
     public static async Task<Player> OnPressRegister(string userInput, string passInput)
     {
        await realmApp.EmailPasswordAuth.RegisterUserAsync(userInput, passInput);
        syncUser = await realmApp.LogInAsync(Credentials.EmailPassword(userInput, passInput));
        realm = await GetRealm(syncUser);

        var p1 = new Player();
        p1.Id = syncUser.Id;
        p1.Name = userInput;

        var s1 = new Stat();
        s1.StatOwner = p1;

        realm.Write(() =>
        {
            currentPlayer = realm.Add(p1);
            currentStat = realm.Add(s1);
            currentPlayer.Stats.Add(currentStat);
        });
        startGame();
        return currentPlayer;
     }

  Finally, add the following code at the end of the RealmController's
  ``logOut()`` method to log out of the {+realm+} user when a user clicks the
  log out button:

  .. code-block:: csharp
 
      await syncUser.LogOutAsync();

---
title: Create a Real-Time Leaderboard with Realm Sync
ref: create-a-real-time-leaderboard-with-realm-sync
content: |
  The current leaderboard shows the top player stats when the game first loads.
  However, if another player gets a new high score after the game loads on your
  device, the leaderboard on your device will not be updated.

  To fix this, you will update the code in the ``LeaderboardManager.cs`` file to do the following:

  - Open a synced {+realm+}
  - Listen to changes on all Stat objects
  - Update the Leaderboard GameObject when there is a new high score

  Navigate to ``LeaderboardManager.cs`` and add the following function that opens a synced {+realm+} using the ``RealmController.syncUser`` variable that you created earlier:

  .. code-block:: csharp
 
     public static async Task<Realm> GetRealm()
     {
         var syncConfiguration = new SyncConfiguration("UnityTutorialPartition", RealmController.syncUser);
         return await Realm.GetInstanceAsync(syncConfiguration);
     }

  In ``LeaderboardManager.cs`` make the ``setLoggedInUser()`` an
  asynchronous function and replace the existing ``Realm.GetInstance()`` call
  with a call to the new ``GetRealm()`` method. Your code should look something like the following snippet:

  .. code-block:: csharp
 
     public async void setLoggedInUser(string userInput)
     {
         username = userInput;
         realm = await GetRealm();
         // ...
     }

  Next, create a :ref:`Change Listener <dotnet-register-a-realm-change-listener>` method:

  .. code-block:: csharp
 
     public void setStatListener()
     {
         listenerToken = realm.All<Stat>()
             .SubscribeForNotifications((sender, changes, error) =>
             {
 
                 if (error != null)
                 {
                     // Show error message
                     Debug.Log("an error occurred while listening for score changes :" + error);
                     return;
                }
 
                 if(changes != null)
                 {
                     setNewlyInsertedScores(changes.InsertedIndices);
                 }
                 // we only need to check for inserted because scores can't be modified or deleted after the run is complete
 
             });
     }

  Create a method, ``setNewlyInsertedScores()`` that does the following:

  - Loops through a list of indices of inserted elements to find the newly created ``Stat`` objects. 
  - Loops through the current top scores to determine if the new Stat object's ``score`` is higher than the current score. 
  - Updates the list of current top scores if there is a higher one and updates the UI to display the new list of top scores.

  .. code-block:: csharp
 
     private void setNewlyInsertedScores(int[] insertedIndices)
     {
         foreach (var i in insertedIndices)
         {
             var newStat = realm.All<Stat>().ElementAt(i);
 
             for (var scoreIndex = 0; scoreIndex < topStats.Count; scoreIndex++)
             {
                 if (topStats.ElementAt(scoreIndex).Score < newStat.Score)
                 {
                     if (topStats.Count > 4)
                     {   // An item shouldnt be removed if its the leaderboard is less than 5 items
                         topStats.RemoveAt(topStats.Count - 1);
                     }
                     topStats.Insert(scoreIndex, newStat);
                     root.Remove(listView); // remove the old listView
                     createTopStatListView(); // create a new listView
                     root.Add(listView); // add the new listView to the UI
                     break;
                 }
             }
         }
     }
   
  Call the ``setStatListener()``Ca after the user is logged-in, at the
  end of the LeaderboardManager's ``setLoggedInUser()`` method:

  .. code-block:: csharp
 
     setStatListener();


  Finally, dispose of the listener token once the Leaderboard GameObject is disabled in the ``OnDisable()`` method:

  .. code-block:: csharp
 
     if(listenerToken != null){
        listenerToken.Dispose(); 
     }
     
  .. note:: Simulate New Top Scores Through {+service-short+} Studio or {+atlas+} 

     Since Unity Hub does not allow opening multiple instances of the same
     project by default, we recommend simulating a new top score by creating a
     new Stat object through :doc:`{+service-short+} Studio </studio/>` or
     :atlas:`{+atlas+} <>`. When you create a new Stat object with a high score,
     your leaderboard updates automatically and displays the new high score.
     Alternatively, you can use the `Unity symbolic link workaround
     <https://support.unity.com/hc/en-us/articles/115003118426-Running-multiple-instances-of-Unity-referencing-the-same-project>`_
     to open a second instance of the project and log in with a different user,
     and get a new high score.
---
title: Run and Test
ref: run-and-test
content: |
  Once you have completed the code, you can run the app and check its functionality.

  Click the play button on the top of the screen to enter `play mode
  <https://docs.unity3d.com/Manual/GameView.html>`_ and play the game. Once the
  Unity Editor opens the `GameView
  <https://docs.unity3d.com/Manual/GameView.html>`_, here are some things you
  can try out:

  - Registering a user.
  - Logging in a user.
  - Getting a new high score and seeing the leaderboard update in real-time.
  - Creating a new Stat object with a high score in {+service-short+} Studio or {+atlas+} and seeing the leaderboard update in real-time.

  