title: Set Up the MongoDB Collections
ref: set-up-the-mongo-db-collections
content: |
  You define the schemas for all data in your application as rules for
  collections in a linked MongoDB Atlas cluster. To define rules for a
  collection, you first need to make the collection available to your Realm app.

  For this app, we'll use three collections: ``projects``, ``users``, and
  ``tasks``.

  Click :guilabel:`Rules` in the lefthand navigation to navigate to the rules
  editor. In the left sidebar of the rules editor, find the name of your linked
  cluster and click the plus button next to it. Realm will prompt you to add a
  new collection. 

  For :guilabel:`Database Name`, enter ``tracker`` and for :guilabel:`Collection
  Name`, enter ``tasks``. We'll define our own permissions in a bit, so don't
  select any permissions template. Click :guilabel:`Add Collection` to finish
  setting up the ``tracker.tasks`` collection.

  Once complete, repeat this process to set up the ``tracker.users`` and
  ``tracker.projects`` collections as well.

  .. cssclass:: bordered-figure
  .. figure:: /images/task-tracker-web-setup-collections.png
---
title: Define a Schema for Project Documents
ref: define-a-schema-for-project-documents
content: |
  We want to group related tasks together into a single project. To do this, we
  can store metadata for each project in the ``tracker.projects`` collection and
  indicate the project that each task belongs to in the task document.

  In the rules editor, select the ``tracker.projects`` collection and then click
  the :guilabel:`Schema` tab. Paste in the following schema and then click
  :guilabel:`Save`.

  .. code-block:: json
     
     {
       "title": "Project",
       "bsonType": "object",
       "required": [
         "_id",
         "name"
       ],
       "properties": {
         "_id": {
           "bsonType": "objectId"
         },
         "_partition": {
           "bsonType": "string"
         },
         "name": {
           "bsonType": "string"
         }
       }
     }

  .. admonition:: Sync Rules
     :class: note
     
     In this project, we primarily use projects to handle security for mobile
     applications using sync. Task and User documents include a project name as
     their :ref:`partition key <partition-keys>` which allows us to sync tasks
     for all of a user's projects.
     
     Data access permissions work differently for synced and non-synced
     clusters, so you won't use these partition keys if you only connect through
     the GraphQL API.
---
title: Define a Schema for User Documents
ref: define-a-schema-for-user-documents
content: |
  We want to store some information for each user of the app in the
  ``tracker.users`` collection, such as their name and avatar image. These
  documents are separate from Realm's internal user objects, so we'll also store
  each user's ID value in the ``_id`` field of their document. This lets us
  identify which document describes a given user later when we want to access
  their information. To codify this, we'll use a schema that defines the shape
  and contents of user documents.

  In the rules editor, select the ``tracker.users`` collection and then click
  the :guilabel:`Schema` tab. Paste in the following schema and then click
  :guilabel:`Save`.

  .. code-block:: json
     
     {
       "title": "User",
       "bsonType": "object",
       "required": [
         "_id",
         "name"
       ],
       "properties": {
         "_id": {
           "bsonType": "string"
         },
         "name": {
           "bsonType": "string"
         },
         "image": {
           "bsonType": "string"
         },
         "_partition": {
           "bsonType": "string"
         }
       }
     }
---
title: Define a Schema for Task Documents
ref: define-a-schema-for-task-documents
content: |
  The core function of a task tracker is to store data about a user's tasks. In
  this app, we store the task data as documents in the ``tracker.tasks``
  collection. Each task has a descriptive name and can have one of three
  statuses: Open, In Progress, or Closed. Additionally, each task may specify a
  specific user as its assignee. We'll use another schema to define the shape
  and contents of documents in the ``tasks`` collection.

  In the rules editor, select the ``tracker.tasks`` collection and then click
  the :guilabel:`Schema` tab. Paste in the following schema and then click
  :guilabel:`Save`.

  .. code-block:: json
     
     {
       "title": "Task",
       "bsonType": "object",
       "required": [
         "_id",
         "name",
         "status"
       ],
       "properties": {
         "_id": {
           "bsonType": "objectId"
         },
         "_partition": {
           "bsonType": "string" 
         },
         "assignee": {
           "bsonType": "string"
         },
         "name": {
           "bsonType": "string"
         },
         "status": {
           "bsonType": "string"
         }
       }
     }
---
title: Define a Relationship Between Tasks and Users
ref: define-a-relationship-between-tasks-and-users
content: |
  The ``assignee`` field of each task contains the user id string of the user
  that the task is assigned to. We can use this information to define a
  relationship between documents in the ``tasks`` and ``users`` collections.
  This will allow us to write GraphQL operations that can read and modify
  related documents as if they were a single document.

  To define the relationship, ensure you're editing rules for the
  ``tracker.tasks`` collection and then click the :guilabel:`Relationships` tab.
  Click :guilabel:`Add a Relationship` and define a relationship that points
  from the ``assignee`` property to the ``_id`` property in the
  ``tracker.users`` collection.

  .. code-block:: json
     
     {
       "assignee": {
         "foreign_key": "_id",
         "ref": "#/relationship/mongodb-atlas/tracker/users",
         "is_list": false
       }
     }

  .. cssclass:: bordered-figure
  .. figure:: /images/task-tracker-web-add-relationship.png
