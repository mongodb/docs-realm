title: Create New App
ref: export-app-github-create-new-app
content: |
  Create a new {+app+}. This is where you'll add the configuration files from 
  the exported app in later steps. To create the app, run: 

  .. code-block:: bash
     
     realm-cli app create

  Follow the CLI prompts to complete app creation.
---
title: Set up Github Automatic Deployment
ref: export-app-github-set-up-github
content: |
  Follow the :ref:`documentation to set up Github Automatic Deployment <deploy-github>`
  for your {+app+}.
---
title: Log In to MongoDB Cloud
ref: export-app-github-log-in-to-mongodb-cloud
content: |
  You need to use the {+cli+} as part of app import process.
  You must log in to MongoDB Cloud  with the {+cli+} using
  an :atlas:`API key </configure-api-access/#programmatic-api-keys>` scoped to the organization or
  project that contains the app.

  .. code-block:: bash

     realm-cli login --api-key="<MongoDB Cloud Public API Key>" --private-api-key="<MongoDB Cloud Private API Key>"
---
title: Pull the Latest Version of Your Exporting App
ref: export-app-github-pull-the-latest-version-of-your-app
content: |
  You'll need a local copy of the configuration files for the {+app+} you're exporting.
  Pull a local copy of the latest version of your app:

  .. code-block:: bash

     realm-cli pull --remote="<Your Exported App ID>"

  .. tip::

     You can also download a copy of your application's configuration files from
     the :guilabel:`Deployment > Export App` screen in the {+ui+}.
---
title: Copy Exported App Configuration to New App
ref: export-app-github-copy-exported-app-to-new-app
content: |
  Delete all the configuration files in the new app except for ``realm_config.json``.
  You'll handle ``realm_config.json`` in the next step. 

  Copy all the :ref:`configuration files and folders <app-configuration>` of your exported app
  to the imported app folder except for the ``realm_config.json`` file.

---
title: Configure the New App's ``realm_config.json``
ref: export-app-github-configure-realm-config-json
content: |
  In the new app's ``realm_config.json``, replace all the contents except for the 
  ``"app_id"`` and ``"name"``.

  The new app's ``realm_config.json`` should look something like: 

  .. code-block:: javascript

    {
      "app_id": "mynewapp-abcde", // don't change
      "name": "MyNewApp", // don't change
      "config_version": 20210101, // copy from exported app
      "location": "US-VA", // copy from exported app
      "deployment_model": "GLOBAL" // copy from exported app
    }
---
title: Migrate Secrets to New App
ref: export-app-github-migrate-secrets
content: |
  When you :ref:`export your {+app+} <export-realm-app>`, the export does not include the app's 
  :ref:`secrets <app-secret>`. As secrets cannot be read once they're defined, 
  you must also have access to the secrets outside of {+service-short+} to import 
  them into a {+app+}. If your app doesn't have any secrets, you can skip this step.

  To add the secrets from another Realm app:

  #. Get the names of all the secrets from the exported app by following the 
     :ref:`view secrets documentation <list-secrets>`.
  #. Save the names of all the secrets to a secure location. You won't have access 
    to the actual secrets, but It'll be useful to have a list of the secret names 
    to add to your imported app.
  #. Gather the secrets. This cannot be done from within {+service-short+}. 
  #. Add all the secrets to the imported app by following the :ref:`define a secret documentation <define-secret>`.
    Secrets must be added one at a time.
---
title: Push New App to Github
ref: export-app-github-push-to-github
content: |
  When you are ready to import the app, commit the application 
  configuration files and then push them to GitHub:

  .. code-block:: sh

     git add -A
     git commit -m "<commit message>"
     git push origin <branch name>

  Once you successfully push your changes to GitHub, {+service-short+}
  immediately deploys a new version of your application that matches the state
  of the latest commit. Client applications will automatically use the newest
  version, so make sure that you also update your client code to use the new
  version.
