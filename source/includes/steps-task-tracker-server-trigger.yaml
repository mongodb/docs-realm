title: Create a New Trigger
ref: create-a-new-trigger
content: |
  To define a new trigger, click :guilabel:`Triggers` in the lefthand navigation
  and then click :guilabel:`Add a Trigger`.
  
  .. cssclass:: bordered-figure
  .. figure:: /images/task-tracker-web-add-trigger.png
---
title: Define the Trigger Type
ref: define-the-trigger-type
content: |
  Set the :guilabel:`Trigger Type` to **Authentication** and give the trigger a
  descriptive name. We suggest ``onNewUser``, but you can use any name you like.
  
  .. cssclass:: bordered-figure
  .. figure:: /images/task-tracker-web-configure-trigger-type.png
---
title: Configure the Trigger Action
ref: configure-the-trigger-action
content: |
  We want the trigger to fire when users register a new account, so set the
  :guilabel:`Action Type` to **Create**. We're using email/password
  authentication for this app, so specify **Email/Password** as the only
  :guilabel:`Provider`.
  
  .. cssclass:: bordered-figure
  .. figure:: /images/task-tracker-web-configure-trigger-event.png
---
title: Define the Trigger Function
ref: define-the-trigger-function
content: |
  When a new user registers their account, we want to add a document to the
  ``tracker.users`` collection that describes the user. To do that, we'll use a
  function that can access the user's info and inserts a new document for them.
  The ``_id`` of each user document should contain the user's ID value so that
  we can map the document to the user.
  
  Create a new function named ``createNewUserDocument`` and paste in the
  following code:
  
  .. code-block:: javascript
     
     exports = async function createNewUserDocument({ user }) {
       const cluster = context.services.get("mongodb-atlas");
       const users = cluster.db("tracker").collection("users");
       return await users.insertOne({
         _id: user.id,
         _partition: "My Project",
         name: user.data.email,
       });
     };
...
