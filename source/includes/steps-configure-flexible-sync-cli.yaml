title: Pull the Latest Version of Your App
ref: pull-the-latest-version-of-your-app
content: |
  To update your app through the CLI, you need an :ref:`up-to-date application
  directory <application-directory>`. To pull a local copy of the latest version
  of your app, run the following:
  
  .. code-block:: bash
     
     realm-cli pull --remote="<Your App ID>"
---
title: Select a Cluster to Sync
ref: select-a-cluster-to-sync
content: |
  You can enable {+sync-short+} for a single :term:`linked cluster` in your application.
  If you have not yet linked the cluster to your application, follow the
  :ref:`link-a-data-source` guide to link it before
  you continue.

  Determine which cluster you want to use and then open its configuration file.
  Add the ``config.flexible_sync`` field with the following template:

  .. code-block:: json
    
     {
         "config": {
             "flexible_sync": {
                 "state": "enabled",
                 "database_name": "",
                 "permissions": {
                     "defaultRoles": [
                         {
                             "applyWhen": {},
                             "name": "all",
                             "read": true,
                             "write": true
                         }
                     ],
                     "rules": {}
                 },
                 "queryable_fields_names": []
             }
         }
     }

  Replace the ``database_name`` field's value with the name of your database.

  .. note::
    
    The default role applies to any collection where you do not define custom roles. 
    Since there is no custom roles defined in the above example, the default role 
    applies to all collections.

---
title: Choose Queryable Fields
ref: choose-queryable-fields
content: |
  The ``queryable_fields_names`` property allows you to define a set of
  queryable fields for the device should query on. A queryable field can be any
  top-level primitive field with a scalar type, this excludes embedded objects or arrays.

  To learn more about queryable fields, read the :ref:`queryable fields
  <queryable-fields>` documentation.

  .. code-block:: json

     {
         "config": {
             "flexible_sync": {
                 "state": "enabled",
                 "database_name": "",
                 "permissions": {
                     "defaultRoles": [
                         {
                             "applyWhen": {},
                             "name": "all",
                             "read": true,
                             "write": true
                         }
                     ],
                     "rules": {}
                 },
                 "queryable_fields_names": ["age", "name"]
             }
         }
     }
---
title: Define Read & Write Permissions
ref: define-read-write-permissions
content: |
  You can define :ref:`JSON expressions <expressions>` to tell {+service+}
  whether a user has read or write permissions on a given document.
  {+service-short+} evaluates these expressions for a user when that user opens
  a {+realm+}.

  {+sync-short+} rule expressions have access to :json-expansion:`%%user`, which resolves
  to the user that opened the realm You can also use operators, including
  :json-operator:`%function`, to handle more complex cases. For examples, see
  :ref:`{+sync-short+} Permissions <sync-permissions>`.

  Once you've determined how to decide a user's read and write permissions for a
  given document, define the corresponding JSON expressions in the
  ``read`` and ``write`` fields of ``config.sync.partition.permissions``.

  In the following example, there is a user-defined role in the ``Employees``
  collection. This role takes precedent, and the default role is not applied for
  the ``Employees`` collection. However, since the ``Items`` collection does not
  specify a value, {+backend+} will apply the default role to the ``Items`` collection. 

  .. code-block:: json

     {
       "config": {
         "flexible_sync": {
           "state": "enabled",
           "database_name": "test-database",
           "permissions": {
             "Employees": {
               "roles": [
                 {
                   "name": "everyone",
                   "applyWhen": {},
                   "read": { "owner_id": "%%user.id" },
                   "write": false
                 }
               ]
             },
             "Items": {},
             "defaultRoles": [
               {
                 "applyWhen": {},
                 "name": "all",
                 "read": true,
                 "write": true
               }
             ],
             "rules": {}
           },
           "queryable_fields_names": ["age", "name"]
         }
       }
     }
---
title: Deploy the Sync Configuration
ref: deploy-the-sync-configuration
content: |
  Now that you've defined the {+sync-short+} configuration, including read and write
  permissions, you can deploy your changes to start syncing data and enforcing
  {+sync-short+} rules.

  To deploy your changes, import your app configuration:

  .. code-block:: shell
     
     realm-cli push --remote="<Your App ID>"
