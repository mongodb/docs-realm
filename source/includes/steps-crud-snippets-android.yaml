title: Set Up Your Project
ref: set-up-your-project
level: 4
content: |
  Follow the steps in the :ref:`Install Realm for Android <android-install>`
  guide.
---
title: Link a MongoDB Atlas Service Cluster
ref: link-mongodb-atlas-cluster
level: 4
content: |
  Follow the steps in the :doc:`Link a MongoDB data source </mongodb/link-a-data-source>`
  guide. Assign your service a meaningful name -- you'll need it to connect to
  the cluster using the {+service-short+} SDK.
---
title: Import Realm Dependencies
ref: import-realm-dependencies
level: 4
content: |
  For CRUD operations on a remote MongoDB collection, you will use one
  or more of the following ``import`` statements:

  .. tabs-realm-languages::
   
     .. tab::
        :tabid: java
        
        .. code-block:: java

           // Base Realm Packages
           import io.realm.mongodb.App;
           import io.realm.mongodb.AppConfiguration;
           // Realm Authentication Packages
           import io.realm.mongodb.User;
           import io.realm.mongodb.Credentials;

           // MongoDB Service Packages
           import io.realm.mongodb.mongo.MongoClient;
           import io.realm.mongodb.mongo.MongoDatabase;
           import io.realm.mongodb.mongo.MongoCollection;
           // Utility Packages
           import org.bson.Document;

     .. tab::
        :tabid: kotlin

        .. code-block:: kotlin

           // Base Realm Packages
           import io.realm.mongodb.App
           import io.realm.mongodb.AppConfiguration
           // Realm Authentication Packages
           import io.realm.mongodb.User
           import io.realm.mongodb.Credentials

           // MongoDB Service Packages
           import io.realm.mongodb.mongo.MongoClient
           import io.realm.mongodb.mongo.MongoDatabase
           import io.realm.mongodb.mongo.MongoCollection
           // Utility Packages
           import org.bson.Document

---
title: Instantiate a MongoDB Collection Handle
ref: instantiate-a-mongodb-collection-handle
level: 4
content: |
  To connect to an instance of MongoDB, you'll need a user with access
  to a MongoDB collection. :ref:`Log in to your application
  <android-authenticate>` as such a user, then use the following code
  to instantiate a local MongoDB collection handle.

  .. tabs-realm-languages::

     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/sync/MongoDBDataAccessTest.codeblock.instantiate-a-mongodb-collection-handle.kt
           :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/sync/MongoDBDataAccessTest.codeblock.instantiate-a-mongodb-collection-handle.java
           :language: java

  .. note:: Using Custom Classes with MongoDB

     To use classes other than the built-in ``Document`` class with
     MongoDB, you can add *codecs* to your ``MongoCollection`` instances.
     In the above example, we add the ``PojoCodecProvider`` to support
     Plain Old Java Objects (POJOs). Custom object support requires two
     *codec providers*:

     - the default codec provider, which provides support for built-in
       Java types (accessed through
       ``AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY``)

     - ``PojoCodecProvider``, which automatically creates new codecs to
       support POJO classes

     The SDK checks registries in order until one returns a codec for
     the requested class. As a result, you should list the default codec
     registry first, and the ``PojoCodecProvider`` should always be the
     last CodecProvider since it can provide a codec for almost any
     class.
