program: _shared
name: app-id
args: <MongoDB Realm Application ID>
directive: option
description: |
  | **Optional.**

  The Application ID of your {+app+}.
---
program: realm-cli import
name: app-id
command: import
optional: true
inherit:
  file: options-realm-cli.yaml
  program: _shared
  name: app-id
post: |
  If not specified, {+cli-bin+} will attempt to use the value of
  ``app_id`` defined in :ref:`config.json <appschema-realm-config>`. If
  ``config.json`` does not have an ``app_id`` value, {+cli-bin+}
  prompts you to create a new application.

  .. admonition:: New Application App IDs
     :class: note

     If you create a new application with {+cli-bin+}, {+service+}
     generates a new App ID and ignores any value that you specify for
     the ``--app-id`` flag.
---
program: realm-cli export
name: app-id
command: export
inherit:
  file: options-realm-cli.yaml
  program: _shared
  name: app-id
---
program: realm-cli login
name: username
args: <MongoDB Cloud username>
directive: option
description: |
  (Deprecated) The username of the MongoDB Cloud account you wish to log in with
  using :atlas:`personal API keys </configure-api-access/#personal-api-keys-deprecated>`.
---
program: realm-cli login
name: api-key
args: <api key>
directive: option
description: |
  A valid public MongoDB Atlas
  :atlas:`programmatic API key </configure-api-access/#programmatic-api-keys>`
  for the MongoDB Cloud account you wish to log in with.
---
program: realm-cli login
name: private-api-key
args: <private api key>
directive: option
description: |
  A valid private MongoDB Atlas
  :atlas:`programmatic API key </configure-api-access/#programmatic-api-keys>`
  for the MongoDB Cloud account you wish to log in with.
---
program: realm-cli import
name: path
args: <path>
directive: option
optional: True
description: |
  | **Optional.**

  The path to the directory containing files you wish to import.
  The directory must contain, at minimum, a valid :ref:`config.json
  <appschema-realm-config>` file.

  If the ``path`` argument is omitted, {+cli-bin+} will search for a
  ``config.json`` file in the current application directory.
---
program: realm-cli import
name: strategy
args: [merge|replace|replace-by-name]
directive: option
optional: true
description: |
  | **Optional.**
  | **Default:** Merge

  The :ref:`import strategy <realm-import-strategies>` that
  {+cli-bin+} should use when reconciling imported entities.
---
program: realm-cli export
name: output
args: <path>
directive: option
optional: true
description: |
  | **Optional.**

  The path of the directory where {+service-short+} will export your application.

  If specified, {+cli-bin+} creates a directory at the given path
  and exports the application configuration into the new directory. If a
  file or directory already exists at the specified path, the export
  will fail.

  .. note::

     If the ``output`` argument is omitted, {+cli-bin+} will export the
     application configuration to a new directory within the current
     working directory.
---
program: realm-cli export
name: as-template
directive: option
optional: true
description: |
  | **Optional.**

  If enabled, {+cli-bin+} exports the application configuration
  without any service ID values, including the App ID. This simplifies
  the creation of new applications from an exported configuration.
---
program: realm-cli export
name: for-source-control
directive: option
optional: true
description: |
  | **Optional.**

  If enabled, {+cli-bin+} exports the application configuration
  without any fields that conflict with deployment via GitHub source
  control, including fields like ``name``, ``app_id``, ``location``,
  and ``deployment_model`` in the ``config.json`` file as well as the
  ``config.clusterName`` field in the ``config.json`` of any Atlas
  data sources linked to the application.
---
program: realm-cli import
name: project-id
args: <MongoDB Cloud Project ID>
directive: option
optional: true
description: |
  | **Optional.**

  The :guilabel:`Project ID` of the :ref:`Atlas project <projects>` on
  which you want to host a newly created {+app+}. If
  specified, {+cli-bin+} will not prompt you to select a project when
  creating a new app.

  .. note::

     {+cli-bin+} ignores the value of ``--project-id``
     unless you are :doc:`importing a new application
     </deploy/create-with-cli>`.
---
program: realm-cli
name: disable-color
directive: option
optional: true
description: |
  | **Optional.**

  If specified, suppress all text color in {+cli-bin+} output.

  By default, some output such as errors and import diffs are
  colorized. Use this flag if you wish to prevent this behavior.
---
program: realm-cli
name: "yes"
directive: option
optional: true
description: |
  | **Optional.**

  If specified, automatically respond affirmatively to any yes/no
  prompts from {+cli-bin+}.
---
program: realm-cli
name: "config-path"
args: <File System Path>
directive: option
optional: true
description: |
  | **Optional.**

  If included with ``realm-cli login``, stores information
  about the authenticated session in a file at the specified
  path. Session information includes your MongoDB Cloud
  username, :atlas:`MongoDB Atlas programmatic API Key
  </configure-api-access/#programmatic-api-keys>`, and a
  session refresh token.

  If included with any other command, authenticates the
  request with the session saved at the specified path (if
  it exists) instead of the current CLI authentication
  state.

  .. warning::

     Since the session configuration file contains your
     MongoDB Atlas programmatic API private key, you should
     avoid sharing this file unintentionally.
---
program: realm-cli import
name: include-hosting
directive: option
optional: true
description: |
  | **Optional.**

  If specified, uploads and deploys any static assets in the
  ``/hosting/files`` directory of your {+app+}.
---
program: realm-cli import
name: include-dependencies
directive: option
optional: true
description: |
  | **Optional.**

  If specified, uploads and deploys any external dependencies included
  in a ``node_modules`` archive in the ``/functions`` directory of your
  {+app+}.
---
program: realm-cli export
name: include-hosting
directive: option
optional: true
description: |
  | **Optional.**

  If specified, exports all hosted static assets in the
  ``hosting/files`` directory of your {+app+}.
---
program: realm-cli diff
name: include-hosting
directive: option
optional: true
description: |
  | **Optional.**

  If specified, the diff includes a list of files in the
  ``hosting/files`` directory of your {+app+} that are
  different from your app's deployed files.
---
program: realm-cli secrets add
name: name
args: <Secret Name>
directive: option
optional: false
description: |
  A unique name for the new Secret. If an existing Secret already has
  the specified name then this operation will fail.
---
program: realm-cli secrets add
name: value
args: <Secret Value>
directive: option
optional: false
description: |
  The value of the new Secret.
---
program: realm-cli secrets remove
name: secret-name
args: <Secret Name>
directive: option
optional: false
---
program: realm-cli secrets remove
name: name
args: <Secret Name>
directive: option
optional: false
description: |
  The name of the Secret to remove from your {+app+}.
---
program: realm-cli secrets remove
name: secret-id
args: <Secret ID>
directive: option
optional: false
---
program: realm-cli secrets remove
name: id
args: <Secret ID>
directive: option
optional: false
description: |
  The ID value of the Secret to remove from your {+app+}.
---
program: realm-cli secrets update
name: secret-name
args: <Secret Name>
directive: option
optional: false
---
program: realm-cli secrets update
name: name
args: <Secret Name>
directive: option
optional: false
description: |
  The name of the Secret to update.
---
program: realm-cli secrets update
name: secret-id
args: <Secret ID>
directive: option
optional: false
---
program: realm-cli secrets update
name: id
args: <Secret ID>
directive: option
optional: false
description: |
  The ID value of the Secret to update.
---
program: realm-cli secrets update
name: value
args: <Secret Value>
directive: option
optional: false
description: |
  The new value of the Secret.
