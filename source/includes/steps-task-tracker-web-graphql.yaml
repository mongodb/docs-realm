title: Define the GraphQL Schema
ref: define-the-graph-ql-schema
level: 4
content: |
  A GraphQL schema defines all of the types, enums, and scalars that a GraphQL
  API supports. Realm automatically generates a GraphQL schema for you, and you
  can use it to generate useful TypeScript types for your data.

  To get your schema, navigate to the :guilabel:`GraphQL` page in the Realm UI
  and click the :guilabel:`Schema` tab. You should see a generated GraphQL
  schema that matches the schemas you defined earlier.

  Click the :guilabel:`GraphQL Schema` button to download the schema as
  ``schema.graphql``. When the download completes, copy the downloaded schema
  into ``src/realm/``, overwriting the empty ``schema.graphql`` file that's
  already there.
  
  Alternatively, copy the schema from the UI and paste it directly into
  ``/src/realm/schema.graphql``.
---
title: Define GraphQL Operations
ref: define-graphql-operations
level: 4
content: |
  In addition to generating types from a schema file, you can also generate
  functions and GraphQL objects for operations such as queries and mutations.
  You can split operations across multiple files, but in this tutorial we'll
  define all of the CRUD operations that the app uses to work with tasks and
  user documents in a single file.
  
  Open ``/src/realm/operations.graphql`` and paste in the following GraphQL
  operations.
    
  .. literalinclude:: /includes/task-tracker-web-operations.graphql
     :language: graphql
  
  .. note:: Run Operations in GraphiQL
     
     You can run these operations directly in the Realm UI using the GraphiQL
     explorer on the :guilabel:`GraphQL` page. To run them, paste the operations
     into the operations pane and define variables in the variables pane. Then,
     click run and select the operation you want to execute.
     
     .. figure:: /images/task-tracker-web-graphiql.png
        :alt: An example query in the GraphiQL Explorer built in to the UI
---
title: Configure GraphQL Code Generator
ref: configure-graphql-codegen
level: 4
content: |
  Now that we've defined our GraphQL schema and operations, we can use
  `graphql-codegen <https://graphql-code-generator.com/>`__ to automatically
  generate code. This tool is highly configurable and can generate many
  different types of code depending on your needs. In this tutorial, we'll use
  it to generates TypeScript types & React hooks for the schema and operations.
  
  To configure ``graphql-codegen``, open the ``codegen.yml`` file in the project
  root and paste in the following configuration:
  
  .. code-block:: yaml
     :caption: codegen.yml
     
     schema: src/realm/schema.graphql
     documents: src/**/operations.graphql
     overwrite: true
     generates:
       src/types.ts:
         plugins:
           - typescript
           - typescript-operations
       src/graphql-operations.ts:
         preset: import-types
         presetConfig:
           typesPath: ./types
         plugins:
           - typescript-react-apollo
         config:
           apolloReactCommonImportFrom: '@apollo/client'
           apolloReactHooksImportFrom: '@apollo/client'
           withHooks: true
           withComponent: false
           withHOC: false

---
title: Run GraphQL Code Generator
ref: run-graphql-codegen
level: 4
content: |
  Once you've updated ``codegen.yml``, execute the following command in your
  shell to run ``graphql-codegen``:

  .. code-block:: shell
     
     npm run generate
  
  If you've set everything up correctly, this will generate two files:

  - ``src/types.ts``, which includes TypeScript types that reflect your GraphQL
    schema.
  
  - ``src/graphql-operations.ts``, which includes custom Apollo hooks for each
    operation as well as additional helper objects and TypeScript types.
...
