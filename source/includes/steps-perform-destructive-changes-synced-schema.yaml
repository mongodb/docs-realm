title: Initialize Your Partner Collection
ref: initialize-partner-collection
content: |
  Since destructive changes cannot be performed directly on a synced object
  schema, you must create a partner collection with a schema containing the
  required changes. You must ensure that the partner collection has the same 
  data as the original collection so that newer clients can synchronize with 
  older clients.

  The recommended approach to copying the data from your original collection to 
  the new partner collection is to use the :manual:`Aggregation Framework 
  <aggregation/>`. 

  Creating an Aggregation Pipeline
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can create and run an aggregation pipeline from the :manual:`mongo shell </mongo>`,
  by using the :compass:`</aggregation-pipeline-builder/>`, or with the 
  :atlas:`</data-explorer/cloud-agg-pipeline/>`.

  The pipeline will have the following stages:

  1. Match all the documents in the initial collection by passing
     an empty filter to the :manual:`$match operator
     </reference/operator/aggregation/match/>`.

  2. Modify the fields of the initial collection by using an
     :manual:`aggregation pipeline operator </reference/operator/aggregation/>`. In
     the following example, the data is transformed using the :manual:`$addFields
     operator </reference/operator/aggregation/addFields/>`. The ``_id`` field is
     transformed to a ``string`` type with the :manual:`$toString operator
     </reference/operator/aggregation/toString/>`.

  3. Write the transformed data to the partner collection by using the
     :manual:`$out operator </reference/operator/aggregation/out/>` and specifying
     the partner collection name. In this example, we wrote the data to a new
     collection named ``TaskV2``.


  Here the same pipeline as represented in the Atlas and Compass UIs. Note that 
  both of these tools provide a preview of the changes; in this case, the 
  conversion the ``_id`` field from an ObjectId to a string:

  .. figure:: /images/agg-in-atlas.png
     :alt: Atlas UI for Aggregation Builder

  The following example shows the complete aggregation pipeline as it would 
  look if you are using the :manual:`mongo shell </mongo>` to do the conversion:

  .. code-block:: shell
     :caption: Match All Documents in the Initial Collection and Output Them to the Partner Collection 

     use "<database-name>" // switch the current db to the db that the Task collection is stored in
     collection = db.Task;
     collection.aggregate([
       { $match: {} }, // match all documents in the Task collection
       {
         $addFields: { // transform the data
           _id: { $toString: "$_id" }, // change the _id field of the data to a string type
         },
       },
       { $out: "TaskV2" }, // output the data to a partner collection, TaskV2
     ]);

---
title: Set up Database Triggers for Your Partner Collections
ref: set-up-db-triggers-partner-collections
content: |
  Once your partner collection is set up, you can use it to read existing data.
  However, any new writes to the data of *either collection* will not be 
  in the other collection. This causes the old clients to be out of sync with the
  new clients. 

  To ensure that data is reflected in both collections, you set up a
  :ref:`database trigger <create-a-database-trigger>` on each collection. When 
  data is written to one collection, the trigger's function performs the write 
  to the partner collection.

  Follow the steps in the :ref:`database trigger <create-a-database-trigger>`
  documentation to create a trigger that copies data from the ``Task`` collection to
  the ``TaskV2`` collection for all operation types. Repeat these steps to create 
  a second trigger that copies data from the ``TaskV2`` collection to the 
  ``Task`` collection. The following image shows the first trigger being created: 

  .. figure:: /images/trigger-copyTaskObjectToTaskV2.png
     :alt: Create a Database Trigger to Copy Data from Task to TaskV2
     :width: 750px
     :lightbox:

---
title: Add Trigger Functions
ref: add-trigger-funcs
content: |

  Triggers require backing functions that run when the trigger fires. In this 
  case, we need to create two functions: a forward-migration function and a 
  reverse-migration function.

  The forward migration trigger listens for inserts, updates, and deletes in the
  Task collection, modifies them to reflect the TaskV2 collection's schema, and
  then applies them to the TaskV2 collection. 

  To listen for changes to the TaskV2 collection and apply them to the Task 
  collection, write a reverse-migration function for the TaskV2 collection's
  trigger. The reverse migration follows the same idea as the previous step.

  In the forward-migration function, we check which operation has triggered the 
  function: if the operation type is ``Delete`` (meaning a document
  has been deleted in the Task collection), the document is also deleted in the 
  TaskV2 collection. If the operation type is a ``Write`` (inserted or modified) 
  event, an aggregation pipeline is created. In the pipeline, the inserted or 
  modified document in the Task collection is extracted using the 
  :manual:`$match operator </reference/operator/aggregation/match/>`. The 
  extracted document is then transformed to adhere to the 
  ``TaskV2`` collection's schema. Finally, the transformed data is written to the 
  ``TaskV2`` collection by using the 
  :manual:`$merge operator </reference/operator/aggregation/merge/>`:

  .. literalinclude:: /examples/generated/functions/copyTaskObjectToTaskV2.codeblock.copyTaskObject.js
     :language: javascript
     :caption: copyTaskObjectToTaskV2 function

  The reverse-migration function goes through similar steps as the example in the
  prior step. If a document has been deleted in one collection, the document is
  also deleted in the other collection. If the operation type is a write event,
  the changed document from ``TaskV2`` is extracted, transformed to match the 
  Task collection's schema, and written into the ``Task`` collection:

  .. literalinclude:: /examples/generated/functions/copyTaskV2ObjectToTask.codeblock.copyTaskV2Object.js
     :language: javascript
     :caption: copyTaskV2ObjectToTask function
