title: Pull Your Realm Application
ref: export-your-realm-application
content: |
  To create new function with :doc:`realm-cli
  </deploy/realm-cli-reference>`, you need a previously created
  :ref:`application configuration <application-directory>`.

  You can :doc:`pull </deploy/export-realm-app>` your application from the
  :guilabel:`Import/Export App` tab of the :guilabel:`Deploy` page in the
  {+ui+}, or by running the following command from an authenticated instance of
  :doc:`realm-cli </deploy/realm-cli-reference>`:

  .. code-block:: shell

     realm-cli pull --app-id=<App ID>
---
title: Add to the Function Configuration File
ref: add-a-function-configuration-file
content: |
  In the ``functions`` directory of your application, open the ``config.json`` 
  file and add an object to the array that describes your new function. The
  object must have the following form:

  .. code-block:: json

          {
            "name": "<Function Name>",
            "private": <Boolean>,
            "can_evaluate": { <JSON Expression> },
            "disable_arg_logs": <Boolean>,
            "run_as_system": <Boolean>,
            "run_as_user_id": "<Realm User ID>",
            "run_as_user_id_script_source": "<Function Source Code>"
          }

  For more information about the properties of the function configuration object, 
  see :ref:`Function Configuration Files <appconfig-functions>`.

---
title: Configure Your Function
ref: configure-your-function
content: |

  Set User Authentication
  =======================

  Functions in {+service+} always execute in the context of a specific
  application user or as a :ref:`system user <system-user>` (which
  bypasses rules). To configure the function's execution user, specify
  the type of authentication that {+service-short+} should use:

  - **System**
    
    To execute a function as a System user, use the following configuration:

   .. code-block:: json
      
      {
        "run_as_system": true,
        "run_as_user_id": "",
        "run_as_user_id_script_source": "",
      }

  - **User**

    To execute a function as a specific user, use the following configuration:

      .. code-block:: json
        
        {
          "run_as_system": false,
          "run_as_user_id": "<Realm User Id>",
          "run_as_user_id_script_source": "",
        }

  - **Script**

      The third way to execute a function is to specify another function that 
      returns a user id. Your function will execute as this user. To do this, 
      use the following configuration:

        .. code-block:: json
      
           {
             "run_as_system": false,
             "run_as_user_id": "",
             "run_as_user_id_script_source": "<Function Source Code>",
           }


  Set Execution Logging
  =====================

  To include any values that the function receives as arguments in its
  :doc:`log entry </logs/function>`, set ``disable_arg_logs`` to
  ``false``.

  Specify an Authorization Expression
  ===================================

  You can dynamically authorize requests based on the contents of each
  request by defining a :guilabel:`Can Evaluate` :doc:`JSON expression
  </services/json-expressions>`. {+backend+} evaluates the expression
  whenever the function is called. If you do not specify an expression
  then {+backend+} automatically authorizes all authenticated incoming
  requests.

  The expression can expand standard :doc:`expression variables
  </services/expression-variables>`, including the
  :json-expansion:`%%request` and :json-expansion:`%%user` expansions.

  .. example::
     
     The following expression only authorizes incoming requests if the
     sender's IP address is not included in the specified list of addresses.
     
     .. code-block:: json
        
        {
            "%%request.remoteIPAddress": {
                "%nin": [
                    "248.88.57.58",
                    "19.241.23.116",
                    "147.64.232.1"
                ]
            }
        }

  Configure the Function's Privacy Level
  ======================================

  By default, you can call a function from client applications as well
  as other functions in the same application. You can prevent client
  applications from seeing or calling a function by setting ``private``
  to ``true``.

  You can still call a private function from :doc:`JSON expressions
  </services/json-expressions>` and other functions, including incoming
  webhooks and triggers.

---
title: Write the Function Code
ref: write-the-function-code
content: |
  Once you've created and configured the new function, it's time to
  write the actual javascript code that runs when you :doc:`call the
  function </functions/call-a-function>`.

  Create a subdirectory whose name matches the name of the function you 
  specified in the configuration file, and then add a file named ``source.js``
  to the new function directory. This file contains the javascript code for the 
  function.

  .. note::

     You can use most modern (ES6+) JavaScript features in functions,
     including async/await, destructuring, and template literals.
---
title: Push the Function
ref: import-the-function
content: |
  Once you've configured the function and written the source code, all
  that's left is to push the function to {+service-short+}.

  A. Ensure that your changes to ``config.json`` and ``source.js`` are saved.

  #. Navigate to the root of your application directory.

  #. Log in to MongoDB `{+atlas+} <https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ 
     with {+cli-bin+}:

     .. code-block:: shell

        realm-cli login --api-key="<my api key>" --private-api-key="<my private api key>"

  #. Push the directory:

     .. code-block:: shell

        realm-cli push

  Once you have pushed the function, you can begin using it immediately.

  For more information on using the function, see
  :doc:`/functions/call-a-function`.
