title: Pull Your App's Latest Configuration Files
ref: pull-your-apps-latest-configuration-files
content: |
  .. code-block:: shell

     realm-cli pull --remote=<App ID>
---
title: Write the Function Source Code
ref: write-the-function-source-code
content: |
  Realm functions run standard ES6+ JavaScript functions that you export from
  individual files. Create a ``.js`` file with the same name as the function in
  the ``functions`` directory or one of its subdirectories.
  
  .. code-block:: bash
     
     touch functions/myFunction.js
  
  .. tip::
     
     You can define functions inside of nested folders in the
     ``functions`` directory. Use slashes in a function name to indicate
     its directory path.
  
  Once you've created the function's ``.js`` file, write the function source code, e.g.:

  .. code-block:: javascript
     
     exports = async function hello(...args) {
       // Write your function logic here! You can...
       // Import dependencies
       const assert = require("assert")
       assert(typeof args[0] === "string")
       // Use ES6+ syntax
       const sayHello = (name = "world") => {
         console.log(`Hello, ${name}.`)
       }
       // Return values back to clients or other functions
       return sayHello(args[0])
     }
  
  .. note::
     
     You can use most modern (ES6+) JavaScript features in functions, including
     async/await, destructuring, and template literals. To see if Realm supports
     a specific feature, see :ref:`JavaScript Support <js-support>`.
---
title: Configure the Function
ref: configure-the-function
content: |
  In the ``functions`` directory of your application, open the ``config.json``
  file and add a :ref:`configuration object <appconfig-functions>` for your new
  function to the array. The object must have the following form:
  
  .. code-block:: json

     {
       "name": "<Function Name>",
       "private": <Boolean>,
       "can_evaluate": { <JSON Expression> },
       "disable_arg_logs": <Boolean>,
       "run_as_system": <Boolean>,
       "run_as_user_id": "<Realm User ID>",
       "run_as_user_id_script_source": "<Function Source Code>"
     }

  Set User Authentication
  =======================

  Functions in {+service+} always execute in the context of a specific
  application user or as a :ref:`system user <system-user>` (which
  bypasses rules). To configure the function's execution user, specify
  the type of authentication that {+service-short+} should use:

  - **System**
    
    To execute a function as a System user, use the following configuration:

    .. code-block:: json
       
       {
         "run_as_system": true,
         "run_as_user_id": "",
         "run_as_user_id_script_source": ""
       }

  - **User**

    To execute a function as a specific user, use the following configuration:

    .. code-block:: json
       
       {
         "run_as_system": false,
         "run_as_user_id": "<Realm User Id>",
         "run_as_user_id_script_source": ""
       }

  - **Script**

    The third way to execute a function is to specify another function that 
    returns a user id. Your function will execute as this user. To do this, 
    use the following configuration:

    .. code-block:: json
       
       {
         "run_as_system": false,
         "run_as_user_id": "",
         "run_as_user_id_script_source": "<Function Source Code>"
       }

  Set Execution Logging
  =====================
  
  To include any values that the function receives as arguments in its
  :doc:`log entry </logs/function>`, set ``disable_arg_logs`` to
  ``false``.

  Specify an Authorization Expression
  ===================================

  You can dynamically authorize requests based on the contents of each request
  by defining a :guilabel:`Can Evaluate` :ref:`expression <expressions>`.
  {+backend+} evaluates the expression whenever the function is called. If you
  do not specify an expression then {+backend+} automatically authorizes all
  authenticated incoming requests.

  The expression can expand standard :ref:`expression variables <expressions>`,
  including the :json-expansion:`%%request` and :json-expansion:`%%user`
  expansions.

  .. example::
     
     The following expression only authorizes incoming requests if the
     sender's IP address is not included in the specified list of addresses.
     
     .. code-block:: json
        
        {
            "%%request.remoteIPAddress": {
                "$nin": [
                    "248.88.57.58",
                    "19.241.23.116",
                    "147.64.232.1"
                ]
            }
        }

  Configure the Function's Privacy Level
  ======================================

  By default, you can call a function from client applications as well
  as other functions in the same application. You can prevent client
  applications from seeing or calling a function by setting ``private``
  to ``true``.

  You can call a private function from a :ref:`rule expression <expressions>`
  or another function, including HTTPS endpoints and triggers.
---
title: Deploy the Function
ref: deploy-the-function
content: |
  Push the function configuration and source code to deploy it to your app. Once
  you have pushed the function, you can begin using it immediately.
  
  .. code-block:: shell
     
     realm-cli push

  For more information on using the function, see
  :doc:`/functions/call-a-function`.
