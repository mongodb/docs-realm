title: Create an App ID
ref: create-an-app-id
content: |
   An Apple **App ID** represents your application and allows you to
   access services like Sign in with Apple. To configure the Apple ID
   provider, you must create a new App ID.
   
   1. Navigate to the :guilabel:`Certificates, Identifiers and Profiles`
      page of the `Apple Developer Portal
      <https://developer.apple.com/account>`_.

   2. Click :guilabel:`Identifiers` in the {+leftnav+}.

   3. Click the blue plus icon next to :guilabel:`Identifiers`.

   4. On the :guilabel:`Register a New Identifier` page, select
      :guilabel:`App IDs` and then click :guilabel:`Continue`.

   5. On the :guilabel:`Register an App ID` page, select
      the :guilabel:`Platform` that your app runs on and then enter a
      brief :guilabel:`Description` and a :wikipedia:`reverse-dns
      notation <Reverse_domain_name_notation>` :guilabel:`Bundle ID`.
   
   6. Scroll down the :guilabel:`Register an App ID` page until you see
      the :guilabel:`Sign in with Apple` capability. Check the checkbox
      to enable the capability.
---
title: Create a Services ID
ref: create-a-services-id
content: |
   An Apple **Services ID** represents a single application and allows
   you to configure an authorization callback URL and define a private
   key for the application.

   1. Click :guilabel:`Identifiers` in the {+leftnav+}.

   2. Click the blue plus icon next to :guilabel:`Identifiers`.

   3. On the :guilabel:`Register a New Identifier` page, select
      :guilabel:`Services IDs` and then click :guilabel:`Continue`.

   4. On the :guilabel:`Register a Services ID` page, enter a brief
      :guilabel:`Description` and a :wikipedia:`reverse-dns notation
      <Reverse_domain_name_notation>` :guilabel:`Identifier`.

      .. important:: Save the Identifier
         
         The :guilabel:`Identifier` value of the Services ID is your
         application's :guilabel:`Client ID`. You will need this value
         later to configure the Apple ID provider in {+service-short+}.

   5. Check the checkbox to enable :guilabel:`Sign in with Apple` and
      then click :guilabel:`Configure`. Select the App ID that you
      created as the :guilabel:`Primary App ID`.
   
   6. Click :guilabel:`Save` and then click :guilabel:`Continue`.
      Confirm that you have correctly configured the Services ID and
      then click :guilabel:`Register`.
---
title: Create a Private Key
ref: create-a-private-key
content: |
   The client secret for Sign in with Apple is a JSON Web Token that you
   create and sign with a **private key**. You need to generate the
   private key through the Apple Developer Portal.
   
   1. Click :guilabel:`Keys` in the {+leftnav+}.
   
   2. Click the blue plus icon next to :guilabel:`Keys`.
   
   3. On the :guilabel:`Register a New Key` page, enter a descriptive
      :guilabel:`Key Name` and then scroll down to find the
      :guilabel:`Sign in with Apple` row. Check the checkbox to enable
      Sign in with Apple and then click :guilabel:`Configure`.
   
   4. On the :guilabel:`Configure Key` page, select the App ID that you
      created as the :guilabel:`Primary App ID` and then click
      :guilabel:`Save`.
      
      .. figure:: /images/apple-auth-configure-key.png
         :alt: The Configure Key page in the Apple Developer Portal
   
   5. Click :guilabel:`Continue` to review your key configuration. When
      you're sure that you've configured the key correctly, click
      :guilabel:`Register`.
   
   6. Copy the :guilabel:`Key ID` value somewhere that you can access it
      later and then click :guilabel:`Download` to download the key as a
      ``.p8`` text file. You will use these to generate the client
      secret.
      
      .. important:: Save the Key
         
         You can only download the key one time. Make sure that you save
         the key somewhere safe in case you need it again. If you lose
         the key, you will need to generate a new one.
---
title: Create the Client Secret JWT
ref: create-the-client-secret-jwt
content: |
   You can now create the client secret JWT for the Apple ID
   authentication provider. Make sure that you have the following
   information:
   
   - The :guilabel:`Services ID` that you created.
   
   - The :guilabel:`Key ID` of the key that you created and the ``.p8``
     file that contains the key.
   
   - Your Apple Team ID. You can find this in the top right of the Apple
     Developer Portal.
     
     .. figure:: /images/apple-team-id.png
        :alt: An Apple team ID in the Apple Developer Portal
   
   Once you've confirmed that you have all the required information, you can use
   a script to generate the JWT. You may define your own script or use the
   script in this step.
   
   To generate the JWT, we'll use the :rubygems:`jwt <gems/jwt>` gem. To install
   it, run the following:
   
   .. code-block:: shell
      
      gem install jwt
   
   Create a new file called ``generate_client_secret.rb`` and copy the following
   code block into the file.
   
   .. code-block:: ruby
      
      # Source: https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple
      require 'jwt'
      
      # Update these values with your app's information
      team_id = '<Apple Team ID>'
      client_id = '<Apple Services ID>'
      key_id = '<Key ID>'
      key_file = '<Key File Path>'
      
      # Define the JWT's headers and claims
      headers = {
        # The token must be signed with your key
        'kid' => key_id
      }
      claims = {
        # The token is issued by your Apple team
        'iss' => team_id,
        # The token applies to Apple ID authentication
        'aud' => 'https://appleid.apple.com',
        # The token is scoped to your application
        'sub' => client_id,
        # The token is valid immediately
        'iat' => Time.now.to_i,
        # The token expires in 6 months (maximum allowed)
        'exp' => Time.now.to_i + 86400*180,
      }
      
      # Read in the key and generate the JWT
      ecdsa_key = OpenSSL::PKey::EC.new IO.read key_file
      token = JWT.encode claims, ecdsa_key, 'ES256', headers
      
      # Print the JWT to stdout
      puts token
   
   Update the values of ``team_id``, ``client_id``, ``key_id``, and
   ``key_file`` to match your application's information and then save
   the file. When you're ready to generate the JWT, run the script in
   your shell:
   
   .. code-block:: shell
      
      ruby generate_client_secret.rb >> client_secret.txt
   
   .. important:: Save the JWT
      
      The ``generate_client_secret.rb`` script saves the JWT string to a
      file called ``client_secret.txt``. You will need the JWT to
      configure the Apple ID provider in {+service-short+}.
---
title: Configure the Provider in Realm
ref: configure-the-provider-in-realm
content: |
   At this point you have configured an Apple application and generated
   the required OAuth 2.0 credentials. You can now configure the Apple
   ID authentication provider with the credentials to allow {+service-short+}
   client application users to log in.

   .. tabs-realm-admin-interfaces::
      
      .. tab::
         :tabid: ui
         
         1. Click :guilabel:`Authentication` in the {+leftnav+} and
            then click :guilabel:`Apple ID`.
         
         2. Turn on the :guilabel:`Provider Enabled` toggle.
         
         3. For :guilabel:`Client ID`, enter the :guilabel:`Services ID`
            that you created.
         
         4. For :guilabel:`Client Secret`, create a new :ref:`secret
            <app-secret>` with a descriptive name and set the
            :guilabel:`Client Secret Value` to the JWT string that you
            generated. Alternatively, you can select a pre-existing
            secret that contains the JWT.
         
         5. For :guilabel:`Redirect URIs`, click :guilabel:`Add Redirect
            URI` and enter the URL that {+service-short+} should redirect to once
            the OAuth process is complete. Provide a URL for a domain
            that you control and then use a `universal link
            <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
            to redirect the user back to your app.

         6. Click :guilabel:`Save` to finish configuring the provider.
            To make the provider available to client applications, you
            need to deploy your changes. Click :guilabel:`Review &
            Deploy Changes` and then click :guilabel:`Deploy`.
      
      .. tab::
         :tabid: cli
         
         Create a configuration file for the provider in your exported
         application directory at the path
         ``/auth_providers/oauth2-apple.json``. The configuration file
         should have the following form:
         
         .. code-block:: none
            :caption: /auth_providers/oauth2-apple.json
            
            {
              "name": "oauth2-apple",
              "type": "oauth2-apple",
              "disabled": <boolean>,
              "config": {
                "clientId": "<Apple Services ID>"
              },
              "secret_config": {
                "clientSecret": "<Secret Name>"
              },
              "redirect_uris": ["<string>", ...]
            }
         
         .. list-table::
            :header-rows: 1
            :widths: 15 30
         
            * - Field
              - Description
         
            * - :guilabel:`Client ID`
         
                | *config.clientId*
         
              - Required. The :guilabel:`Services ID` that you created.
         
            * - :guilabel:`Client Secret`
         
                | *secret_config.clientSecret*
         
              - Required. The name of a :ref:`Secret <app-secret>` that stores
                the :guilabel:`Client Secret` JWT that you generated.
         
            * - :guilabel:`Redirect URIs`
         
                | *redirect_uris*
         
              - Required for web applications.
                A list of allowed redirect :abbr:`URIs (Uniform Resource
                Identifiers)`.
         
                Once a user completes the authentication process,
                {+service-short+} redirects them back to either a specified redirect URI or,
                if no redirect URI is specified, the URL that they initiated the
                authentication request from. {+service-short+} will only redirect a user to
                a URI that exactly matches an entry in this list, including the
                protocol and any trailing slashes.

                Provide a URL for a domain that you control and then use
                a `universal link
                <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
                to redirect the user back to your app.

         Once you've created the configuration file, you can make the
         Apple ID authentication provider available to client
         applications by deploying your application.
  
         To deploy a draft application with Realm CLI:
       
         .. code-block:: shell
       
            realm-cli import
         
         To deploy a draft application with automatic :doc:`GitHub deployment
         </deploy/deploy-automatically-with-github>`:
       
         .. code-block:: shell
       
            git add ./auth_providers/oauth2-apple.json
            git commit -m "Configure and Enable Apple ID Authentication"
            git push origin <branch name>
...
