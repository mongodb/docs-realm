title: Select a Cluster to Sync
ref: select-a-cluster-to-sync
content: |
  You can enable sync for a single :term:`linked cluster` in your application.
  If you have not yet linked the cluster to your application, follow the
  :ref:`link-a-data-source` guide to link it before
  you continue.

  You'll need the cluster's service configuration file to configure sync. You
  can find the configuration file by listing all services through the Admin API:

  .. code-block:: shell
     
     curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services \
       -X GET \
       -h 'Authorization: Bearer <Valid Access Token>'

  Once you have the configuration, add the ``config.sync`` field with the
  following template configuration:

  .. code-block:: json
     
     {
       "config": {
         "sync": {
           "state": "enabled",
           "partition": {
             "key": "<Partition Key Field>",
             "type": "<Partition Key Type>",
             "permissions": {
               "read": {},
               "write": {}
             }
           }
         },
         ...
       },
       ...
     }

  .. seealso:: :admin-api-endpoint:`Admin API: List All Services <get-/groups/{groupid}/apps/{appid}/services>`
---
title: Choose a Partition Key
ref: choose-a-partition-key
content: |
  The sync :term:`partition key` is a field in every synced document that maps
  each document to a client-side realm. Sync rules apply at the partition level,
  so it's particularly important to consider your data model and access
  patterns. For more information on partition keys and how to choose one, see
  :ref:`Partition Atlas Data into Realms <partitioning>`.

  You can get a list of all valid partition keys and their corresponding types
  through the Admin API:

  .. code-block:: shell
     
     curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/sync/data?service_id=<MongoDB Service ID> \
       -X GET \
       -h 'Authorization: Bearer <Valid Access Token>'
       
  .. note::
    
    The partition key can either be required or optional. If the partition key 
    field is optional, then all MongoDB documents that either exclude the 
    partition key or have a null value for the partition key will be sent to the 
    :term:`null partition`. If the partition key field is required, {+sync+} 
    ignores any MongoDB documents that lack a valid value for the partition 
    key. We recommend a required partition key unless you want to sync
    pre-existing data with invalid or missing partition values from a
    MongoDB collection.

  Once you have decided which field to use, update ``config.sync.partition``
  with the partition key field name in the ``key`` field and the partition key
  type in the ``type`` field.

  .. code-block:: json
     :emphasize-lines: 6, 7

     {
       "config": {
         "sync": {
           "state": "enabled",
           "partition": {
             "key": "owner_id",
             "type": "string",
             "permissions": {
               "read": {},
               "write": {}
             }
           }
         },
         ...
       },
       ...
     }

  .. seealso:: :admin-api-endpoint:`Admin API: List Valid Partition Keys <get-/groups/{groupid}/apps/{appid}/sync/data>`
---
title: Define Read & Write Permissions
ref: define-read-write-permissions
content: |
  Realm allows you to define :ref:`JSON expressions <expressions>` that it
  dynamically evaluates whenever a user opens a realm to determine if the user
  has read or write permissions for data in the partition.

  Sync rule expressions have access to :json-expansion:`%%user`, which resolves
  to the user that opened the realm, and :json-expansion:`%%partition`, which
  resolves to the partition key value for the realm. You can also use operators,
  including :json-operator:`%function`, to handle more complex cases. For
  examples, see :ref:`Define Sync Permissions <define-sync-permissions>`.

  Once you've determined how to decide a user's read and write permissions for a
  given partition, define the corresponding JSON expressions in the
  ``read`` and ``write`` fields of ``config.sync.partition.permissions``.

  .. code-block:: json
     :emphasize-lines: 9-14, 15-17

     {
       "config": {
         "sync": {
           "state": "enabled",
           "partition": {
             "key": "owner_id",
             "type": "string",
             "permissions": {
               "read": {
                 "$or": [
                   { "%%user.id": "%%partition" },
                   { "%%user.custom_data.shared": "%%partition" }
                 ]
               },
               "write": {
                 "%%user.id": "%%partition"
               }
             }
           }
         },
         ...
       },
       ...
     }
---
title: Deploy the Sync Configuration
ref: deploy-the-sync-configuration
content: |
  Now that you've defined the sync configuration, including read and write
  permissions, you can deploy your changes to start syncing data and enforcing
  sync rules.

  To deploy your changes, send an Admin API request that updates the cluster
  configuration with your sync configuration:

  .. code-block:: shell
     
     curl https://realm.mongodb.com/api/admin/v3.0/groups/{GROUP_ID}/apps/{APP_ID}/services/{MongoDB_Service_ID}/config \
       -X PATCH \
       -h 'Authorization: Bearer <Valid Access Token>' \
       -d '{"sync":{"state":"enabled","database_name":"","partition":{"key":"_partition","type":"string","permissions":{"read":{"$or":[{"%%user.id":"%%partition"},{"%%user.custom_data.shared":"%%partition"}]},"write": {"%%user.id": "%%partition"}}}}'

  .. seealso:: :admin-api-endpoint:`Admin API: Update a Service Configuration <patch-/groups/{groupid}/apps/{appid}/services/{serviceid}/config>`
