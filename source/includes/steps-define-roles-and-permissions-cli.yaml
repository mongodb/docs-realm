title: Pull the Latest Version of Your App
ref: pull-the-latest-version-of-your-app
content: |
  To define roles and permissions for a collection with {+cli-bin+}, you need a
  local copy of your application's configuration files.
  
  To pull a local copy of the latest version of your app, run the following:
  
  .. code-block:: bash
     
     realm-cli pull --remote="<Your App ID>"
  
  .. tip::
     
     You can also download a copy of your application's configuration files from
     the :guilabel:`Deploy > Export App` screen in the {+ui+}.
---
title: Add a Rule Configuration File
ref: add-a-rule-configuration-file
content: |
  To define or modify roles for a collection, open the ``rules.json``
  configuration file within the collection's configuration directory.
  
  .. tip:: Scaffold the Collection
     
     If you haven't already defined rules or a schema for the collection, you
     need to manually create its configuration directory and ``schema.json``:

     .. code-block:: bash
        
        # Create the collection's configuration directory
        mkdir -p data_sources/<service>/<db>/<collection>
        # Create the collection's schema file
        echo '{}' >> data_sources/<service>/<db>/<collection>/rules.json
  
  The configuration file should have the following general form:
  
  .. code-block:: json
  
     {
       "database": "<Database Name>",
       "collection": "<Collection Name>",
       "roles": [],
       "filters": []
     }

  .. note::
     
     This guide focuses on creating ``roles`` for the collection. Check out the
     other configuration guides to learn how to :doc:`create filters
     </mongodb/filter-incoming-queries>` and :ref:`enforce-a-schema`.
---
title: Add One or More Roles
ref: add-one-or-more-roles
content: |
  Add a document to the ``roles`` array for each role that you want to
  configure. Role documents have the following form:
  
  .. code-block:: javascript
  
     {
       "name": "<Role Name>",
       "apply_when": <JSON Expression>,
       "insert": <boolean>,
       "delete": <boolean>,
       "read": <boolean>,
       "write": <boolean>,
       "search": <boolean>,
       "fields": {
         "<Field Name>": {
           "read": <boolean>,
           "write": <boolean>
         },
         ...
       },
       "additional_fields": {
         "read": <boolean>,
         "write": <boolean>
       }
     }

  .. list-table::
     :header-rows: 1
     :widths: 15 40

     * - Field
       - Description

     * - ``name``
       - Required. The name of the role. Limited to 100 characters or
         fewer.

     * - ``apply_when``
       - Required. A :ref:`rule expression <expressions>` that determines when
         this role applies to a given document.

     * - ``insert``
       - Optional. Default: ``true``. A boolean that, if ``true``,
         indicates that the role has permission to insert a new
         document. This document-level permission does not override any
         field-level permissions configured in ``fields``, i.e. the role
         must have permission to write to all inserted fields in
         addition to insert permission.

     * - ``delete``
       - Optional. Default: ``true``. A boolean that, if ``true``,
         indicates that the role has permission to delete a new
         document.

     * - ``search``
       - Optional. Default: ``true``. A boolean that, if ``true``,
         indicates that the role has permission to access the document in a
         :atlas:`$search </reference/atlas-search/query-syntax/>` aggregation.

     * - ``read``
       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that the role has permission to read *all* fields in
         a document. This document-level read permission overrides any
         field-level permissions configured in ``fields``.

     * - ``write``
       - Optional. Default: ``false``. A boolean that, if ``true``,
         indicates that the role has permission to write to *all* fields
         in a document. Further, write permissions require matching read
         permissions, so if this is ``true``, then ``read`` is also
         ``true``. These document-level read and write permissions
         override any field-level permissions configured in ``fields``.

     * - ``fields``
       - Required. A document where each field matches the name of a
         field in a collection document. The value of each field is a
         document that specifies read and write permissions for the
         field.

         .. example::

            .. code-block:: javascript

               "fields": {
                 "id": {
                    "read": true,
                    "write": false
                 },
               }

     * - ``additional_fields``
       - Optional. Default: ``{ "read": false, "write": false }``. A
         document that specifies the role's default read and write
         permissions for any fields that are not explicitly defined.

         .. code-block:: javascript

            "additional_fields": {
                 "read": true,
                 "write": false
            }
---
title: Deploy the Updated Rules
ref: deploy-the-updated-rules
content: |
  Once you've defined and saved ``rules.json`` you can push the updated config
  to your remote app. {+cli+} immediately deploys the new roles and permissions
  on push.
  
  .. code-block:: bash
     
     realm-cli push --remote="<Your App ID>"
