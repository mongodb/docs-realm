title: Pull the Latest Version of Your App
ref: pull-the-latest-version-of-your-app
content: |
  To define an incoming endpoint with {+cli-bin+}, you need a local copy of your
  application's configuration files.

  To pull a local copy of the latest version of your app, run the following:

  .. code-block:: bash
     
     realm-cli pull --remote="<Your App ID>"

  .. tip::
     
     You can also download a copy of your application's configuration files from
     the :guilabel:`Deploy > Export App` screen in the {+ui+}.
---
title: Add a Endpoint Configuration Directory
ref: add-a-endpoint-configuration-directory
content: |
  Create a new subdirectory with the same name as the endpoint in
  ``/http_endpoints/<service>/incoming_endpoints/``:

  .. code-block:: shell

     mkdir -p http_endpoints/<service>/incoming_endpoints/<endpoint name>
---
title: Add a Endpoint Configuration File
ref: add-a-endpoint-configuration-file
content: |
  Add an :ref:`incoming endpoint configuration file <config-incoming-endpoints>`
  named ``config.json`` to the new endpoint directory.

  The configuration file should have the following form:

  .. code-block:: json
     :caption: http_endpoints/<Service Name>/incoming_endpoints/<Endpoint Name>/config.json
     
     {
       "name": "<Endpoint Name>",
       "can_evaluate": { <JSON Expression> },
       "run_as_authed_user": <Boolean>,
       "run_as_user_id": "<Realm User ID>",
       "run_as_user_id_script_source": "<Function Source Code>",
       "respond_result": <Boolean>,
       "fetch_custom_user_data": <Boolean>,
       "create_user_on_auth": <Boolean>,
       "options": {
         "httpMethod": "<HTTP Method>",
         "validationMethod": "<Endpoint Validation Method>",
         "secret": "<Endpoint Secret>"
       }
     }
---
title: Name the New Endpoint
ref: name-the-new-endpoint
content: |
  Enter a name for the endpoint in the configuration file's ``name``
  field. This name must be distinct from any other endpoints that you've
  created for the service.

  .. code-block:: json
     
     {
       "name": "<Unique Endpoint Name>"
     }
---
title: Configure User Authentication
ref: configure-user-authentication
content: |
  Specify the type of authentication that Realm should use for the
  endpoint. Realm supports the following endpoint authentication methods:

  .. list-table::
     :widths: 20 80
     :header-rows: 1
     
     * - Authentication Method
       - Description
     
     * - Application Authentication
       - This type of authentication configures a endpoint to run in the
         context of an existing application user specified by each
         incoming request. Incoming requests must include the user's
         :doc:`authentication provider </authentication/providers>`
         credentials in either the request body or the request headers.

         To configure a endpoint to use application authentication, set
         the value of ``run_as_authed_user`` to ``true``:

         .. code-block:: json
            
            {
              "run_as_authed_user": true,
              "run_as_user_id": "",
              "run_as_user_id_script_source": "",
            }

         .. example::
         
            The following examples demonstrate the field names and
            values that incoming requests should include as body or
            header fields for each supported authentication provider:

            .. tabs-realm-auth-providers::
               
               .. tab::
                  :tabid: local-userpass
                  
                  .. code-block:: json
                        
                     {
                       "email": "<User's Email Address>",
                       "password": "<User's Password>"
                     }
               
               .. tab::
                  :tabid: api-key
                  
                  .. code-block:: json
                        
                     {
                       "api-key": "<User's API Key>"
                     }
               
               .. tab::
                  :tabid: custom-token
                  
                  .. code-block:: json
                        
                     {
                       "jwtTokenString": "<User's JWT Token>"
                     }
            
            .. important:: Do Not Use Both Headers and Body Fields
               
               If a request includes credentials in both the request
               headers and the request body, then Realm throws an error
               and does not execute the function.
     
     * - System
       - This type of authentication configures a endpoint to run as the
         :ref:`system user <system-user>`, which has full
         access to MongoDB CRUD and Aggregation APIs and is
         not affected by any rules, roles, or permissions.

         To configure a endpoint to run as a system user, do not set any
         other authentication fields:

         .. code-block:: json
            
            {
              "run_as_authed_user": false,
              "run_as_user_id": "",
              "run_as_user_id_script_source": "",
            }
     
     * - User ID
       - This type of authentication configures a endpoint to always run
         as a specific application user.

         To configure a endpoint to always run as a specific user, set
         ``run_as_user_id`` to the user's id:

         .. code-block:: json
            
            {
              "run_as_authed_user": false,
              "run_as_user_id": "<Realm User ID>",
              "run_as_user_id_script_source": "",
            }
     
     * - Script
       - This type of authentication configures a endpoint to run as a
         specific application user determined based on the result of a
         custom :doc:`function </functions>` that you define. The
         function must return a specific user's ``id`` string or can
         specify a system user by returning ``{ "runAsSystemUser":
         true}``.

         To configure a endpoint to run as a user determined by a
         function, set ``run_as_user_id_script_source`` to the
         stringified function code:

         .. code-block:: json
            
            {
              "run_as_authed_user": false,
              "run_as_user_id": "",
              "run_as_user_id_script_source": "<Stringified Function>",
            }
---
title: Specify the Endpoint's HTTP Method
ref: specify-the-endpoints-http-method
content: |
  You can require that incoming requests use a specific :mdn:`HTTP
  method <Web/HTTP/Methods>` or you can accept all HTTP methods and
  handle each one individually in the endpoint function by inspecting the
  ``httpMethod`` property on the :ref:`context.request
  <context-request>` object, as in the following example function:

  .. include:: /services/examples/endpoint-http-method-handler.rst

  To specify a endpoint method, set the ``options.httpMethod`` field to
  the name of the method using all capital letters or ``"ANY"``.

  .. code-block:: json
     
     {
       "options": {
         "httpMethod": "POST"
       }
     }
---
title: Configure the Endpoint Response
ref: configure-the-endpoint-response
content: |
  You can send a configurable :mdn:`HTTP Response
  <Web/HTTP/Messages#HTTP_Responses>` to external services that call the
  endpoint. To configure the endpoint to send a response to incoming
  requests, set ``respond_result`` to ``true``.

  If you enable :guilabel:`Respond With Result`, the endpoint will
  respond to incoming requests with a basic :mdn:`HTTP 200
  <Web/HTTP/Status/200>` response that includes the endpoint function
  return value as its ``body`` field. You can configure a custom HTTP
  response from within the endpoint function using the ``response``
  object that Realm automatically passes as the second argument.
---
title: Specify an Authorization Expression
ref: specify-an-authorization-expression
content: |
  You can dynamically authorize requests based on the contents of each request
  by defining a :guilabel:`Can Evaluate` :ref:`expression <expressions>`. Realm
  evaluates the expression for every incoming request that the endpoint receives.
  The expression can expand standard :ref:`expression variables <expressions>`,
  including the :json-expansion:`%%request` expansion.

  To define an authorization expression, set the value of the
  ``can_evaluate`` field to the expression. If you do not specify an
  expression then Realm automatically authorizes all authenticated
  incoming requests.

  .. example::
     
     The following expression only authorizes incoming requests if the
     sender's IP address is not included in the list of addresses.

     .. code-block:: json
        
        {
            "%%request.remoteIPAddress": {
                "%nin": [
                    "248.88.57.58",
                    "19.241.23.116",
                    "147.64.232.1"
                ]
            }
        }
---
title: Specify the Request Validation Method
ref: specify-the-request-validation-method
content: |
  To validate that a endpoint request was sent from a trusted source,
  some external services require that incoming requests incorporate a
  secret string in one of several prescribed manners. Other services,
  like the :doc:`HTTP service </services/http>`, allow you to optionally
  require request validation.

  You can configure a endpoint's request authorization method in the
  ``options`` document of the endpoint configuration. Realm supports the
  following :ref:`request validation methods
  <endpoint-request-validation>`:

  .. list-table::
     :header-rows: 1
     :widths: 30 70

     * - Method
       - Description
       
     * - No Additional Authorization
       - Incoming endpoint requests do not require additional
         authorization.

         .. code-block:: json
            
            {
              "validationMethod": "NO_VALIDATION"
            }
       
     * - Verify Payload Signature
       - Incoming endpoint requests must include a hashed signature of
         the request body and a secret value. For details, refer to
         :ref:`Payload Signature Verification
         <endpoint-verify-payload-signature>`.

         .. code-block:: json
            
            {
              "validationMethod": "VERIFY_PAYLOAD",
              "secret": "<Secret Value>"
            }
       
     * - Require Secret
       - Incoming endpoint requests must include a secret string value as
         the ``secret`` query parameter in the endpoint URL. For details,
         refer to :ref:`Secret as a Query Parameter
         <endpoint-secret-query-parameter>`.

         .. code-block:: json
            
            {
              "validationMethod": "SECRET_AS_QUERY_PARAM",
              "secret": "<Secret Value>"
            }
---
title: Add the Endpoint Function Source Code
ref: add-the-endpoint-function-source-code
content: |
  Add a file named ``source.js`` to the new endpoint directory. The file
  should contain a valid function that will execute when the endpoint is
  called.

  Realm automatically passes two objects as the endpoint function's
  arguments:

  .. list-table::
     :header-rows: 1
     :widths: 10 30

     * - Argument
       - Description

     * - ``payload``
       - An EJSON representation of the incoming request payload. The
         contents of the payload document will vary depending on the
         service and event that caused a endpoint to fire. For a
         description of the ``payload`` object for a specific service,
         see that service's reference page.

     * - ``response``
       - An :ref:`HTTP response object <endpoint-response-object>` that
         configures Realm's response to the client that called the
         endpoint. The object has methods that allow you to set the
         response's headers, body, and status code. Calling any of these
         methods overrides the default response behavior.

  You can use the following endpoint function as a base for your own endpoint:

  .. literalinclude:: /includes/endpoint-function-example.js
     :language: javascript
     :emphasize-lines: 3, 10-11, 14-15

---
title: Deploy the Incoming Endpoint Configuration
ref: deploy-the-incoming-endpoint-configuration
content: |
  Once you've set the read preference for the cluster in ``config.json``, you
  can push the config to your remote app. {+cli+} immediately deploys the
  update on push.

  .. code-block:: bash
     
     realm-cli push --remote="<Your App ID>"
