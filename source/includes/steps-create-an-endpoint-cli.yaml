title: Pull the Latest Version of Your App
ref: pull-the-latest-version-of-your-app
content: |
  To define an incoming endpoint with {+cli-bin+}, you need a local copy of your
  application's configuration files.

  To pull a local copy of the latest version of your app, run the following:

  .. code-block:: bash
     
     realm-cli pull --remote="<Your App ID>"

  .. tip::
     
     You can also download a copy of your application's configuration files from
     the :guilabel:`Deploy > Export App` screen in the {+ui+}.
---
title: Add an Endpoint Configuration Object
ref: add-an-endpoint-configuration-object
content: |
  To create a new endpoint, add an :ref:`endpoint configuration
  <appconfig-endpoints>` object to the array in
  :file:`/http_endpoints/config.json`.

  The configuration file has the following form:

  .. code-block:: json
     :caption: http_endpoints/config.json
     
     [
       {
          "route": "<Unique Endpoint Route>",
          "http_method": "<HTTP Method>",
          "function_name": "<Function Name>",
          "validation_method": "<Endpoint Validation Method>",
          "secret_name": "<Secret Name>",
          "respond_result": <Boolean>,
          "fetch_custom_user_data": <Boolean>,
          "create_user_on_auth": <Boolean>,
          "disabled": <Boolean>
       }
     ]
---
title: Define the Route and HTTP Method
ref: definte-route-and-http-method
content: |
  An endpoint's route determines the URL used to call the endpoint. You
  can define at most one handler for a given route and HTTP method
  combination in your app.

  1. Enter a name for the endpoint in ``route`` field. Route
     names must begin with a forward slash (``/``) and may contain
     additional forward slashes to indicate a nested path.
     
     .. code-block:: json
        
        {
          "route": "/example/myEndpoint"
        }

  2. Specify the endpoint's :mdn:`HTTP method <Web/HTTP/Methods>` in the
     ``options.httpMethod`` field. You can choose either a specific
     method (e.g. ``GET`` or ``POST``) or configure the endpoint to
     accept *any* HTTP method (i.e. ``ANY``). For a given route, if you
     define both a specific method endpoint and an ANY method endpoint,
     the more specific endpoint takes precedence and runs instead of the
     ANY endpoint.
     
     .. code-block:: json
        
        {
          "options": {
            "httpMethod": "POST"
          }
        }
     
     .. tip::

        You can check which method a request was sent with in the
        endpoint function by accessing :ref:`context.request.httpMethod
        <context-request>`.
---
title: Configure the Endpoint Response
ref: configure-the-endpoint-response
content: |
  To send an :mdn:`HTTP Response <Web/HTTP/Messages#HTTP_Responses>` to
  clients that call the endpoint, set ``respond_result`` to ``true``.

  By default, the endpoint responds to incoming requests with a basic
  :mdn:`HTTP 200 <Web/HTTP/Status/200>` response that includes the
  endpoint function return value as its ``body`` field.

  You can configure a custom HTTP response from within the endpoint
  function using the ``response`` object. If you use ``response.setBody(value)``,
  the endpoint returns that value, not the function return value.
  For more information, see :ref:`endpoint-response-object`.
---
title: Configure Request Authorization
ref: configure-request-authorization
content: |
  You can require all requests to a given endpoint to include additional
  information that proves the validity of the request.

  Specify one of the following supported validation methods in the
  ``validation_method`` field:

  .. list-table::
     :header-rows: 1
     :widths: 30 70

     * - Method
       - Description
       
     * - ``NO_VALIDATION``
       - Authenticated requests do not need to include authorization information.
         
         .. code-block:: json
            
            {
              "validation_method": "NO_VALIDATION"
            }
       
     * - ``VERIFY_PAYLOAD``
       - Authenticated requests must include an ``Endpoint-Signature`` header
         that contains a hash of the request body signed with a secret value.
         
         For details, see :ref:`Payload Signature Verification
         <endpoint-payload-signature-verification>`.

         .. code-block:: json
            
            {
              "validation_method": "VERIFY_PAYLOAD",
              "secret_name": "<Secret Name>"
            }
       
     * - ``SECRET_AS_QUERY_PARAM``
       - Authenticated requests must include a secret value in the
         ``secret`` query parameter of the endpoint URL.

         For details, see :ref:`Secret Query Parameter
         <endpoint-secret-query-parameter>`.

         .. code-block:: json
            
            {
              "validation_method": "SECRET_AS_QUERY_PARAM",
              "secret_name": "<Secret Name>"
            }
---
title: Write the Endpoint Function
ref: write-the-endpoint-function
content: |
  Every endpoint is associated with a :ref:`function <functions>` that
  it calls for each incoming request. You can either :ref:`define a new
  function <define-a-function>` or reference an existing function by
  name.

  Endpoint functions have the following signature:

  .. code-block:: javascript
     
     exports = async function(request, response) {
       // ... your code here
     }

  {+service-short+} calls endpoint functions with two arguments:

  .. list-table::
     :header-rows: 1
     :widths: 10 30

     * - Argument
       - Description

     * - ``request``
       - An EJSON representation of the incoming request payload. For
         details, see :ref:`endpoint-request-object`.
       
         The payload document contains:

         - The request query parameters, as an object.

         - The request headers, as an object.

         - The request body, as a BSON.Binary object. You can access the
           contents as a string using the ``body.text()`` method.

     * - ``response``
       - An object that configures the HTTP response that the endpoint
         returns to the client that called it. For details, see
         :ref:`endpoint-response-object`.
         
         You can call methods on this object to set the response's
         headers, body, and status code. If you do not call a method to
         configure the response, the endpoint defaults to an :mdn:`HTTP
         200 <Web/HTTP/Status/200>` response with the function's return
         value as the body.

  You can use the following example as a base for your own endpoint function:

  .. literalinclude:: /includes/endpoint-function-example.js
     :language: javascript

  .. note::

     If you want to debug an endpoint function response from the function
     editor, you must manually provide the HTTP response object when you
     run the function.

     .. code-block:: javascript

        exports(
          { body: "This document is the endpoint payload" },
          new HTTPResponse()
        )
---
title: Configure User Authentication
ref: configure-user-authentication
content: |
  Endpoints use the same authentication settings as the underlying
  function that they call. To configure an endpoint's user
  authentication, :ref:`modify the underlying function
  <define-a-function>`.

  For more information on how to authenticate endpoint requests, see
  :ref:`Endpoint Authentication <endpoint-authentication>`.
---
title: Deploy the Incoming Endpoint Configuration
ref: deploy-the-incoming-endpoint-configuration
content: |
  Push the config to your remote app. {+cli+} immediately deploys the
  update on push.

  .. code-block:: bash
     
     realm-cli push --remote="<Your App ID>"
