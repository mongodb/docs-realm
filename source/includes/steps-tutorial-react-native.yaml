---
title: Clone the Client App Repository
ref: clone-the-client-app-repository
content: |
  We've already put together a task tracker React Native application that has
  most of the code you'll need. You can clone the client application repository
  directly from GitHub:

  .. code-block:: shell

     git clone https://github.com/mongodb-university/realm-tutorial-react-native.git

  .. important::
   
     The realm-tutorial-react-native repository contains two branches: ``final``
     and ``start``. The ``final`` branch is a finished version of the app as it
     should look *after* you complete this tutorial. To walk through this
     tutorial, please check out the ``start`` branch:

     .. code-block:: shell
    
        git checkout start

---
title: Install Dependencies and Launch the App
ref: install-dependencies-and-launch-the-app
content: |
  In your terminal, run the following commands to navigate to the task tracker
  client application and install its dependencies:

  .. code-block:: shell
     
     cd realm-tutorial-react-native
     npm install

  If you wish to run the app on iOS, you need to install additional dependencies
  with `CocoaPods <https://guides.cocoapods.org/using/getting-started.html>`__:

  .. code-block:: shell
     
     cd ios
     pod install --repo-update
     cd ..

  Once the dependency installations are complete, you can run the app using one
  of the following commands, depending on whether you want to run on iOS:

  .. code-block:: shell

     npx react-native run-ios

  Or Android (note: you may need to install Android development tools):

  .. code-block:: shell

     npx react-native run-android
---
title: Explore the App Structure
ref: explore-the-app-structure
content: |
  Open the realm-tutorial-react-native directory in the text editor of your
  choice and explore the code in project. Be sure to check out the following
  files:

  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 15 85
     
     * - File
       - Purpose

     * - getRealmApp.js
       - Provides access to the Realm app instance.

     * - App.js
       - Defines which screens are in the app and sets up the navigation system.

     * - schemas.js
       - Defines the Realm object models used in this app.

     * - providers/AuthProvider.js
       - Defines the AuthProvider, which handles user login, log out, and
         project membership information for the current user.

     * - providers/TasksProvider.js
       - Defines the TasksProvider, which handles fetching, adding, updating,
         and deleting tasks within a project.

     * - components/ActionSheet.js
       - A component that presents the user with a list of actions.

     * - components/AddTask.js
       - A button that, when pressed, prompts the user to enter new task
         information and creates it with the given createTask function.

     * - components/Logout.js
       - A button that handles user log out.

     * - components/ManageTeam.js
       - A list of team members on the current user's project that provides
         controls for adding and removing team members.

     * - components/TaskItem.js
       - A list item that represents a task in a list. When pressed, it presents
         an ActionSheet with actions corresponding to deleting the task or
         updating the task's status.

     * - views/ProjectsView.js
       - The screen that presents a list of projects that the current user is a
         team member of.

     * - views/TasksView.js
       - The screen showing the tasks for a given project. If this is the
         logged-in user's own project, the TasksView includes a button open a
         ManageTeam view.

     * - views/WelcomeView.js
       - The screen that allows a user to log in or register a user.

---
title: Connect to Your MongoDB Realm App
ref: connect-to-your-mongodb-realm-app
content: |
  To get the app working with your backend, you first need to instantiate the
  Realm app. The Realm app is the interface to the MongoDB Realm backend.
  Navigate to the ``getRealmApp.js`` file and complete the ``getRealmApp()``
  function implementation:

  .. literalinclude:: /tutorial/generated/code/final/getRealmApp.codeblock.get-realm-app.js
     :language: javascript

  Be sure to enter your own Realm app ID, which you can :ref:`find in the Realm
  UI <find-your-app-id>`.

---
title: Implement the AuthProvider
ref: implement-the-auth-provider
content: |
  Navigate to ``providers/AuthProvider.js``. In this file, and in the
  ``providers/TasksProvider.js`` file that we will complete a bit later, we use
  React :reactjs:`Context <docs/context.html>` and :reactjs:`hooks
  <docs/hooks-overview.html>` to implement a data provider pattern. Don't worry
  if you aren't too familiar with these constructs yet. The basic idea is as
  follows:

  - The Provider component handles fetching and modifying data.
  - Any descendant of the Provider component can use a hook function to access 
    the provider's data as well as its commands for modifying the data.

  The AuthProvider is responsible for logging in, registering a user, logging
  out, and retrieving the list of projects that a user is a member of from the
  custom user data object.

  First, let's implement the login functionality that a descendant component can
  pass an email and password to in order to log in:

  .. literalinclude:: /tutorial/generated/code/final/AuthProvider.codeblock.sign-in.js
     :language: javascript

  Next, implement the user registration functionality by using the
  email/password provider of the Realm app:

  .. literalinclude:: /tutorial/generated/code/final/AuthProvider.codeblock.sign-up.js
     :language: javascript

  Next, implement the log out functionality:

  .. literalinclude:: /tutorial/generated/code/final/AuthProvider.codeblock.sign-out.js
     :language: javascript

  Finally, the AuthProvider must access the user custom data object for the
  logged-in user in order to provide the list of projects that the user is a
  member of. We have set up our app so that the custom user data object exists
  in a specific realm, where at most one user object exists.

  .. note::

    To learn more about how {+service-short+} Object models are used in React Native applications, 
    see :doc:`Realm Objects </react-native/objects>` in our React Native client guide. 

  Open the realm for that user with the partition key value following the
  pattern ``user=<USER_ID>``.

  There may be a delay between when a user first registers and when the
  authentication trigger creates the user custom data object. Therefore, the
  realm may be empty when first opened. Add an observer to the collection of
  users in that realm in order to watch for the user object first appearing as
  well as any changes to the its project memberships. When a user object is
  available, read its ``memberOf`` field to populate the available project data for
  any descendant of the provider:

  .. literalinclude:: /tutorial/generated/code/final/AuthProvider.codeblock.open-user-realm.js
     :language: javascript

  Finally, the Realm SDK requires you to close any realm you open when you are
  finished with it. You can return a cleanup function from the effect, which
  will close the realm any time the user changes or the component is unmounted:

  .. literalinclude:: /tutorial/generated/code/final/AuthProvider.codeblock.user-realm-cleanup.js
     :language: javascript

  Check out the ``App.js``, ``view/WelcomeView.js``, and ``view/ProjectView.js`` files to
  see how they use the AuthProvider's signIn, signUp, and signOut functions and
  user data via the ``useAuth()`` hook function. The ProjectView also uses the
  project data to populate the list of projects available to the logged-in user.
  You should now be able to run the app, sign in, view your projects, and sign
  out. Next, we need to implement the task management functionality.
---
title: Define the Task Schema
ref: define-the-task-schema
content: |
  In order to work with task objects in the Realm Database, we need to define
  their schema. Navigate to the ``schemas.js`` file to complete the task class's
  schema definition where it says ``TODO``:

  .. literalinclude:: /tutorial/generated/code/final/schemas.codeblock.react-native-task-schema.js
     :language: javascript

---
title: Implement the TasksProvider
ref: implement-the-tasks-provider
content: |
  The TasksProvider component, like the AuthProvider, manages the data that its
  descendants can use. As the name implies, the TasksProvider provides the task
  objects for a given project. The project partition is passed in as a prop.

  The first thing to implement is the opening of the realm for the given
  project. Whereas the user realm used the partition key value pattern of
  ``user=<USER_ID>``, projects use the partition key value pattern of
  ``project=<USER_ID>``. For the sake of this tutorial's simplicity, each user
  always has exactly one project, specified by the partition key value
  containing their own user ID.

  In the effect block, open the realm. Once opened, attach an observer that will
  update the tasks list when any changes come in:

  .. literalinclude:: /tutorial/generated/code/final/TasksProvider.codeblock.open-project-realm.js
     :language: javascript

  Again, Realm requires you to close any realm you open once you are done with
  it. We can do that by returning a cleanup function from the effect:

  .. literalinclude:: /tutorial/generated/code/final/TasksProvider.codeblock.clean-up.js
     :language: javascript

  A user can create, update, and delete tasks in a project that they are a
  member of. Implement the task creation functionality like so:

  .. literalinclude:: /tutorial/generated/code/final/TasksProvider.codeblock.create-task.js
     :language: javascript

  We limit updates to changing the status of the task. In a write block, you can
  assign to the task object's members to have it persisted to the database:

  .. literalinclude:: /tutorial/generated/code/final/TasksProvider.codeblock.set-task-status.js
     :language: javascript

  Finally, implement the task deletion functionality:

  .. literalinclude:: /tutorial/generated/code/final/TasksProvider.codeblock.delete-task.js
     :language: javascript

  Check out the ``views/TasksView.js`` and ``components/TaskItem.js`` files to see how
  they use the provider's task data and functionality via the ``useTasks()``
  hook function.
---
title: Implement Team Management
ref: implement-team-management
content: |
  A user can add other users to their team, which allows them to view, edit, and
  delete tasks on the user's project. The ``ManageTeam`` component implements this
  functionality by calling a few Realm functions on the backend that we defined
  earlier.

  Navigate to ``components/ManageTeam.js``. First, we need to fetch the list of
  current team members:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeam.codeblock.get-team.js
     :language: javascript

  Next, call the ``addTeamMember`` function on the backend to implement add team
  member functionality:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeam.codeblock.add-team-member.js
     :language: javascript

  Finally, call the ``removeTeamMember`` function on the backend to implement remove
  team member functionality:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeam.codeblock.remove-team-member.js
     :language: javascript

---
title: Run and Test
ref: run-and-test
content: |
  Congratulations! Now that you have completed the code, you can run the app and
  check functionality. Here are some things you can try in the app:

  - Create a user with email *first@example.com*
  - Explore the app, then log out or launch a second instance of the app on another device or simulator
  - Create another user with email *second@example.com*
  - Navigate to *second@example.com*'s project
  - Add, update, and remove some tasks
  - Click "Manage Team"
  - Add *first@example.com* to your team
  - Log out and log in as *first@example.com*
  - See two projects in the projects list
  - Navigate to *second@example.com*'s project
  - Collaborate by adding, updating, and removing some new tasks

  .. tip::
   
     If something isn't working for you, you can check out the ``final`` branch of 
     this repo to compare your code with our finished solution.
