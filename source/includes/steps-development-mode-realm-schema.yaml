title: Enable Development Mode Sync
ref: enable-development-mode-sync
content: |
  First,  :ref:`enable development mode sync <enable-development-mode>`.

  You can alter or define a Realm Object Model through your mobile client SDK.
  Changes to your Realm Object Model are only allowed when
  :guilabel:`Development Mode` is on in the MongoDB Realm UI. MongoDB Realm will
  reflect these changes to your Realm Object Model in your Realm Schema used for
  Atlas.
---
title: Edit Your Realm Object Model
ref: edit-realm-object-model
content: |
  As you continue to develop your application, you will need to modify
  your data model with it to enforce different data validation rules
  based on those changes. While :guilabel:`Development Mode` is on, you
  can edit your Realm Object Model in your client code. Data Validation
  occurs when :guilabel:`Development Mode` is off, so MongoDB Realm does
  not accept changes to your Realm Object Model while
  :guilabel:`Development Mode` is not on.

  .. admonition:: Primary Key _id Required
     :class: important

     To work with {+sync+}, your data model **must** have a primary key field
     called ``_id``. ``_id`` can be of type ``string``, ``int``, or
     ``objectId``.

  .. example::

     A group is developing a social media application. When the group
     first developed their application, a user's birthday was a required
     field of the User's data model. However, due to privacy concerns
     over the amount of user data that is stored, management creates a
     new requirement to make the user's birthday field an optional
     field. Application developers turn on :guilabel:`Development Mode`
     in the MongoDB Realm UI and then edit their user model within
     their client code. 

     .. code-block:: javascript
        
       const realmObjectModel = { 
         name: 'User',
         properties: {
           _id: 'objectId',
           _partition: 'string',
           name: 'string',
           birthday: {type: 'date', optional: true}, // developers set optional: true to adhere to the new requirement
         },
         primaryKey: '_id'
       };

       Realm.open({schema: realmObjectModel, sync: {/*...*/}})
         .then(realm => {
           // ... use the realm instance to read and modify data
         })

  .. seealso:: :ref:`Sync Data on Android <android-sync-data>`
  .. seealso:: :ref:`Sync Data on iOS <ios-sync-data>`
  .. seealso:: :ref:`Sync Data on Node <node-sync-data>`
  .. seealso:: :ref:`Sync Data on React Native <react-native-sync-data>`
---
title: Update Your Realm Schema with the Realm Object Model Changes
ref: update-realm-schema
content: |

  While :guilabel:`Development Mode` is on, MongoDB Realm doesn't validate
  writes against your data model, allowing you to freely update your Realm
  Object Model. When you turn off :guilabel:`Development Mode`, MongoDB
  Realm automatically updates your Realm Schema and starts to enforce data
  validation for your Atlas cluster based on it. 

  Click the "Turn Dev Mode Off" button on the top banner or in the
  :guilabel:`Sync` screen to turn off :guilabel:`Development Mode`. Once you
  turn off :guilabel:`Development Mode`, the "Development Mode is OFF" modal
  will appear. The modal indicates that MongoDB Realm has stopped accepting new
  data model changes from clients. Click the "View my Realm Schema" button on
  the modal to view your updated Realm Schema.

  .. note:: 
    
    To make future data model updates from your mobile client code, you
    can follow this procedure again.

  .. figure:: /images/turn-off-dev-mode.png
     :width: 750px
     :lightbox:

  .. figure:: /images/view-my-json-schema.png
     :width: 461px
     :lightbox:
