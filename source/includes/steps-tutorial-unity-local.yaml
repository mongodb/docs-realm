---
title: Download and Import Unity's Platformer Microgame
ref: download-and-import-unity-platform-microgame
content: |
  Unity Hub comes pre-installed with templates, such as the Platformer
  Microgame, to learn to develop games on the Unity editor. In later steps, you
  will import and Realm functionality to the game. 

  Click the Learn tab on the left side of Unity Hub to view the list of template projects.

  .. figure:: /images/unity-click-learn-tab.png
     :width: 750px
     :alt: Unity Click Learn Tab

  Scroll to the Platformer Microgame and click it. On the Modal that appears,
  click the "Download Project" button to download the project.  

  .. figure:: /images/unity-scroll-to-platformer-microgame.png
     :width: 750px
     :alt: Unity Scroll to Platformer Microgame

  .. figure:: /images/unity-download-platformer-microgame.png
     :width: 350px
     :alt: The cluster selection dropown menu

  Click "Open Project" to open the project in Unity.  

  .. figure:: /images/unity-open-platformer-microgame.png
     :width: 350px
     :alt: Unity Open Platformer Microgame
---
title: Load the Template's Scene
ref: load-template-scene
content: |
  When you open the Platformer Microgame template, Unity prompts you with the
  option to :guilabel:`Load Scene` or :guilabel:`Load Tutorials`. 
  
  .. figure:: /images/unity-load-tutorials-or-load-scene.png
     :width: 750px
     :alt: Load the Template Scene
  
  If you are new to developing with Unity, click :guilabel:`Load Tutorials` to
  learn Unity editor basics, interacting with `GameObjects
  <https://docs.unity3d.com/ScriptReference/GameObject.html>`_, and more. Once
  you feel comfortable working with the Unity Editor, you can continue to the
  next step. Alternatively, if you are already comfortable working with the
  Unity editor, click :guilabel:`Load Scene` and continue to the next
  step in this tutorial.

  Once the scene is loaded, click the :guilabel:`Play` button on the top of the
  screen to enter `play mode <https://docs.unity3d.com/Manual/GameView.html>`_
  and play the game. 

  .. figure:: /images/unity-click-to-enter-play-mode.png
     :width: 350px
     :alt: Enter Play Mode

  To play the game, use the arrow keys to move your character, and the spacebar
  to jump. Hop on the "red slime" enemies to defeat them, making them disappear.
  Collide your character with the yellow "tokens" to collect them. Get to the
  end of the level to win the game. 

  .. figure:: /images/unity-view-game-in-play-mode.png
     :width: 500px
     :alt: View Game in Play Mode

  In later steps, you will use {+realm+} to record how many enemies the player
  defeated per playthrough, how many tokens were collected, and a score.
---
title: Install Realm
ref: install-realm
content: |
  Before you begin adding {+realm+} functionality to your project, install realm
  by following the :ref:`Install Realm <unity-install-realm>` steps in the Unity
  Integration guide. You can choose to install realm through a tarball or
  through npm.
---
title: Install UI ToolKit and UIBuilder
ref: install-ui-toolkit-and-builder
content: |
  Next, add `UI ToolKit <https://docs.unity3d.com/Manual/UIElements.html>`_ and
  `UI Builder <https://docs.unity3d.com/Manual/com.unity.ui.builder.html>`_ to
  your project. These packages will be used to develop user interfaces to
  interact with and display data stored in {+realm+}. 

  .. note:: 

     UI ToolKit and UI Builder are Preview Packages, meaning that they are still
     in development by the Unity engineering team. While they provide a simple
     API to develop user interfaces for a tutorial, they should not be used in
     production at this time. 

  Open the `Unity package manager
  <https://docs.unity3d.com/Manual/upm-ui.html>`_  by clicking the
  :guilabel:`Window` tab on the top of the Unity menu. Click :guilabel:`Package
  Manager` from the :guilabel:`Window dropdown`. Once the package manager model
  opens, click the :guilabel:`+` icon in the top left corner of the model.
  Select the :guilabel:`Add package from git URL...` option. 

  .. figure:: /images/unity-add-package-from-git-url.png
     :width: 500px
     :alt: Add Package From Git URL

  In the input bar write the text "com.unity.ui" and click :guilabel:`Add` to
  `install the UI ToolKit package
  <https://docs.unity3d.com/2020.2/Documentation/Manual/UITK-package.html>`_.

  .. figure:: /images/unity-com-unity-ui.png
     :width: 350px
     :alt: Add package com-unity-ui

  Repeat the steps above, but this time write the text "com.unity.ui.builder" to
  `install the UI Builder package
  <https://docs.unity3d.com/Packages/com.unity.ui.builder@1.0/manual/index.html>`_.

  .. figure:: /images/unity-com-unity-ui-builder.png
     :width: 350px
     :alt: Add package com-unity-ui-builder
---
title: Clone the Client Scripts Repository
ref: clone-the-repository
content: |
  Now that {+realm+}, UI Builder, and UI Toolkit are installed into your
  project, you can begin recording data into {+realm+} and building a user
  interface that can read and interact with that data.

  We've already put together a respository that has most of the code you'll need
  to accomplish that. You can clone the client scripts repository directly from
  :github:`GitHub <mongodb-university/realm-tutorial-unity>`:

  .. code-block:: shell

     cd <your-unity-microplatformer-game-path>/Assets/Scripts
     git clone --branch start https://github.com/mongodb-university/realm-tutorial-unity.git

  .. tip::
   
     The ``start`` branch is an incomplete version of the client scripts that you will
     complete in this tutorial. To view a complete local-only (non-sync) version of the scripts:

     1. Navigate to the root directory of the client application repository:

        .. code-block:: shell

           cd realm-tutorial-unity

     #. Check out the ``local`` branch:

        .. code-block:: shell

           git checkout local
---
title: Explore the Client Scripts
ref: explore-the-client-scripts
content: |

  In your text editor of choice, such as `Visual Studio <https://docs.microsoft.com/en-us/visualstudio/>`_,  you can see the script
  files you will need to add to the game. The relevant files are as follows:

  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 40 60
     
     * - File
       - Purpose

     * - Stylesheet.uss
       - `USS <https://docs.unity3d.com/Manual/UIE-USS.html>`_ file with the
         global styles for your project.

     * - Leaderboard.uxml
       - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file that is
         mostly empty but serves as a base for the leaderboard UI to be created later.
     
     * - LeaderboardManager.cs
       - Builds upon the base Leaderboard that was created in Leaderboard.uxml
         and expands it using {+realm+} to show the highest game scores.
     
     * - Scorecard.uxml
       - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file that is
         mostly empty but serves as a base for the UI for the player's scores to
         be created later.

     * - ScoreCardManager.cs
       - Builds upon the base ScoreCard that was created in Scorecard.uxml and
         expands it using {+realm+} to show the player's statistics (stats) for their
         current playthrough.

     * - AuthenticationScreen.uxml
       - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file with the
         entire UI for the Authentication Screen. This UI allows players to input
         their username and start the game.

     * - AuthenticationManager.cs
       - Interacts with the TextField's of AuthenticationScreen.uxml to implement user login.

     * - RealmController.cs
       - A script containing most of the {+realm+} code logic, such as opening a
         {+realm+}, recording the player stats for the current playthrough, deleting
         the current playthrough, calculating final scores, restarting the game,
         and closing the {+realm+}.

     * - PlayerModel.cs
       - Script containing a Player :ref:`{+frontend-schema+} <dotnet-object-models-and-schemas>`.

     * - StatModel.cs
       - Script containing a Statistics :ref:`{+frontend-schema+} <dotnet-object-models-and-schemas>`.
---
title: Create UI Game Objects
ref: create-ui-game-objects
content: |
  Navigate to your Unity Editor's `hierarchy window
  <https://docs.unity3d.com/Manual/Hierarchy.html>`_ to create UI game objects
  that will display the authentication screen, game leaderboard, and player's
  score card for the current playthrough of the game. 

  Right click and select UI > Canvas to create a `Canvas
  <https://docs.unity3d.com/Packages/com.unity.ugui@1.0/manual/UICanvas.html>`_
  GameObject that will contain your UI elements. 

  .. figure:: /images/unity-create-canvas.png
     :width: 350px
     :alt: Create the Canvas Game Object

  Next, as a child of the Canvas game object, create three `UIDocuments <>`_ by
  right clicking the Canvas object and selecting UI Toolkit > UI Document three times. 
  Name these game objects, AuthenticationScreen, Leaderboard, and Scorecard respectively.

  .. figure:: /images/unity-create-ui-documents.png
     :width: 350px
     :alt: Create the UI Documents

  Your UI hierarchy should look something like this:

  .. figure:: /images/unity-final-ui-hierarchy.png
     :width: 350px
     :alt: Create the UI Documents