title: Define a Realm Schema
ref: define-realm-schema
content: |
  To get started, ensure you have a Realm Schema defined. MongoDB Realm
  will translate this Realm Schema into a Realm Object Model to be
  configured and utilized in your mobile application.
  
  .. important:: Primary Key _id Required
     
     To work with {+sync+}, your data model **must** have a primary key field
     called ``_id``. ``_id`` can be of type ``string``, ``int``, or
     ``objectId``.
  
  .. note:: 
     
     To learn how to define a Realm Schema for at least one collection in the
     :doc:`synced </sync>` cluster, see the :doc:`Enforce a Document Schema
     </mongodb/enforce-a-document-schema>` page.

---
title: View the Realm Object Model
ref: view-realm-db-schema
content: |

  The Realm Object Model defines and validates your data in your mobile
  client application. To view your Realm Object Model, navigate to the
  :guilabel:`SDKs` page, where you can view your Realm Schema as a
  generated Realm Object Model in your language of choice.
  
  .. figure:: /images/translate-jsonschema-into-realm-data-model.png
     :alt: The generated Realm Object Models and associated warnings in the UI
     :width: 750px
     :lightbox:
---
title: View and Fix Schema Errors
ref: view-schema-errors
content: |

  Realm may fail to generate some or all of your Realm Object Model based on your
  Realm Schema. You can view a list of the errors in your Realm Schema that
  prevented Realm from generating the Realm Object Model on the :guilabel:`SDKs`
  page of the Realm UI.
  
  Common errors include mismatched types, and differences in the way
  relationships are represented in the two respective models. For each
  error or warning, modify your Realm Schema to fix the specified issue.
  
  .. figure:: /images/schema-translation-errors-warnings.png
     :alt: A detailed list in the UI of warnings and errors that occurred during model
     :width: 750px
     :lightbox:
---
title: Open a Realm with the Realm Object Model
ref: open-realm-with-data-model
content: |
  You can immediately use the generated Realm Object Model in your
  client application. In order to begin enforcing data validation with
  your data model, you can open a Realm with the Realm Object Model.
  This will prevent improper data from entering your database from your
  mobile client. Click :guilabel:`Copy` on the right-hand side of the
  Realm Object Model for the Object Model you want to integrate into
  your mobile application code. This will copy the Realm Object Model
  code for the SDK of your choice into your clipboard. Open your mobile
  application code in your IDE and paste the Realm Object Model code in.
  
  .. tabs-realm-languages::
    
    .. tab::
        :tabid: javascript
        
        .. code-block:: javascript
           
          const UserSchema = { // your copied and pasted Realm Object Model
            name: 'User',
            properties: {
              _id: 'objectId',
              _partition: 'string',
              name: 'string',
              birthday: 'date'
            },
            primaryKey: '_id'
          };
          // Initialize a Realm with your Realm Object Model
          Realm.open({schema: UserSchema, sync: { /* ... */ }})
            .then(realm => {
              // ... use the realm instance to read and modify data
            })

  .. seealso::

     - :ref:`Sync Data on Android <android-sync-data>`
     - :ref:`Sync Data on iOS <ios-sync-data>`
     - :ref:`Sync Data on Node <node-sync-data>`
     - :ref:`Sync Data on React Native <react-native-sync-data>`

...
