---
title: Clone the Client App Repository
ref: clone-the-client-app-repository
content: |
  We've already put together a task tracker iOS application that has most of the
  code you'll need. You can clone the client application repository directly
  from GitHub:

  .. code-block:: shell

     git clone https://github.com/mongodb-university/realm-tutorial-ios-swift.git

  .. important::
   
     The realm-tutorial-ios-swift repository contains two branches: ``final``
     and ``start``. The ``final`` branch is a finished version of the app as it
     should look *after* you complete this tutorial. To walk through this
     tutorial, please check out the ``start`` branch:

     .. code-block:: shell
    
        git checkout start

  In your terminal, run the following commands to navigate to the task tracker
  client application and install its dependencies with `CocoaPods
  <https://guides.cocoapods.org/using/getting-started.html>`__:

  .. important::

     CocoaPods minimum version 1.10 is required to install Realm.

  .. code-block:: shell
     
     cd realm-tutorial-ios-swift
     pod install --repo-update

  Once the installation is complete, use Xcode to open the xcworkspace generated
  by CocoaPods, which has all of the dependencies configured. You can do this
  from the command line:

  .. code-block:: shell

     open "Task Tracker.xcworkspace"

---
title: Explore the App Structure
ref: explore-the-app-structure
content: |

  In the Xcode Project Navigator, you can see the source files of the task
  tracker application in the ``Task Tracker`` folder. The relevant files are as follows:

  .. cssclass:: config-table
  .. list-table::
     :header-rows: 1
     :widths: 15 85
     
     * - File
       - Purpose

     * - Models.swift
       - Defines the Realm object models used by this app.

     * - SceneDelegate.swift
       - Declares the global Realm app instance used by other parts of the app.
     
     * - WelcomeViewController.swift
       - Implements the login and user registration functionality.
      
     * - ProjectsViewController.swift
       - The list of projects that the logged-in user is a member of.
     
     * - TasksViewController.swift
       - The list of tasks for a given project.
     
     * - ManageTeamController.swift
       - The list of team members for a project and the associated team
         management controls.

---
title: Connect to Your MongoDB Realm App
ref: connect-to-your-mongodb-realm-app
content: |
  To get the app working with your backend, you first need to add your Realm App
  ID to the SceneDelegate.swift file. The SceneDelegate.swift file declares a
  global Realm App instance:

  .. literalinclude:: /tutorial/generated/code/final/SceneDelegate.codeblock.initialize-app.swift
     :language: swift

  Change the value of ``id`` to your Realm app ID, which you can :ref:`find in
  the Realm UI <find-your-app-id>`.

---
title: Define the Object Models
ref: define-the-object-models
content: |
  Navigate to the Models.swift file to implement the Realm Object Models used in
  this app. First, implement the User model, which contains information about
  the user's membership in different projects. Notice that the Realm object
  models derive from ``Object`` from the ``RealmSwift`` library, which allows
  Realm to store them in the Realm Database:

  .. literalinclude:: /tutorial/generated/code/final/Models.codeblock.user-model.swift
     :language: swift

  .. note::

      To learn more about how {+service-short+} Object models are used in iOS applications, 
      see :doc:`Realm Objects</ios/objects>` in our iOS client guide. 

  Next, implement the Project embedded object that represents a Project that a
  User is a member of:

  .. literalinclude:: /tutorial/generated/code/final/Models.codeblock.project-model.swift
     :language: swift

  Finally, let's turn the Task class into a Realm object model:

  .. literalinclude:: /tutorial/generated/code/final/Models.codeblock.task-model.swift
     :language: swift

---
title: Enable Authentication
ref: enable-authentication
content: |
  Navigate to the WelcomeViewController.swift file, which is where we implement
  all login and user registration logic. This controller is set up with a text
  field for email and password, sign in and sign up buttons, and an activity
  indicator to show when the app is handling an authentication request.

  First, let's implement the ``signUp()`` method to register a new user, which
  uses the email/password authentication provider of the Realm app to register a
  new user:

  .. literalinclude:: /tutorial/generated/code/final/WelcomeViewController.codeblock.sign-up.swift
     :language: swift

  Now, implement the ``signIn()`` method to log in with an existing user using
  email/password credentials. Once logged in successfully, open the user realm
  and navigate to the ProjectsViewController:

  .. literalinclude:: /tutorial/generated/code/final/WelcomeViewController.codeblock.sign-in.swift
     :language: swift

---
title: Implement the Projects List
ref: implement-the-projects-list
content: |
  Open the ProjectsViewController.swift file, which is where we present the user
  with a list of projects they are a member of. The WelcomeViewController has
  opened the user realm for us and passed it in to this controller. This is a
  good practice, as it allows the realm to fully download before transitioning
  to the next screen. If the realm failed to open for some reason, the error
  could be handled on the original screen and not have to undo a transition.

  We have designed our app so that the user realm will only ever contain at most
  one object: that is, the user custom data object. Because an authentication
  trigger creates this user object, the realm may not contain the object
  immediately after creating an account. So, we should watch the realm itself
  for changes:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.user-in-realm-notification.swift
     :language: swift

  Whenever we observe a realm, collection, or object, we receive a notification
  token that we must retain as long as we want to keep observing that object.
  Once we are done observing, for example because the user navigated to another
  screen, we should invalidate that token. One convenient place to do so is in
  the deinit method of the view controller:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.invalidate-token.swift
     :language: swift

  Let's provide a way for a user to log out and get back to the
  WelcomeViewController. The ``viewDidLoad()`` method hooks up the Log Out
  button at the top of the view to the ``logOutButtonDidClick()`` method. We can
  implement ``logOutButtonDidClick()`` as follows:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.log-out-button-did-click.swift
     :language: swift

  Since the ProjectsViewController implements the UITableViewDelegate protocol
  for its own list, let's implement these methods. First, implement the
  ``tableView(_:numberOfRowsInSection:)`` method to return the number of
  available projects to the current user. Since the user always has access to
  their own project, we always return at least 1 even though the user object may
  not be available yet:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.number-of-rows-in-section.swift
     :language: swift

  Next, implement the ``tableView(_:cellForRowAt:)`` to fill out the project
  information for each cell. Again, if the user object has not loaded yet, we
  still know the user's own project is always in the list:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.cell-for-row-at.swift
     :language: swift

  Finally, implement the ``tableView(_:didSelectRowAt:)`` method to handle what
  happens when the user clicks a project in the list. As we opened the user
  realm in the WelcomeViewController before navigating to the
  ProjectsViewController, we'll open the project realm before navigating to the
  TasksViewController:

  .. literalinclude:: /tutorial/generated/code/final/ProjectsViewController.codeblock.did-select-row-at.swift
     :language: swift

---
title: Implement the Tasks List
ref: implement-the-tasks-list
content: |
  Navigate to the TasksViewController.swift file, where we'll implement the list
  of Tasks in a Project. The TasksViewController class holds an array of Task
  objects. We already converted the Task class to a Realm object model. In order
  to hold a live collection of Realm objects contained in a realm, we need to
  use ``RealmResults`` instead of a standard Swift array. Let's convert that
  property now:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock..swift
     :language: swift

  We can initialize the ``tasks`` property with a query on the project realm
  passed in from the ProjectsViewController. Once we have the live tasks
  collection, we can observe that for changes:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.init.swift
     :language: swift

  Calls to ``observe`` Realm objects return a notificationToken. Always retain
  the notificationToken as long as you want the observation to complete. When
  done observing -- for example, because the user navigated away from this view
  -- be sure to invalidate the token. The ``deinit`` method is a good place to
  do so:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.deinit.swift
     :language: swift

  The TasksViewController already populates the UI using the Tasks in the list.
  Check out the ``tableView(_:numberOfRowsInSection:)`` and
  ``tableView(_:cellForRowAt:)`` methods to see how the Realm object model
  version of the Task class and the RealmResults object are drop-in replacements
  for the regular class and array respectively. No changes are required in these
  methods.

  The TasksViewController also wires up the Add button at the top of the view to
  the ``addButtonDidClick()`` method. We can implement the Task creation in this
  method:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.add-button-did-click.swift
     :language: swift

  When the user selects a Task in the list, we present them with an action sheet
  to allow them to update the Task's status. Complete the
  ``tableView(_:didSelectRowAt:)`` method implementation as follows:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.populate-action-sheet.swift
     :language: swift

  To handle swipes to delete a Task, we implement the
  ``tableView(_:commit:forRowAt:)`` method:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.delete-task.swift
     :language: swift

  Finally, a user can manage the team of their own project. When setting up the
  UI, the TasksViewController uses the ``isOwnTasks()`` method to decide whether
  to add the "Manage Team" action to the action bar. We can implement that as
  follows:

  .. literalinclude:: /tutorial/generated/code/final/TasksViewController.codeblock.is-own-tasks.swift
     :language: swift

---
title: Implement the Manage Team View
ref: implement-the-manage-team-view
content: |
  A user can add and remove team members to their own Project using the Manage
  Team view. Since the client side cannot handle access management, we need to
  call out to our Realm functions we defined earlier.

  Navigate to the ManageTeamViewController.swift file, which defines the view
  that pops up when a user clicks the "Manage Team" action on the
  TasksViewController. The ManageTeamViewController uses its
  ``fetchTeamMembers()`` to get the list of team members. Add the call to the
  ``getMyTeamMembers`` function that returns a list of team members and refresh
  the list upon successful return:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeamViewController.codeblock.fetch-team-members.swift
     :language: swift

  The ManageTeamViewController wires up the add button and swipe to delete
  functionality to the ``addTeamMember()`` and ``removeTeamMember()`` methods,
  respectively.

  The ``addTeamMember()`` method calls the ``addTeamMember`` Realm function and
  can use the ``onTeamMemberOperationComplete()`` method as a completion
  handler:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeamViewController.codeblock.add-team-member.swift
     :language: swift

  The ``removeTeamMember()`` method calls the ``removeTeamMember`` Realm function and
  also uses the ``onTeamMemberOperationComplete()`` method as a completion
  handler:

  .. literalinclude:: /tutorial/generated/code/final/ManageTeamViewController.codeblock.remove-team-member.swift
     :language: swift

  The ``onTeamMemberOperationComplete()`` method presents any errors to the user
  and refreshes the member list.
---
title: Run and Test
ref: run-and-test
content: |
  Once you have completed the code, you can run the app and check functionality.

  Click the :guilabel:`Run` button in Xcode. If the app builds successfully,
  here are some things you can try in the app:

  - Create a user with email *first@example.com*
  - Explore the app, then log out or launch a second instance of the app on another device or simulator
  - Create another user with email second@example.com
  - Navigate to *second@example.com*'s project
  - Add, update, and remove some tasks
  - Click "Manage Team"
  - Add *first@example.com* to your team
  - Log out and log in as *first@example.com*
  - See two projects in the projects list
  - Navigate to *second@example.com*'s project
  - Collaborate by adding, updating, and removing some new tasks

  .. tip::
   
     If something isn't working for you, you can check out the ``final`` branch of 
     this repo to compare your code with our finished solution.
