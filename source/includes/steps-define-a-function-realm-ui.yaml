title: Create a New Function
ref: create-a-new-function
content: |
  To define a new server-side function from the {+ui+}:

  A. Click :guilabel:`Functions` in the {+leftnav+}.

  #. Click :guilabel:`New Function` in the top right of the :guilabel:`Functions` page.
---
title: Name the New Function
ref: name-the-new-function
content: |
  Enter a unique, identifying name for the function in the
  :guilabel:`Name` field. This name must be distinct from all other
  functions in the application.
---
title: Configure User Authentication
ref: configure-user-authentication
content: |
  Functions in {+service+} always execute in the context of a specific
  application user or as a :ref:`system user <system-user>` that
  bypasses rules. To configure the function's execution user, specify
  the type of authentication that {+service-short+} should use.

  .. list-table::
     :widths: 20 80
     :header-rows: 1
     
     * - Authentication Type
       - Description
     
     * - Application Authentication
       - This type of authentication configures a function to run in
         the context of the existing application user that was logged in
         when the client application called the function. If the
         function was called from another function then it inherits the
         execution user from that function.
     
     * - System
       - This type of authentication configures a function to run as a
         :ref:`system user <system-user>` that has full access to
         MongoDB CRUD and Aggregation APIs and is not affected by any
         rules, roles, or permissions.
     
     * - User ID
       - This type of authentication configures a function to always run
         as a specific application user.
     
     * - Script
       - This type of authentication configures a function to run as a
         specific application user determined based on the result of a
         custom :doc:`function </functions>` that you define. The
         function must return a specific user's ``id`` string or can
         specify a system user by returning ``{ "runAsSystemUser": true
         }``.
  
  .. figure:: /images/function-authentication-realm-ui.png
     :alt: The authentication configuration input in the UI
     :lightbox:
---
title: Configure Function Execution Logs
ref: configure-function-execution-logs
content: |
  By default, {+service-short+} includes the arguments that a function received in
  the :doc:`log entry </logs/function>` for each execution of the
  function. If you want to prevent {+service-short+} from logging the arguments,
  disable :guilabel:`Log Function Arguments`.

  .. figure:: /images/log-function-arguments-realm-ui.png
     :alt: The log function arguments toggle in the UI
     :width: 750px
     :lightbox:
---
title: Specify an Authorization Expression
ref: specify-an-authorization-expression
content: |
  You can dynamically authorize requests based on the contents of each
  request by defining a :guilabel:`Can Evaluate` :doc:`JSON expression
  </services/json-expressions>`. {+service-short+} evaluates the expression
  whenever the function is called. If you do not specify an expression
  then {+service-short+} automatically authorizes all authenticated incoming
  requests.
  
  The expression can expand standard :doc:`expression variables
  </services/expression-variables>`, including the
  :json-expansion:`%%request` and :json-expansion:`%%user` expansions.

  .. figure:: /images/function-can-evaluate-realm-ui.png
     :alt: The function's Can Evaluate JSON expression input in the UI
     :lightbox:
---
title: Configure the Function's Privacy Level
ref: configure-the-functions-privacy-level
content: |
  By default, you can call a function from client applications as well
  as other functions in the same application. You can prevent client
  applications from seeing or calling a function by setting
  :guilabel:`Private` to ``true``.

  You can still call a private function from :doc:`JSON expressions
  </services/json-expressions>` and other functions, including incoming
  webhooks and triggers.

  .. figure:: /images/private-function-toggle.png
     :alt: The private function toggle in the UI
     :lightbox:
---
title: Write the Function Code
ref: write-the-function-code
content: |
  Once you've created and configured the new function, it's time to
  write the actual javascript code that runs when you :doc:`call the
  function </functions/call-a-function>`. You can write the code
  directly in the {+ui+} using the function editor.

  .. note::

     You can use most modern (ES6+) JavaScript features in functions,
     including async/await, destructuring, and template literals.

  From the function's :guilabel:`Settings` page:

  A. Click the :guilabel:`Function Editor` tab.

  #. Add javascript code to the function. At minimum, the code must
     assign a function to the global variable ``exports``, as in the
     following example:

     .. code-block:: javascript

        exports = function() {
          return "Hello, world!";
        };
---
title: Save the Function
ref: save-the-function
content: |
  Once you've written the function code, click :guilabel:`Save` from
  either the :guilabel:`Function Editor` or :guilabel:`Settings` tab.

  After you save the function, you can begin using it immediately.
  For more information on using the function, see
  :doc:`/functions/call-a-function`.
