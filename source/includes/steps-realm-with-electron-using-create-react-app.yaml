title: Create Your React Application
ref: create-your-react-application
content: |
  Scaffold your application by using the `Create React App
  <https://reactjs.org/docs/create-a-new-react-app.html>`_ toolchain.
  Enter the following command into your terminal:

  .. code-block:: shell

     npx create-react-app my_electron_react_application

  Your application should include the following files. Some additional files in
  your project, such as CSS, service worker, and test files aren't included
  below.

  .. code-block:: text
     :emphasize-lines: 7, 8

     .
     |-- package.json 
     |-- package-lock.lock
     |-- public
     |   |-- index.html
     |-- src
     |   |-- App.js // renderer process
     |-- |-- index.js // renderer process

  Any JS file within the ``src`` directory executes on a ``renderer process``.

  .. note::

   Each Electron application can only have one **main process**. The
   main process creates web pages. Each web page runs in its
   own process, known as **renderer process**. To learn more about
   this, read the official `Electron Application
   Architecture <https://www.electronjs.org/docs/tutorial/application-architecture>`_
   doc.

---
title: Install CRACO to Alter Your Webpack Configuration
ref: install-craco
content: |
  To allow your application to work properly with Electron, you have to
  alter your webpack configuration. By default, applications created via
  create-react-app use a preconfigured webpack file and hidden to the
  end-user.  The Create React App default webpack configuration is not
  compatible with {+service+} and you must override it. You can use `CRACO
  <https://www.npmjs.com/package/@craco/craco>`_ to override these
  default values. Install CRACO with the following command:

  .. code-block:: shell

     npm install @craco/craco

---
title: Create a CRACO Configuration File
ref: create-craco-config
content: |
  In order to override the preconfigured webpack values, create a CRACO
  config file called ``craco.config.js`` at the root of your
  application. Add the following to this file:

  .. literalinclude:: /examples/QuickStarts/electron/quickstart-setup-react-cracoconfig.js

  The `target <https://webpack.js.org/configuration/target/>`_ is set to
  "electron-renderer" to compile your application for browser environments for
  Electron built-in modules. ``nodeExternals`` is also specified to prevent all
  node_modules from being bundled. The ``allowList`` key in the object passed
  in to ``nodeExternals`` specifies a list of modules to include in the bundle,
  in this case electron's dev tools and webpack. In order to make use of
  webpack-node-externals, run the following command:

  .. code-block:: shell

     npm install webpack-node-externals --save-dev

---
title: Install Electron
ref: install-electron
content: |
  To add Electron to your project, run the following command:

  .. code-block:: shell

     npm install electron --save-dev

---
title: Create Your Electron Main Process File
ref: create-your-electron-main-process
content: |
  The Electron ``main process`` file can be thought of as the entry
  point into your application. This file is responsible for loading your
  React App's ``index.html`` file into the ``BrowserWindow`` created by
  Electron.

  .. note::
     Each Electron application can only have one **main process**. The
     main process can create web pages. Each web page runs in its
     own process, known as a **renderer process**. To learn more about
     this, read the official `Electron Application
     Architecture <https://www.electronjs.org/docs/tutorial/application-architecture>`_
     doc.

  Add the following code to a new file called ``electron.js`` in the
  ``public`` directory:

  .. literalinclude:: /examples/QuickStarts/electron/quickstart-setup-react-electron.js

   Your application should now include the following files. Some additional files in
   your project, such as CSS, service worker, and test files aren't included below.

  .. code-block:: text
     :emphasize-lines: 7, 9, 10

     .
     |-- package.json 
     |-- package-lock.lock
     |-- craco.config.js
     |-- public
     |   |-- index.html
     |   |-- electron.js // main process
     |-- src
     |   |-- App.js // renderer process
     |-- |-- index.js // renderer process

  All JS files within the ``src`` directory executes on the ``renderer`` process. The electron.js and any files required by it execute on the main process.
---
title: Run Your Application
ref: run-your-app
content: |
  In order to run your application, specify a homepage and a main entry point for Electron by adding the following to your ``package.json`` file: 

  .. code-block:: shell

     "main": "public/electron.js",
     "homepage": "./",

  Finally, add the following scripts to your ``package.json`` file:

  .. code-block:: shell

     "scripts": {
       "build": "craco build",
       "start": "electron ."
     },

  In your terminal, run ``npm run build`` and then ``npm run start``. You should
  see the following:

  .. cssclass:: bordered-figure
  .. figure:: /images/electron-cra.png
    :alt: Electron Desktop App with React

---
title: Install Realm
ref: install-realm
content: |
  In your terminal, use the following command to add Realm to your project:

  .. code-block:: shell

     npm install realm

  Use realm in the **renderer process** by adding the following to the top
  of the ``src/App.js`` file (you will also need to import it in whichever
  file you write code using Realm in):

  .. code-block:: shell

     import Realm from "realm";
