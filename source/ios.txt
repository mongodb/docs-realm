.. _ios-intro:

=====================
MongoDB Realm iOS SDK
=====================

The {+service+} iOS SDK enables client applications on the iOS, macOS,
tvOS, and watchOS platforms to access data stored in local {+realms+}
and interact with {+backend+} services like Functions, MongoDB Data
Access, and authentication. The iOS SDK supports both Swift and
Objective-C applications.

.. note::

   The iOS SDK does not support Swift or Objective-C applications
   written for environments other than iOS, macOS, tvOS, and watchOS.

Installation
------------

To learn how to add the {+service+} iOS SDK library as a dependency
to your application, see
:ref:`Install Realm for iOS, macOS, tvOS, and watchOS
<ios-install>`.

The Realm Data Model
--------------------

You can store a wide variety of data within {+realms+} stored on your
device. With :term:`{+sync+}`, you can share updates to that data across
client devices and {+atlas+}.

For information about the structure of data you can store in {+realms+},
see :ref:`Realms <ios-realms>`, :ref:`Objects
<ios-realm-objects>`, and :ref:`Relationships
<ios-client-relationships>`.

To learn about the results returned from {+realm+} queries, see
:ref:`Collections <ios-client-collections>`.

Work with Realm Database
------------------------

Once you have defined a data model for your application, you
need to be able to :ref:`write <ios-realm-database-writes>` and
:ref:`read <ios-realm-database-reads>` pieces of data to and from
your {+realm+}s.

To learn how to query for data in local {+realms+}, see
:ref:`Query Engine <ios-client-query-engine>`.

For advice on how to safely interact with {+client-database+} across
threads in an application, see :ref:`Threading
<ios-client-threading>`.

For information about how to react to changes in {+realm+} data, see
:ref:`Notifications <ios-client-notifications>`.

Work with MongoDB Realm
-----------------------

The iOS SDK also connects your {+service-short+} client application
with your {+app+}'s backend services, including Functions, Services,
Webhooks, {+sync+}, and built-in third-party authentication.

To get connected to your {+backend+} app, see
:ref:`Initialize the RealmAppClient <init-appclient>`.

To learn how to connect to a {+backend+} app to call
Functions, query data in an instance of {+atlas+}, and synchronize data
in {+realms+}, see :doc:`Call a Function </functions/call-a-function>`.

To learn how to handle schema updates in your client application, see
:ref:`Migrations <ios-client-migrations>`.

.. toctree::
   :titlesonly:
   :caption: The Realm Data Model
   :hidden:

   Collections </ios/collections>
   Notifications </ios/notifications>
   Realms </ios/realms>
   Objects </ios/objects>
   Relationships </ios/relationships>

.. toctree::
   :titlesonly:
   :caption: Work with Realm Database
   :hidden:

   Threading </ios/threading>
   Reads </ios/reads>
   Writes </ios/writes>
   Query Engine </ios/query-engine>

.. toctree::
   :titlesonly:
   :caption: Work with MongoDB Realm
   :hidden:

   Call a Function </functions/call-a-function>
   Initialize the RealmAppClient </procedures/init-realmclient>

.. toctree::
   :titlesonly:
   :caption: Reference
   :hidden:

   Migrations </ios/migrations>
   Auxiliary Files </ios/auxiliary-files>
