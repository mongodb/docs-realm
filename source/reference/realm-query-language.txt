.. _realm-query-language:

====================
Realm Query Language
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

{+service+} supports a string-based query language to constrain searches 
for a fetch or for in-memory filtering. Queries evaluate an operator 
expression for every object in the collection being queried. If the 
expression resolves to ``true``, {+client-database+} includes the object 
in the results collection.

You can use Realm Query Language in every SDK, with your SDK's filter method.
You can also use Realm Query Language to browse for data in :ref:`Realm Studio 
<realm-studio>`.

Expressions
~~~~~~~~~~~

Filters consist of **expressions** in a predicate. An expression consists of
one of the following:

- The name (keypath) of a property of the object currently being evaluated.
- An operator and up to two argument expression(s).
- A value, such as a string (``'hello'``) or a number (``5``).

.. code-block:: javascript

   "progressMinutes > 1 AND name == %@", "Ali"

Dot Notation
~~~~~~~~~~~~

When referring to an object property, you can use **dot notation** to refer
to child properties of that object. You can even refer to the properties of
embedded objects and relationships with dot notation.

For example, consider a query on an object with a ``workplace`` property that
refers to a Workplace object. The Workplace object has an embedded object
property, ``address``. You can chain dot notations to refer to the zipcode
property of that address: 

.. code-block:: javascript

   workplace.address.zipcode == 10012

Subqueries
~~~~~~~~~~

You can iterate through a collection property with another query using the
``SUBQUERY()`` predicate function. ``SUBQUERY()`` has the following signature:

.. code-block:: javascript

   SUBQUERY(<collection>, <variableName>, <predicate>)

- ``collection``: the name of the list property to iterate through
- ``variableName``: a variable name of the current element to use in the subquery
- ``predicate``: a string that contains the subquery predicate. You can use the
  variable name specified by ``variableName`` to refer to the currently-iterated
  element.

.. example::

   Running the following filter on a ``projects`` collection returns projects
   with tasks that have not been completed by a user named Alex.

   .. code-block:: javascript

      "SUBQUERY(tasks, $task, $task.isComplete == false AND $task.assignee == 'Alex').@count > 0"

.. note:: About the Examples On This Page

   The examples in this page use a simple data set for a task list app. The 
   two Realm object types are ``Project`` and ``Task``. A ``Task`` has a 
   name, assignee's name, and completed flag. There is also an arbitrary 
   number for priority -- higher is more important -- and a count of minutes 
   spent working on it. A ``Project`` has zero or more ``Tasks``.

   See the schema for these two classes, ``Project`` and ``Task``, below:

   .. code-block:: json

      {
        "title": "task",
        "required": [
          "_id",
          "name",
          "isComplete",
          "priority",
          "progressMinutes"
        ],
        "properties": {
          "_id": { "bsonType": "objectId" },
          "name": { "bsonType": "string" },
          "isComplete": { "bsonType": "bool" },
          "assignee": { "bsonType": "string" },
          "priority": { "bsonType": "int" },
          "progressMinutes": { "bsonType": "int" }
        }
      },
      {
        "title": "project",
        "required": [
          "_id",
          "name",
          "tasks"
        ],
        "properties": {
          "_id": { "bsonType": "objectId" },
          "name": { "bsonType": "string" },
          "tasks": { "bsonType": "array",
            "tasks": {
              "bsonType": "objectId"
            }
          }
        }
      }

Operators
~~~~~~~~~

There are several types of operators available to filter a
Realm collection. Filters work by **evaluating** an operator expression 
for every :term:`object <Realm object>` in the collection being
filtered. If the expression resolves to ``true``, Realm
Database includes the object in the results collection.

Comparison Operators
````````````````````

The most straightforward operation in a search is to compare
values.

.. important:: Types Must Match

   The type on both sides of the operator must be equivalent. For
   example, comparing an ObjectId with string will result in a precondition 
   failure with a message like: 
   
   .. code-block::
      :copyable: false
   
      "Expected object of type object id for property 'id' on object of type 
      'User', but received: 11223344556677889900aabb (Invalid value)"
   
   You can compare any numeric type with any other numeric type.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``between``
     - Evaluates to ``true`` if the left-hand numerical or date expression is between or equal to the right-hand range. For dates, this evaluates to ``true`` if the left-hand date is within the right-hand date range.

   * - | ``==``, ``=``
     - Evaluates to ``true`` if the left-hand expression is equal to the right-hand expression.

   * - | ``>``
     - Evaluates to ``true`` if the left-hand numerical or date expression is greater than the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is later than the right-hand date.

   * - | ``>=``
     - Evaluates to ``true`` if the left-hand numerical or date expression is greater than or equal to the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is later than or the same as the right-hand date.

   * - ``in``
     - Evaluates to ``true`` if the left-hand expression is in the right-hand list or string.

   * - | ``<``
     - Evaluates to ``true`` if the left-hand numerical or date expression is less than the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is earlier than the right-hand date.

   * - | ``<=``
     - Evaluates to ``true`` if the left-hand numeric expression is less than or equal to the right-hand numeric expression. For dates, this evaluates to ``true`` if the left-hand date is earlier than or the same as the right-hand date.

   * - | ``!=``, ``<>``
     - Evaluates to ``true`` if the left-hand expression is not equal to the right-hand expression.

.. example::

   The following example uses the query engine's
   comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find long-running tasks by seeing if the ``progressMinutes`` property is at or above a certain value.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is equal to ``null``.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. code-block:: javascript

      "priority > 5"

      "progressMinutes > 120"

      "assignee == nil"

      "assignee IN {'Ali', 'Jamie'}"

      "progressMinutes BETWEEN {30, 60}"

Logical Operators
`````````````````

You can make compound predicates using logical operators.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``and``
       | ``&&``
     - Evaluates to ``true`` if both left-hand and right-hand expressions are ``true``.

   * - | ``not``
       | ``!``
     - Negates the result of the given expression.

   * - | ``or``
       | ``||``
     - Evaluates to ``true`` if either expression returns ``true``.

.. example::

   We can use the query language's logical operators to find
   all of Ali's completed tasks. That is, we find all tasks
   where the ``assignee`` property value is equal to 'Ali' AND
   the ``isComplete`` property value is ``true``:

   .. code-block:: javascript

      "assignee == 'Ali' AND isComplete == true"


String Operators
````````````````

You can compare string values using these string operators.
Regex-like wildcards allow more flexibility in search.

.. note::

   You can use the following modifiers with the string operators:

   - ``[c]`` for case insensitivity.

     .. code-block:: javascript

        "name CONTAINS[c] 'a'"

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``beginsWith``
     - Evaluates to ``true`` if the left-hand string expression begins with the right-hand string expression. This is similar to ``contains``, but only matches if the right-hand string expression is found at the beginning of the left-hand string expression.

   * - | ``contains``, ``in``
     - Evaluates to ``true`` if the left-hand string expression is found anywhere in the right-hand string expression.

   * - | ``endsWith``
     - Evaluates to ``true`` if the left-hand string expression ends with the right-hand string expression. This is similar to ``contains``, but only matches if the left-hand string expression is found at the very end of the right-hand string expression.

   * - | ``like``
     - Evaluates to ``true`` if the left-hand string expression
       matches the right-hand string wildcard string
       expression. A wildcard string expression is a string
       that uses normal characters with two special wildcard
       characters:

       - The ``*`` wildcard matches zero or more of any character
       - The ``?`` wildcard matches any character.

       For example, the wildcard string "d?g" matches "dog",
       "dig", and "dug", but not "ding", "dg", or "a dog".

   * - | ``==``, ``=``
     - Evaluates to ``true`` if the left-hand string is lexicographically equal to the right-hand string.

   * - | ``!=``, ``<>``
     - Evaluates to ``true`` if the left-hand string is not lexicographically equal to the right-hand string.

.. example::

   We use the query engine's string operators to find:

   - Projects with a name starting with the letter 'e'
   - Projects with names that contain 'ie'

   .. code-block:: javascript 

      // Use [c] for case-insensitivity.
      "name BEGINSWITH[c] 'e'"

      "name CONTAINS 'ie'"

Aggregate Operators
```````````````````

You can apply an aggregate operator to a collection property
of a Realm object. Aggregate operators traverse a
collection and reduce it to a single value.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``@avg``
     - Evaluates to the average value of a given numerical property across a collection.

   * - | ``@count``
     - Evaluates to the number of objects in the given collection. This
       is currently only supported on to-many relationship
       collections and not on lists of primitives. In order to use ``@count`` 
       on a list of primitives, consider wrapping the primitives in a 
       {+service-short+} object.

   * - | ``@max``
     - Evaluates to the highest value of a given numerical property across a collection.

   * - | ``@min``
     - Evaluates to the lowest value of a given numerical property across a collection.

   * - | ``@sum``
     - Evaluates to the sum of a given numerical property across a collection.

.. example::

   These examples all query for projects containing tasks that meet 
   this criteria:

   - Projects with average task priority above 5.
   - Projects with a task whose priority is less than 5.
   - Projects with a task whose priority is greater than 5.
   - Projects with more than 5 tasks.
   - Projects with long-running tasks.

   .. code-block:: javascript

      "tasks.@avg.priority > 5"

      "tasks.@max.priority < 5"

      "tasks.@min.priority > 5"

      "tasks.@count > 5"

      "tasks.@sum.progressMinutes > 100"

Set Operators
`````````````

A **set operator** uses specific rules to determine whether
to pass each input collection object to the output
collection by applying a given predicate to every element of
a given list property of
the object.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``ALL``
     - Returns objects where the predicate evaluates to ``true`` for all objects in the collection.

   * - ``ANY``, ``SOME``
     - Returns objects where the predicate evaluates to ``true`` for any objects in the collection.

   * - ``NONE``
     - Returns objects where the predicate evaluates to false for all objects in the collection.


.. example::

   We use the query engine's set operators to find:

   - Projects with no complete tasks.
   - Projects with any top priority tasks.

   .. code-block:: javascript

      "NONE tasks.isComplete == true"

      "ANY tasks.priority == 10"

Sort, Distinct, Limit
`````````````````````

You can use additional operators in your queries to sort and limit the 
results collection.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - ``SORT``
     - Specify the key path of the property to compare. You can optionally 
       specify ascending (``ASC``) or descending (``DSC``) order.

   * - ``DISTINCT``
     - Specify a key path of the property to compare. Remove duplicates 
       for that key path in the results collection.

   * - ``LIMIT``
     - Limit the results collection to the specified number.

   .. code-block:: javascript

      "assignee = 'Ali' SORT(priority) DISTINCT(name) LIMIT(5)"
