=====
Reads
=====

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To deliver a great user experience, you want data on hand
whenever and wherever you need it. Imagine multiple views
that show various facets of your data while a background
task crunches numbers based on the same information. If
every data consumer had to wait their turn to read, the app
would not feel graceful at all. Realm enables smooth user
experiences by allowing many simultaneous readers thanks to
its :ref:`multiversion concurrency control (MVCC)
<mvcc>` architecture.

This page details the key characteristics of read operations
in Realm and how to access your data.

Read Characteristics
--------------------

.. _results-are-not-copies:

Results Are Not Copies
~~~~~~~~~~~~~~~~~~~~~~

Results to a query are not copies of your data: modifying
the results of a query (within a write transaction) will
modify the data on disk directly. This memory mapping also
means that results are **live**: that is, they always
reflect the current state on disk.

See also: :ref:`Collections are Live <live-collections>`.

.. _results-are-lazy:

Results Are Lazy
~~~~~~~~~~~~~~~~

Realm defers execution of a query until you access the
results. You can chain several filter and sort operations
without requiring extra work to process the intermediate
state.

See also: :ref:`Results are Lazily Evaluated
<lazy-evaluated-results>`.

.. _references-retained:

References Are Retained
~~~~~~~~~~~~~~~~~~~~~~~

One benefit of Realm's object model is that Realm
automatically retains all of an object's :doc:`relationships
</data-model/relationships>` as direct references, so you
can traverse your graph of relationships directly through
the results of a query.

A **direct reference**, or pointer, allows you to access a
related object's properties directly through the reference.

In other databases, you usually have to serialize your
object in order to store it. In doing so, you lose any
direct references to other objects your object may have. In
order to reconstruct this relationship later, you would
represent the relationship in the serialized format by
storing the primary key of the related entity with the
object. When you load and deserialize the object, you then
have to reconstruct this relationship by joining tables or
using another mechanism to load the related entity based on
this primary key. Realm bypasses all of this by just storing
objects as objects.

.. _read-from-realm:

Read from Realm
---------------

A read from a realm generally consists of the following
steps:

- Query all objects of a specific Realm type.
- Filter the results using the :doc:`query engine </crud/query-engine>`.
- Sort the results.

All query, filter, and sort operations return a
:ref:`results collection <results-collections>`. The results
collections are live, meaning they always contain the latest
results of the associated query.

.. admonition:: About the examples on this page
   :class: note

   The examples on this page use the data model of a project
   management app that has two Realm object types: ``Project``
   and ``Task``. A ``Project`` has zero or more ``Tasks``.

   See the schema for these two classes, ``Project`` and
   ``Task``, below:

   .. include:: /examples/Schemas/ProjectAndTask.rst

.. _get-all-objects:

Get All Objects
~~~~~~~~~~~~~~~

The first step of any read is to **get all objects** of a
certain type in a realm. With this results collection, you
can operate on all instances on a type or filter and sort to
refine the results.

.. example::

   In order to access all instances of ``Project`` and ``Task``, use
   the following syntax:

   .. include:: /examples/CRUD/Objects.rst

.. _filter-results:

Filter Results
~~~~~~~~~~~~~~

A **filter** selects a subset of results based on the
value(s) of one or more object properties. Realm provides a
full-featured :doc:`query engine </crud/query-engine>` you
can use to define filters. The most common use case is to
find objects where a certain property matches a certain
value. Additionally, you can compare strings, aggregate over
collections of numbers, and use logical operators to build
up complex queries.

.. example::

   In the following example, we use the query
   engine's comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` property falls within a certain range.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is equal to null.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. include:: /examples/Query/Comparison.rst

.. _sort-results:

Sort Results
~~~~~~~~~~~~

A **sort** operation allows you to configure the order in
which Realm returns queried objects. You can sort based on
one or more properties of the objects in the results
collection.

Realm only guarantees a consistent order of results when the
results are sorted.

.. example::

   The following code sorts the projects by name in reverse
   alphabetical order (i.e. "descending" order).

   .. include:: /examples/CRUD/Sort.rst

Summary
-------

- When you read from Realm, the results are not copies. Instead, through memory mapping, results point directly to the version on disk.
- Queries are lazily-evaluated.
- To read, first get all objects of a certain type from the realm, then filter using the query engine, then (optionally) sort the results.
