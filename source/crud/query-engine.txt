.. _realm-query-engine:

============
Query Engine
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To filter data in your Realms, you can leverage Realm Database's
query engine. Each SDK has its own idiomatic approach to the
query engine:

- In the Swift, Objective-C, and JavaScript SDKs, Realm Database's query engine uses a query language based on `NSPredicate <https://developer.apple.com/documentation/foundation/nspredicate>`__ syntax.
- In the C#/.NET SDK, Realm's query engine implements standard `LINQ <https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/introduction-to-linq-queries>`__ syntax.
- In the Java SDK, Realm's query engine uses a :wikipedia:`Fluent interface <Fluent_interface>` to construct queries.

Regardless of the implementation details, the overall
functionality of the query engine across SDKs is
comparable.

This page outlines the query operators in general. The exact
syntax for using query operators depends on which SDK you
are using. Select your target SDK from the tabs below to see
more detail.

.. tabs-realm-languages::

   .. tab::
      :tabid: c-sharp

      Queries implement standard LINQ syntax. See the exact
      scope of LINQ implemented on the `LINQ Support page
      <https://realm.io/docs/dotnet/latest/api/linqsupport.html>`__.

   .. tab::
      :tabid: java

      Realm Database’s query engine uses a Fluent interface to
      construct multi-clause queries. See `RealmQuery API
      <https://realm.io/docs/java/latest/api/io/realm/RealmQuery.html>`__
      for a complete list of available methods.

   .. tab::
      :tabid: javascript

      Realm Database's query engine uses a language inspired by
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a brief tutorial on the JavaScript SDK
      implementation, see `Query Language tutorial
      <https://realm.io/docs/javascript/latest/api/tutorial-query-language.html>`__.

   .. tab::
      :tabid: objective-c

      Realm Database's query engine supports common predicates of
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a quick reference to the Objective-C SDK
      implementation, see `NSPredicate Cheatsheet
      <https://academy.realm.io/posts/nspredicate-cheatsheet/>`__.

   .. tab::
      :tabid: swift

      Realm Database's query engine supports common predicates of
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a quick reference to the Swift SDK implementation,
      see `NSPredicate Cheatsheet
      <https://academy.realm.io/posts/nspredicate-cheatsheet/>`__.

Operators
---------

There are several types of operators available to filter a
:doc:`Realm collection </crud/collections>`. Filters work by
**evaluating** an operator expression for every :term:`object
<Realm object>` in the collection
being filtered. If the expression resolves to ``true``, Realm Database
includes the object in the results collection.

An **expression** consists of one of the following:

- The name of a property of the object currently being evaluated.
- An operator and up to two argument expression(s).
- A literal string, number, or date.

.. admonition:: About the examples on this page
   :class: note

   The examples in this page use a simple data set for a
   task list app. The two Realm object types are ``Project``
   and ``Task``. A ``Task`` has a name, assignee's name, and
   completed flag. There is also an arbitrary number for
   priority -- higher is more important -- and a count of
   minutes spent working on it. A ``Project`` has zero or more
   ``Tasks``.

   See the schema for these two classes, ``Project`` and
   ``Task``, below:

   .. include:: /examples/Schemas/ProjectAndTask.rst

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The most straightforward operation in a search is to compare
values.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``between``
     - Evaluates to ``true`` if the left-hand numerical or date expression is between or equal to the right-hand range. For dates, this evaluates to ``true`` if the left-hand date is within the right-hand date range. Not supported on the JS or C# SDKs.

   * - | ``equalTo`` (Java)
       | ``==`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand expression is equal to the right-hand expression.

   * - | ``greaterThan`` (Java)
       | ``>`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand numerical or date expression is greater than the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is later than the right-hand date.

   * - | ``greaterThanOrEqualTo`` (Java)
       | ``>=`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand numerical or date expression is greater than or equal to the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is later than or the same as the right-hand date.

   * - ``in``
     - Evaluates to ``true`` if the left-hand expression is in the right-hand list. Not supported on the C# SDK.

   * - | ``lessThan`` (Java)
       | ``<`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand numerical or date expression is less than the right-hand numerical or date expression. For dates, this evaluates to ``true`` if the left-hand date is earlier than the right-hand date.

   * - | ``lessThanOrEqualTo`` (Java)
       | <= (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand numeric expression is less than or equal to the right-hand numeric expression. For dates, this evaluates to ``true`` if the left-hand date is earlier than or the same as the right-hand date.

   * - | ``notEqualTo`` (Java)
       | ``!=`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if the left-hand expression is not equal to the right-hand expression.

.. example::

   The following example uses the query engine's
   comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` property falls within a certain range.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is equal to ``null``.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. include:: /examples/Query/Comparison.rst

Logical Operators
~~~~~~~~~~~~~~~~~

You can make compound predicates using logical operators.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``and`` (Java, JS, Obj-C, Swift)
       | ``&&`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if both left-hand and right-hand expressions are ``true``.

   * - | ``not`` (Java, JS, Obj-C, Swift)
       | ``!`` (C#, JS, Obj-C, Swift)
     - Negates the result of the given expression.

   * - | ``or`` (Java, JS, Obj-C, Swift)
       | ``||`` (C#, JS, Obj-C, Swift)
     - Evaluates to ``true`` if either expression returns ``true``.

.. example::

   We can use the query language's logical operators to find
   all of Ali's completed tasks. That is, we find all tasks
   where the ``assignee`` property value is equal to 'Ali' AND
   the ``isComplete`` property value is ``true``:

   .. include:: /examples/Query/Logical.rst

String Operators
~~~~~~~~~~~~~~~~

You can compare string values using these string operators.
Regex-like wildcards allow more flexibility in search.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``beginsWith`` (Java, JS, Obj-C, Swift)
       | ``StartsWith`` (C#)
     - Evaluates to ``true`` if the left-hand string expression begins with the right-hand string expression. This is similar to ``contains``, but only matches if the left-hand string expression is found at the beginning of the right-hand string expression.

   * - ``contains``
     - Evaluates to ``true`` if the left-hand string expression is found anywhere in the right-hand string expression.
       Not supported on the C# SDK.

   * - | ``endsWith`` (Java, JS, Obj-C, Swift)
       | ``EndsWith`` (C#)
     - Evaluates to ``true`` if the left-hand string expression ends with the right-hand string expression. This is similar to ``contains``, but only matches if the left-hand string expression is found at the very end of the right-hand string expression.

   * - | ``like`` (Java, JS, Obj-C, Swift)
       | ``Like`` (C#)
     - Evaluates to ``true`` if the left-hand string expression
       matches the right-hand string wildcard string
       expression. A wildcard string expression is a string
       that uses normal characters with two special wildcard
       characters:

       - The ``*`` wildcard matches zero or more of any character
       - The ``?`` wildcard matches any character.

       For example, the wildcard string "d?g" matches "dog",
       "dig", and "dug", but not "ding", "dg", or "a dog".

   * - | ``equalTo`` (Java)
       | ``==`` (JS, Obj-C, Swift)
       | ``Equals`` (C#)
     - Evaluates to ``true`` if the left-hand string is lexicographically equal to the right-hand string.


.. example::

   We use the query engine's string operators to find
   projects with a name starting with the letter 'e' and
   projects with names that contain 'ie':

   .. include:: /examples/Query/String.rst

Aggregate Operators
~~~~~~~~~~~~~~~~~~~

You can apply an aggregate operator to a collection property
of a Realm object. Aggregate operators traverse a
:doc:`collection </crud/collections>` and reduce it to a
single value.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``average`` (Java)
       | ``@avg`` (JS, Obj-C, Swift)
     - Evaluates to the average value of a given numerical property across a collection. Not supported on the C# SDK.

   * - | ``count`` (Java)
       | ``@count`` (JS, Obj-C, Swift)
       | ``Count`` (C#)
     - Evaluates to the number of objects in the given collection.

   * - | ``max`` (Java)
       | ``@max`` (JS, Obj-C, Swift)
     - Evaluates to the highest value of a given numerical property across a collection.
       Not supported on the C# SDK.

   * - | ``min`` (Java)
       | ``@min`` (JS, Obj-C, Swift)
     - Evaluates to the lowest value of a given numerical property across a collection.
       Not supported on the C# SDK.

   * - | ``sum`` (Java)
       | ``@sum`` (JS, Obj-C, Swift)
     - Evaluates to the sum of a given numerical property across a collection.

.. example::

   We create a couple of filters to show different facets of
   the data:

   - Projects with average tasks priority above 5.
   - Long running projects.

   .. include:: /examples/Query/Accumulator.rst

Set Operators
~~~~~~~~~~~~~

A **set operator** uses specific rules to determine whether
to pass each input collection object to the output
collection by applying a given predicate to every element of
a given :ref:`list <list-collections>` property of the
object.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``All``
     - Returns objects where the predicate evaluates to ``true`` for all objects in the collection.
       Not supported on the C# or Java SDKs.

   * - ``Any``
     - Returns objects where the predicate evaluates to ``true`` for any objects in the collection.
       Not supported on the Java SDK.

   * - ``None``
     - Returns objects where the predicate evaluates to false for all objects in the collection.
       Not supported on the C# or Java SDKs. 


.. example::

   We use the query engine's set operators to find:

   - Projects with no complete tasks.
   - Projects with any top priority tasks.

   .. include:: /examples/Query/Set.rst

Summary
-------

- Each SDK has its own language-idiomatic implementation of the query engine.
- There are several categories of **operators** available to filter results: comparison, logical, string, aggregate, and set operators.
