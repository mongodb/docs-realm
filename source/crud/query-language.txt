==============
Query Language
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

To interact with data in your realms, you can leverage
Realm's query engine. Each SDK has its own idiomatic
manifestation of the query language: 

- In the Swift, Objective-C, and JavaScript SDKs, Realm's query engine uses a query language based on `NSPredicate <https://developer.apple.com/documentation/foundation/nspredicate>`__ syntax.
- In the C#/.NET SDK, Realm's query engine implements standard `LINQ <https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/introduction-to-linq-queries>`__ syntax.
- In the Java SDK, Realm's query engine uses a :wikipedia:`Fluent interface <Fluent_interface>` to construct queries.

Regardless of the implementation details, the overall
functionality of the query language across SDKs is
comparable.

Syntax
~~~~~~

This page outlines the query operators in general. The exact
syntax for using query operators depends on which SDK you
are using. Select your target SDK from the tabs below to see
more detail.

.. tabs-realm-languages::

   .. tab::
      :tabid: c-sharp

      Queries implement standard LINQ syntax. See the exact
      scope of LINQ implemented on the `LINQ Support page
      <https://realm.io/docs/dotnet/latest/api/linqsupport.html>`__.

   .. tab::
      :tabid: java

      Realm’s query engine uses a Fluent interface to
      construct multi-clause queries. See `RealmQuery API
      <https://realm.io/docs/java/latest/api/io/realm/RealmQuery.html>`__
      for a complete list of available methods.

   .. tab::
      :tabid: javascript

      Realm's query engine uses a language inspired by
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a brief tutorial on the JavaScript SDK
      implementation, see `Query Language tutorial
      <https://realm.io/docs/javascript/latest/api/tutorial-query-language.html>`__.

   .. tab::
      :tabid: objective-c

      Realm's query engine supports common predicates of
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a quick reference to the Objective-C SDK
      implementation, see `NSPredicate Cheatsheet
      <https://academy.realm.io/posts/nspredicate-cheatsheet/>`__.

   .. tab::
      :tabid: swift

      Realm's query engine supports common predicates of
      NSPredicate. For an introduction to NSPredicate in
      general, See Apple’s `Predicates Programming Guide
      <https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html>`__.
      For a quick reference to the Swift SDK implementation,
      see `NSPredicate Cheatsheet
      <https://academy.realm.io/posts/nspredicate-cheatsheet/>`__.

Operators
---------

The various operators available to filter a Realm collection
are detailed below.

.. admonition:: About the examples below
   :class: note

   The examples in this page use a simple data set for a task
   list app. The two Realm object types are Project and Task. A
   Task has a name, assignee's name, and completed flag. There
   is also an arbitrary number for priority -- higher is more
   important -- and a count of minutes spent working on it. A
   Project has zero or more Tasks.

   See the schema for these two classes, Project and Task,
   below:

   .. include:: /examples/Schemas/ProjectAndTask.rst

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The most straightforward operation in a search is to compare
values.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``between``
     - Evaluates to true if the left-hand argument is between or equal to the right-hand expression.
       Not supported on the JS or C# SDKs.

   * - | ``equalTo`` (Java)
       | ``==`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is equal to the right-hand argument.

   * - | ``greaterThan`` (Java)
       | ``>`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is greater than the right-hand argument.

   * - | ``greaterThanOrEqualTo`` (Java)
       | ``>=`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is greater than or equal to the right-hand argument.

   * - ``in``
     - Evaluates to true if the left-hand argument is in the right-hand list.
       Not supported on the C# SDK.

   * - | ``lessThan`` (Java)
       | ``<`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is less than the right-hand argument.

   * - | ``lessThanOrEqualTo`` (Java)
       | <= (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is less than or equal to the right-hand argument.

   * - | ``notEqualTo`` (Java)
       | ``!=`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if the left-hand argument is not equal to the right-hand argument.

.. example::

   The following example uses the query language's
   comparison operators to:

   - Find high priority Tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running Tasks by seeing if the ``progressMinutes`` property falls within a certain range.
   - Find unassigned Tasks by finding Tasks where the ``assignee`` property is equal to null.
   - Find Tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. include:: /examples/Query/Comparison.rst

Logical Operators
~~~~~~~~~~~~~~~~~

You can make compound predicates using logical operators.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``and`` (Java, JS, Obj-C, Swift)
       | ``&&`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if both left-hand and right-hand predicates are true.

   * - | ``not`` (Java, JS, Obj-C, Swift)
       | ``!`` (C#, JS, Obj-C, Swift)
     - Negates the result of the given predicate.

   * - | ``or`` (Java, JS, Obj-C, Swift)
       | ``||`` (C#, JS, Obj-C, Swift)
     - Evaluates to true if either predicate returns true.

.. example::

   We can use the query language's logical operators to find
   all of Ali's completed Tasks. That is, we find all Tasks
   where the assignee property value is equal to 'Ali' AND
   the isCompleted property value is true:

   .. include:: /examples/Query/Logical.rst

String Operators
~~~~~~~~~~~~~~~~

You can compare string values for common string use cases.
Regex-like wildcards allow more flexibility in search.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``beginsWith`` (Java, JS, Obj-C, Swift)
       | ``StartsWith`` (C#)
     - Evaluates to true if the left-hand string begins with the right-hand string.

   * - ``contains``
     - Evaluates to true if the left-hand string contains the right-hand string.
       Not supported on the C# SDK.

   * - | ``endsWith`` (Java, JS, Obj-C, Swift)
       | ``EndsWith`` (C#)
     - Evaluates to true if the left-hand string ends with the right-hand string.

   * - | ``like`` (Java, JS, Obj-C, Swift)
       | ``Like`` (C#)
     - Evaluates to true if the left-hand string matches the right-hand string string. The right-hand string may use the ``*`` wildcard to match zero or more of any character and the ``?`` wildcard to match one of any character.

   * - | ``equalTo`` (Java)
       | ``==`` (JS, Obj-C, Swift)
       | ``Equals`` (C#)
     - Evaluates to true if the left-hand string is lexicographically equal to the right-hand string.


.. example::

   We use the query language's string operators to find
   Projects with a name starting with the letter 'e' and
   Projects with names that contain 'ie':

   .. include:: /examples/Query/String.rst

Aggregate Operators
~~~~~~~~~~~~~~~~~~~

You can apply an aggregate operator to a collection property of a Realm object.
Aggregate operators traverse a collection and reduce it to a single value.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``average`` (Java)
       | ``@avg`` (JS, Obj-C, Swift)
     - Evaluates to the average value of a given field across a collection.
       Not supported on the C# SDK.

   * - | ``count`` (Java)
       | ``@count`` (JS, Obj-C, Swift)
       | ``Count`` (C#)
     - Evaluates to the number of objects in the given collection.

   * - | ``max`` (Java)
       | ``@max`` (JS, Obj-C, Swift)
     - Evaluates to the highest value of a given field across a collection.
       Not supported on the C# SDK.

   * - | ``min`` (Java)
       | ``@min`` (JS, Obj-C, Swift)
     - Evaluates to the lowest value of a given field across a collection.
       Not supported on the C# SDK.

   * - | ``sum`` (Java)
       | ``@sum`` (JS, Obj-C, Swift)
     - Evaluates to the sum of a given field across a collection.

.. example::

   Let's create a few filters to show facets of our data:

   - Projects with average tasks priority above 5.
   - Long running Projects.

   .. include:: /examples/Query/Accumulator.rst

Set Operators
~~~~~~~~~~~~~

You can apply a set operator to a collection property of the
target Realm object. The set operator will traverse the
collection to evaluate its condition on the elements of the
collection. If the predicate evaluates to true, that parent
object will be included in the results set.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``All``
     - Returns objects where predicate evaluates to true for all objects in the collection.
       Not supported on the C# or Java SDKs.

   * - ``Any``
     - Returns objects where predicate evaluates to true for any objects in the collection.
       Not supported on the Java SDK.

   * - ``None``
     - Returns objects where predicate evaluates to false for all objects in the collection.
       Not supported on the C# or Java SDKs. 


.. example::

   We use the query language's set operators to find:

   - Projects with no complete tasks.
   - Projects with any top priority tasks.

   .. include:: /examples/Query/Set.rst
