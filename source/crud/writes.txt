======
Writes
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm has a highly efficient storage engine that you can use
to persist objects. You can **create** objects in a realm,
**update** objects in a realm, and eventually **delete**
objects from a realm. Because these operations modify the
state of the realm, we call them writes.

Realm handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
Realm treats as a single indivisable operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. admonition:: Remember
   :class: note

   All writes must happen in a transaction.

A realm allows only one open transaction at a time. Realm
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the realm within a
transaction.

When you are done with your transaction, Realm either
**commits** it or **cancels** it:

- When Realm **commits** a transaction, Realm writes all changes to
  disk. If the realm is synced, Realm queues the change for
  synchronization with the Realm Object Server.
- When Realm **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

Realm guarantees that transactions are :wikipedia:`ACID
<ACID>` compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

- Realm establishes :wikipedia:`atomicity <Atomicity_(database_systems)>` by grouping operations in transactions and rolling back all operations in a transaction if any of them fail.
- Realm establishes :wikipedia:`consistency <Consistency_(database_systems)>` and avoids data corruption by validating changes against the schema. If the result of any write operation is not valid, Realm cancels and rolls back the entire transaction.
- Realm establishes :wikipedia:`isolation <Isolation_(database_systems)>` by allowing only one writer at a time. This ensures thread safety between transactions.
- Finally, Realm establishes :wikipedia:`durability <Durability_(database_systems)>` by writing to disk immediately when a transaction is committed. In the event of an app crash, for example, the changes are not lost or corrupted.

.. _open-a-transaction:

Run a Transaction
-----------------

Realm represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the realm's ``write`` method. Within this callback, you are
free to create, read, update, and delete on the realm. If
the code in the callback throws an exception when Realm runs
it, Realm cancels the transaction. Otherwise, Realm commits
the transaction immediately after the callback.

.. admonition:: Concurrency Concerns
   :class: important

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync/sync-overview>`, avoid opening transactions on the
   UI thread altogether, as Realm processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   the realm's write method. If the code in the callback
   throws an exception, Realm cancels the transaction.
   Otherwise, Realm commits the transaction.

   .. include:: /examples/CRUD/Transaction.rst

.. _create-an-object:

Create an Object
----------------

In general, instantiate :doc:`Realm objects
</data-model/objects>` as you would any other object. In a
transaction, you can add the object to the realm if the
realm's :ref:`schema <realm-schema>` includes the object
type. When you add an instance to the realm, it becomes
*managed* by that realm.

With the Java and JavaScript SDKs, instead use the realm's
factory method in a transaction to instantiate your class.
This automatically inserts the instance into the realm.

.. example::

   This code demonstrates how to create an object with Realm:

   .. include:: /examples/CRUD/Create.rst

.. _upsert:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** is a write operation that either inserts a new
object with a given primary key or updates an existing
object that already has that primary key. We call this an
upsert because it is an "**update** or **insert**"
operation. This is useful when an object may or may not
already exist, such as when bulk importing a dataset into an
existing realm. Upserting is an elegant way to update
existing entries while adding any new entries.

.. example::

   This code demonstrates how to upsert an object with
   Realm. We create a new user named "Drew" and then update
   their name to "Andy" via upsert:

   .. include:: /examples/CRUD/Upsert.rst

.. _update:

Update an Object
----------------

Within a transaction, you can update a Realm object the same
way you would update any other object in your language of
choice: just assign a new value to the property or update
the property.

.. example::

   This code changes the dog's name to "Wolfie" and
   increments the age by 1:

   .. include:: /examples/CRUD/Update.rst

.. _batch-update:

Update a Collection
~~~~~~~~~~~~~~~~~~~

Realm supports collection-wide updates. A collection update
applies the same update to specific properties of several
objects in a collection at once.

.. example::

   The following code demonstrates how to update a
   collection. Thanks to the :ref:`implicit inverse
   relationship <inverse-relationship>` between the Dog's
   ``owner`` property and the Person's ``dogs`` property,
   Realm automatically updates Ali's list of dogs.

   .. include:: /examples/CRUD/BatchUpdate.rst

.. _delete:

Delete an Object
----------------

In general, to delete an object from a realm, pass the
instance to the delete method of the realm within a
transaction.

With the Java SDK, call ``deleteFromRealm()`` on the
instance itself.

.. admonition:: Do not use objects after delete
   :class: important

   Realm throws an error if you try to use an object after
   it has been deleted.

.. example::

   The following code shows how to delete one object from
   its realm:

   .. include:: /examples/CRUD/Delete.rst

.. _delete-collection:

Delete a Collection
~~~~~~~~~~~~~~~~~~~

In general, to delete a collection of objects from a realm,
pass the collection to the delete method of the realm within
a transaction.

With the Java SDK, call ``deleteFromRealm()`` on the
collection itself.

.. example::

   The following code demonstrates how to delete a
   collection from a realm:

   .. include:: /examples/CRUD/DeleteCollection.rst

.. _cascading-delete:

Cascading Delete
~~~~~~~~~~~~~~~~

Sometimes, you have :doc:`dependent objects
</data-model/relationships>` that you want to delete when
you delete the parent object. We call this a **cascading
delete**. Realm will not delete the dependent objects for
you. If you do not delete the objects yourself, they will
remain orphaned in your realm. Whether or not this is a
problem depends on your application's needs.

Currently, the best way to delete dependent objects is to
iterate through the dependencies and delete them before
deleting the parent object.

.. example::

   The following code demonstrates how to perform a
   cascading delete by first deleting all of Ali's dogs,
   then deleting Ali:

   .. include:: /examples/CRUD/CascadingDelete.rst

.. _delete-all-of-object:

Delete All Instances of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm supports deleting all instances of a :doc:`Realm type
</data-model/objects>` from a realm.

.. example::

   The following code demonstrates how to delete all
   Dog instances from a realm:

   .. include:: /examples/CRUD/DeleteAllOfClass.rst

.. _delete-all:

Delete Everything
~~~~~~~~~~~~~~~~~

It is possible to delete all objects from the realm. This
does not affect the schema of the realm. This is useful for
quickly clearing out your realm while prototyping.

.. example::

   The following code demonstrates how to delete everything
   from a realm:

   .. include:: /examples/CRUD/DeleteAll.rst

Summary
-------

- Realm handles writes in terms of **transactions**. All writes must occur in a transaction.
- Realm transactions are ACID compliant.
- To write to realm, define the transaction in a callback function that you pass to the realm's ``write`` method.
