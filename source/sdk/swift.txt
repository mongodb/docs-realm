:template: product-landing
:hidefeedback: header
:noprevnext:

.. _ios-intro:

===============
Realm Swift SDK
===============

.. toctree::
   :titlesonly:
   
   Why Realm? </sdk/swift/realm-database>
   Install Realm </sdk/swift/install>
   Quick Start </sdk/swift/quick-start>
   Realm Files </sdk/swift/realm-files>
   Model Data </sdk/swift/model-data>
   CRUD </sdk/swift/crud>
   React to Changes </sdk/swift/react-to-changes>
   SwiftUI </sdk/swift/swiftui>
   Actor-Isolated Realms </sdk/swift/actor-isolated-realm>
   Swift Concurrency </sdk/swift/swift-concurrency>
   Test and Debug </sdk/swift/test-and-debug>
   Logging </sdk/swift/logging>
   Application Services </sdk/swift/application-services>
   Manage Users </sdk/swift/work-with-users>
   Sync Data </sdk/swift/sync>
   Realm in Xcode Playgrounds </sdk/swift/xcode-playgrounds>
   SDK Telemetry </sdk/swift/telemetry>
   API Reference </sdk/swift/api-reference>
   Release Notes <https://github.com/realm/realm-swift/releases>

Use the Realm Swift SDK to develop iOS, macOS, watchOS and tvOS apps in
Swift and Objective-C.

.. kicker:: Learning Paths

Get Started with Realm Swift
----------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/swift/quick-start/
      :icon: /images/icons/branding_2022/Technical_ATLAS_Functions3x.png
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with Realm.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: /images/icons/branding_2022/Technical_REALM_Mobile3x.png
      :icon-alt: Realm Mobile Icon

      Learn from example by dissecting a working SwiftUI client app that
      uses Realm with Device Sync.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/swiftui/
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working Realm app.

.. kicker:: What You Can Do

Develop Apps with Realm
-----------------------

Use free open-source Realm as a local object store on a device.
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and
other clients.

.. tabs::

   .. tab:: Use Realm Locally
      :tabid: local-realm

      .. procedure::

         .. step:: Install the Realm Swift SDK

            Use Swift Package Manager, CocoaPods, or Carthage to
            :ref:`ios-install` in your project.

            Import Realm in your project files to get started.

         .. step:: Define an Object Schema

            Use Swift to idiomatically :ref:`define an object schema
            <ios-define-a-realm-object-schema>`.

         .. step:: Open a Realm

            Realm stores objects in realm files on your device,
            or you can open an in-memory realm which does not create a file.
            :ref:`Configure and open a realm <ios-configure-and-open-a-realm>`
            to get started reading and writing data.

         .. step:: Read and Write Data

            :ref:`Create <swift-crud-create>`, :ref:`read <swift-crud-read>`,
            :ref:`update <swift-crud-update>`, and :ref:`delete <swift-crud-delete>`
            objects from the realm. Filter data using Realm Swift's
            :ref:`type-safe .where syntax <ios-realm-swift-query-api>`,
            or construct an :ref:`NSPredicate <ios-nspredicate-query>`.

         .. step:: React to Changes

            Realm's live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <ios-react-to-changes>`
            to watch for changes and perform some logic, such as updating
            your UI. Or in SwiftUI, use the Realm Swift property wrappers
            to :ref:`update Views when data changes
            <swiftui-update-ui-when-objects-change>`.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules. Use
            Development Mode to infer your schema from your Swift or
            Objective-C data model.

            Then, :ref:`connect to the backend <ios-init-appclient>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a
            user <ios-authenticate-users>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or
            Facebook. Use our built-in email/password provider to manage
            users without a third-party, or use custom JWT authentication to
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Realm

            Instead of opening a local realm, :ref:`configure and open a
            synced Realm <ios-configure-and-open-a-synced-realm>`.
            :ref:`Subscribe to a query <swift-manage-flexible-sync-subscriptions>`
            to determine what data the synced realm can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data from a realm are the same
            whether you're using a synced or local realm. Data that you
            read and write is automatically kept in sync with your Atlas
            cluster and other clients. Apps keep working offline and
            deterministically sync changes whenever a network connection is
            available.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

   .. tab:: Use Realm with SwiftUI
      :tabid: realm-swiftui

      .. container::

         The Realm Swift SDK offers property wrappers and convenience features
         designed to make it easier to work with Realm in SwiftUI.
         For example View code that demonstrates common Realm SwiftUI patterns,
         check out the :ref:`SwiftUI documentation <ios-swiftui-examples>`.

         .. literalinclude:: /examples/generated/swiftui/FilterData.snippet.searchable.swift
            :language: swift
            :caption: SwiftUI Property Wrappers Offer Realm/SwiftUI Integration
            :copyable: false

      .. image:: /images/illustrations/Spot_MauvePurple_Logic_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <ios-call-a-function>`
         from your client application that run in an App Services backend.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         You can :ref:`query data stored in MongoDB <ios-mongodb-remote-access>`
         directly from your client application code.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <ios-authenticate-users>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Swift API Reference
      :cta: RealmSwift Reference
      :url: https://www.mongodb.com/docs/realm-sdks/swift/latest
      :icon: /images/icons/branding_2022/Technical_REALM_SDK3x.png
      :icon-alt: Realm Icon

      Explore generated reference docs for the RealmSwift APIs.

   .. card::
      :headline: Objective-C API Reference
      :cta: Realm Reference
      :url: https://www.mongodb.com/docs/realm-sdks/objc/latest
      :icon: /images/icons/branding_2022/Technical_REALM_SDK3x.png
      :icon-alt: Realm Icon

      Explore generated reference docs for the Realm Objective-C APIs.
       
   .. card::
      :headline: SwiftUI Quick Start
      :cta: Explore the Quick Start
      :url: https://www.mongodb.com/docs/realm/sdk/swift/swiftui-tutorial
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Tutorial Icon

      Get started with Realm for SwiftUI.
