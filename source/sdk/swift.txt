.. _ios-intro:

=======================
MongoDB Realm Swift SDK
=======================

.. toctree::
   :titlesonly:
   
   Install Realm for iOS, macOS, tvOS, and watchOS </sdk/swift/install>
   Quick Start </sdk/swift/quick-start>
   Quick Start with Sync </sdk/swift/quick-start-with-sync>
   Quick Start with SwiftUI </sdk/swift/swiftui>
   Fundamentals </sdk/swift/fundamentals>
   Data Types </sdk/swift/data-types>
   Usage Examples </sdk/swift/examples>
   Advanced Guides </sdk/swift/advanced-guides>
   Integration Guides </sdk/swift/integrations>
   Test and Debug </sdk/swift/test-and-debug>
   Upgrade from Stitch to Realm </sdk/swift/upgrade-from-stitch-to-realm>
   Objective-C Reference Manual <https://docs.mongodb.com/realm-sdks/objc/latest>
   Swift Reference Manual <https://docs.mongodb.com/realm-sdks/swift/latest>
   Release Notes <https://github.com/realm/realm-swift/releases>
   Additional Examples </sdk/swift/additional-examples>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+service+} Swift SDK enables mobile applications to access data
stored in local {+realms+}. Optionally, interact with {+backend+} services 
like Functions, MongoDB Data Access, and authentication.

.. seealso::

   Are you looking for information about using Swift with MongoDB in a 
   backend app, command-line utility, or running on macOS or Linux? See 
   the :driver:`MongoDB Swift Driver documentation </swift>`.

Realm Database
--------------

With the {+service+} Swift SDK, you can access objects stored in a local
instance of {+client-database+}.

Define an Object Schema
~~~~~~~~~~~~~~~~~~~~~~~

Use Swift to idiomatically :ref:`define an object schema <ios-define-a-realm-object-schema>`.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.coffee-drink-object.swift
   :language: swift

Write an Object
~~~~~~~~~~~~~~~

Create a new object as you would instantiate any other object. Then,
pass it to {+client-database+} inside :ref:`a write transaction <ios-create-a-new-object>`.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.write-an-object.swift
   :language: swift

Query Realm Database
~~~~~~~~~~~~~~~~~~~~

:ref:`Query <ios-client-query-engine>` for stored objects using 
Swift-idiomatic queries.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.query.swift
   :language: swift

Update Live Objects
~~~~~~~~~~~~~~~~~~~

:ref:`Update <ios-modify-an-object>` objects by updating field values on
an instance of the object within a transaction.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.update-live-objects.swift
   :language: swift

Watch for Updates
~~~~~~~~~~~~~~~~~

:ref:`Register a notification handler <ios-react-to-changes>` on an entire 
{+realm+}, a collection, or an object, and react to changes.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.watch-for-object-updates.swift
   :language: swift

Always Access the Latest Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Because {+client-database+} objects are **live objects**, they're 
automatically updated when they're modified.

.. literalinclude:: /examples/generated/code/start/LandingPageCodeExamples.codeblock.always-access-the-latest-data.swift
   :language: swift

Realm Apps
----------

{+app+}s are backends for client applications hosted by MongoDB in the 
cloud. They provide the ability to synchronize data stored in
{+client-database+}, called **{+sync+}**, as well as a layer of backend
functionality collectively called **App Services**. In addition to working
with local {+client-database+}, the Swift SDK also enables you to leverage
the features of {+app+}s.

Realm Sync
~~~~~~~~~~

Use :ref:`{+sync+} <ios-sync-changes-between-devices>` to automatically 
sync your {+realm+}s across client devices and a {+atlas+} data store backend.

.. important::

   {+sync+} does not currently support watchOS.

App Services
~~~~~~~~~~~~

When you create a {+app+}, you get access to a variety of services to streamline
app development:

- :ref:`User management <ios-authenticate-users>`: built-in user management to enable account 
  creation and authentication
- :ref:`Functions <ios-call-a-function>`: define and execute server-side logic
- :ref:`Triggers <triggers>`: react to events or define a schedule to execute 
  automated processes

Get Started
-----------

.. list-table::
   :header-rows: 1
   :class: index-table

   * - Get Started
     - Fundamentals
     - Examples
     - Realm Apps Examples

   * - :doc:`Install Realm for iOS, macOS, tvOS, and watchOS </sdk/swift/install>`

       :doc:`Quick Start </sdk/swift/quick-start>`

       :doc:`Quick Start with Sync </sdk/swift/quick-start-with-sync>`

       :doc:`Quick Start with SwiftUI </sdk/swift/swiftui>`

       :doc:`Upgrade from Stitch to Realm </sdk/swift/upgrade-from-stitch-to-realm>`
   
     - :doc:`Realms </sdk/swift/fundamentals/realms>`

       :doc:`Live Queries </sdk/swift/fundamentals/live-queries>`

       :doc:`Write Transactions </sdk/swift/fundamentals/write-transactions>`

       :doc:`Object Models & Schemas </sdk/swift/fundamentals/object-models-and-schemas>`

     - :doc:`Define a Realm Object Schema </sdk/swift/examples/define-a-realm-object-model>`

       :doc:`Configure & Open a Realm </sdk/swift/examples/configure-and-open-a-realm>`

       :doc:`Read & Write Data </sdk/swift/examples/read-and-write-data>`

       :doc:`React to Changes </sdk/swift/examples/react-to-changes>`

       :doc:`Modify an Object Schema </sdk/swift/examples/modify-an-object-schema>`

     - :doc:`Connect to a Realm Backend App </sdk/swift/examples/connect-to-a-mongodb-realm-backend-app>`

       :doc:`Authenticate Users </sdk/swift/examples/users/authenticate-users>`

       :doc:`Sync Changes Between Devices </sdk/swift/examples/sync-changes-between-devices>`

       :doc:`Call a Function </sdk/swift/examples/call-a-function>`

       :doc:`Manage Email/Password Users </sdk/swift/examples/users/manage-email-password-users>`

       :doc:`Query MongoDB </sdk/swift/examples/mongodb-remote-access>`

Advanced Guides
---------------

For information about advanced concepts, such as encryption and threading,
see the :ref:`Advanced Guides <ios-advanced-guides>` section.

Realm Database
~~~~~~~~~~~~~~

- :doc:`Encryption </sdk/swift/advanced-guides/encrypt-a-realm>`
- :doc:`Threading </sdk/swift/advanced-guides/threading>`

Realm Apps
~~~~~~~~~~

- :doc:`Custom User Data </sdk/swift/examples/users/custom-user-data>`
- :doc:`User Metadata </sdk/swift/examples/users/user-metadata>`
- :doc:`Multi-User Applications </sdk/swift/examples/users/multi-user-applications>`
- :doc:`Link User Identities </sdk/swift/examples/users/link-user-identities>`

Integration Guides
------------------

- :doc:`Build for tvOS </sdk/swift/integrations/tvos>`

OS Support
----------

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: index-table

   * - Supported OS
     - Realm Database
     - Realm Apps

   * - iOS 9.0+ (iOS 11+ if using Swift Package Manager)
     - X
     - X

   * - macOS 10.9+ (macOS 10.10+ if using Swift Package Manager)
     - X
     - X
   
   * - tvOS 9.0+
     - X
     - X

   * - watchOS 2.0+
     - X
     - 

.. important::

   There are special considerations when using {+client-database+} with
   tvOS. See :ref:`ios-tvos` for more information.
