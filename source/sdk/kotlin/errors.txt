.. _kotlin-errors:

==========================
Handle Errors - Kotlin SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 4
   :class: singlecol

The Kotlin SDK uses a hierarchy of exceptions to help developers manage
API call failures. There are two major categories of exception that your
application should handle when using the Kotlin SDK:

- **realm errors** that occur when the SDK fails to write to a
  realm database. These errors generate a
  `RealmException <{+kotlin-local-prefix+}io.realm.kotlin.exceptions/-realm-exception/index.html>`__ class.
- **app errors** that occur when the SDK fails to communicate with
  App Services over the network. These errors generate an
  `AppException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-app-exception/index.html>`__ class.

Some errors are *ephemeral*: they happen because of failures outside of
the client or SDK's control. A failed login attempt due to network error
is an example of an ephemeral error.

Other errors require logic fixes. Examples include:

- writing to a realm outside of a write transaction
- a failed login attempt due to incorrect credentials
- deleting an object that does not exist

Always retry the operation when ephemeral errors occur. If the operation
still fails when you retry it, investigate logic fixes.

Example
-------

You can handle errors in the SDK with Kotlin's built-in
`runCatching <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run-catching.html>`__
API. Use the ``onSuccess`` and ``onFailure`` callbacks of the returned
`Result <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/>`__
to handle successful SDK API calls and error cases. The following example
logs an anonymous user into an App. If the login attempt succeeds, this
example logs the success. If the login attempt fails, this example handles
each error case individually:

- If the user supplied invalid credentials, log the attempt, and allow
  the user to re-enter their username and password.
- If the login attempt failed because of a connection problem, log the
  problem to the error log and retry the login in case the error is a
  passing network failure.
- For all other errors, log the problem to the error log.

.. literalinclude:: /examples/generated/kotlin/AppClientTest.snippet.handle-errors.kt
   :language: kotlin
   :copyable: false

Realm Errors
------------

Realm errors occur when a database read or write fails for any reason.
When possible, the SDK uses existing platform exceptions, like
`IllegalArgumentException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html>`__ or
`IllegalStateException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-state-exception/index.html>`__.

Typically, these errors result from bad database logic, like a query
missing an argument or attempting to write outside of a write transaction.
However, these errors can be ephemeral, so if there's no clear issue
with the operation, try it again.

App Errors
----------

App errors fall into two major categories: `ServiceException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-service-exception/index.html>`__
and
`SyncException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-sync-exception/index.html>`__. ServiceExceptions occur when an App Services request fails
at the HTTP level. SyncExceptions occur when Device Sync fails.


Service Errors
~~~~~~~~~~~~~~

Connection Errors
`````````````````

Connection errors happen when HTTP communication fails between the SDK
and the App Services backend.

Because these errors stem from network layers outside of the SDK's
control, you should consider these errors ephemeral. Retry the operation,
then investigate the error if the retry fails.

Bad Request Errors
``````````````````

Bad request errors come from malformed App Services requests.

When you get a bad request error:

- check the inputs for the operation
- check your App logs for more information about what went wrong

.. _kotlin-auth-errors:

Auth Errors
```````````

Auth errors happen when a user account action, such as login, logout,
or registration, fails. Usually you'll get a more specific subtype that
helps you identify a solution.

User Already Confirmed Errors
+++++++++++++++++++++++++++++

User already confirmed errors occur when you attempt to
`confirm <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.auth/-email-password-auth/confirm-user.html>`__
a user who has already been confirmed.

When you get a user already confirmed error, you should surface the error
to the user, but it's best to not disrupt the application flow. Since
the user is confirmed, you can safely let them log in. There is no need
to retry confirmation.

User Not Found Errors
+++++++++++++++++++++

User not found errors occur when the App Services backend cannot find a
user with the supplied username. This is commonly caused by typos in
email/password usernames.

When you experience this error, prompt the user to re-enter their
username and try again.

User Already Exists Errors
++++++++++++++++++++++++++

User already exists errors occur when a client attempts to register a
user with a username that is already in use in that App.

When you experience this error, prompt users to either:

- use a different username
- login with their existing username if they already have an account

Invalid Credential Errors
+++++++++++++++++++++++++

Invalid credential errors occur when a JWT, email/password, or API Key
user login fails due to invalid credentials. Other authentication
providers throw an :ref:`Auth Error <kotlin-auth-errors>` instead.

Sync Errors
~~~~~~~~~~~

Unrecoverable Sync Errors
`````````````````````````

Unrecoverable sync errors happen when Device Sync fails catastrophically.
This usually means a bug in the client or connected App.

When an unrecoverable sync error occurs, you should surface the problem
to the end user. Let them know that Sync won't work until the problem
is solved.

Wrong Sync Type Errors
``````````````````````

Wrong sync type errors happen when the client and App use different sync
protocols. The SDK supports two kinds of sync: **flexible sync** and
**partition based** sync. When a client connects to an App using a sync
type that does not match the App's sync type, a wrong sync type error occurs.

To recover from a wrong sync type error, update the client to use a sync
type that matches the backend. This will most likely require the user
to update to a new version of your app containing the fix.

Bad Flexible Sync Query Errors
``````````````````````````````

Bad flexible sync query errors happen when you try to subscribe to a
flexible sync query that is not supported by the App backend. This can
happen when you:

- query a field not specified as a **queryable field** in your flexible
  sync configuration.
- create a flexible sync query that uses operators unsupported by flexible
  sync.

To recover from a bad flexible sync query error, update your client to
use a sync query compatible with your App configuration. This will most
likely require the user to update to a new version of your app containing
the fix.
