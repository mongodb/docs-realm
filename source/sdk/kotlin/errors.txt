.. _kotlin-errors:

==========================
Handle Errors - Kotlin SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 4
   :class: singlecol

The Kotlin SDK uses a hierarchy of exceptions to help developers manage
API call failures. There are two major categories of exception that your
application should handle when using the Kotlin SDK:

- **realm errors** that occur when the SDK fails to write to a
  realm database. These errors generate a
  `RealmException <{+kotlin-local-prefix+}io.realm.kotlin.exceptions/-realm-exception/index.html>`__ class.
- **app errors** that occur when the SDK fails to communicate with
  App Services over the network. These errors generate an
  `AppException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-app-exception/index.html>`__ class.

Realm Errors
------------

Realm errors occur when a database read or write fails for any reason.
When possible, the SDK uses existing platform exceptions, like
`IllegalArgumentException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html>`__ or
`IllegalStateException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-state-exception/index.html>`__.

These errors can be ephemeral, so consider retrying the
database operation. Typically, these errors result from bad database logic,
like a query missing an argument or attempting to write outside of a
write transaction.

App Errors
----------

App errors fall into two major categories: `ServiceException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-service-exception/index.html>`__
and
`SyncException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-sync-exception/index.html>`__. ServiceExceptions occur when an App Services request fails
at the HTTP level. SyncExceptions occur when Device Sync fails.

.. literalinclude:: /examples/generated/kotlin/AppClientTest.snippet.handle-errors.kt
   :language: kotlin
   :copyable: false

Service Errors
~~~~~~~~~~~~~~

Connection Errors
`````````````````

Connection errors happen when HTTP communication fails between the SDK
and the App Services backend. Because these errors stem from network
layers outside of the SDK's control, you should consider these errors
ephemeral failures. Retry the action and ensure the client is connected
to the internet.

Bad Request Errors
``````````````````

Bad request errors come from malformed App Services requests. When you
get one of these errors, you should check the inputs for the request,
and try again.

.. _kotlin-auth-errors:

Auth Errors
```````````

Auth errors happen when a user account action, such as login, logout,
or registration, fails. Usually you'll get a more specific subtype that
helps you identify a solution.

User Already Confirmed Errors
+++++++++++++++++++++++++++++

User already confirmed errors occur when you attempt to
`confirm <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.auth/-email-password-auth/confirm-user.html>`__
a user who has already been confirmed.

User Not Found Errors
+++++++++++++++++++++

User not found errors occur when the App Services backend cannot find a
user with the supplied username. This is commonly caused by typos in
email/password usernames. When you experience this error, you should
prompt the user to re-enter their username and try again.

User Already Exists Errors
++++++++++++++++++++++++++

User already exists errors occur when a client attempts to register a
user with a username that is already in use in that App. You can prompt
users to either use a different username, or login with their existing
username if they know their existing credentials.

Invalid Credential Errors
+++++++++++++++++++++++++

Invalid credential errors occur when a JWT, email/password, or API Key
user login fails due to invalid credentials. Other authentication
providers throw an :ref:`Auth Error <kotlin-auth-errors>` instead.

Sync Errors
~~~~~~~~~~~

Unrecoverable Sync Errors
`````````````````````````

Unrecoverable sync errors happen when Device Sync fails catastrophically.
This usually means a bug in the client or connected App.

Wrong Sync Type Errors
``````````````````````

Wrong sync type errors happen when the client and App use different sync
protocols. The SDK supports two kinds of sync: **flexible sync** and
**partition based** sync. When a client connects to an App using a sync
type that does not match the App's sync type, a wrong sync type error occurs.

To recover from a wrong sync type error, update the client to use a sync
type that matches the backend.

Bad Flexible Sync Query Errors
``````````````````````````````

Bad flexible sync query errors happen when you try to subscribe to a
flexible sync query that is not supported by the App backend. This can
happen when you:

- query a field not specified as a **queryable field** in your flexible
  sync configuration.
- create a flexible sync query that uses operators unsupported by flexible
  sync.

