.. _kotlin-authenticate:
.. _kotlin-authenticate-users:

===============================
Authenticate Users - Kotlin SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm provides an API for authenticating users using any enabled
authentication provider. Instantiate a :file:`Credentials` object and pass
it to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__
method to authenticate a user and create a `User
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/index.html>`__
object for that user.
Each authentication provider corresponds to a
`static helper method
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-authentication-provider/index.html>`__
used to instantiate :file:`Credentials` objects for that
authentication provider.

.. _kotlin-login:

Log In
------

You can authenticate users with `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

If successful, :file:`app.login()` returns a :file:`User` object.
In the event of a failure, :file:`app.login()` throws an
exception of type :file:`AppException`.

.. _kotlin-anonymous-login:

Anonymous
~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
`Credentials.anonymous()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/anonymous.html>`__
and then pass the generated credential to
`app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.anonymous-authentication.kt
   :language: kotlin
   :copyable: false

You can optionally specify whether the anonymous user should be reused by 
passing ``reuseExisting = true`` to ``Credentials.anonymous()`` as long as the anonymous user being reused hasn't logged out.
The ``reuseExisting`` parameter defaults to false, which creates a new anonymous user credential rather than reusing an existing one.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.anonymous-authentication-reuse-existing.kt
   :language: kotlin
   :copyable: false

.. _kotlin-email-password-login:

Email/Password
~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling `Credentials.emailPassword()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/email-password.html>`__
with the user's email and password. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.email-password-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-jwt:

JWT
~~~

The :ref:`Custom JWT authentication provider <custom-jwt-authentication>`
enables users to log in to your application with a custom JSON Web Token.
To log in with JWT authentication, create a
JWT credential by calling `Credentials.jwt()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/facebook.html>`__
with the user's JWT. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.jwt-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-api-key:

API Key
~~~~~~~

The :ref:`API Key authentication provider <api-key-authentication>`
enables users to log in to your application with an API key generated
automatically in the client SDK. To log in with API key authentication, create an
email/password credential by calling `Credentials.apiKey()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/api-key.html>`__
with the user's email and password. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.api-key-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-google:

Google
~~~~~~

To set up your application for Google User authentication:

#. In the `Google Cloud Platform console
   <https://console.cloud.google.com/apis/credentials>`__, create an
   OAuth 2.0 client ID of type "Web application".

#. Configure your backend App to use that client ID and the associated
   client secret.

#. Enable OpenID Connect on the backend.

Use Google's official :google:`Sign-In for Android <identity/sign-in/android>`
to authenticate Google users in your Android application. The following
code implements this flow, starting with a method call to
``loginWithGoogle()``:

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.google-authentication.kt
   :language: kotlin
   :copyable: false

.. seealso::

   - To learn more about Google Sign-In for Android, check out the
     official :google:`Google Sign-In for Android Integration Guide
     <identity/sign-in/android/start-integrating>`.

   - KMM supports many environments, but this example shows sign-in on
     the Android platform. For information about signing into a Google
     account on Apple platforms, see the
     :ref:`Swift SDK Example <ios-login-google>`.

.. _kotlin-login-facebook:

Facebook
~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-facebook-profile-picture-url.rst

Follow the official :facebook:`Facebook Login for Android Quickstart
<docs/facebook-login/android>` to set up the authentication flow for your
application. In the login completion handler, get the logged in user's access
token from the Facebook :facebook:`LoginResult
<docs/reference/android/current/class/LoginResult>`. Use the access token to
create a Facebook credential by calling `Credentials.facebook()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/facebook.html>`__
with the user's access token. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.facebook-authentication.kt
   :language: kotlin
   :copyable: false

.. seealso::

   KMM supports many environments, but this example shows sign-in on
   the Android platform. For information about signing into a Facebook
   account on Apple platforms, see the
   :ref:`Swift SDK Example <ios-login-facebook>`.

.. _kotlin-login-apple:

Apple
~~~~~

The :ref:`Sign-in with Apple authentication provider <apple-id-authentication>`
enables users to log in to your application with a custom token provided
by Apple. To log in with Apple authentication, create an
Apple credential by calling `Credentials.apple()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/apple.html>`__
with the user's token. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.apple-authentication.kt
   :language: kotlin
   :copyable: false

.. seealso::

   KMM supports many environments, but this example shows sign-in on
   the Android platform. For information about signing in with Apple
   on Apple platforms, see the
   :ref:`Swift SDK Example <ios-login-apple>`.

.. _kotlin-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using `user.logOut()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/log-out.html>`__. This method:

- deletes locally stored user credentials from the device

- immediately halts any synchronization to and from the user's realms

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.log-out.kt
   :language: kotlin
   :copyable: false
