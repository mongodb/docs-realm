.. _kotlin-authenticate:
.. _kotlin-authenticate-users:

===============================
Authenticate Users - Kotlin SDK
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service+} provides an API for authenticating users using any enabled
authentication provider. Instantiate a :file:`Credentials` object and pass
it to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`
method to authenticate a user and create a :kotlin-sdk:`User
<{+kotlin-sync-prefix+}io.realm.mongodb/-user/index.html>`
object for that user.
Each authentication provider corresponds to a
:kotlin-sdk:`static helper method
<{+kotlin-sync-prefix+}io.realm.mongodb/-authentication-provider/index.html>`
used to instantiate :file:`Credentials` objects for that
authentication provider.

.. _kotlin-login:

Log In
------

You can authenticate users with :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

If successful, :file:`app.login()` returns a :file:`User` object.
In the event of a failure, :file:`app.login()` throws an
exception of type :file:`AppException`.

.. _kotlin-anonymous-login:

Anonymous
~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
:kotlin-sdk:`Credentials.anonymous()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/anonymous.html>`
and then pass the generated credential to
:kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.anonymous-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-email-password-login:

Email/Password
~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling :kotlin-sdk:`Credentials.emailPassword()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/email-password.html>`
with the user's email and password. Then pass the generated credential
to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.email-password-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-jwt:

JWT
~~~

The :ref:`Custom JWT authentication provider <custom-jwt-authentication>`
enables users to log in to your application with a custom JSON Web Token.
To log in with JWT authentication, create a
JWT credential by calling :kotlin-sdk:`Credentials.jwt()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/facebook.html>`
with the user's JWT. Then pass the generated credential
to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.jwt-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-api-key:

API Key
~~~~~~~

The :ref:`API Key authentication provider <api-key-authentication>`
enables users to log in to your application with an API key generated
automatically in the client SDK. To log in with API key authentication, create an
email/password credential by calling :kotlin-sdk:`Credentials.apiKey()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/api-key.html>`
with the user's email and password. Then pass the generated credential
to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.api-key-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-google:

Google
~~~~~~

To set up your application for Google User authentication:

1. In the `Google Cloud Platform console
   <https://console.cloud.google.com/apis/credentials>`__, create an
   OAuth 2.0 client ID of type "Web application".

#. Configure your backend {+app+} to use that client ID and the associated
   client secret.

#. Enable OpenID Connect on the backend.

Use Google's official :google:`Sign-In for Android <identity/sign-in/android>`
to authenticate Google users in your Android application:

.. note:: Code Example Below

   For an implementation of these instructions, check out the code block
   below.

#. Add the Google Sign-In for Android dependency to the ``dependencies``
   block of ``androidMain`` in your application level ``build.gradle.kts``:

   .. code-block:: groovy
      :copyable: false

      com.google.android.gms:play-services-auth:20.2.0
      com.google.android.gms:play-services-base:18.0.1

#. Create a :google:`GoogleSignInOptions
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions>`
   with the following builder options:

   - :google:`default sign in
     <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-builder-googlesigninoptions-googlesigninoptions>`
   - an :google:`ID token request
     <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions.Builder#public-googlesigninoptions.builder-requestidtoken-string-serverclientid>`.
     Pass your OAuth 2.0 client ID as the ``serverClientId``.

#. Use the ``GoogleSignInOptions`` to create a ``GoogleSignInClient``
   with :google:`GoogleSignIn.getClient()
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignIn#getClient(android.content.Context,%20com.google.android.gms.auth.api.signin.GoogleSignInOptions)>`

#. Use the ``GoogleSignInClient`` to create an ``Intent`` capable of
   triggering Google Sign-In.

#. Use :android:`registerForActivityResult()
   <reference/androidx/activity/result/ActivityResultCaller#registerForActivityResult(androidx.activity.result.contract.ActivityResultContract%3CI,O%3E,androidx.activity.result.ActivityResultCallback%3CO%3E)>`
   to configure a callback. Your callback should use :google:`GoogleSignIn.getSignedInAccountFromIntent()
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignIn#getSignedInAccountFromIntent(android.content.Intent)>`
   to access the result of Google Sign-In: a ``Task<GoogleSignInAccount>``.

#. Use the :android:`launch()
   <reference/androidx/activity/result/ActivityResultLauncher#launch(I)>`
   method of the :android:`ActivityResultLauncher
   <reference/androidx/activity/result/ActivityResultLauncher>`
   returned in the previous step to start Google Sign-In. Pass the
   ``launch()`` method your Google Sign-In ``Intent``.

#. Use ``isSuccessful()`` to handle Google Sign-In errors.

#. Access the result of the task (a :google:`GoogleSignInAccount
   <android/reference/com/google/android/gms/auth/api/signin/GoogleSignInAccount>`)
   with ``getResult()``.

#. Access the ID token for the ``GoogleSignInAccount`` with ``getIdToken()``.

#. Create a Realm ``Credentials`` object with :kotlin-sdk:`Credentials.google()
   <{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/google.html>`.
   Pass the ID token as the first parameter, and ``GoogleAuthType.ID_TOKEN``
   as the second parameter.

#. Use :kotlin-sdk:`app.login()
   <{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`
   to authenticate with the Realm backend using the token.

The following code implements this flow, starting with a method call to
``loginWithGoogle()``:

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.google-authentication.kt
   :language: kotlin
   :copyable: false

.. seealso::

   To learn more about Google Sign-In for Android, check out the
   official :google:`Google Sign-In for Android Integration Guide
   <identity/sign-in/android/start-integrating>`.

.. _kotlin-login-facebook:

Facebook
~~~~~~~~

The :doc:`Facebook </authentication/facebook>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-facebook-profile-picture-url.rst

Follow the official :facebook:`Facebook Login for Android Quickstart
<docs/facebook-login/android>` to set up the authentication flow for your
application. In the login completion handler, get the logged in user's access
token from the Facebook :facebook:`LoginResult
<docs/reference/android/current/class/LoginResult>`. Use the access token to
create a Facebook credential by calling :kotlin-sdk:`Credentials.facebook()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/facebook.html>`
with the user's access token. Then pass the generated credential
to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.facebook-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-login-apple:

Apple
~~~~~

The :doc:`Sign-in with Apple authentication provider </authentication/apple>`
enables users to log in to your application with a custom token provided
by Apple. To log in with Apple authentication, create an
Apple credential by calling :kotlin-sdk:`Credentials.apple()
<{+kotlin-sync-prefix+}io.realm.mongodb/-credentials/-companion/apple.html>`
with the user's token. Then pass the generated credential
to :kotlin-sdk:`app.login()
<{+kotlin-sync-prefix+}io.realm.mongodb/-app/login.html>`.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.apple-authentication.kt
   :language: kotlin
   :copyable: false

.. _kotlin-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using :kotlin-sdk:`user.logOut()
<{+kotlin-sync-prefix+}io.realm.mongodb/-user/log-out.html>`. This method:

- deletes locally stored user credentials from the device

- immediately halts any synchronization to and from the user's {+realm+}s

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.log-out.kt
   :language: kotlin
   :copyable: false
