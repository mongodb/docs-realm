.. _kotlin-install-kotlin-multiplatform:

===========================================
Install (Kotlin Multiplatform) - Kotlin SDK
===========================================

.. include:: /includes/kotlin-install-prerequisites.rst

Additionally, Kotlin Multiplatform projects require the following:

- `Kotlin Multiplatform Mobile (KMM) Plugin
  <https://kotlinlang.org/docs/mobile/kmm-plugin-releases.html#release-details>`__
  for Android Studio, version 0.3.1 or higher.
- A KMM App created using the "KMM Application" template in Android
  Studio. Follow the instructions in the `KMM documentation
  <https://kotlinlang.org/docs/mobile/create-first-app.html>`__.

Installation
------------

.. tabs::

   .. tab:: Realm Database
      :tabid: realm-database

      To add local-only Realm Database to your application, make
      the following changes to your shared module Gradle build
      file, typically found at :file:`<project>/shared/build.gradle.kts`:

      - Add :file:`io.realm.kotlin:library-base` to the dependencies
        block of your common module.
      - To use coroutines with the SDK, add
        :file:`org.jetbrains.kotlinx:kotlinx-coroutines-core`
        to the dependencies block of your common module.
      - Add :file:`io.realm.kotlin` to your list of plugins.

      .. code-block:: kotlin
         :emphasize-lines: 5, 28, 29
         :copyable: false

         plugins {
             kotlin("multiplatform")
             kotlin("native.cocoapods")
             id("com.android.library")
             id("io.realm.kotlin")
         }

         version = "1.0"

         kotlin {
             android()
             iosX64()
             iosArm64()

            cocoapods {
                summary = "Some description for the Shared Module"
                homepage = "Link to the Shared Module homepage"
                ios.deploymentTarget = "14.1"
                podfile = project.file("../iosRealmKMMApp/Podfile")
                 framework {
                    baseName = "shared"
                 }
             }
             
             sourceSets {
                 val commonMain by getting {
                     dependencies {
                         implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:{+kotlinx-coroutines-version+}")
                         implementation("io.realm.kotlin:library-base:{+kotlin-sdk-version+}")
                     }
                 }
                 val commonTest by getting {
                     dependencies {
                         implementation(kotlin("test-common"))
                         implementation(kotlin("test-annotations-common"))
                     }
                 }
                val androidMain by getting
                val androidTest by getting {
                    dependencies {
                         implementation(kotlin("test-junit"))
                         implementation("junit:junit:4.13.2")
                     }
                 }
                 val iosX64Main by getting
                 val iosArm64Main by getting
                 
                 val iosMain by creating {
                     dependsOn(commonMain)
                     iosX64Main.dependsOn(this)
                     iosArm64Main.dependsOn(this)
                 }
                 val iosX64Test by getting
                 val iosArm64Test by getting
                 val iosTest by creating {
                     dependsOn(commonTest)
                     iosX64Test.dependsOn(this)
                     iosArm64Test.dependsOn(this)
                 }
             }
         }

         android {
             compileSdk = 30
             sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
             defaultConfig {
                 minSdk = 28
                 targetSdk = 30
             }
         }

      Then, add :file:`classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")`
      to the :file:`buildscript.dependencies` block of your project-level
      Gradle build file, typically found at :file:`<project>/build.gradle.kts`:

      .. code-block:: kotlin
         :emphasize-lines: 10
         :copyable: false

         buildscript {
              repositories {
                  gradlePluginPortal()
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
                  classpath("com.android.tools.build:gradle:7.1.1")
                  classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }

          tasks.register("clean", Delete::class) {
              delete(rootProject.buildDir)
          }

   .. tab:: Sync
      :tabid: sync

      To add Realm Database and Sync to your application, make
      the following changes to your shared module Gradle build
      file, typically found at :file:`shared/build.gradle.kts`:

      - Add :file:`io.realm.kotlin:library-sync` to the dependencies
        block of your common module.
      - To use coroutines with the SDK, add the
        :file:`org.jetbrains.kotlinx:kotlinx-coroutines-core`
        to the dependencies block of your common module.
      - Add :file:`io.realm.kotlin` to your list of plugins.

      .. code-block:: kotlin
         :emphasize-lines: 5, 28, 29
         :copyable: false

         plugins {
             kotlin("multiplatform")
             kotlin("native.cocoapods")
             id("com.android.library")
             id("io.realm.kotlin")
         }

         version = "1.0"

         kotlin {
             android()
             iosX64()
             iosArm64()

            cocoapods {
                summary = "Some description for the Shared Module"
                homepage = "Link to the Shared Module homepage"
                ios.deploymentTarget = "14.1"
                podfile = project.file("../iosRealmKMMApp/Podfile")
                 framework {
                    baseName = "shared"
                 }
             }
             
             sourceSets {
                 val commonMain by getting {
                     dependencies {
                         implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:{+kotlinx-coroutines-version+}")
                         implementation("io.realm.kotlin:library-sync:{+kotlin-sdk-version+}")
                     }
                 }
                 val commonTest by getting {
                     dependencies {
                         implementation(kotlin("test-common"))
                         implementation(kotlin("test-annotations-common"))
                     }
                 }
                val androidMain by getting
                val androidTest by getting {
                    dependencies {
                         implementation(kotlin("test-junit"))
                         implementation("junit:junit:4.13.2")
                     }
                 }
                 val iosX64Main by getting
                 val iosArm64Main by getting
                 
                 val iosMain by creating {
                     dependsOn(commonMain)
                     iosX64Main.dependsOn(this)
                     iosArm64Main.dependsOn(this)
                 }
                 val iosX64Test by getting
                 val iosArm64Test by getting
                 val iosTest by creating {
                     dependsOn(commonTest)
                     iosX64Test.dependsOn(this)
                     iosArm64Test.dependsOn(this)
                 }
             }
         }

         android {
             compileSdk = 30
             sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
             defaultConfig {
                 minSdk = 28
                 targetSdk = 30
             }
         }

      Then, add :file:`io.realm.kotlin:gradle-plugin`
      to the :file:`buildscript.dependencies` block of your project-level
      Gradle build file, typically found at :file:`<project>/build.gradle.kts`:

      .. code-block:: kotlin
         :emphasize-lines: 10
         :copyable: false

         buildscript {
              repositories {
                  gradlePluginPortal()
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
                  classpath("com.android.tools.build:gradle:7.1.1")
                  classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }

          tasks.register("clean", Delete::class) {
              delete(rootProject.buildDir)
          }

.. note:: Android Module Dependencies

   If you use any part of the SDK inside the Android module, add the
   SDK's compile-time dependency to your Android module :file:`build.gradle.kts`:

   .. code-block:: kotlin
      :copyable: false

      // If only using the local database
      dependencies {
         compileOnly("io.realm.kotlin:library-base:{+kotlin-sdk-version+}")
      }

      // If using Device Sync
      dependencies {
         compileOnly("io.realm.kotlin:library-sync:{+kotlin-sdk-version+}")
      }

After updating the Gradle configuration,
resolve the dependencies by clicking :guilabel:`File` >
:guilabel:`Sync Project with Gradle Files` in the Android Studio menu bar.
You can now use the Kotlin SDK in your application.

Supported Target Environments
-----------------------------

Kotlin Multiplatform supports a `wide range of application environments
<https://kotlinlang.org/docs/multiplatform-dsl-reference.html#targets>`__.
The SDK supports the following environments:

- :file:`android`

- :file:`iosArm64`
- :file:`iosSimulatorArm64`
- :file:`iosX64`

- :file:`jvm`

- :file:`macosArm64`
- :file:`macosX64`

The SDK does not support the following environments:

- :file:`androidNativeArm32`
- :file:`androidNativeArm64`
- :file:`androidNativeX86`
- :file:`androidNativeX64`

- :file:`iosArm32`

- :file:`js`

- :file:`linuxArm32Hfp`
- :file:`linuxArm64`
- :file:`linuxMips32`
- :file:`linuxMipsel32`
- :file:`linuxX64`

- :file:`mingwX64`
- :file:`mingwX86`

- :file:`tvosArm64`
- :file:`tvosSimulatorArm64`
- :file:`tvosX64`

- :file:`wasm32`

- :file:`watchosArm32`
- :file:`watchosArm64`
- :file:`watchosSimulatorArm64`
- :file:`watchosX86`
- :file:`watchosX64`
