.. _kotlin-errors:

================================
Handle Realm Errors - Kotlin SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Kotlin SDK uses a hierarchy of exceptions to help developers manage
API call failures. There are two major categories of exceptions that your
application should handle when using the Kotlin SDK:

- **realm errors** occur when a read or write to realm database fails.
  These errors generate a
  `RealmException <{+kotlin-local-prefix+}io.realm.kotlin.exceptions/-realm-exception/index.html>`__.
- **app errors** occur when network communication with Atlas App Services
  fails. These errors generate an
  `AppException <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.exceptions/-app-exception/index.html>`__. For more information, refer to 
  :ref:`Handle App Errors <kotlin-app-errors>`.

.. _kotlin-realm-errors:

Realm Errors
------------

Realm errors occur when a database read or write fails for any reason.
When possible, the SDK uses existing platform exceptions, like
`IllegalArgumentException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/index.html>`__ or
`IllegalStateException <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-state-exception/index.html>`__.

Typically, these errors result from bad database logic, such as a query
missing an argument or attempting to write outside of a write transaction.

.. _kotlin-ephemeral-errors:

However, some errors are **ephemeral**: they occur because of failures outside of
the client or SDK's control. For example, a failed login attempt due to a network error.

Other errors require logic fixes. Examples include:

- writing to a realm outside of a write transaction
- a failed login attempt due to incorrect credentials
- deleting an object that does not exist

When an ephemeral error occurs, you should retry the operation that
caused the error. If the operation still fails when you retry it,
investigate logic fixes.

You can handle errors in the SDK with Kotlin's built-in
`runCatching <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run-catching.html>`__
API. Use the ``onSuccess`` and ``onFailure`` callbacks of the returned
`Result <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/>`__
to handle successful SDK API calls and error cases. 
