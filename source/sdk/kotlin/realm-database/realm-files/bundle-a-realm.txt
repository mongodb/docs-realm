.. _kotlin-bundle-a-realm:

===========================
Bundle a Realm - Kotlin SDK
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm supports bundling realm database files. 
When you bundle a realm file, you include a database and all of its data in 
your application download.

This allows you to seed your mobile app with some initial data that will be 
available to users on the initial launch of the app. 

.. tip:: Consider Initial Data Callback

   You can also add data to your realm the first time an application opens it
   using `InitialDataCallback <{+kotlin-local-prefix+}io.realm.kotlin/-initial-data-callback/index.html>`__.

.. _kotlin-bundle-local-realm:

Bundle a Local Realm
--------------------

To bundle a local realm, perform the following:

.. procedure::

   .. step:: Create a Realm File for Bundling

      Create a new project with the same :ref:`Realm object schema <kotlin-object-schema>` as your 
      production app.

      :ref:`Open an existing realm <kotlin-open-a-realm>` with the data you wish to bundle, or create a new realm. 
      If using an existing realm, copy the realm to a new file with the 
      `writeCopyTo() <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-copy-to.html>`__ method. 
      This method also automatically compacts your realm to the smallest possible size before copying.

      Get the path to the realm file using 
      `Realm.configuration.path <{+kotlin-local-prefix+}io.realm.kotlin/-configuration/index.html#422583608%2FProperties%2F-1651551339>`__.

      .. literalinclude:: /examples/generated/kotlin/BundleTest.snippet.bundle-local-realm.kt
         :language: kotlin

   .. step:: Bundle a Realm File in Your Production Application

      Now that you have a copy of the realm that contains the initial data, you
      need to bundle it with your production application.

      Save a copy of the realm file to your application's assets folder. 
      In Android Studio, you can do this using the :android:`Device File Explorer <studio/debug/device-file-explorer>`. 

      The assets folder location depends on your app type: 

      - For an Android app: :file:`/<app name>/src/main/assets`  
      - For a KMM app: :file:`/<app name>/shared/src/main/assets`

      If your application does not already contain an asset folder, you can 
      manually create it. 

      .. tip:: Create Asset Folder in Android Studio

         To create an asset folder in Android Studio, right-click the top-level application folder
         (:file:`<app name>` or :file:`<app name>/shared`) and select
         :guilabel:`New > Folder > Assets Folder` in the menu.

   .. step:: Open a Realm from a Bundled Realm File

      Now that you have a copy of the realm included with your app,
      add code to use it.

      .. literalinclude:: /examples/generated/kotlin/BundleTest.snippet.open-from-bundled-file.kt
         :language: kotlin

.. _kotlin-bundle-synced-realm:

Bundle a Synced Realm
---------------------

Bundling a synced realm reduces the size of the data that users must download when using a synced realm. When you bundle a realm with your application, the only data users must download is any changes that have occurred since preparing the bundled realm. 

However, two conditions may cause users to be unable to use your bundled realm:

- If the date when you bundled the realm is older than your :ref:`client maximum offline time <client-maximum-offline-time>` 
  setting, Realm does not have the complete change set required to update the bundled realm 
  to a syncable state. In this case, users will receive a :ref:`client reset <client-resets>` and must re-download 
  the entire realm, negating the benefit of bundling the realm.
- An app user does not have the necessary server-side permissions to view the data included 
  in the bundle. If a user doesn't have permission to view this data, it is removed from 
  the device when the realm syncs with Atlas, negating the benefit of bundling the realm.

If you cannot guarantee that your bundled realm was prepared more recently than the client maximum offline time setting or that the app user will have permissions to view the data included the bundled realm, there is no benefit to bundling a synced realm.

If your application uses :ref:`Flexible Sync <flexible-sync>`,
you can populate your application  with data using sync subscriptions as an alternative to bundling a synced realm.
subscriptions, you do not need to be concerned with data being older than 
the client maximum online time while taking advantage of Flexible Sync's :ref:`trimming <trimming>` feature.
To learn more about using sync subscriptions, refer to 
:ref:`Subscriptions <kotlin-subscriptions>`.

To bundle a synced realm, perform the following:

.. procedure::
   
   .. step:: Create a Realm File for Bundling a Synced Realm

      :ref:`Open a synced realm <kotlin-open-a-synced-realm>`.
      
      Add data to the synced realm. 
      You *must* wait for all local changes to synchronize with the Device Sync server. 
      Use `uploadAllLocalChanges() <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-session/upload-all-local-changes.html>`__ 
      and `downloadAllServerChanges() <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-session/download-all-server-changes.html>`__ 
      to ensure all sync processes are completed.
      
      Create a new version of the synced realm using `writeCopyTo() <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-copy-to.html>`__ . 
      You *must* use ``writeCopyTo()`` to bundle a synced realm. 
      This method removes metadata that associates the realm with the user, which allows 
      other users to open the realm file as well.
      
      Get the path to the copied realm file using 
      `Realm.configuration.path <{+kotlin-local-prefix+}io.realm.kotlin/-configuration/index.html#422583608%2FProperties%2F-1651551339>`__.

      .. literalinclude:: /examples/generated/kotlin/BundleTest.snippet.bundle-synced-realm.kt
         :language: kotlin

   .. step:: Bundle a Synced Realm File in your Production Application

      Follow the steps outlined in the above **Bundle a Realm File in Your Production 
      Application** procedure for bundling a local realm.

   .. step:: Open a Realm from a Bundled Synced Realm File

      Follow the steps outlined in the above **Open a Realm from a Bundled Realm File** 
      procedure for bundling a local realm.
