.. _kotlin-define-object-model:

========================================
Define a Realm Object Model - Kotlin SDK
========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Kotlin SDK memory maps Realm objects directly to native Kotlin 
objects, so there's no need to use a special data access library. 
You define your application's data model via regular Kotlin classes declared
in your application code object. 

To learn about how to make changes to your Realm objects after
defining your Realm object model, refer to 
:ref:`Change an Object Model <kotlin-change-object-model>`.

.. _kotlin-object-type:
.. _kotlin-object-schema:

Object Types & Schemas
----------------------

Realm objects are regular Kotlin classes, and you can work with them 
as you would any other class instance. 

- Every Realm object has an **object type** that refers to the object's class.
- Objects of the same type share an **object schema**, which defines the 
  properties and :ref:`relationships <kotlin-relationships>` for objects of that 
  type.

You define object schemas by using Kotlin class declarations.

.. example::
   
  The following schema defines a ``Car`` object type with 
  ``make``, ``model``, and ``miles`` properties:
   
  .. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.example-schema.kt
    :language: kotlin

.. _kotlin-realm-schema:

Realm Schema
~~~~~~~~~~~~

.. include:: /includes/realm-schema.rst

Property Types
~~~~~~~~~~~~~~

The Kotlin SDK supports Kotlin data types, a limited subset of BSON types,
UUID, and Realm-specific types.

To learn more about the available property types, refer to the
:ref:`Supported Types <kotlin-supported-types>` page.

Property Annotations
~~~~~~~~~~~~~~~~~~~~

Annotations add functionality to properties in your Realm object models.  
You can use annotations for things like marking a property as nullable, 
setting a primary key, ignoring a property, and more. 

To learn more about the available property annotations, refer to 
:ref:`Property Annotations <kotlin-property-annotations>`.

.. _kotlin-define-a-new-object-type:

Define a New Object Type
------------------------

To define a Realm object type: 

1. Create a uniquely named Kotlin class that implements the 
   `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__ 
   interface. 

#. Add fields to your class. You can add any :ref:`supported data types <kotlin-supported-types>` as a field in your class. 
 
#. Add any property annotations to give Realm additional information about a 
   property, including whether Realm should ignore the property or should be indexed.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.define-object-type.kt
  :language: kotlin

.. include:: /includes/note-class-char-limit.rst

Once you've defined your object model, you can pass the class to the ``schema`` 
property of the 
`RealmConfiguration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__ 
when you :ref:`open the realm <kotlin-open-a-realm>`.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.open-with-class.kt
  :language: kotlin
  :emphasize-lines: 2

Define a Relationship Property
------------------------------

You can define relationships between Realm objects in your schema. 
The Realm Kotlin SDK supports to-one relationships, to-many relationships, 
inverse relationships, and embedding objects within other objects. 

For more information, refer to the :ref:`Relationships <kotlin-relationships>` 
page.

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can define a backlink property as a `BacklinksDelegate 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-backlinks-delegate/index.html>`__ 
or `EmbeddedBacklinksDelegate 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-backlinks-delegate/index.html>`__ 
to the parent object using the ``backlinks()`` method.

- A ``BacklinksDelegate<T>`` property is defined as a `RealmResults 
  <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-results/index.html>`__ list 
  of the parent ``RealmObject`` type:

  .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-realm-object.kt
     :language: kotlin

- An ``EmbeddedBacklinksDelegate<T>`` property is defined as the parent 
  ``RealmObject`` type:

  .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-embedded-object.kt
     :language: kotlin

You then reference the backlinks in collections in the parent ``RealmObject``:

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-parent-object.kt
   :language: kotlin

.. todo add link to Create when page is updated

Define a Collection 
-------------------

You can define collections of items using 
``RealmList``, ``RealmSet``, and ``RealmDictionary`` types.

For more information on the collection types used in the Kotlin SDK, 
refer to :ref:`Collection Types <kotlin-collection-types>`.

.. _kotlin-define-realm-set-type:

Define a RealmSet
~~~~~~~~~~~~~~~~~

To define a property as a :ref:`RealmSet <kotlin-realm-set>`, specify its 
type within the schema as ``RealmSet<T>``, where T is any of the supported 
:ref:`data types <kotlin-supported-types>` or a 
`RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__. 
If a ``RealmSet``'s value is a ``RealmObject``, the value *cannot* have
null elements.

Instantiate an unmanaged ``RealmSet`` by setting the field's default value
using the 
`realmSetOf() <{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-set-of.html>`__ 
method.

In the following example, we define a ``Frog`` schema with a 
``favoriteSnacks`` field that is a ``RealmSet`` of ``Snack`` objects:

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.define-a-realm-set.kt
   :language: kotlin

.. _kotlin-define-realm-dictionary-type:

Define a RealmDictionary/RealmMap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a :ref:`RealmDictionary <kotlin-realm-dictionary>`, specify its type 
within the schema as ``RealmDictionary<T>``, where T is any Realm :ref:`primitive type 
<kotlin-supported-types>`, a ``RealmObject``, or an ``EmbeddedRealmObject``. 
If a ``RealmDictionary``'s value is a ``RealmObject``
or ``EmbeddedRealmObject``, the value must be declared nullable.

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.define-realm-dictionary-property.kt
   :language: kotlin

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.percent-encode-disallowed-characters.kt
   :language: kotlin

.. _kotlin-define-embedded-object:

Define an Embedded Object
-------------------------

To define an :ref:`embedded object <kotlin-embedded-objects>`, derive a class from 
`EmbeddedRealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__: 

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.embedded-object-model.kt 
    :language: kotlin

Once your embedded object class is defined, you must include its schema in the
realm's 
`configuration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__
to use it in your realm instance:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.open-realm-embedded-object.kt 
    :language: kotlin 
    :emphasize-lines: 3

Define an Asymmetric Object
---------------------------

.. versionadded:: 1.10.0

If your app uses Flexible Sync, you can use :ref:`Data Ingest 
<optimize-data-ingest>` to sync an object unidirectionally
from your device to the database linked to your Atlas App Services App. 
Define an asymmetric object by implementing the 
`AsymmetricRealmObject <{+kotlin-sync-prefix+}io.realm.kotlin.types/-asymmetric-realm-object/index.html>`__ interface:

.. literalinclude:: /examples/generated/kotlin/AsymmetricSyncTest.snippet.asymmetric-model.kt 
    :language: kotlin

An asymmetric object is an insert-only object. You can :ref:`create an asymmetric object <kotlin-create-asymmetric-object>`, 
which then syncs unidirectionally to the Atlas database linked to your App with Device Sync.
Realm deletes this object after syncing. You cannot read, update, or delete an asymmetric object from the realm.

For more information on how asymmetric objects function, see :ref:`Asymmetric Objects <kotlin-asymmetric-objects>`.

Unsupported Kotlin Language Features
------------------------------------

The Realm Kotlin SDK does not support or provides only limited support for 
the following Kotlin language features:

Data Classes
~~~~~~~~~~~~

The Realm Kotlin SDK does not support using 
`data classes <https://kotlinlang.org/docs/data-classes.html>`__ to model 
data. Typically, data classes are used for immutable data. This goes 
against how the Realm Kotlin SDK models data.

Inheritance
~~~~~~~~~~~

Realm Kotlin SDK classes may only inherit from 
`Realm Object types <{+kotlin-local-prefix+}io.realm.kotlin.types/index.html>`__. 
For example, your class may inherit from ``RealmObject`` or 
``EmbeddedRealmObject``, but not from custom classes that do not implement 
a Realm object interface.

.. code-block:: kotlin
    :copyable: false

    // SUPPORTED
    // You can inherit from Realm Object types directly
    class MyBaseClass: RealmObject {
        var name: String = ""
    }

    // NOT SUPPORTED
    // You can not inherit from classes that implement Realm object types
    // This form of inheritance is not supported in the Realm Kotlin SDK
    class Person: MyBaseClass {
        var age: Int
    }

.. _kotlin-single-primary-constructor:

Single Primary Constructor
~~~~~~~~~~~~~~~~~~~~~~~~~~

The Realm Kotlin SDK does not support having a single primary constructor.
The SDK requires an empty constructor to create objects. As a workaround,
you can do something similar to the following:

.. code-block:: kotlin
   :copyable: false

   // SUPPORTED
   // Realm requires an empty constructor to create objects
   class Person(var name: String, var age: Int): RealmObject {
       constructor(): this("", 0) // Empty constructor required by Realm
   }

   // NOT SUPPORTED
   // The Realm Kotlin SDK does not support having a single primary constructor
   class Person(var name: String, var age: Int) RealmObject {
   }
