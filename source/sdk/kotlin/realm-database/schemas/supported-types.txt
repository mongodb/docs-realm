.. _kotlin-supported-types:
.. _kotlin-additional-types:

============================
Supported Types - Kotlin SDK
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Kotlin SDK supports `Kotlin types 
<https://kotlinlang.org/docs/basic-types.html>`__, a limited subset of
`BSON <https://bsonspec.org/>`__ types, and 
:wikipedia:`UUID <Universally_unique_identifier>`.
Additionally, the Kotlin SDK offers Realm-specific types, including types 
that you can use for unique identifiers, timestamps, counters, and collections.

.. _kotlin-data-types:

Supported Data Types List
-------------------------

The Realm Kotlin SDK supports the following Kotlin data types, 
MongoDB BSON types, and Realm-specific types.
You can use these types to define your object model properties.
For more information, see :ref:`Define an Object Model <kotlin-define-object-model>`.

.. include:: /includes/map-to-bson-type.rst

**Kotlin Data Types**

The following table lists the supported Kotlin data types and examples of 
how to declare them as required or optional properties in your object model.

Note that Realm stores all non-decimal numeric types as ``Long`` 
values. Similarly, Realm stores all decimal numeric types as 
``Double`` values.

.. list-table:: 
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - Kotlin Data Type
     - Required
     - Optional

   * - ``String``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.string-required.kt
         :language: kotlin     
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.string-optional.kt
         :language: kotlin

   * - ``Byte``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.byte-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.byte-optional.kt
         :language: kotlin

   * - ``Short``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.short-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.short-optional.kt
         :language: kotlin

   * - ``Int``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.int-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.int-optional.kt
         :language: kotlin

   * - ``Long``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.long-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.long-optional.kt
         :language: kotlin

   * - ``Float``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.float-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.float-optional.kt
         :language: kotlin

   * - ``Double``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.double-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.double-optional.kt
         :language: kotlin

   * - ``Boolean``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.bool-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.bool-optional.kt
         :language: kotlin

   * - ``Char``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.char-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.char-optional.kt
         :language: kotlin

**MongoDB BSON Types**

The following table lists the supported MongoDB BSON data types and examples 
of how to declare them as required or optional properties in your object model.
To use these types, you must import them from the 
:github:`org.mongodb.kbson <mongodb/kbson>` package.

.. list-table:: 
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - MongoDB BSON Type
     - Required
     - Optional

   * - :ref:`ObjectId <kotlin-objectid>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.objectId-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.objectId-optional.kt
         :language: kotlin

   * - ``Decimal128``
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.decimal128-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.decimal128-optional.kt
         :language: kotlin

**Realm-Specific Types**

The following table lists the supported Realm-specific data types and 
examples of how oto declare them as required or optional properties in 
your object model.

.. list-table:: 
   :header-rows: 1
   :stub-columns: 1
   :widths: 20 40 40

   * - Realm-Specific Type
     - Required
     - Optional

   * - :ref:`RealmUUID <kotlin-uuid>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.uuid-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.uuid-optional.kt
         :language: kotlin

   * - :ref:`RealmInstant <kotlin-timestamps>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmInstant-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmInstant-optional.kt
         :language: kotlin

   * - :ref:`RealmAny <kotlin-realmany>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realmAny-optional.kt
         :language: kotlin

   * - :ref:`MutableRealmInt <kotlin-mutablerealmint>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.mutableRealmInt-required.kt
         :language: kotlin
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.mutableRealmInt-optional.kt
         :language: kotlin

   * - :ref:`RealmList <kotlin-realm-list>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.list-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmSet <kotlin-realm-set>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.set-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmDictionary <kotlin-realm-dictionary>`
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.dictionary-required.kt
         :language: kotlin
     -       N/A

   * - :ref:`RealmObject <kotlin-realm-objects-as-properties>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.realm-object-optional.kt
         :language: kotlin

   * - :ref:`EmbeddedRealmObject <kotlin-embedded-objects-as-properties>`
     -       N/A
     - .. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.embedded-object-optional.kt
         :language: kotlin

The Kotlin SDK does not natively support user-defined enumeration properties. 
See the :ref:`Enums <kotlin-enums>` section for more information on how to 
use enums in your Realm objects.


Unique Identifiers
------------------

.. _kotlin-objectid:

ObjectId
~~~~~~~~

.. important:: 

   In Realm Kotlin SDK version 1.5.0 and newer, 
   `io.realm.kotlin.types.ObjectId 
   <{+kotlin-local-prefix+}/io.realm.kotlin.types/-object-id/index.html>`__ 
   is deprecated. You must import ``ObjectId`` from 
   :github:`org.mongodb.kbson.ObjectId <mongodb/kbson>` instead.

``ObjectId`` is a MongoDB-specific 12-byte globally unique value that you 
can use as an identifier for objects. An ``ObjectId`` is :ref:`indexable 
<kotlin-indices>` and can be used as a :ref:`primary key <kotlin-primary-keys>`.

.. _kotlin-uuid:

RealmUUID
~~~~~~~~~

``UUID`` (Universal Unique Identifier) is a 16-byte :wikipedia:`unique value
<Universally_unique_identifier>` that you can use as an identifier for
objects. It is :ref:`indexable <kotlin-indices>` and can be used as a 
:ref:`primary key <kotlin-primary-keys>`. 

Realm creates UUIDs with the `RealmUUID 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/index.html>`__ 
type that:

- conform to `RFC 4122 version 4 <https://www.rfc-editor.org/info/rfc4122>`_
- are created with random bytes

You can generate a random ``RealmUUID`` using `RealmUUID.random() 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/random.html>`__ 
or pass a UUID-formatted string to `RealmUUID.from() 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/from.html>`__:

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.create-uuid.kt
   :language: kotlin

.. include:: /includes/note-using-uuid-instead-of-objectid.rst

.. _kotlin-mutablerealmint:

MutableRealmInt (Counter)
-------------------------

The Kotlin SDK offers `MutableRealmInt 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-mutable-realm-int/index.html>`__ 
as a special integer type that you can use as a logical counter to accurately 
synchronize numeric changes across multiple distributed clients. 

``MutableRealmInt`` behaves like a ``Long`` but also 
supports ``increment`` and ``decrement`` methods that implement a 
:wikipedia:`conflict-free replicated data type <Conflict-free_replicated_data_type>`. 
This ensures that numeric updates can be executed regardless of order to 
converge to the same value.

``MutableRealmInt`` fields are backed by traditional numeric types, 
so no migration is required when changing a field from ``Byte``, ``Short``, 
``Int``, or ``Long`` to ``MutableRealmInt``

A ``MutableRealmInt`` property: 

- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>`
- *cannot* store null values, but it can be declared nullable 
  (``MutableRealmInt?``)

.. _kotlin-timestamps:

RealmInstant (Timestamp)
------------------------

You cannot store Kotlin's built-in ``Date`` or ``Instant`` types in Realm. 

Instead, the Kotlin SDK uses the `RealmInstant 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-instant/index.html>`__ 
type to store time information as a UNIX epoch timestamp.

If you need timestamp data in a form other than ``RealmInstant``, you
can add conversion code to your model class based on the following
example:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.timestamp-workaround.kt
   :language: kotlin

.. _kotlin-realmany:

RealmAny (Mixed)
----------------

`RealmAny <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-any/index.html>`__ 
represents a non-nullable mixed data type. You can use ``RealmAny`` to hold 
any supported Kotlin data types, supported BSON types, and the following
Realm-specific types: 

- RealmInstant
- RealmObject
- RealmUUID

Additionally, ``RealmAny`` values can be sorted (from lowest to highest): 

#. Boolean
#. Byte, Short, Int, Long, Float, Double, Decimal128
#. ByteArray, String
#. Date
#. ObjectId
#. UUID
#. RealmObject

You can store multiple ``RealmAny`` instances in ``RealmList``, 
``RealmDictionary``, or ``RealmSet`` fields. 

To change the value of a ``RealmAny`` field, assign a new ``RealmAny`` 
instance with a different underlying value.

.. Link to Create page once example is added

``RealmAny`` properties: 

- are :ref:`indexable <kotlin-indices>` but *cannot* be used as a 
  :ref:`primary key <kotlin-primary-keys>`
- must be declared nullable (``RealmAny?``), but *cannot* store null values
- can be aggregated. Results are based on the sort order, and the output 
  type will be a ``RealmAny`` instance containing the corresponding value type.

.. tip:: Handle Polymorphism with Conditional Expressions

   Because you must know the stored type to extract its value, we 
   recommend using a ``when`` expression to handle the 
   ``RealmAny`` type and its possible inner value class.

.. _kotlin-collections:

Collection Types
----------------

The Kotlin SDK offers several collection types that you can use as 
properties in your data model. A collection is an object 
that contains zero or more instances of one supported data type. 
Realm collections are homogenous: all objects in a collection are of the 
same type.

See also :ref:`Create a Collection <kotlin-create-a-collection>`. 

.. _kotlin-realm-list:

RealmLists
~~~~~~~~~~

A `RealmList <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html>`__
represents a :ref:`to-many relationship <kotlin-to-many-relationship>` 
containing any of the supported data types, a `RealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
or an `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__.

``RealmList`` implements Kotlin's `List <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/>`__ 
interface. Unmanaged lists are backed by an  built-in ``List`` class,
except managed ``RealmList`` instances persist their contents to a
realm. See :ref:`Managed vs. Unmanaged Objects <kotlin-managed-vs-unmanaged-objects>`
for more information.

``RealmList<E>`` is a non-null type, where: 

- Lists of ``RealmObject`` or ``EmbeddedRealmObject`` elements *cannot* 
  be nullable
- Lists of any other supported elements can be nullable (``RealmList<E?>``)

.. _kotlin-realm-set:

RealmSets
~~~~~~~~~

A `RealmSet 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html>`__   
represents a :ref:`to-many relationship <kotlin-to-many-relationship>` 
containing distinct values of any of the supported data types, a `RealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
or an `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__.

``RealmSet`` implements Kotlin's 
`Set <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/>`__ 
interface, so it works exactly like the built-in ``HashSet`` class,
except managed ``RealmSet`` instances persist their contents to a
realm. See :ref:`Managed vs. Unmanaged Objects <kotlin-managed-vs-unmanaged-objects>`
for more information.

``RealmSet<E>`` is a non-null type, where:

- Sets of ``RealmObject`` or ``EmbeddedRealmObject`` elements *cannot* be nullable
- Sets of any other supported elements can be nullable (``RealmSet<E?>``)

.. _kotlin-realm-dictionary:

RealmMap/RealmDictionaries
~~~~~~~~~~~~~~~~~~~~~~~~~~

A `RealmMap <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-map/index.html>`__  
is an associative array that contains key-value pairs with unique keys. `RealmDictionary 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__ 
is a specialized ``RealmMap`` where every key is a string and values can 
be any of the supported data types, a `RealmObject
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__
or an `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__.

``RealmDictionary`` implements Kotlin's `Map 
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/>`__ 
interface, so it works exactly like the built-in ``LinkedHashMap`` class,
except managed ``RealmDictionary`` instances persist their contents to a
realm. See :ref:`Managed vs. Unmanaged Objects <kotlin-managed-vs-unmanaged-objects>`
for more information.

``RealmDictionary<K, V>`` is a non-null type, where: 

- Keys must be strings
- Dictionaries of ``RealmObject`` or ``EmbeddedRealmObject`` values *must* 
  be nullable (``RealmDictionary<K, V?>``)
- Dictionaries of any other supported elements can be nullable (``RealmDictionary<K, V?>``)

RealmResults
~~~~~~~~~~~~

`RealmResults 
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-results/index.html>`__ 
represents the lazily evaluated results of a ``RealmQuery``. Results are 
immutable: you cannot add or remove elements on the results collection. 
Instead, the associated query determines their contents.

``RealmResults<E>`` implements Kotlin's `List 
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/>`__ 
and behaves in similar ways.

An inverse, to-many relationship property is a ``RealmResults`` list: 

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-realm-object.kt
   :language: kotlin

.. _kotlin-realm-objects-as-properties:

RealmObjects as Properties
--------------------------

You can use `RealmObjects <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__ and any subclasses as properties in your object model.

``RealmObject`` properties:  

- can be used as elements in collections 
- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>`

You can also reference one or more Realm objects from another through 
to-one and to-many relationships. 
For more information, see the :ref:`Relationships <kotlin-relationships>` page.

Backlinks
~~~~~~~~~

A backlink represents an :ref:`inverse relationship <kotlin-inverse-relationships>`
between a ``RealmObject`` and one or more ``RealmObject`` or between a 
``RealmObject`` and an ``EmbeddedRealmObject``. Backlinks cannot be null.

You can define a backlink property as a `BacklinksDelegate 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-backlinks-delegate/index.html>`__ 
or `EmbeddedBacklinksDelegate 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-backlinks-delegate/index.html>`__ to the parent object using the ``backlinks()`` method.
 

A ``BacklinksDelegate<T>`` property is defined as a ``RealmResults<T>`` list 
of ``RealmObjects`` :

You can store backlinks for to-many relationships in ``RealmLists``, ``RealmSets``, or 
``RealmDictionaries``

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-realm-object.kt
   :language: kotlin

An ``EmbeddedBacklinksDelegate<T>`` property is defined as an object that 
links:

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.backlinks-embedded-object.kt
   :language: kotlin

.. _kotlin-embedded-objects-as-properties:

EmbeddedRealmObject
~~~~~~~~~~~~~~~~~~~

An `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__
is a special type of `RealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__. 

``EmbeddedRealmObject`` properties: 

- must be nullable objects within the parent object 
- *cannot* be nullable elements within a list or set  
- *cannot* be used as a :ref:`primary key <kotlin-primary-keys>` 

See :ref:`Embedded Objects <kotlin-embedded-objects>` for more information.

.. tip:: Embedded Object Types are Reusable and Composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

.. Geospatial Types
.. ----------------

.. _kotlin-enums:

Enums
-----

The Kotlin SDK does not natively support enumerations, or enums. To use 
enums in a Realm object class, define a field with a type matching the 
underlying data type of your enum. 

Then, create getters and setters for the field that convert the field 
value between the underlying value and the enum type.

.. literalinclude:: /examples/generated/kotlin/DataTypes.snippet.enum-workaround.kt
   :language: kotlin

