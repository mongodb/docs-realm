.. _kotlin-supported-types:

=======================
Data Types - Kotlin SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


The Kotlin SDK supports Kotlin data types, a limited subset of
`BSON <https://bsonspec.org/>`__ types, and :wikipedia:`UUID <Universally_unique_identifier>`.

.. _kotlin-data-types:

Supported Types
---------------

Realm supports the following field data types:

- ``String``
- ``Byte``
- ``Char``
- ``Short``
- ``Int``
- ``MutableRealmInt``, which behaves like a ``Long`` but also supports ``increment`` 
  and ``decrement`` methods that implement a conflict-free replicated data type.  
  For more information, see `MutableRealmInt <{+kotlin-local-prefix+}io.realm.kotlin.types/-mutable-realm-int/index.html>`__.   
- ``Long``
- ``Boolean``
- ``Double``
- ``Float``
- ``Decimal128``
- ``ObjectId`` 
- ``RealmInstant``
- ``RealmUUID``
- Any ``RealmObject`` subclass
- ``RealmList<T>``, where T is any of the supported data types or a   
  `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__.
  Lists of ``RealmObject`` cannot have null elements. 
  All other types of ``RealmList<T>`` can be nullable (``RealmList<T?>``).
- ``RealmSet<T>``, where T is any of the supported data types or a
  `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__.
  Sets of ``RealmObject`` cannot have null elements. 
  All other types of ``RealmSet<T>`` can be nullable (``RealmSet<T?>``).
- ``RealmDictionary<T>``, where T is any type of Realm primitive nullable or 
  non-nullable value (``RealmDictionary<T?>``), a
  `RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__,
  or an `EmbeddedRealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__.
  Dictionaries of ``RealmObject`` and ``EmbeddedRealmObject`` must be declared nullable. 
- ``BacklinksDelegate<T>``, a `backlinks <{+kotlin-local-prefix+}io.realm.kotlin.ext/backlinks.html>`__
  delegate used to define an inverse relationship between 
  `RealmObjects <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__. 

Realm stores all non-decimal numeric types as ``Long`` values.
Similarly, Realm stores all decimal numeric types as ``Double``
values.

Realm does not support fields with modifiers ``final`` and
``volatile``, though you can use fields with those modifiers if you
:ref:`ignore <kotlin-ignore>` them. If you choose to provide custom
constructors, you must declare a public constructor with no arguments.

Updating Strings and Byte Arrays
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Since Realm operates on fields as a whole, it's not possible
to directly update individual elements of strings or byte arrays. Instead,
you'll need to read the whole field, make your modification to individual
elements, and then write the entire field back again in a transaction block.

.. _kotlin-timestamps:

Timestamps
~~~~~~~~~~

You cannot store Kotlin's built-in ``Date`` or ``Instant`` types in Realm
Database. Instead, use the
`RealmInstant <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-instant/index.html>`__
type, which stores time information as a UNIX epoch timestamp.

If you need timestamp data in a form other than ``RealmInstant``, you
can add conversion code to your model class based on the following
example:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.timestamp-workaround.kt
   :language: kotlin

.. _kotlin-reference-realm-object:

Reference Realm Objects
-----------------------

You can also reference one or more Realm objects from another. Learn more in the
:ref:`relationship properties documentation <kotlin-relationships>`.

.. _kotlin-collections:

Collections
-----------

A Realm collection contains zero or more instances of a
:ref:`Realm supported data type <kotlin-data-types>`.
In a Realm collection, all objects in a collection are of the same type.

.. _kotlin-realm-set:

RealmSet
~~~~~~~~

A `RealmSet() 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html>`__  
collection represents a 
:ref:`to-many relationship <kotlin-to-many-relationship>` containing 
distinct values. 

``RealmSet`` implements Kotlin's 
`Set <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/>`__ 
interface, so it works just like the built-in ``HashSet`` class,
except managed ``RealmSet`` instances persist their contents to a
realm. 

.. _kotlin-realm-dictionary:

RealmMap/RealmDictionary
~~~~~~~~~~~~~~~~~~~~~~~~

A `RealmDictionary 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__ 
is a specialized 
`RealmMap <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-map/index.html>`__ 
where every key is a string. A ``RealmMap`` is an associative array that 
contains  key-value pairs with unique keys. 



Notifications
`````````````

You can register a notification handler on a ``RealmSet``. Realm notifies your
handler when the set changes. To register a change listener on a single
object, generate a ``Flow`` from the ``RealmSet`` with `asFlow()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/as-flow.html>`__.
Next, use the ``collect()`` method to handle events on that ``Flow``. The ``Flow``
emits an `initialSet()
<{+kotlin-local-prefix+}io.realm.kotlin.notifications/-initial-set/index.html>`__
once subscribed and an `updatedSet()
<{+kotlin-local-prefix+}io.realm.kotlin.notifications/-updated-set/index.html>`__
on change.

In the following example, we react to changes on the ``favoriteSnacks`` set of our ``Frog`` object.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.react-to-changes-from-the-set.kt
   :language: kotlin

The ``Flow`` runs indefinitely until you `cancel the enclosing coroutine
<https://kotlinlang.org/docs/cancellation-and-timeouts.html>`__ or until you
delete the parent object.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-unsubscribe-to-changes.kt
   :language: kotlin


.. _kotlin-additional-types:

Additional Supported Data Types
-------------------------------

.. _kotlin-objectid:

ObjectId
~~~~~~~~

.. note:: Importing ``ObjectId`` in the Realm Kotlin SDK ``version 1.5.x`` or Higher

   With the :github:`Realm Kotlin Kotlin version 1.5.0
   <realm/realm-kotlin/blob/main/CHANGELOG.md#150-2022-11-11>` you must import
   ``ObjectId`` from :github:`org.mongodb.kbson.ObjectId <mongodb/kbson>`. If
   you were using an older SDK version and wish to upgrade, replace your old
   import statements as `io.realm.kotlin.types.ObjectId
   <{+kotlin-local-prefix+}io.realm.kotlin.types/#-1137254501%2FClasslikes%2F-1651551339>`__
   has been deprecated. 

``ObjectId`` is a MongoDB-specific 12-byte unique value which you can use as an
identifier for objects. ``ObjectId`` is :ref:`indexable <kotlin-indices>` 
and can be used as a :ref:`primary key <kotlin-primary-keys>`. 

To define a property as an ObjectId, set its type as ``ObjectId`` in
your :ref:`object model <kotlin-define-object-model>`.

.. _kotlin-uuid:

UUID
~~~~

``UUID`` (Universal Unique Identifier) is a 16-byte :wikipedia:`unique value
<Universally_unique_identifier>`. You can use ``UUID`` as an identifier for
objects. ``UUID`` is :ref:`indexable <kotlin-indices>` and can be used as a 
:ref:`primary key <kotlin-primary-keys>`. 

Realm creates UUIDs with the `RealmUUID <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/index.html>`__ type that:

- conform to `RFC 4122 version 4 <https://www.rfc-editor.org/info/rfc4122>`_
- are created with random bytes

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.uuid.kt
   :language: kotlin
   :copyable: false

.. include:: /includes/note-using-uuid-instead-of-objectid.rst

Create a UUID from a String
```````````````````````````

To generate a new ``RealmUUID`` from a UUID formatted string, pass the string to `RealmUUID.from() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/from.html>`__:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.create-uuid-from-string.kt
   :language: kotlin

Create a Random UUID
````````````````````

To generate a random ``RealmUUID``, call `RealmUUID.random() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-u-u-i-d/-companion/random.html>`__:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.create-uuid-random.kt
   :language: kotlin
