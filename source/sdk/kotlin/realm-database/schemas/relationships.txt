.. _kotlin-relationships:

==========================
Relationships - Kotlin SDK
==========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

A relationship is an object property that references another Realm object.

Relationships are direct references to other objects in a realm, which
means that you don't need bridge tables or explicit joins to define a
relationship like you would in a relational database. Instead, you can
access related objects by reading and writing to the property that
defines the relationship. Realm executes read operations
lazily, so querying objects with relationship fields doesn't slow
queries.

There are two primary types of relationships between objects:

- To-One Relationship
- To-Many Relationship

.. tip:: One-to vs. Many-to Relationships

   In Realm, there is no way to limit object references from
   other objects within the same realm. As a result, there is no way to
   restrict a relationship to "one to one/one to many" instead of "many to
   one/many to many".

You can define relationships in your object schema using the following
types:

- ``RealmObject``
- ``RealmList <? extends RealmObject>``

You can also embed one Realm object directly within another to create a nested
data structure.
:ref:`Embedded Objects <kotlin-embedded-objects>` are similar to relationships but have additional constraints.

.. _kotlin-to-one-relationship:

To-One Relationship
-------------------

A to-one relationship means that an object is related 
to no more than one other object. Setting a relationship field to ``null``
removes the connection between objects, but Realm does not
delete the referenced object.

To set up a many-to-one or one-to-one relationship, create a field
whose type is a Realm object in your application:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.to-one-relationship.kt
   :language: kotlin

Each ``SushiPlatter`` references either zero ``Fish`` instances or one other
``Fish`` instance. Nothing prevents multiple ``SushiPlatter`` instances from
referencing the same ``Fish`` instance; the distinction between a
many-to-one and a one-to-one relationship is up to your application.

To-Many Relationship
--------------------

A to-many relationship means that an object is related in a specific way
to multiple objects. You can create a relationship between one object
and any number of objects using a field of type ``RealmList<T>`` where
``T`` is a Realm object in your application:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.to-many-relationship.kt
   :language: kotlin
   :copyable: false

RealmLists are containers of RealmObjects, but otherwise behave like a
regular collection. The same object can occur in multiple to-many
relationships; the distinction between a many-to-many and a one-to-many
relationship is up to your application.

.. note::

   The child objects in a to-many relationship must be a `RealmList
   <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html>`__ or a
   `RealmSet
   <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html>`__. For
   instance, if a "Sushi" object has many "Fish" objects, you must specify the
   "Sushi.fishes" as a ``RealmList`` or ``RealmSet`` of ``Fish`` objects.

Inverse Relationships
---------------------

An inverse relationship links an object back to any other objects that refer
to it in a defined to-one or to-many relationship. Relationship definitions are
unidirectional, so you must explicitly define a property in the object's model
as an inverse relationship.

For example, the to-many relationship "User has many Posts" does not
automatically create the inverse relationship "Post belongs to User". 

Realm automatically updates implicit relationships whenever an
object is added or removed in the specified relationship. You cannot manually
add or remove items from a `backlinks collection
<{+kotlin-local-prefix+}io.realm.kotlin.ext/backlinks.html>`__.

Because relationships are many-to-one or many-to-many, following inverse
relationships can result in zero, one, or many objects.

Consider the following class defining a ``User`` with a `RealmList
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html>`__ of ``posts``:

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.inverse-relationship-user.kt
   :language: kotlin

You can provide a link in the opposite direction, from ``Post`` to ``User``.
This allows you :ref:`filter <kotlin-filter-data>` data about the user who the
post belongs to like any other ``RealmResults``.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.inverse-relationship-post.kt
   :language: kotlin

.. _kotlin-embedded-objects:

Embedded Objects
----------------

An embedded object is a special type of :ref:`Realm object
<kotlin-object-type>` that models complex data about a specific object.
Realm treats each embedded object as nested data inside of a single specific
parent object.

Embedded objects are similar to relationships, but an embedded object 
inherits the lifecycle of its parent object and cannot exist as an 
independent Realm object. 
Because of this, embedded objects have the following constraints: 

- Embedded objects are deleted when their parent object is deleted 
  or their parent no longer references them. 
- Embedded objects cannot have a :ref:`primary key <kotlin-primary-keys>`. 
- You cannot reassign an embedded object to a different parent object.
- You cannot link to an embedded object from multiple parent objects. 

.. tip:: Embedded Object Types are Reusable and Composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

Define an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To define an embedded object, derive a class from 
`EmbeddedRealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__: 

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.embedded-object-model.kt 
    :language: kotlin

Once your embedded object class is defined, you must include its schema in the
realm's 
`configuration <{+kotlin-local-prefix+}io.realm.kotlin/-realm-configuration/index.html>`__
to use it in your realm instance:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.open-realm-embedded-object.kt 
    :language: kotlin 
    :emphasize-lines: 3

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign an instance of the embedded object
to a parent object's property:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.create-embedded-object.kt 
    :language: kotlin


Update Embedded Object Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update a property in an embedded object, fetch the object and reassign the 
embedded object properties in a write transaction:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.update-embedded-object.kt 
    :language: kotlin


Overwrite an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To overwrite an embedded object, assign a new embedded object instance to the 
property in a write transaction:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.overwrite-embedded-object.kt 
    :language: kotlin


Query an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~

You can query the embedded object directly or through the parent object. 
You can also use the 
`EmbeddedRealmObject.parent() <{+kotlin-local-prefix+}io.realm.kotlin.ext/parent.html>`__  
method to access the parent of the embedded object.

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.query-embedded-objects.kt 
    :language: kotlin


Delete an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

.. warning:: Realm Uses Cascading Deletes for Embedded Objects

   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. 
   If you want the referenced objects to persist after the deletion of the 
   parent object, use a regular Realm object with a :ref:`to-one relationship 
   <kotlin-to-one-relationship>` instead.

You can delete an embedded object directly or through the parent object. 

To delete only an embedded object, you can fetch and delete a specific embedded object 
or clear the parent's reference to the embedded object, which also deletes 
the embedded object instance.  

Deleting the parent object automatically deletes all of its embedded objects. 

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.delete-embedded-object.kt 
    :language: kotlin
