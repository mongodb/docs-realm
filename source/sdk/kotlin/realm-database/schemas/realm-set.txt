.. _kotlin-realm-set:

=====================
RealmSet - Kotlin SDK
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can use the `RealmSet()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html>`__ data type
to manage a collection of unique keys. ``RealmSet`` implements Kotlin's
``Set`` interface, so it works just like the built-in ``HashSet`` class,
except managed ``RealmSet`` instances persist their contents to a
realm. 

``RealmSet`` instances that contain Realm objects only store references to those
objects, so deleting a Realm object from a realm also deletes that object from
any ``RealmSet`` instances that contain the object.

Define a RealmSet
-----------------

To define a property as a ``RealmSet<T>``, specify its type within the schema, 
where T is any of the supported :ref:`data types <kotlin-supported-types>` or a 
`RealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__. 
Note that T can be nullable (``RealmSet<T?>``) unless it is of type ``RealmObject``.

Instantiate an unmanaged ``RealmSet`` by setting the field's default value
using the `realmSetOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-set-of.html>`__ method.

In the following example, we define a ``Frog`` schema with a ``favoriteSnacks``
field that is a ``RealmSet`` of ``Snack`` objects.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.define-a-realm-set.kt
   :language: kotlin

Add an Item to a RealmSet
-------------------------

To add an item to a ``RealmSet``, pass the object you wish to add to the `set.add()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#-153241610%2FFunctions%2F-1651551339>`__ 
method.

In the following example, we get the ``favoriteSnacks`` set, then add a new
``Snack`` object to the set of favorite snacks.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.add-item-to-realm-set.kt
   :language: kotlin

Add Many Items to a RealmSet
----------------------------

To add multiple items to a ``RealmSet``, pass the elements you wish to add to
the `set.addAll()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#-800009087%2FFunctions%2F-1651551339>`__
method.

In the following example, we create several ``Snack`` objects and use the
`setOf
<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/set-of.html>`__
method to create a read-only set of the given elements. We then pass these
elements to the ``set.addAll()`` method to add them to our ``Frog`` object's favorite snacks.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.add-all-to-realm-set.kt
   :language: kotlin

Check if the RealmSet Contains an Item
--------------------------------------

To check if the ``RealmSet`` contains a particular item, pass the element to
`set.contains()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#607101300%2FFunctions%2F-1651551339>`__.
The method returns true if the set contains the element.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.set-contains.kt
   :language: kotlin

Check if the RealmSet Contains Multiple Items
---------------------------------------------

To check if the ``RealmSet`` contains multiple items, pass the elements to
`set.containsAll()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#1318510207%2FFunctions%2F-1651551339>`__.
The method returns true if the set contains the specified elements.

In the following example, we pass the ``Snack`` objects we created earlier to
the ``setOf()`` method to create a read-only set of favorite snacks. Then we
check if the ``RealmSet`` contains all of these ``Snack`` objects by passing
the read-only set to ``set.containsAll()``.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.set-contains-multiple-items.kt
   :language: kotlin

Remove an Item from a RealmSet
------------------------------

To remove an item from a ``RealmSet``, pass the element you wish to delete to `set.remove()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#-1503494415%2FFunctions%2F-1651551339>`__

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.remove-item-from-set.kt
   :language: kotlin

Remove Multiple Items from a RealmSet
-------------------------------------

To remove multiple items from a ``RealmSet``, pass the elements you wish to delete to
`set.removeAll() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#430447804%2FFunctions%2F-1651551339>`__

In the following example, we delete the set of favorite snacks we created earlier.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.remove-multiple-items-from-set.kt
   :language: kotlin

Notifications
-------------

You can register a notification handler on a ``RealmSet``. Realm notifies your
handler when the set changes. To register a change listener on a single
object, generate a ``Flow`` from the ``RealmSet`` with `asFlow()
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/as-flow.html>`__.
Next, use the ``collect()`` method to handle events on that ``Flow``. The ``Flow``
emits an `initialSet()
<{+kotlin-local-prefix+}io.realm.kotlin.notifications/-initial-set/index.html>`__
once subscribed and an `updatedSet()
<{+kotlin-local-prefix+}io.realm.kotlin.notifications/-updated-set/index.html>`__
on change.

In the following example, we react to changes on the ``favoriteSnacks`` set of our ``Frog`` object.

.. literalinclude:: /examples/generated/kotlin/SchemaTest.snippet.react-to-changes-from-the-set.kt
   :language: kotlin

The ``Flow`` runs indefinitely until you `cancel the enclosing coroutine
<https://kotlinlang.org/docs/cancellation-and-timeouts.html>`__ or until you
delete the parent object.

.. literalinclude:: /examples/generated/kotlin/QuickStartTest.snippet.quick-start-unsubscribe-to-changes.kt
   :language: kotlin
