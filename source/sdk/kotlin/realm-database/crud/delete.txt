.. _kotlin-delete-objects:

=================================
Delete Realm Objects - Kotlin SDK
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

This page describes how to delete managed objects from a local or synced realm 
using the Kotlin SDK. 

You can choose to delete a single object, multiple objects, or all 
objects from the realm. After you delete an object, you can no longer access or 
modify it. If you try to use a deleted object, Realm throws an error.

.. note:: Deleting Objects Does NOT Delete the Realm File

   Deleting objects from a realm *does not* delete the realm file
   or affect the realm schema. It only deletes the object instance from the 
   realm. If you want to delete the realm file itself,
   refer to :ref:`<kotlin-delete-a-realm>`.

.. _kotlin-delete-operations:

Delete Operations
-----------------

Like :ref:`update <kotlin-update-objects>` operations, which also modify 
the state of the realm, delete operations require the following:

- You can only perform a delete operation on a ``mutableRealm`` accessed 
  within a :ref:`write transaction <kotlin-write-transactions>`.
- You can only delete live objects, which are only accessible inside of a 
  write transaction. You can convert a frozen object to a 
  live object in a transaction with `mutableRealm.findLatest()
  <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/find-latest.html>`__.
  For more information, refer to :ref:`<kotlin-frozen-architecture>`.

  .. example:: Convert Frozen Object Before Deleting
   
   .. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-an-object.kt
      :language: kotlin

Realm supports the deletion of one or more ``RealmObject`` or 
``EmbeddedRealmObject`` instances, a ``RealmList`` or ``RealmSet`` collection, 
``RealmQuery``, or ``RealmResults`` instances.

Generally, you delete objects from a realm by querying for the one or more 
objects that you want to delete, and then passing the results to ``delete()``. 
For more information on querying with the Kotlin SDK, refer to 
:ref:`<kotlin-read>`.






You cannot directly add or remove items from a backlinks collection. The collection automatically updates itself when relationships are changed.

Related Objects and References
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm supports :ref:`relationships <kotlin-relationships>` between an 
objects. In general, if you delete an 
object with a property that references another object,
Realm only deletes the object reference (or pointer). Realm *does not* 
delete the instance of the related object for you unless the 
related object is :ref:`embedded <kotlin-embedded-objects>`. Refer to the 
:ref:`<kotlin-delete-embedded-object>` section for
more information.

If you you want to delete any related objects when you delete a parent object, 
you can manually perform what we call a **chaining delete**. If you do not 
delete the related objects yourself, they remain orphaned in your realm. 
Whether or not this is a problem depends on your application's needs.

We recommend deleting dependent objects by iterating through the 
dependencies and deleting them before deleting the parent object.
Refer to the :ref:`<kotlin-delete-related-objects>` section for more information.

.. _kotlin-delete-an-object:

Delete Realm Objects
--------------------

To delete objects from a realm:

1. Open a write transaction with `realm.write()
   <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__ or
   `realm.writeBlocking()
   <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-blocking.html>`__.

#. Get the live objects by querying the transaction's mutable realm 
   for the one or more objects that you want to delete using 
   `query() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__:
   
   #. Specify the object type as a type parameter passed to ``query()``.
   #. (Optional) Filter the set of returned objects by specifying a query. 
      If you don't include a query filter, you return all objects of the 
      specified type.

   .. important:: Objects Must Be Live
      
      You can only delete live objects. If your query occurred outside of the 
      write transaction, you must convert the frozen objects 
      to live objects in the transaction with 
      ``mutableRealm.findLatest()``.

#. Pass the set of `RealmResults
   <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-results/index.html>`__
   returned by the query to 
   `mutableRealm.delete() <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/delete.html>`__.

#. The specified objects are deleted from the realm and can no longer be accessed 
   or modified.

.. tip:: 

   You can check whether an object is still valid to use by calling 
   `isValid() <{+kotlin-local-prefix+}io.realm.kotlin.ext/is-valid.html>`__.
   Deleted items return ``false``.

.. _kotlin-delete-a-single-object:

Delete a Single Object 
~~~~~~~~~~~~~~~~~~~~~~

To delete a single ``RealmObject`` object, 
query for the object type using a filter 
that returns the specific object that you want to delete.

.. tip:: Use Unique Identifying Information

   We recommend filtering with unique identifying information such as 
   a primary key value to ensure your query returns the correct object.

In the following example, we query for a ``Frog`` object named
"Kermit", and then pass the returned object to ``mutableRealm.delete()`` to 
delete it from the realm: 

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-an-object.kt
   :language: kotlin

If the object has a relationship property with another object, Realm only
deletes the reference to the other object. The referenced object remains in the 
realm, but it can no longer be queried through the parent property.

In the following example, we query for a ``Frog`` object contains 
a ``favoritePond`` property that contains a ``Pond`` object.
When we delete the ``Frog`` object, the ``Pond`` object remains in the realm:

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-realm-object-with-related-objects.kt
   :language: kotlin

.. _kotlin-delete-multiple-objects:

Delete Multiple Objects
~~~~~~~~~~~~~~~~~~~~~~~

To delete multiple objects at the same time, pass the object type to 
``query()`` and specify a query that returns the objects that you want to delete.

In the following example, we query for the first 3 ``Frog`` objects whose 
``species`` is "bullfrog", and then pass the results to 
``mutableRealm.delete()`` to delete them from the realm: 

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-an-object.kt
   :language: kotlin

.. _kotlin-delete-all-objects-of-a-type:

Delete All Objects of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To delete all objects of a type from a realm at the same time, pass the 
object type to ``query()`` and leave the query filter empty to return all 
objects of that type.

In the following example, we query for all ``Frog`` objects, and then pass
the results to ``mutableRealm.delete()`` to delete them all from the realm:

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-an-object.kt
   :language: kotlin

.. _kotlin-delete-all-objects-in-the-realm:

Delete All Objects in a Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Kotlin SDK lets you delete all managed objects of all types, which is useful 
for quickly clearing out your realm while prototyping. This does not affect
the realm schema or any objects that are not managed by the realm.

To delete *all* objects from the realm at the same time, call 
`mutableRealm.deleteAll() <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/delete-all.html>`__.

.. tip:: Use deleteAll() in Development
         
   The ``deleteAll()`` method is useful for quickly clearing out 
   your realm during development. For example, instead of writing 
   a migration to update objects to a new schema, it may be faster to 
   delete all, and then re-generate the objects with the app itself.

Remove Elements from Collections
--------------------------------

Realm collection instances that contain Realm objects only store 
references to those objects. Realm only removes the references to the
objects. It does not delete the objects themselves.

When you delete an object that contains a collection property such as a 
``RealmList`` or ``RealmSet``, Realm only deletes the object references. 

To delete the collection elements themselves, you must delete them
manually.


Remove Items from a RealmList
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



You can delete one or more items from a ``RealmSet`` at a time:

- To remove one item from a ``RealmSet``, pass the element 
  you want to delete to 
  `list.remove() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html#731697687%2FFunctions%2F878332154>`__.
- To remove multiple items from a ``RealmSet``, pass the 
  elements you want to delete to
  `list.removeAll() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html#1522148962%2FFunctions%2F878332154>`__.

  `list.removeAt() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html#-1899070414%2FFunctions%2F878332154>`__.

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.remove-items-from-list.kt
   :language: kotlin


In the following example, we have a ``Forest`` object with a list of 
``Pond`` objects: 

You can also remove all list elements at once by calling
`list.clear() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-list/index.html#-35526398%2FFunctions%2F878332154>`__: 

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.list-clear.kt
   :language: kotlin

Remove Items from a RealmSet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`RealmSet <kotlin-realm-set>` instances that contain Realm objects 
only store references to those objects, so deleting a Realm object from a 
realm also deletes that object from any ``RealmSet`` instances that contain 
the object.

You can delete one or more items from a ``RealmSet`` at a time:

- To remove one item from a ``RealmSet``, pass the element 
  you want to delete to 
  `set.remove() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#-1503494415%2FFunctions%2F-1651551339>`__.
- To remove multiple items from a ``RealmSet``, pass the 
  elements you want to delete to
  `set.removeAll() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#430447804%2FFunctions%2F-1651551339>`__.

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.remove-item-from-set.kt
   :language: kotlin

Alternatively, you can use 
`set.clear() <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#-767459876%2FFunctions%2F878332154>`__ 
to clear all items from a ``RealmSet``: 

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.clear-set.kt
   :language: kotlin

.. _kotlin-delete-dictionary-keys-values:

Delete Dictionary Keys/Values
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can delete 
`RealmDictionary <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__ 
entries in a few ways:

- Use ``remove()`` to remove the key and the value
- If the dictionary's value is nullable, you can set the value of the key to ``null`` to keep the key.
- Use ``clear()`` to remove all keys and values

.. literalinclude:: /examples/generated/kotlin/DeleteTest.snippet.delete-realm-dictionary.kt
   :language: kotlin

Delete Related Objects
----------------------

Delete an Embedded Object
-------------------------

.. warning:: Realm Uses Cascading Deletes for Embedded Objects

   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. 
   If you want the referenced objects to persist after the deletion of the 
   parent object, use a regular Realm object with a :ref:`to-one relationship 
   <kotlin-to-one-relationship>` instead.

You can delete an 
`EmbeddedRealmObject.parent() <{+kotlin-local-prefix+}io.realm.kotlin.ext/parent.html>`__  
directly or through the parent object. 

To delete only an embedded object, you can fetch and delete a specific 
embedded object or clear the parent's reference to the embedded object, 
which also deletes the embedded object instance.  

Deleting the parent object automatically deletes all of its embedded objects. 

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.delete-embedded-object.kt 
    :language: kotlin
