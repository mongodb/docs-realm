.. _kotlin-read-objects:

===============================
Read Realm Objects - Kotlin SDK
===============================

.. meta:: 
  :keywords: code example, android, kmm, kmp, ios

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page describes how to query and read objects from a local or synced realm using the
Kotlin SDK.

You can query Realm using platform-native queries or a raw query language that works across platforms

You *cannot* query for asymmetric objects. This is because asymmetric objects 
are special write-only objects that do not persist to the realm. For information 
on how to use asymmetric objects in your application, 
refer to :ref:`kotlin-stream-data-to-atlas`.

Read Operations
---------------

You can read back the data that you have stored in Realm. The standard data access pattern across Realm SDKs is to find, filter, and sort objects:

#. Find the objects you want to read.
#. Filter the results to retrieve a specific segment of objects. For more information, refer to :ref:`kotlin-filter-data`.
#. Sort the results.

Read Characteristics
~~~~~~~~~~~~~~~~~~~~

To get the best performance from Realm, you should have a solid understanding of 
Realm's **read characteristics** so that you can design your app's data access 
patterns around them. Then, as your app grows and your queries become more 
complex, you can be confident that you are reading data as efficiently as possible.


Results Are Not Copies
``````````````````````

.. important:: Kotlin Results are Not Live

   Unlike the other Realm SDKs, query results for the Kotlin SDK are *not* live 
   objects and collections that update simultaneously with underlying data.
   To 
   For more information, refer to :ref:`<kotlin-frozen-architecture>`.

Frozen by default: All objects are now frozen. Unlike live objects, frozen objects do not automatically update after database writes. You can still access live objects within a write transaction, but passing a live object out of a write transaction freezes the object.



Results Are Lazy
````````````````

Realm only runs a query when you actually request the results of that query. 
This lazy evaluation enables you to write elegant, highly performant code 
for handling large data sets and complex queries. This also means that the 
first access to a field of an object will always return the most recent data.
You can chain several filter and sort operations without requiring extra 
work to process the intermediate state. 

References Are Retained
```````````````````````

One benefit of Realm's object model is that Realm automatically retains 
all of an object's relationships as direct references, so you can traverse 
your graph of relationships directly through the results of a query.

A **direct reference**, or pointer, allows you to access a related object's 
properties directly through the reference.

Other databases typically copy objects from database storage into application 
memory when you need to work with them directly. Because application objects 
contain direct references, you are left with a choice: copy the object 
referred to by each direct reference out of the database in case it's needed, 
or just copy the foreign key for each object and query for the object with 
that key if it's accessed. If you choose to copy referenced objects into 
application memory, you can use up a lot of resources for objects that are 
never accessed, but if you choose to only copy the foreign key, referenced 
object lookups can cause your application to slow down.

Realm bypasses all of this using zero-copy live objects. Realm object 
accessors point directly into database storage using memory mapping, so 
there is no distinction between the objects in Realm and the results of 
your query in application memory. Because of this, you can traverse direct 
references across an entire realm from any query result.

Limit Query Results
~~~~~~~~~~~~~~~~~~~

As a result of lazy evaluation, you do not need any special mechanism to 
limit query results with Realm. For example, if your query matches thousands 
of objects, but you only want to load the first ten, simply access only the 
first ten elements of the results collection.

Pagination
~~~~~~~~~~

Thanks to lazy evaluation, the common task of pagination becomes quite simple. 
For example, suppose you have a results collection associated with a query 
that matches thousands of objects in your realm. You display one hundred 
objects per page. To advance to any page, simply access the elements of the 
results collection starting at the index that corresponds to the target page.








Find Realm Objects
------------------




- In the Kotlin SDK, query asynchronously with realmQuery.asFlow(). Once you have a flow of results, you can collect the results. 
-  In the Kotlin SDK, query synchronously with realmQuery.find().


The Kotlin SDK provides mutableRealm.findLatest() to access a live version of any frozen object. In a write transaction, you can directly query for live objects and delete them without using findLatest()

.. tip:: ``find()`` is Synchronous
   
   `find() <{+kotlin-local-prefix+}io.realm.kotlin.query/find.html>`__
   runs a synchronous query on the thread it is called from.
   As a result, avoid using :file:`find()` on the UI thread or in
   logic that could delay the UI thread. 
   
   Prefer `asFlow()
   <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__ in
   time-sensitive environments.

Find Object by Primary Key
Find All Objects of a Given Type
Find 


Sort Results
------------











.. _kotlin-find-object-by-primary-key:

Find Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~

To find an object with a specific primary key value, open a realm
and query the primary key field for the desired primary key value
using `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__.
Specify the object type as a type parameter passed to :file:`query()`:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.find-object-by-primary-key.kt
   :language: kotlin

.. _kotlin-find-objects-of-a-type:

Find Objects of a Type
~~~~~~~~~~~~~~~~~~~~~~

To find all objects of a type, open a realm
and pass the type as a type parameter to `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.find-all-objects-of-a-type.kt
   :language: kotlin

Query an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~

You can query an :ref:`embedded object <kotlin-embedded-objects>` directly or 
through the parent object. You can also use the 
`EmbeddedRealmObject.parent() <{+kotlin-local-prefix+}io.realm.kotlin.ext/parent.html>`__  
method to access the parent of the embedded object.

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.query-embedded-objects.kt 
    :language: kotlin

Query a Dictionary Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can iterate and check the values of a  
`RealmDictionary <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__
as you would a Kotlin Map.

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-dictionary.kt
   :language: kotlin

Query a RealmSet Property
~~~~~~~~~~~~~~~~~~~~~~~~~

You can query a :ref:`RealmSet <kotlin-realm-set>` property:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.read-realm-set.kt
   :language: kotlin

Check if the RealmSet Contains Items
````````````````````````````````````

You can check if the ``RealmSet`` contains one or more elements:

- To check if the set contains a particular item, pass the 
  element to `set.contains()
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#607101300%2FFunctions%2F-1651551339>`__.
- To check if the ``RealmSet`` contains multiple items, pass 
  the elements to `set.containsAll()
  <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-set/index.html#1318510207%2FFunctions%2F-1651551339>`__.

Either method returns ``true`` if the set contains the 
specified elements.

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.realm-set-contains.kt
   :language: kotlin

Filter Data
-----------

.. _kotlin-filter-data:

Filter Results
~~~~~~~~~~~~~~

Filter results to retrieve a specific segment
of objects with `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__.
In the argument of ``realm.query()``, use Realm Query Language to perform filtering.
Realm Query Language is a string-based query language that you can use to retrieve
objects from a realm.
Specify the object type as a type parameter passed to :file:`query()`.

For more information on constructing queries, refer to the
:ref:`Realm Query Language reference documentation <rql>`.

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.filter.kt
   :language: kotlin

.. _kotlin-filter-fts:

Filter with Full-Text Search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use Realm Query Language (RQL) to query on properties that 
have :ref:`Full-Text Search Indexes <kotlin-fts-index>` (FTS) on them. FTS supports Boolean matches and not relevance-based matches.
To query these properties, use the ``TEXT`` predicate.

Words in the query are converted to tokens by a tokenizer using the 
following rules:

- Tokens can only consist of characters from ASCII and the Latin-1 
  supplement (western languages). All other characters are considered whitespace. 
- Words split by a hyphen (``-``), for example ``full-text``, are split into 
  two tokens. 
- Tokens are diacritics- and case-insensitive. 

You can search for an entire word or phrase or limit your results with the 
following characters: 

- Exclude results for a word by placing the ``-`` character
  in front of the word. For example, ``fiction -science`` would 
  include all search results for ``fiction`` and exclude those that include the
  word ``science``.
- In Kotlin SDK version 1.11.0 and later, you can specify prefixes 
  by placing the ``*`` character at the end of a word. 
  For example, ``fict*`` would include all search results for 
  ``fiction`` and ``fictitious``. (The Kotlin SDK does *not* currently 
  support suffix searches.)

In the following example, we query the ``Book.genre`` field:

.. literalinclude:: /examples/generated/kotlin/ReadTest.snippet.kotlin-fts-query.kt
  :language: kotlin

.. _kotlin-sort-queries:

Sort Results
------------

To sort results, specify a sort in the query passed to
`realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__
with the :file:`SORT` keyword. Similarly, use :file:`DISTINCT`
to constrain results to unique values of a field, and
:file:`LIMIT` to cap the number of results. The SDK
provides convenience methods on :file:`RealmQuery` so you don't have
to manually write the keywords:

- `realmQuery.sort() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/sort.html>`__
- `realmQuery.distinct() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/distinct.html>`__
- `realmQuery.limit() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/limit.html>`__

When used on the same query in both RQL and method form, :file:`SORT`,
:file:`DISTINCT`, and :file:`LIMIT` execute in the order they're added
to the query. This can impact the results returned from your query.

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.sort.kt
   :language: kotlin

.. _kotlin-iteration:

Iterate Results
---------------

You can iterate through results using :file:`Flows`.

.. seealso::

   To learn more about Kotlin Flows, check out `the kotlinx.coroutines documentation on Flows
   <https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/>`__.

To convert your results into a :file:`Flow`, call `realmQuery.asFlow()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__.
Then iterate through the results with `flow.collect()
<https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html>`__:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.iteration.kt
   :language: kotlin
