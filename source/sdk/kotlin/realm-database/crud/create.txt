.. _kotlin-create-a-new-object:

=================================
Create Realm Objects - Kotlin SDK
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. note::

   You can only insert new objects into a realm within a
   :ref:`write transaction <kotlin-write-transactions>`.

Create a New Realm Object
-------------------------

Instantiate Realm objects as you would any other object. In a
transaction, you can add the object to the realm if the
realm's schema includes the object
type. When you add an instance to the realm, it becomes
*managed* by that realm.

To persist a new object to a realm:

1. Instantiate a new object instance with the class constructor. You
   can use an `apply block
   <https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html>`__
   to configure multiple properties at once.

#. Open a write transaction with `realm.write()
   <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__ or
   `realm.writeBlocking()
   <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-blocking.html>`__.

#. Pass the new object instance to `copyToRealm()
   <{+kotlin-local-prefix+}io.realm.kotlin/-mutable-realm/copy-to-realm.html>`__
   to persist the object data to the realm. This method returns a
   **managed** instance of the object. You can modify the persisted
   object through the returned instance.

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.create-a-new-object.kt
   :language: kotlin

.. tip:: 

   You can also upsert into a realm using specific criteria. See 
   :ref:`Upsert a Realm Object <kotlin-upsert-an-object>`.

Create an Embedded Object
-------------------------

To create an :ref:`embedded object <kotlin-embedded-objects>`, assign an instance of the 
`EmbeddedRealmObject <{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__
to a parent object's property:

.. literalinclude:: /examples/generated/kotlin/DataTypesTest.snippet.create-embedded-object.kt 
    :language: kotlin

Create an Object with a Dictionary Property
-------------------------------------------

You can create objects with 
`RealmDictionary <{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-dictionary/index.html>`__
properties. The ``RealmDictionary`` keys may only be strings, but values may be 
any type of Realm-supported primitive, a ``RealmObject``, or an ``EmbeddedObject``.

For more information about defining a dictionary property, refer to 
:ref:`kotlin-define-realm-dictionary-type`.

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.create-dictionary.kt
   :language: kotlin

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.percent-encode-disallowed-characters.kt
   :language: kotlin

.. _kotlin-create-asymmetric-object:

Create an Asymmetric Object
---------------------------

.. versionadded:: 1.10.0

An asymmetric object is an insert-only object. 
When you create an ``AsymmetricRealmObject``, it syncs unidirectionally via 
:ref:`Data Ingest <optimize-data-ingest>` to the Atlas 
database linked to your Atlas App Services App. You cannot access an
``AsymmetricRealmObject`` locally, add it to or remove it from a realm, or query for it.
For more information, see :ref:`Asymmetric Objects <kotlin-asymmetric-objects>`.

You must create an `AsymmetricRealmObject <{+kotlin-sync-prefix+}io.realm.kotlin.types/-asymmetric-realm-object/index.html>`__  
using the `insert() <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.ext/insert.html>`__  
extension method within a write transaction:

.. literalinclude:: /examples/generated/kotlin/AsymmetricSyncTest.snippet.create-asymmetric-object.kt
   :language: kotlin

You can create asymmetric objects for a realm initialized with a Flexible Sync
`SyncConfiguration <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb.sync/-sync-configuration/index.html>`__.
For more information, see :ref:`Open the synced Realm with a Flexible Sync configuration <kotlin-open-a-synced-realm>`.
