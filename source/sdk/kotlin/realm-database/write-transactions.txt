.. _kotlin-read-write-data:

==============================
Read & Write Data - Kotlin SDK
==============================

.. toctree::
   :titlesonly:
   
   Create </sdk/kotlin/realm-database/crud/create>
   Read </sdk/kotlin/realm-database/crud/read>
   Update </sdk/kotlin/realm-database/crud/update>
   Delete </sdk/kotlin/realm-database/crud/delete>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm uses a highly efficient storage engine
to persist objects. You can: 

- :ref:`create realm objects <kotlin-create-a-new-object>`,
- :ref:`read realm objects <kotlin-read-objects>`, 
- :ref:`update realm objects <kotlin-update-objects>`,
- and eventually :ref:`delete objects from a realm <kotlin-delete-objects>`.

.. _kotlin-write-transactions:

Write Transactions
------------------

Because the create, update, and delete operations modify the state of 
the realm, we call them writes.

Realm handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
Realm treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note::

   All writes must happen in a transaction.

A realm allows only one open write transaction at a time. Realm
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the realm within a
transaction.

When you are done with your transaction, Realm either
commits it or cancels it:

- When Realm **commits** a transaction, Realm writes
  all changes to disk. For synced realms, the SDK queues the change
  for synchronization with the backend.
- When Realm **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _kotlin-managed-vs-unmanaged-objects:

Managed vs. Unmanaged Objects
-----------------------------

Realm APIs may refer to objects as managed or unmanaged. When you create 
a Realm object, it is unmanaged. You can then create a managed instance by 
copying that object to a realm. 

You can check if an object is managed with the 
`isManaged() <{+kotlin-local-prefix+}io.realm.kotlin.ext/is-managed.html>`__  
method.

Managed Objects
~~~~~~~~~~~~~~~

**Managed objects** are Realm objects that persist in a realm. Managed objects 
can only be accessed from an open realm. They can be automatically updated 
with changes within write transactions as long as that realm remains open. 
Managed objects are tied to the realm instance from which it originated 
and cannot be written to another realm.

You can use Realm APIs with managed objects, create relationships with 
other objects, and observe managed Realm object for changes. 

You create managed objects by copying unmanaged instances to a realm with 
`Realm.copyToRealm() <{+kotlin-local-prefix+}io.realm.kotlin.dynamic/-dynamic-mutable-realm/copy-to-realm.html>`__. 
See :ref:`Create Realm Objects <kotlin-create-a-new-object>` for more 
information.

.. note:: 

   You can :ref:`create managed asymmetric objects <kotlin-create-asymmetric-object>`. 
   But because asymmetric objects are write-only, it isn't possible to 
   access the managed data after it has been written.

Unmanaged Objects
~~~~~~~~~~~~~~~~~

**Unmanaged objects** are instances of Realm objects that
behave like normal Kotlin objects, but they are not persisted in a realm.
All Realm objects are unmanaged until you write them to a realm.
You cannot use Realm APIs with unmanaged objects or observe them for changes.

You can create an unmanaged object by manually constructing a Realm object 
yourself or by copying a managed object with 
`Realm.copyFromRealm() <{+kotlin-local-prefix+}io.realm.kotlin.ext/copy-from-realm.html>`__. 

.. _kotlin-open-a-transaction:

Run a Transaction
-----------------

Realm represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the realm's ``write`` method. Within this callback, you are
free to create, read, update, and delete on the realm. If
the code in the callback throws an exception when Realm runs
it, Realm cancels the transaction. Otherwise, Realm commits
the transaction immediately after the callback.

.. example::

   The following code shows how to run a transaction with
   `write() <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write.html>`__
   or `writeBlocking() <{+kotlin-local-prefix+}io.realm.kotlin/-realm/write-blocking.html>`__.
   If the code in the callback throws an exception, Realm
   cancels the transaction. Otherwise, Realm commits the
   transaction.

   .. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.run-a-transaction.kt
      :language: kotlin

