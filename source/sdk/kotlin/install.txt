.. _kotlin-install:

==========================
Install Realm - Kotlin SDK
==========================

.. default-domain:: mongodb

Prerequisites
-------------

- :android:`Android Studio <studio/index.html>` version 4.2.2 or higher.
- `Kotlin Multiplatform Mobile (KMM) Plugin <https://kotlinlang.org/docs/mobile/kmm-plugin-releases.html#release-details>`__ for Android Studio, version 0.2.6 or higher.
- Kotlin Plugin for Android Studio, version 1.5.20 or higher.
- JDK 11 or higher
- An Android Virtual Device (AVD) using either the ``x86_64`` or ``arm64`` architecture.
- A KMM App created using the "KMM Application" template in Android
  Studio. Follow the instructions in the `KMM documentation
  <https://kotlinlang.org/docs/mobile/create-first-app.html>`__.

.. important:: ``x86`` Devices are not Supported

   The {+service-short+} Kotlin SDK does not yet support
   ``x86`` devices. Since ``x86`` devices are the default option in
   Android Studio, you must create an ``x86_64`` or ``arm64`` device
   in AVD Manager to run applications that use the SDK. You can find
   images for compatible devices in AVD Manager. Follow these steps to
   create and use a compatible device:

   1. Open AVD Manager in Android Studio by selecting :guilabel:`Tools`
      > :guilabel:`AVD Manager`.
   #. Click the :guilabel:`Create Virtual Device` button.
   #. Select a phone, such as :guilabel:`Nexus 5`.
   #. Click the :guilabel:`Next` button.
   #. Navigate to the  :guilabel:`x86 Images` tab.
   #. Click the :guilabel:`Download` link next to an ``x86_64`` device
      image, such as ``S / x86_64 / Android API S (Google Play)``.
   #. Click the :guilabel:`Finish` button to close the dialogue when the
      image finishes downloading.
   #. Click the :guilabel:`Next` button.
   #. Name your device and click the :guilabel:`Finish` button to add
      it to your list of virtual devices.
   #. At the top of your Android Studio window, select your compatible
      device in the AVD dropdown.

   You can track ``x86`` support in :github:`this GitHub issue
   <realm/realm-kotlin/issues/109>`.

Installation
------------

.. tabs::

  .. tab:: Kotlin Multiplatform Mobile
     :tabid: kmm

     .. tabs::

        .. tab:: Realm Database
           :tabid: realm-database

           To add local-only Realm Database to your application, make
           the following changes to your shared module gradle build
           file, typically found at :file:`<project>/shared/build.gradle.kts`:

           - Add :file:`io.realm.kotlin:library-base` to the dependencies
             block of your common module.
           - Add :file:`io.realm.kotlin` to your list of plugins.
           - To use coroutines with the SDK, add the
             :file:`org.jetbrains.kotlinx:kotlinx-coroutines-core`
             to the dependencies block of your common module.

           .. code-block:: kotlin
              :emphasize-lines: 5, 29, 30

              plugins {
                  kotlin("multiplatform")
                  kotlin("native.cocoapods")
                  id("com.android.library")
                  id("io.realm.kotlin")
              }

              version = "1.0"

              kotlin {
                  android()
                  iosX64()
                  iosArm64()

                 cocoapods {
                     summary = "Some description for the Shared Module"
                     homepage = "Link to the Shared Module homepage"
                     ios.deploymentTarget = "14.1"
                     podfile = project.file("../iosRealmKMMApp/Podfile")
                      framework {
                         baseName = "shared"
                      }
                  }
                  
                  sourceSets {
                      val commonMain by getting {
                          dependencies {
                              implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt")
                              implementation("io.realm.kotlin:library-base:{+kotlin-sdk-version+}")
                          }
                      }
                      val commonTest by getting {
                          dependencies {
                              implementation(kotlin("test-common"))
                              implementation(kotlin("test-annotations-common"))
                          }
                      }
                     val androidMain by getting
                     val androidTest by getting {
                         dependencies {
                              implementation(kotlin("test-junit"))
                              implementation("junit:junit:4.13.2")
                          }
                      }
                      val iosX64Main by getting
                      val iosArm64Main by getting
                      
                      val iosMain by creating {
                          dependsOn(commonMain)
                          iosX64Main.dependsOn(this)
                          iosArm64Main.dependsOn(this)
                      }
                      val iosX64Test by getting
                      val iosArm64Test by getting
                      val iosTest by creating {
                          dependsOn(commonTest)
                          iosX64Test.dependsOn(this)
                          iosArm64Test.dependsOn(this)
                      }
                  }
              }

              android {
                  compileSdk = 30
                  sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
                  defaultConfig {
                      minSdk = 28
                      targetSdk = 30
                  }
              }

           Then, add :file:`classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")`
           to the :file:`buildscript.dependencies` block of your project-level
           gradle build file, typically found at :file:`<project>/build.gradle.kts`:

           .. code-block:: kotlin
              :emphasize-lines: 10

              buildscript {
                   repositories {
                       gradlePluginPortal()
                       google()
                       mavenCentral()
                   }
                   dependencies {
                       classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
                       classpath("com.android.tools.build:gradle:7.1.1")
                       classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")
                   }
               }

               allprojects {
                   repositories {
                       google()
                       mavenCentral()
                   }
               }

               tasks.register("clean", Delete::class) {
                   delete(rootProject.buildDir)
               }

        .. tab:: Sync
           :tabid: sync

           To add Realm Database and Sync to your application, make
           the following changes to your shared module gradle build
           file, typically found at :file:`shared/build.gradle.kts`:

           - Add :file:`io.realm.kotlin:library-sync` to the dependencies
             block of your common module.
           - Add :file:`io.realm.kotlin` to your list of plugins.
           - To use coroutines with the SDK, add the
             :file:`org.jetbrains.kotlinx:kotlinx-coroutines-core`
             to the dependencies block of your common module.

           .. code-block:: kotlin
              :emphasize-lines: 5, 29, 30

              plugins {
                  kotlin("multiplatform")
                  kotlin("native.cocoapods")
                  id("com.android.library")
                  id("io.realm.kotlin")
              }

              version = "1.0"

              kotlin {
                  android()
                  iosX64()
                  iosArm64()

                 cocoapods {
                     summary = "Some description for the Shared Module"
                     homepage = "Link to the Shared Module homepage"
                     ios.deploymentTarget = "14.1"
                     podfile = project.file("../iosRealmKMMApp/Podfile")
                      framework {
                         baseName = "shared"
                      }
                  }
                  
                  sourceSets {
                      val commonMain by getting {
                          dependencies {
                              implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2-native-mt")
                              implementation("io.realm.kotlin:library-sync:{+kotlin-sdk-version+}")
                          }
                      }
                      val commonTest by getting {
                          dependencies {
                              implementation(kotlin("test-common"))
                              implementation(kotlin("test-annotations-common"))
                          }
                      }
                     val androidMain by getting
                     val androidTest by getting {
                         dependencies {
                              implementation(kotlin("test-junit"))
                              implementation("junit:junit:4.13.2")
                          }
                      }
                      val iosX64Main by getting
                      val iosArm64Main by getting
                      
                      val iosMain by creating {
                          dependsOn(commonMain)
                          iosX64Main.dependsOn(this)
                          iosArm64Main.dependsOn(this)
                      }
                      val iosX64Test by getting
                      val iosArm64Test by getting
                      val iosTest by creating {
                          dependsOn(commonTest)
                          iosX64Test.dependsOn(this)
                          iosArm64Test.dependsOn(this)
                      }
                  }
              }

              android {
                  compileSdk = 30
                  sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
                  defaultConfig {
                      minSdk = 28
                      targetSdk = 30
                  }
              }

           Then, add :file:`io.realm.kotlin:gradle-plugin`
           to the :file:`buildscript.dependencies` block of your project-level
           gradle build file, typically found at :file:`<project>/build.gradle.kts`:

           .. code-block:: kotlin
              :emphasize-lines: 10

              buildscript {
                   repositories {
                       gradlePluginPortal()
                       google()
                       mavenCentral()
                   }
                   dependencies {
                       classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
                       classpath("com.android.tools.build:gradle:7.1.1")
                       classpath("io.realm.kotlin:gradle-plugin:{+kotlin-sdk-version+}")
                   }
               }

               allprojects {
                   repositories {
                       google()
                       mavenCentral()
                   }
               }

               tasks.register("clean", Delete::class) {
                   delete(rootProject.buildDir)
               }

     .. note:: Android Module Dependencies

        If you use any part of the SDK inside the Android module, add the
        SDK's compile-time dependency to your Android module ``build.gradle.kts``:

        .. code-block:: kotlin

           dependencies {
              compileOnly("io.realm.kotlin:library:{+kotlin-sdk-version+}")
           }

  .. tab:: Android
     :tabid: android

     .. tabs::

        .. tab:: Realm Database
           :tabid: realm-database

           To add local-only Realm Database to your application, make
           the following changes to your app-level gradle build file,
           typically found at :file:`<project>/app/build.gradle`:

           - Add :file:`io.realm.kotlin:library-base` to the list of
             dependencies.

           .. code-block:: kotlin
              :emphasize-lines: 35

              plugins {
                  id 'com.android.application'
                  id 'org.jetbrains.kotlin.android'
              }

              android {
                  compileSdk 31

                  defaultConfig {
                      applicationId "com.mongodb.realm.testkmmandroidonly"
                      minSdk 28
                      targetSdk 31
                      versionCode 1
                      versionName "1.0"

                      testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  }

                  buildTypes {
                      release {
                          minifyEnabled false
                          proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      }
                  }
                  compileOptions {
                      sourceCompatibility JavaVersion.VERSION_11
                      targetCompatibility JavaVersion.VERSION_11
                  }
                  kotlinOptions {
                      jvmTarget = '1.8'
                  }
              }

              dependencies {
                  compileOnly 'io.realm.kotlin:library-base:0.9.0'
                  implementation 'androidx.core:core-ktx:1.7.0'
                  implementation 'androidx.appcompat:appcompat:1.4.1'
                  implementation 'com.google.android.material:material:1.5.0'
                  implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
                  testImplementation 'junit:junit:4.13.2'
                  androidTestImplementation 'androidx.test.ext:junit:1.1.3'
                  androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
              }

        .. tab:: Sync
           :tabid: sync

           To add Realm Database and Sync to your application, make the
           following changes to your app-level gradle build file,
           typically found at :file:`<project>/app/build.gradle`:

           - Add :file:`io.realm.kotlin:library-sync` to the list of
             dependencies.

           .. code-block:: kotlin
              :emphasize-lines: 35

              plugins {
                  id 'com.android.application'
                  id 'org.jetbrains.kotlin.android'
              }

              android {
                  compileSdk 31

                  defaultConfig {
                      applicationId "com.mongodb.realm.testkmmandroidonly"
                      minSdk 28
                      targetSdk 31
                      versionCode 1
                      versionName "1.0"

                      testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  }

                  buildTypes {
                      release {
                          minifyEnabled false
                          proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      }
                  }
                  compileOptions {
                      sourceCompatibility JavaVersion.VERSION_11
                      targetCompatibility JavaVersion.VERSION_11
                  }
                  kotlinOptions {
                      jvmTarget = '1.8'
                  }
              }

              dependencies {
                  compileOnly 'io.realm.kotlin:library-sync:0.9.0'
                  implementation 'androidx.core:core-ktx:1.7.0'
                  implementation 'androidx.appcompat:appcompat:1.4.1'
                  implementation 'com.google.android.material:material:1.5.0'
                  implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
                  testImplementation 'junit:junit:4.13.2'
                  androidTestImplementation 'androidx.test.ext:junit:1.1.3'
                  androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
              }

After updating the Gradle configuration,
resolve the dependencies by clicking :guilabel:`File` >
:guilabel:`Sync Project with Gradle Files` in the Android Studio menubar.
You can now use the Kotlin SDK in your application.


