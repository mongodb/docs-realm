.. _kotlin-read-objects:

===============================
Read Realm Objects - Kotlin SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tip:: ``find()`` is Synchronous
   
   `find() <{+kotlin-local-prefix+}io.realm.query/find.html>`__
   runs a synchronous query on the thread it is called from.
   As a result, avoid using :file:`find()` on the UI thread or in
   logic that could delay the UI thread. 
   
   Prefer `asFlow()
   <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__ in
   time-sensitive environments.

.. _kotlin-find-object-by-primary-key:

Find Object by Primary Key
--------------------------

To find an object with a specific primary key value, open a realm
and query the primary key field for the desired primary key value
using `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__.
Specify the object type as a type parameter passed to :file:`query()`:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.find-object-by-primary-key.kt
   :language: kotlin

.. _kotlin-find-objects-of-a-type:

Find Objects of a Type
----------------------

To find all objects of a type, open a realm
and pass the type as a type parameter to `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.find-all-objects-of-a-type.kt
   :language: kotlin

.. _kotlin-filter-data:

Filter Results
--------------

Filter results to retrieve a specific segment
of objects with `realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__.
In the argument of ``realm.query()``, use Realm Query Language to perform filtering.
Realm Query Language is a string-based query language that you can use to retrieve
objects from a realm.
Specify the object type as a type parameter passed to :file:`query()`.

For more information on constructing queries, refer to the
:ref:`Realm Query Language reference documentation <rql>`.

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.filter.kt
   :language: kotlin

.. _kotlin-sort-queries:

Sort Results
------------

To sort results, specify a sort in the query passed to
`realm.query()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/query.html>`__
with the :file:`SORT` keyword. Similarly, use :file:`DISTINCT`
to constrain results to unique values of a field, and
:file:`LIMIT` to cap the number of results. The SDK
provides convenience methods on :file:`RealmQuery` so you don't have
to manually write the keywords:

- `realmQuery.sort() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/sort.html>`__
- `realmQuery.distinct() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/distinct.html>`__
- `realmQuery.limit() <{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-query/limit.html>`__

When used on the same query in both RQL and method form, :file:`SORT`,
:file:`DISTINCT`, and :file:`LIMIT` execute in the order they're added
to the query. This can impact the results returned from your query.

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.sort.kt
   :language: kotlin

.. _kotlin-iteration:

Iterate Results
---------------

You can iterate through results using :file:`Flows`.

.. seealso::

   To learn more about Kotlin Flows, check out `the kotlinx.coroutines documentation on Flows
   <https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/>`__.

To convert your results into a :file:`Flow`, call `realmQuery.asFlow()
<{+kotlin-local-prefix+}io.realm.kotlin.query/-realm-element-query/as-flow.html>`__.
Then iterate through the results with `flow.collect()
<https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html>`__:

.. literalinclude:: /examples/generated/kotlin/CRUDTest.snippet.iteration.kt
   :language: kotlin
