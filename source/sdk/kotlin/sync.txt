.. _kotlin-sync:
.. _kotlin-sync-overview:

========================
Device Sync - Kotlin SDK
========================

.. toctree::
   :titlesonly:
   
   Configure & Open a Synced Realm </sdk/kotlin/sync/open-a-synced-realm>
   Manage Subscriptions </sdk/kotlin/sync/subscribe>
   Handle Sync Errors </sdk/kotlin/sync/handle-sync-errors>
   Set the Client Log Level </sdk/kotlin/sync/log-level>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _kotlin-realm-sync:

Atlas Device Sync automatically synchronizes data between client applications and
an :ref:`Atlas App Services backend <realm-cloud>`. When a client
device is online, Sync asynchronously synchronizes data in a
background thread between the device and your backend App.

When you use Sync in your client application, your implementation must match
the :ref:`Sync Mode <sync-modes>` you select in your backend App configuration.
The Sync Mode options are:

- Flexible Sync (recommended): lets you define a query in the client and sync only the
  objects that match the query.
- Partition-Based Sync: documents in a synced cluster form a "partition" by
  having the same value for a field designated as "partition key". All documents
  in a partition have the same read/write permissions for a given user.

You can only use one Sync Mode for your application.

.. seealso::

   :ref:`enable-realm-sync`

.. _kotlin-flexible-sync-fundamentals:

Flexible Sync
-------------

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App
configuration, your client implementation must include subscriptions to
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works
by synchronizing data that matches query subscriptions you maintain in the
client application. 

A subscription set contains a set of queries. Realm Flexible Sync returns
documents matching those queries, where the user has the appropriate
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or
read and write the documents. If documents match the query, but the client
does not have the permission to read or write them, they do not sync to
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on object type.
You might have multiple subscriptions if you
have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with an initial set of subscriptions to determine which documents to
sync.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

.. _kotlin-partition-based-sync-fundamentals:

Partition-Based Sync
--------------------

When you select :ref:`Partition-Based Sync <partition-based-sync>` for your
backend App configuration, your client implementation must include a
partition value. This is the value of the :ref:`partition key
<partition-key>` field you select when you configure Partition-Based Sync.

The partition value determines which data the client application can access.

You must provide a partition value when you open a synced realm.
