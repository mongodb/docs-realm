.. _kotlin-authenticate:
.. _kotlin-authenticate-users:

===============================
Authenticate Users - Kotlin SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Atlas App Services provides an API for authenticating users using any enabled
authentication provider. 
Instantiate a `Credentials <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/index.html>`__ 
object and pass it to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__
to authenticate and create a `User
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/index.html>`__
object for that user.

Each authentication provider corresponds to a
`static helper method
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-authentication-provider/index.html>`__
used to instantiate :file:`Credentials` objects for that
authentication provider.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`.
#. Enable and configure one or more App Services :ref:`authentication providers <authentication-providers>`.

.. _kotlin-register:

Register a New User Account
---------------------------

Realm registers accounts differently depending on the authentication provider:

- You do not need to register anonymous users.
- To register an email/password user, refer to :ref:`Manage Email/Password Users <kotlin-manage-email-password-users>`.
- If you are using Google, Facebook, Apple, or Custom JWT authentication,
  registration is handled by these third-party services.

.. _kotlin-login:

Log In
------

You can authenticate users with `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

If successful, :file:`app.login()` returns a :file:`User` object.
In the event of a failure, :file:`app.login()` throws an
exception of type :file:`AppException`.

You can get the authentication provider type used to log in a user using the 
`user.provider <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/provider.html>`__
property. 
If the user is currently logged out, the provider last used to log in the user will be returned.

.. _kotlin-anonymous-login:

Anonymous
~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
`Credentials.anonymous()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/anonymous.html>`__
and then pass the generated credential to
`app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.anonymous-authentication.kt
   :language: kotlin

If you want more than one anonymous user, set ``reuseExisting = false`` when
creating additional anonymous credentials. 

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.anonymous-authentication-reuse-existing.kt
   :language: kotlin

.. _kotlin-email-password-login:

Email/Password
~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling `Credentials.emailPassword()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/email-password.html>`__
with the user's email and password. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.email-password-authentication.kt
   :language: kotlin

.. _kotlin-login-jwt:

Custom JWT
~~~~~~~~~~

The :ref:`Custom JWT authentication provider <custom-jwt-authentication>`
enables users to log in to your application with a custom JSON Web Token.
To log in with JWT authentication, create a
JWT credential by calling `Credentials.jwt()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/jwt.html>`__
with the user's JWT. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.jwt-authentication.kt
   :language: kotlin

.. _kotlin-login-api-key:

API Key
~~~~~~~

The :ref:`API Key authentication provider <api-key-authentication>`
enables users to log in to your application with an API key generated
automatically in the client SDK. To log in with API key authentication, create an
email/password credential by calling `Credentials.apiKey()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/api-key.html>`__
with the user's email and password. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.api-key-authentication.kt
   :language: kotlin

.. _kotlin-login-custom-function:

Custom Function
~~~~~~~~~~~~~~~

If you have configured the
:ref:`Custom Function authentication provider <custom-function-authentication>`,
you can log in using custom authentication logic handled by an Atlas Function.

To log in with Custom Function authentication, pass your custom arguments as a payload
to `Credentials.customFunction()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/custom-function.html>`__.
Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.custom-function-authentication.kt
   :language: kotlin

.. versionadded:: 1.9.0

You can serialize data for a custom function credential using an EJSON encoder. 
For more information, including examples, refer to :ref:`kotlin-ejson-encoding-for-atlas`.

.. _kotlin-login-google:

Google
~~~~~~

To set up your application for Google User authentication:

#. In the `Google Cloud Platform console
   <https://console.cloud.google.com/apis/credentials>`__, create an
   OAuth 2.0 client ID of type "Web application".

#. Configure your backend App to use that client ID and the associated
   client secret.

#. Enable OpenID Connect on the backend.

Use Google's official :google:`Sign-In for Android <identity/sign-in/android>`
to authenticate Google users in your Android application. The following
code implements this flow, starting with a method call to
``loginWithGoogle()``:

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.google-authentication.kt
   :language: kotlin

.. seealso::

   - To learn more about Google Sign-In for Android, check out the
     official :google:`Google Sign-In for Android Integration Guide
     <identity/sign-in/android/start-integrating>`.

   - KMM supports many environments, but this example shows sign-in on
     the Android platform. For information about signing into a Google
     account on Apple platforms, see the
     :ref:`Swift SDK Example <ios-login-google>`.

.. _kotlin-login-facebook:

Facebook
~~~~~~~~

The :ref:`Facebook <facebook-authentication>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

.. include:: /includes/note-facebook-profile-picture-url.rst

Follow the official :facebook:`Facebook Login for Android Quickstart
<docs/facebook-login/android>` to set up the authentication flow for your
application. In the login completion handler, get the logged in user's access
token from the Facebook :facebook:`LoginResult
<docs/reference/android/current/class/LoginResult>`. Use the access token to
create a Facebook credential by calling `Credentials.facebook()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/facebook.html>`__
with the user's access token. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/MainActivity.snippet.facebook-authentication.kt
   :language: kotlin

.. seealso::

   KMM supports many environments, but this example shows sign-in on
   the Android platform. For information about signing into a Facebook
   account on Apple platforms, see the
   :ref:`Swift SDK Example <ios-login-facebook>`.

.. _kotlin-login-apple:

Apple
~~~~~

The :ref:`Sign-in with Apple authentication provider <apple-id-authentication>`
enables users to log in to your application with a custom token provided
by Apple. To log in with Apple authentication, create an
Apple credential by calling `Credentials.apple()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-credentials/-companion/apple.html>`__
with the user's token. Then pass the generated credential
to `app.login()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/login.html>`__.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.apple-authentication.kt
   :language: kotlin

.. seealso::

   KMM supports many environments, but this example shows sign-in on
   the Android platform. For information about signing in with Apple
   on Apple platforms, see the
   :ref:`Swift SDK Example <ios-login-apple>`.

.. _kotlin-access-token:

Get a User Access Token
-----------------------

The Realm Kotlin SDK automatically manages access tokens, refreshes them when they 
expire, and includes a valid access token for the current user with each 
request. Tokens are removed after the user logs out.

You can get the current access token for a logged-in user with the
`user.accessToken <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/access-token.html>`__ 
property:

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.access-token-get.kt
   :language: kotlin

If you send requests outside of the SDK (e.g. through the :ref:`GraphQL 
API <graphql-api>`), then you must include the user's access token with 
each request and manually refresh the token when it expires. 
Access tokens expire 30 minutes after a user logs in.

You can get the current refresh token for a logged-in user with the
`user.refreshToken <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/refresh-token.html>`__ 
property, which you can use to request a new access token:

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.access-token-refresh.kt
   :language: kotlin

.. _kotlin-logout:

Log a User Out
--------------

.. include:: /includes/log-out-queries-in-progress.rst

You can log out any user, regardless of the authentication provider used
to log in, using `user.logOut()
<{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-user/log-out.html>`__. 

The ``user.logOut()`` method:

- Deletes locally stored user credentials from the device.
- Immediately halts any synchronization to and from the user's realms.

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.log-out.kt
   :language: kotlin

.. _kotlin-retrieve-current-user:

Retrieve Current User
---------------------

Once you have an authenticated user, you can retrieve the User object with the
`App.currentUser <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/index.html#1060015050%2FProperties%2F645295071>`__
property. 
The ``currentUser`` object is persisted in local storage, so even if
the app shuts down after the initial authentication, you do not need to call
``logIn`` again (unless the user logged out).

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.retrieve-current-user.kt
   :language: kotlin

.. _kotlin-authentication-change-listener:

Authentication Changes as a Flow
--------------------------------

.. versionadded:: 10.8.0

You can observe a flow of authentication change events by calling 
`App.authenticationChangeAsFlow() <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-app/authentication-change-as-flow.html>`__ .
This flow emits 
`AuthenticationChange <{+kotlin-sync-prefix+}io.realm.kotlin.mongodb/-authentication-change/index.html>`__ 
events of three possible states, represented as subclasses:

- ``LoggedIn``: A user logs into the app.
- ``LoggedOut``: A a user logs out of the app.
- ``Removed``: A user is removed from the app, which also logs them out.

These events contain a ``user`` property that provides a reference to the 
``User`` object that has logged in, logged out, or been removed.

.. literalinclude:: /examples/generated/kotlin/AuthenticationTest.snippet.auth-change-listener.kt
   :language: kotlin
