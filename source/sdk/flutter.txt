:template: product-landing
:hidefeedback: header
:noprevnext:

.. _flutter-intro:

=================
Realm Flutter SDK
=================

.. toctree::
   :titlesonly:

   Install Realm for Flutter </sdk/flutter/install>
   Quick Start </sdk/flutter/quick-start>
   Realm Database </sdk/flutter/realm-database>
   Atlas App Services </sdk/flutter/app-services>
   Manage Users </sdk/flutter/users>
   Sync Device Data <sdk/flutter/sync>
   Troubleshooting </sdk/flutter/troubleshooting>
   Test & Debug </sdk/flutter/test-and-debug>
   Logging </sdk/flutter/logging>
   SDK Telemetry </sdk/flutter/telemetry>
   API Reference <https://pub.dev/documentation/realm/latest/>
   Example Projects <https://github.com/realm/realm-dart-samples>
   Release Notes <https://github.com/realm/realm-dart/releases>


The Realm Flutter SDK enables client applications written in
`Dart <https://dart.dev/>`__ for the `Flutter <https://flutter.dev/>`__
platform to access data stored in realms, sync data with Atlas,
and use Atlas App Services.

.. kicker:: Learning Paths

Get Started with Realm Flutter
------------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/flutter/quick-start/
      :icon: /images/icons/branding_2022/Technical_ATLAS_Functions3x.png
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with the Realm Flutter SDK.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: /images/icons/branding_2022/Technical_REALM_Mobile3x.png
      :icon-alt: Realm Mobile Icon

      Learn by example through dissecting a working app that uses the Realm Flutter SDK
      and Atlas Device Sync.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/flutter/
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working Flutter app with Realm and Atlas Device Sync.

.. kicker:: What You Can Do

Develop Apps with the Realm Flutter SDK
---------------------------------------

.. tabs::

   .. tab:: Use Realm Locally
      :tabid: local-realm

      .. container::

         Use Realm to persist data on your device.

         .. procedure::

            .. step:: Install the Realm Flutter SDK

               To get started, :ref:`install the Realm Flutter SDK <flutter-install>`.
               Then, import the Realm SDK in your project files.

            .. step:: Define an Object Schema

               Use Dart to idiomatically :ref:`define a Realm object schema <flutter-define-realm-object-schema>`.

            .. step:: Configure & Open a Realm

               You can configure your realm to do things
               like populate initial data on load, be encrypted, and more.
               To begin working with your data,
               :ref:`configure and open a realm <flutter-open-close-realm>`.

            .. step:: Read and Write Data

               You can :ref:`create, read, update, and delete objects <flutter-read-write-data>`
               from a realm. Construct complex queries to :ref:`filter data in a realm <flutter-filter-results>`.

            .. step:: React to Changes

               Realm's live objects mean that your data is always up-to-date.
               Register a change listener to :ref:`react to changes and perform logic like updating
               your UI <flutter-react-to-changes>`.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. container::

         Use Atlas Device Sync to automatically sync data between your app
         and MongoDB Atlas.

         .. procedure::

            .. step:: Configure Atlas Device Sync

               Configure :ref:`Device Sync in an App Services App <realm-sync-get-started>`.
               Define data access rules or use Development Mode to infer a schema
               from your client's data model.

            .. step:: Connect to an Atlas App Services App

               To use the App Services App with Device Sync in your Flutter app,
               :ref:`connect to the backend App <flutter-connect-to-backend>`.

            .. step:: Authenticate a User

               App Services provides access to custom JWT authentication,
               our built-in email/password provider, anonymous
               authentication, and popular
               authentication providers like Apple, Google, and Facebook.
               Use these providers to :ref:`authenticate a user in your client <flutter-authenticate>`.

            .. step:: Open a Synced Realm

               To get started syncing data, :ref:`open a synced realm <flutter-open-synced-realm>`.
               To determine what data a synced realm can read and write,
               :ref:`subscribe to a query <flutter-flexible-sync-manage-subscriptions>`.

            .. step:: Read and Write Synced Data

               The APIs to read and write data from a realm are the same
               whether you're using a synced or local realm. Data that you
               read and write is automatically kept in sync with your Atlas
               cluster and other clients. Apps keep working offline and
               sync changes whenever a network connection is available.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Atlas Functions <flutter-call-function>`
         that run in an App Services backend from your client application.

         Query MongoDB Atlas with GraphQL
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`query data stored in MongoDB with the Atlas GraphQL API <flutter-graphql-api>`
         directly from your client application code.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <flutter-authenticate>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: Realm Flutter Reference
      :cta: Realm Flutter Reference
      :url: https://pub.dev/documentation/realm/latest/
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Reference Icon

      Explore reference docs for the Realm Dart and Flutter on pub.dev.

   .. card::
      :headline: Install Realm Flutter
      :cta: Add Realm to Flutter project
      :url: https://www.mongodb.com/docs/realm/sdk/flutter/install/
      :icon: /images/icons/flutter.svg
      :icon-alt: Flutter Logo Icon

      Learn how to add the Realm SDK to your Flutter project.

Dart Standalone Realm
---------------------

In addition to using Realm with Flutter, you can also use Realm with projects
that just use Dart, like a CLI application or web server.

The usage for Realm with Dart is the same as the Flutter SDK, except you must
install and set up a separate package.

:ref:`Learn how to set up Realm in your Dart project. <dart-install-steps>`
