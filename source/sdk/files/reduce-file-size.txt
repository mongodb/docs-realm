.. _sdks-compact-file:

=========================
Reduce Database File Size
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tabs-selector:: drivers

.. meta::
  :description: Learn different methods for reducing file size with Atlas Device SDK.
  :keywords: Realm, C++ SDK, Flutter SDK, Kotlin SDK, Java SDK, .NET SDK, Node.js SDK, Swift SDK, code example

.. facet::
 :name: genre
 :values: tutorial

.. facet::
  :name: programming_language
  :values: cpp, csharp, dart, java, javascript/typescript, kotlin, objective-c, swift

The size of a database file is always larger than the total 
size of the objects stored within it. This architecture enables some of 
Atlas Device SDK's great performance, concurrency, and safety benefits. 

The SDK writes new data within unused space tracked inside a
file. In some situations, unused space may comprise a significant 
portion of a ``.realm`` database file. The SDK's default behavior is to automatically 
compact a file to prevent it from growing too large. 
You can use additional strategies for compaction when 
automatic compaction is not sufficient for your use case 
or if you're using a version of the SDK that doesn't have automatic 
compaction.

Automatically Reduce File Size
------------------------------

The SDK automatically compacts the database files in the background by continuously reallocating data 
within the file and removing unused file space. Automatic compaction is sufficient for 
minimizing the file size for most applications. 

Automatic compaction begins when the size of unused space in the file is more than twice the size of user 
data in the file. Automatic compaction only takes place when
the file is not being accessed.

The minimum SDK version requirements for automatic compaction are:

- C++ SDK 
- Flutter SDK
- Java SDK
- Kotlin SDK
- .NET SDK
- Node.js SDK
- React Native SDK v 11.3.0
- Swift SDK

Additional Strategies to Reduce File Size
-----------------------------------------

The SDK provides three additional strategies to configure compaction for applications that 
require stricter management of file size or that use an older version 
of the SDK that does not support automatic compaction:

- Automatically reduce file size on database open when a condition is met.
- Manually reduce file size on demand.
- Make a smaller copy of the file, and delete the original.

Depending on the file size and hardware, compaction can be computationally expensive.
These strategies give you tools to define the best compaction strategy for your app.

Conditionally Reduce File Size on Database Open
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Define a condition to determine whether to compact files on database open.
When the condition is true, the SDK compacts the file. You might want to 
define custom conditions, such as maximum file size,
when running in a resource-constrained operating system or hardware.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/cpp/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/manage-files/reduce-file-size-on-launch-description.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: objectivec

      .. include:: /includes/api-details/objectivec/manage-files/reduce-file-size-on-launch-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/manage-files/reduce-file-size-on-launch-description.rst

.. include:: /includes/sdk-examples/manage-files/reduce-file-size-on-launch.rst

Reduce File Size on Demand
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      The C++ SDK does not currently support this API.

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/manage-files/reduce-file-size-compact-method-description.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/manage-files/reduce-file-size-compact-method-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/manage-files/reduce-file-size-compact-method-description.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/manage-files/reduce-file-size-compact-method-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/manage-files/reduce-file-size-compact-method-description.rst

   .. tab::
      :tabid: objectivec

      The Swift SDK for Objective-C does not currently support this API.

   .. tab::
      :tabid: swift

      The Swift SDK does not currently support this API.

.. include:: /includes/sdk-examples/manage-files/reduce-file-size-compact-method.rst

Because compacting can be computationally expensive, you may want to avoid
a potentially slow operation when opening the database. Instead, you can configure
your own custom logic in your application for when to compact a database, and then
compact the file on demand. For example, you might want to compact the file 
after the database is closed or when the application is
running in the background.

Make a Compacted Copy and Delete the Original File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can make a smaller copy of the database file and delete the original, larger copy.
You might do this when you want to make a configuration change, such as making an encrypted 
copy of the file. Or, you might use this strategy to handle compacting in the background, 
without delaying or disrupting a user from using the database.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      The C++ SDK does not currently support this API.

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/manage-files/reduce-file-size-compacted-copy-description.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/manage-files/reduce-file-size-compacted-copy-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/manage-files/reduce-file-size-compacted-copy-description.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/manage-files/reduce-file-size-compacted-copy-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/manage-files/reduce-file-size-compacted-copy-description.rst

   .. tab::
      :tabid: objectivec

      .. include:: /includes/api-details/objectivec/manage-files/reduce-file-size-compacted-copy-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/manage-files/reduce-file-size-compacted-copy-description.rst


.. include:: /includes/sdk-examples/manage-files/reduce-file-size-compacted-copy.rst

.. _sdks-compaction-tips:

Tips for Manually Compacting Database Files
-------------------------------------------

Compacting files can be a resource-intensive operation. 
Your application should not compact every time you open 
a database. Instead, try to optimize compacting so your application does 
it just often enough to prevent the file size from growing too large. 
If your application runs in a resource-constrained environment,
you may want to compact when you reach a certain file size or when the 
file size negatively impacts performance.

These recommendations can help you start optimizing compaction for your 
application:

- Set the max file size to a multiple of your average database state
  size. If your average database state size is 10MB, you might set the max 
  file size to 20MB or 40MB, depending on expected usage and device
  constraints.
- As a starting point, compact files when more than 50% of the file 
  size is no longer in use. Divide the currently used bytes by the total 
  file size to determine the percentage of space that is currently used. 
  Then, check for that to be less than 50%. This means that greater than 
  50% of your file size is unused space, and it is a good time to 
  compact. After experimentation, you may find a different percentage 
  works best for your application.

These calculations might look like this:

.. code-block:: javascript

   // Set a maxFileSize equal to 20MB in bytes
   const maxFileSize = 20 * 1024 * 1024;

   /* Check for the file size to be greater than the max file size, 
    * and the amount of bytes currently used to be less than 50% of the
    * total file size */
   return (totalBytes > (double)maxFileSize) &&
      ((double)usedBytes / totalBytes < 0.5);

Experiment with conditions to find the right balance of how often to 
compact files in your application.
