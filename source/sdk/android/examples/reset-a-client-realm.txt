.. _android-client-resets:

==================================
Reset a Client Realm - Android SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. seealso:: Learn More About Client Resets

   To learn more about client resets, check out the Sync
   :ref:`Client Resets <client-resets>` page.

A **client reset** is an error scenario where a client application that uses a
Realm SDK must erase all local data and download a new copy of the data from
MongoDB Atlas before it can continue to sync data. Clients in this state may
continue to run and save data locally but cannot send or receive sync changesets
until the client reset is complete.

You can handle client resets in your application using one of the
available **client reset strategies**:

.. _android-discard-unsynced-changes:

Discard Unsynced Changes
------------------------

The **discard unsynced changes** client reset strategy helps you perform
a client reset with minimal code and minimal disruption to your application
workflow. This strategy automatically
restores your local realm to a syncable state without manually
closing the realm or unsubscribing from notifications. But this strategy
comes with one large caveat: it deletes all changes made since the last
successful sync from your realm. Do not use the "discard unsynced changes"
strategy if your application cannot lose data that has been written to
the client realm file, but has not yet synced to the backend.

The "discard unsynced changes" strategy can handle every kind of client
reset error *except* for client resets triggered by
:ref:`destructive schema changes <destructive-changes-synced-schema>`.
If your application experiences a destructive schema change, this strategy
will fall back to a mode that mimics the "manually recover unsynced changes"
strategy.

To handle client resets with the "discard unsynced changes" strategy, 
pass an instance of :java-sdk:`DiscardUnsyncedChangesStrategy
<io/realm/mongodb/sync/DiscardUnsyncedChangesStrategy.html>` to the
:java-sdk:`defaultSyncClientResetStrategy()
<io/realm/mongodb/AppConfiguration.Builder.html#defaultSyncClientResetStrategy(io.realm.mongodb.sync.DiscardUnsyncedChangesStrategy)>`
builder method when you instantiate your ``App``. Your
``DiscardUnsyncedChangesStrategy`` instance must implement the following
methods:

- ``onBeforeReset()``: called before the SDK executes this strategy,
  when the SDK receives a client reset error from the backend.
- ``onAfterReset()``: called after the SDK successfully executes this
  strategy. Provides a frozen copy of the original realm, as well as
  a live instance of the realm in a syncable state.
- ``onError()``: mimics the "manually recover unsynced changes"
  strategy. The SDK only calls this method when your application
  experiences a destructive schema change. For more information on
  how to handle a this scenario, see the
  :ref:`Manually Recover Unsynced Changes
  <android-manually-recover-unsynced-changes>` strategy documentation.

The following example implements this strategy:

.. tabs-realm-languages::

   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/android/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes.kt
         :language: kotlin

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/android/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes.java
         :language: java

Manual Fallback for Destructive Schema Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your application experiences a destructive schema change, the "discard
unsynced changes" strategy cannot handle the resulting client reset
automatically. Instead, you need to provide a manual client reset
implementation in the ``onError()`` method implementation. The following
example demonstrates how you can manually handle client resets resulting
from destructive schema changes by discarding all unsynced changes:

.. tabs-realm-languages::

   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/android/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes-with-simple-manual-fallback.kt
         :language: kotlin

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/android/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes-with-simple-manual-fallback.java
         :language: java

.. _android-manually-recover-unsynced-changes:

Manually Recover Unsynced Changes
---------------------------------

.. note:: Manual Recovery Replaces ``SyncSession.ClientResetHandler``

   This strategy works just like the deprecated
   ``SyncSession.ClientResetHandler`` method of performing client resets.
   Applications that use deprecated client reset handling can switch
   directly to the "manually recover unsynced changes" strategy with
   no logic changes.

Manual recovery requires significant amounts of code, schema concessions,
and custom conflict resolution logic. To learn more about the **manually
recover unsynced changes** client reset strategy, see the
:ref:`Advanced Guide to Manual Client Reset Data Recovery
<android-advanced-manual-client-reset-data-recovery>`.
