.. _android-react-to-changes:
.. _android-client-notifications:

==============================
React to Changes - Android SDK
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _android-register-a-realm-change-listener:
.. _android-realm-notifications:

Register a Realm Change Listener
--------------------------------

You can register a notification handler on an entire {+realm+}.
{+client-database+} calls the notification handler whenever any write
transaction involving that {+realm+} is committed. The
handler receives no information about the change.

This is useful when you want to know that there has been a
change but do not care to know specifically what changed.
For example, proof of concept apps often use this
notification type and simply refresh the entire UI when
anything changes. As the app becomes more sophisticated and
performance-sensitive, the app developers shift to more
granular notifications.

.. example::

  Suppose you are writing a real-time collaborative app. To
  give the sense that your app is buzzing with collaborative
  activity, you want to have an indicator that lights up when
  any change is made. In that case, a realm notification
  handler would be a great way to drive the code that controls
  the indicator. The following code shows how to observe a {+realm+}
  for changes with with :java-sdk:`addChangeListener() <io/realm/RealmResults.html#addChangeListener-io.realm.OrderedRealmCollectionChangeListener->`:

  .. tabs-realm-languages::

    .. tab::
        :tabid: java

        .. literalinclude:: /examples/Notifications/RealmNotification.java
          :language: java
          :emphasize-lines: 16

    .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/Notifications/RealmNotification.kt
          :language: kotlin
          :emphasize-lines: 12

.. _android-register-a-collection-change-listener:
.. _android-collection-notifications:

Register a Collection Change Listener
-------------------------------------

You can register a notification handler on a specific
collection within a {+realm+}. The handler receives a
description of changes since the last notification.
Specifically, this description consists of three lists of
indices:

- The indices of the objects that were deleted.
- The indices of the objects that were inserted.
- The indices of the objects that were modified.

.. important:: Order Matters

   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.

{+client-database+} emits an initial notification after retrieving the
collection. After that, {+client-database+} delivers collection
notifications asynchronously whenever a write transaction
adds, changes, or removes objects in the collection.

Unlike {+realm+} notifications, collection notifications contain
detailed information about the change. This enables
sophisticated and selective reactions to changes. Collection
notifications provide all the information needed to manage a
list or other view that represents the collection in the UI.

.. example::

  The following code shows how to observe a collection for
  changes with :java-sdk:`addChangeListener()
  <io/realm/Realm.html#addChangeListener-io.realm.RealmChangeListener->`:


  .. tabs-realm-languages::
     
     .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/sync/NotificationsTest.codeblock.collection-notifications.kt
           :language: kotlin

     .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/sync/NotificationsTest.codeblock.collection-notifications.java
           :language: java

.. _android-register-an-object-change-listener:
.. _android-object-notifications:

Register an Object Change Listener
----------------------------------

You can register a notification handler on a specific object
within a {+realm+}. {+client-database+} notifies your handler:

- When the object is deleted.
- When any of the object's properties change.

The handler receives information about what fields changed
and whether the object was deleted.

.. example::

  The following code shows how create a new instance of a class
  in a {+realm+} and observe that instance for changes with
  :java-sdk:`addChangeListener() <io/realm/RealmObject.html#addChangeListener-E-io.realm.RealmObjectChangeListener->`:

  .. tabs-realm-languages::
     
     .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/sync/NotificationsTest.codeblock.object-notifications.kt
           :language: kotlin

     .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/sync/NotificationsTest.codeblock.object-notifications.java
           :language: java

.. _android-unregister-a-change-listener:

Unregister a Change Listener
----------------------------

You can unregister a change listener by passing your change listener to
:java-sdk:`Realm.removeChangeListener()
<io/realm/Realm.html#removeChangeListener-io.realm.RealmChangeListener->`.
You can unregister all change listeners currently subscribed to changes
in a {+realm+} or any of its linked objects or collections with
:java-sdk:`Realm.removeAllChangeListeners()
<io/realm/Realm.html#removeAllChangeListeners-->`.
