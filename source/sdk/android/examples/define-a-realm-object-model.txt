.. _android-define-a-realm-object-schema:
.. _android-object-schema:

==========================================
Define a Realm Object Schema - Android SDK
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

An **object schema** is a configuration object that defines the fields and
relationships of a {+service-short+} object type. {+service-short+} client applications
define object schemas with the native class implementation in their
respective language using the :term:`{+frontend-schema+}`.

Object schemas specify constraints on object fields such as the data
type of each field, whether a field is required, and the
default value for optional fields. Schemas can also define
:ref:`relationships <android-client-relationships>` between object types in
a {+realm+}.

Every {+app+} has a :ref:`{+backend-schema+} <android-realm-schema>`
composed of a list of object schemas for each type of object that the
{+realms+} in that application may contain.

{+service+} guarantees that all objects in a {+realm+} conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _android-field-relationships-lists-example:

Lists
-----

Realm objects can contain lists of non-{+service-short+}-object data
types:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Lists.kt
         :language: kotlin

   .. tab::
      :tabid: java

      Unlike lists of {+service-short+} objects, these lists can contain
      null values. If null values shouldn't be allowed, use the
      :ref:`@Required <android-required-field>` annotation.

      .. literalinclude:: /examples/Schemas/Lists.java
         :language: java

.. seealso::

   :ref:`Data Types: Lists <android-field-relationships-lists>`

.. _android-relationships:
.. _android-define-a-relationship-property:
.. _android-field-relationships:

Define a Relationship Property
------------------------------

.. seealso::

   :ref:`Fundamentals: Relationships <android-client-relationships>`

.. _android-field-relationships-many-to-one:

Many-to-One
~~~~~~~~~~~

To set up a many-to-one or one-to-one relationship, create a field
whose type is a {+service-short+} object in your application:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/ManyToOne.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/ManyToOne.java
         :language: java

Each ``Cat`` references zero or one ``Dog`` instances. Nothing prevents
multiple ``Cat`` instances from referencing the same ``Dog`` as a rival;
the distinction between a many-to-one and a one-to-one relationship is
up to your application.

.. _android-field-relationships-many-to-many:

Many-to-Many
~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/ManyToMany.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/ManyToMany.java
         :language: java

``RealmList`` s are containers of ``RealmObject`` s, but otherwise behave
like a regular collection. You can use the same object in multiple
``RealmList`` s.

You can even use many-to-many ``RealmList`` s to declare relationships
between objects of the same type:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/SameTypeRelationships.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/SameTypeRelationships.java
         :language: java

.. _android-field-relationships-inverse:
.. _android-inverse-relationships:

Inverse Relationships
~~~~~~~~~~~~~~~~~~~~~

By default, {+client-database+} relationships are unidirectional. You
can follow a link from one class to a referenced class, but not in the
opposite direction. You can provide a link in the opposite direction
with the
:java-sdk:`@LinkingObjects <io/realm/annotations/LinkingObjects.html>`
annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Inverse.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Inverse.java
         :language: java

.. _android-define-an-embedded-object-property:
.. _android-field-relationships-embedded:

Define an Embedded Object Property
----------------------------------

{+client-database+} provides the ability to nest objects within other
objects. This has several advantages:

- If using {+sync+}, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-modeling-introduction/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the {+realm+}, so unused objects
  don't accumulate in your {+realm+} file, taking up valuable space on
  user's mobile devices.

To embed an object, set the ``embedded`` property of the
:java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html#embedded-->`
annotation to ``true`` on the class that you'd like to nest within
another class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Embedded.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Embedded.java
         :language: java

Then, any time you reference that class from another class,
{+client-database+} will embed the referenced class within the enclosing
class.

.. seealso::

   :ref:`Embedded Objects <android-embedded-objects>`

.. _android-property-annotations:

Property Annotations
--------------------

Use annotations to customize your Realm object models.

.. _android-primary-key:

Primary Key
~~~~~~~~~~~

You may optionally define a primary key for an object type as part of
the :ref:`object schema <android-object-schema>` with the
:java-sdk:`@PrimaryKey <io/realm/annotations/PrimaryKey.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/PrimaryKey.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/PrimaryKey.java
         :language: java

Only one field in a RealmObject can use the ``@PrimaryKey``
annotation.

.. _android-required-field:

Required Fields
~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Required.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Required.java
         :language: java

.. seealso::

   :ref:`Fundamentals: Optionality <android-optionality>`

.. _android-optional-field:

Optional Fields
~~~~~~~~~~~~~~~

Fields are only optional if they can hold a value of ``null`` and they
are not marked with the ``Required`` annotation.

.. seealso::

   :ref:`Fundamentals: Optionality <android-optionality>`

.. _android-default-field-values:

Default Field Values
~~~~~~~~~~~~~~~~~~~~

To assign a default value to a field, use the built-in language features
to assign default values.

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      Assign default values in the field declaration:

      .. literalinclude:: /examples/Schemas/DefaultValues.kt
         :language: kotlin

   .. tab::
      :tabid: java

      Use the class constructor(s) to assign default values:

      .. literalinclude:: /examples/Schemas/DefaultValues.java
         :language: java

.. note:: Default Values and Nullability

   While default values ensure that a newly created object cannot contain
   a value of ``null`` (unless you specify a default value of ``null``),
   they do not impact the nullability of a field. To make a field
   non-nullable, see :ref:`Required Fields <android-required-field>`.

.. _android-index-a-property:
.. _android-index-field:

Index a Property
~~~~~~~~~~~~~~~~

To index a field, use the :java-sdk:`@Index <io/realm/annotations/Index.html>`
annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Index.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Index.java
         :language: java

.. _android-ignore-a-property:
.. _android-ignore-a-field:
.. _android-ignore-field:

Ignore a Property
~~~~~~~~~~~~~~~~~

If you don't want to save a field in your model to a {+realm+}, you can
ignore a field.

Ignore a field from a {+service-short+} object model with the
:java-sdk:`@Ignore <io/realm/annotations/Ignore.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Ignore.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Ignore.java
         :language: java

.. note:: Ignoring ``static`` and ``transient`` Fields

   Fields marked ``static`` or ``transient`` are always ignored, and do
   not need the ``@Ignore`` annotation.

.. _android-rename-field:

Rename a Field
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent fields internally. In some cases you might want to change
this behavior:

- To make it easier to work across platforms, since naming conventions differ.
- To change a field name in Kotlin without forcing a migration.

Choosing an internal name that differs from the name used in model classes
has the following implications:

- Migrations must use the internal name when creating classes and fields.
- Schema errors reported will use the internal name.

Use the :java-sdk:`@RealmField <io/realm/annotations/RealmField.html>`
annotation to rename a field:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/RenameField.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/RenameField.java
         :language: java

Alternatively, you can also assign a naming policy at the module or
class levels to change the way that {+client-database+} interprets field
names.

You can define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the :ref:`module level <android-realm-modules>`,
which will affect all classes included in the module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/ModuleFieldNamingPolicy.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/ModuleFieldNamingPolicy.java
         :language: java

You can also define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the class level, which overrides module level settings:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/ClassFieldNamingPolicy.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/ClassFieldNamingPolicy.java
         :language: java

.. _android-rename-object:

Rename a Class
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent classes internally. In some cases you might want to change
this behavior:

- To support multiple model classes with the same simple name in different packages.
- To make it easier to work across platforms, since naming conventions differ.
- To use a class name that is longer than the 57 character limit enforced by {+client-database+}.
- To change a class name in Kotlin without forcing a migration.

Use the :java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html>`
annotation to rename a class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/RenameClass.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/RenameClass.java
         :language: java

.. _android-omit-classes-from-schema:

Omit Classes from your Realm Schema
-----------------------------------

By default, your application's {+service-short+} Schema includes all
classes that extend ``RealmObject``. If you only want to include a
subset of classes that extend ``RealmObject`` in your {+service-short+}
Schema, you can include that subset of classes in a module and open
your {+realm+} using that module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/Schemas/Modules.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/Schemas/Modules.java
         :language: java
