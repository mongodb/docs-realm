.. _android-define-a-realm-object-schema:
.. _android-object-schema:

==========================================
Define a Realm Object Schema - Android SDK
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tip::

   For conceptual information about schemas, as well as details about
   types and constraints, see :ref:`Fundametals: Object Models & Schemas
   <android-object-models-and-schemas>`.

Define a Realm Object
---------------------

To define a {+service-short+} object in your application,
create a subclass of :java-sdk:`RealmObject <io/realm/RealmObject.html>`
or implement :java-sdk:`RealmModel <io/realm/RealmModel.html>`.

.. important::

   All {+service-short+} objects must provide an empty constructor.

Extend ``RealmObject``
~~~~~~~~~~~~~~~~~~~~~~

.. example::

   The following code block shows a {+service-short+} object that
   describes a Frog. This Frog class can be stored in
   {+client-database+} because it ``extends`` the ``RealmObject`` class.

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. include:: /examples/generated/android/local/FrogObjectExampleKt.codeblock.complete.kt.code-block.rst

         .. important::

            All {+service-short+} objects defined must use the
            ``open`` visibility modifier.

      .. tab::
         :tabid: java

         .. include:: /examples/generated/android/local/FrogObjectExample.codeblock.complete.java.code-block.rst

         .. important::

            All {+service-short+} objects must use the ``public``
            visibility modifier.

Implement ``RealmModel``
~~~~~~~~~~~~~~~~~~~~~~~~

.. example::

   The following code block shows a {+service-short+} object that
   describes a Frog. This Frog class can
   be stored in {+client-database+} because it ``implements`` the
   ``RealmModel`` class and uses the ``@RealmClass`` annotation:

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. include:: /examples/generated/android/local/FrogRealmModelExampleKt.codeblock.complete.kt.code-block.rst

         .. important::

            All {+service-short+} objects must use the ``open``
            visibility modifier.

      .. tab::
         :tabid: java

         .. include:: /examples/generated/android/local/FrogRealmModelExample.codeblock.complete.java.code-block.rst

         .. important::

            All {+service-short+} objects must use the ``public``
            visibility modifier.

.. tip:: Using ``RealmObject`` Methods

   When you create a {+service-short+} object by extending the ``RealmObject``
   class, you can access ``RealmObject`` class methods dynamically on
   instances of your {+service-short+} object. {+service-short+} objects
   created by implementing ``RealmModel`` can access those same methods
   statically through the ``RealmObject`` class:

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/local/RealmObjectVsRealmModelTest.codeblock.realm-object-vs-realm-model.kt
            :language: kotlin

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/local/RealmObjectVsRealmModelTest.codeblock.realm-object-vs-realm-model.java
            :language: java

.. _android-field-relationships-lists-example:

Lists
-----

{+service-short+} objects can contain lists of non-{+service-short+}-object data
types:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogListExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      Unlike lists of {+service-short+} objects, these lists can contain
      null values. If null values shouldn't be allowed, use the
      :ref:`@Required <android-required-field>` annotation.

      .. include:: /examples/generated/android/local/FrogListExample.codeblock.complete.java.code-block.rst

.. seealso::

   :ref:`Data Types: Lists <android-field-relationships-lists>`

.. _android-relationships:
.. _android-define-a-relationship-property:
.. _android-field-relationships:

Define a Relationship Field
---------------------------

.. seealso::

   :ref:`Fundamentals: Relationships <android-client-relationships>`

.. _android-field-relationships-many-to-one:

Many-to-One
~~~~~~~~~~~

To set up a many-to-one or one-to-one relationship, create a field
whose type is a {+service-short+} object in your application:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogManyToOneExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogManyToOneExample.codeblock.complete.java.code-block.rst

Each ``Frog`` references either zero ``Frog`` instances or one other ``Frog`` instance. Nothing
prevents multiple ``Frog`` instances from referencing the same ``Frog``
as a best friend; the distinction between a many-to-one and a one-to-one
relationship is up to your application.

.. seealso::

   :ref:`Fundamentals: To-One Relationships <android-to-one-relationship>`

.. _android-field-relationships-many-to-many:

Many-to-Many
~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogManyToManyExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogManyToManyExample.codeblock.complete.java.code-block.rst

``RealmList`` s are containers of ``RealmObject`` s, but otherwise behave
like a regular collection. You can use the same object in multiple
``RealmList`` s.

.. seealso::

   :ref:`Fundamentals: To-Many Relationships <android-to-many-relationship>`

.. _android-field-relationships-inverse:
.. _android-inverse-relationships:

Inverse Relationships
~~~~~~~~~~~~~~~~~~~~~

By default, {+client-database+} relationships are unidirectional. You
can follow a link from one class to a referenced class, but not in the
opposite direction. Consider the following class defining a ``Toad`` with
a list of ``frogFriends``:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/ToadInverseRelationshipExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/ToadInverseRelationshipExample.codeblock.complete.java.code-block.rst

You can provide a link in the opposite direction, from ``Frog`` to ``Toad``,
with the :java-sdk:`@LinkingObjects <io/realm/annotations/LinkingObjects.html>`
annotation on a ``final`` (in Java) or ``val`` (in Kotlin) field of type
``RealmResults<T>``:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogInverseRelationshipExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogInverseRelationshipExample.codeblock.complete.java.code-block.rst

.. important::

   Inverse relationship fields must be marked ``final``.

.. seealso::

   :ref:`Fundamentals: Inverse Relationships <android-inverse-relationship>`

.. _android-define-an-embedded-object-property:
.. _android-field-relationships-embedded:

Define an Embedded Object Field
-------------------------------

{+client-database+} provides the ability to nest objects within other
objects. This has several advantages:

- If using {+sync+}, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-modeling-introduction/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the {+realm+}, so unused objects
  don't accumulate in your {+realm+} file, taking up valuable space on
  user's mobile devices.

To embed an object, set the ``embedded`` property of the
:java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html#embedded-->`
annotation to ``true`` on the class that you'd like to nest within
another class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FlyEmbeddedExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FlyEmbeddedExample.codeblock.complete.java.code-block.rst

Then, any time you reference that class from another class,
{+client-database+} will embed the referenced class within the enclosing
class, as in the following example:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogEmbeddedExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogEmbeddedExample.codeblock.complete.java.code-block.rst

.. seealso::

   :ref:`Data Types: Embedded Objects <android-embedded-objects>`

.. _android-property-annotations:

Annotations
-----------

Use annotations to customize your {+service-short+} object models.

.. _android-primary-key:

Primary Key
~~~~~~~~~~~

You may optionally define a primary key for an object type as part of
the :ref:`object schema <android-object-schema>` with the
:java-sdk:`@PrimaryKey <io/realm/annotations/PrimaryKey.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogPrimaryKeyExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogPrimaryKeyExample.codeblock.complete.java.code-block.rst

Only one field in a RealmObject can use the ``@PrimaryKey``
annotation.

.. seealso::

   :ref:`Fundamentals: Primary Key <android-primary-key-fundamentals>`

.. _android-required-field:

Required Fields
~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogRequiredExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogRequiredExample.codeblock.complete.java.code-block.rst

.. seealso::

   :ref:`Fundamentals: Optionality <android-optionality>`

.. _android-optional-field:

Optional Fields
~~~~~~~~~~~~~~~

Fields are only optional if they can hold a value of ``null`` and they
are not marked with the ``Required`` annotation.

.. seealso::

   :ref:`Fundamentals: Optionality <android-optionality>`

.. _android-default-field-values:

Default Field Values
~~~~~~~~~~~~~~~~~~~~

To assign a default value to a field, use the built-in language features
to assign default values.

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      Assign default values in the field declaration:

      .. include:: /examples/generated/android/local/FrogDefaultValueExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      Use the class constructor(s) to assign default values:

      .. include:: /examples/generated/android/local/FrogDefaultValueExample.codeblock.complete.java.code-block.rst

.. note:: Default Values and Nullability

   While default values ensure that a newly created object cannot contain
   a value of ``null`` (unless you specify a default value of ``null``),
   they do not impact the nullability of a field. To make a field
   non-nullable, see :ref:`Required Fields <android-required-field>`.

.. _android-index-a-property:
.. _android-index-field:

Index a Field
~~~~~~~~~~~~~

To index a field, use the :java-sdk:`@Index <io/realm/annotations/Index.html>`
annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogIndexExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogIndexExample.codeblock.complete.java.code-block.rst

.. seealso::

   :ref:`Fundamentals: Indexes <android-indexes-fundamentals>`

.. _android-ignore-a-property:
.. _android-ignore-a-field:
.. _android-ignore-field:

Ignore a Field
~~~~~~~~~~~~~~

If you don't want to save a field in your model to a {+realm+}, you can
ignore a field.

Ignore a field from a {+service-short+} object model with the
:java-sdk:`@Ignore <io/realm/annotations/Ignore.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogIgnoreExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogIgnoreExample.codeblock.complete.java.code-block.rst

.. note:: Ignoring ``static`` and ``transient`` Fields

   Fields marked ``static`` or ``transient`` are always ignored, and do
   not need the ``@Ignore`` annotation.

.. _android-rename-field:

Rename a Field
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent fields internally. In some cases you might want to change
this behavior:

- To make it easier to work across platforms, since naming conventions differ.
- To change a field name in Kotlin without forcing a migration.

Choosing an internal name that differs from the name used in model classes
has the following implications:

- Migrations must use the internal name when creating classes and fields.
- Schema errors reported will use the internal name.

Use the :java-sdk:`@RealmField <io/realm/annotations/RealmField.html>`
annotation to rename a field:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogRenameAFieldExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogRenameAFieldExample.codeblock.complete.java.code-block.rst

Alternatively, you can also assign a naming policy at the module or
class levels to change the way that {+client-database+} interprets field
names.

You can define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the :ref:`module level <android-realm-modules>`,
which will affect all classes included in the module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/RenameModuleExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/RenameModuleExample.codeblock.complete.java.code-block.rst

You can also define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the class level, which overrides module level settings:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogClassRenamePolicyExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogClassRenamePolicyExample.codeblock.complete.java.code-block.rst

.. _android-rename-object:

Rename a Class
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent classes internally. In some cases you might want to change
this behavior:

- To support multiple model classes with the same simple name in different packages.
- To make it easier to work across platforms, since naming conventions differ.
- To use a class name that is longer than the 57 character limit enforced by {+client-database+}.
- To change a class name in Kotlin without forcing a migration.

Use the :java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html>`
annotation to rename a class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/FrogRenameClassExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/FrogRenameClassExample.codeblock.complete.java.code-block.rst

.. _android-omit-classes-from-schema:

Omit Classes from your Realm Schema
-----------------------------------

By default, your application's {+service-short+} Schema includes all
classes that extend ``RealmObject``. If you only want to include a
subset of classes that extend ``RealmObject`` in your {+service-short+}
Schema, you can include that subset of classes in a module and open
your {+realm+} using that module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/local/OmitModuleExampleKt.codeblock.complete.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/local/OmitModuleExample.codeblock.complete.java.code-block.rst
