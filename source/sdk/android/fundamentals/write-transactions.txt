.. _android-write-transactions:

================================
Write Transactions - Android SDK
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+service-short+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+service-short+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note::
   
   All writes must happen in a transaction.

A {+realm+} allows only one open write transaction at a time. {+service-short+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+service-short+} either
**commits** it or **cancels** it:

- When {+service-short+} **commits** a transaction, {+service-short+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+service-short+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+service-short+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _android-acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

{+service-short+} guarantees that transactions are :term:`ACID`
compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

- {+service-short+} establishes :wikipedia:`atomicity <Atomicity_(database_systems)>` by grouping operations in transactions and rolling back all operations in a transaction if any of them fail.
- {+service-short+} establishes :wikipedia:`consistency <Consistency_(database_systems)>` and avoids data corruption by validating changes against the schema. If the result of any write operation is not valid, {+service-short+} cancels and rolls back the entire transaction.
- {+service-short+} establishes :wikipedia:`isolation <Isolation_(database_systems)>` by allowing only one writer at a time. This ensures thread safety between transactions.
- Finally, {+service-short+} establishes :wikipedia:`durability <Durability_(database_systems)>` by writing to disk immediately when a transaction is committed. In the event of an app crash, for example, the changes are not lost or corrupted.

.. _android-open-a-transaction:

Run a Transaction
~~~~~~~~~~~~~~~~~

{+service-short+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+service-short+} runs
it, {+service-short+} cancels the transaction. Otherwise, {+service-short+} commits
the transaction immediately after the callback.

.. example::

   The following code shows how to run a transaction with
   :java-sdk:`executeTransaction() <io/realm/Realm.html#executeTransaction-io.realm.Realm.Transaction->`
   or :java-sdk:`executeTransactionAsync() <io/realm/Realm.html#executeTransactionAsync-io.realm.Realm.Transaction->`.
   If the code in the callback throws an exception, {+service-short+}
   cancels the transaction. Otherwise, {+service-short+} commits the
   transaction.

   .. tabs-realm-languages::
      
      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/android/sync/WritesTest.codeblock.run-a-transaction.kt
            :language: kotlin

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/android/sync/WritesTest.codeblock.run-a-transaction.java
            :language: java

.. seealso::

   :ref:`Usage Example: Read and Write Data <android-read-and-write-data>`
