.. _android-realms:

====================
Realms - Android SDK
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

A **{+realm+}** is a set of related objects that conform to a pre-defined
schema and share user-level access permissions. Realms may contain more
than one type of data as long as a schema exists for each type.

A {+realm+} allows you to partition data according to who
uses it and when they use it. Every {+realm+} stores data in
a separate :term:`{+realm+} file` that contains a binary
encoding of each object in the {+realm+}. You can
automatically :doc:`synchronize {+realm+} across multiple
devices </sync>` and set up :ref:`reactive
event handlers <android-realm-notifications>` that call a
function any time an object in a {+realm+} is created,
modified, or deleted.

.. _android-realm-types:

Types of Realm
--------------

When opening a {+realm+}, you can configure many properties of the {+realm+}.

.. _android-read-only-realms-fundamentals:

Read-Only Realms
~~~~~~~~~~~~~~~~

It's sometimes useful to ship a prepared {+realm+} file with your app
that contains shared data that does not frequently change. You can use
the :java-sdk:`readOnly() <io/realm/RealmConfiguration.Builder.html#readOnly-->`
method when configuring your {+realm+} to make it read-only. This can
prevent accidental writes to the {+realm+} and causes the {+realm+} to
throw an ``IllegalStateException`` if a write occurs.

.. warning:: Read-Only Realm Files are Writeable

   Read-only {+realm+}s are only enforced as read-only in process; the
   {+realm+} file itself is still writeable. As a result, it is still
   possible for other process to write to a read-only {+realm+}.

.. seealso::

   :ref:`Usage Examples: Read-Only Realms <android-read-only-realms>`

.. _android-in-memory-realms-fundamentals:

In-Memory Realms
~~~~~~~~~~~~~~~~

To create a {+realm+} that runs entirely in memory without being written
to a file, use the :java-sdk:`inMemory()` method when configuring your
{+realm+}.

.. important:: In-Memory Realms May Persist to Disk Under High Memory Pressure

   When memory runs low on an Android device, in-memory {+realm+}s
   may :wikipedia:`swap <Memory_paging#Terminology>` temporarily from main
   memory to disk space. However, all files created by an in-memory
   {+realm+} are deleted when that {+realm+} closes or all references
   to that {+realm+} fall out of scope.

.. seealso::

   :ref:`Usage Examples: In-Memory Realms <android-in-memory-realms>`

.. _android-dynamic-realms-fundamentals:

Dynamic Realms
~~~~~~~~~~~~~~

Conventional {+realm+}s define a schema using ``RealmObject`` subclasses
or the ``RealmModel`` interface. A
:java-sdk:`DynamicRealm <io/realm/DynamicRealm.html>` uses strings to
define a schema at runtime. Opening a dynamic {+realm+} uses the same
configuration as a conventional {+realm+}, but dynamic {+realm+}s ignore
all configured schema, migration, and schema versions.

.. important:: Dynamic Realms Lack Type-Safety

   Dynamic {+realm+}s offer flexibility at the expense of type safety and
   performance. As a result, only use dynamic {+realm+}s when that
   flexibility is required, such as during migrations, manual client
   resets, and when working with string-based data like CSV files or JSON.

.. seealso::

   :ref:`Usage Examples: Dynamic Realms <android-dynamic-realms>`

.. _android-realm-lifecycle:

The Realm Lifecycle
-------------------

Every {+realm+} instance consumes a significant amount of resources.
Opening and closing a {+realm+} are both expensive operations, but
keeping a {+realm+} open also incurs significant resource overhead. To
maximize the performance of your application, you should minimize the
number of open {+realm+}s at any given time and limit the number of
open and close operations used.

However, opening a {+realm+} is not always consistently expensive.
If the {+realm+} is already open within the same process or thread,
opening an additional instance requires fewer resources:

- If the {+realm+} is not open within the same process, opening the
  {+realm+} is expensive.

- If the {+realm+} is already open on a different thread within the
  same process, opening the {+realm+} is less expensive, but still
  nontrivial.

- If the {+realm+} is already open on the same thread within the same
  process, opening the {+realm+} requires minimal additional resources.

When you open a {+realm+} for the first time, {+client-database+}
performs the memory-mapping and schema validation required to read and
write data to the {+realm+}. Additional instances of that
{+realm+} on the same thread use the same underlying resources.
Instances of that {+realm+} on separate threads use some of the same
underlying resources.

When all connections to a {+realm+} are closed in
a thread, {+client-database+} frees the thread resources used to
connect to that {+realm+}. When all connections to a {+realm+} are
closed in a process, {+client-database+} frees all resources used to
connect to that {+realm+}.

As a best practice, we recommend tying the {+realm+} instance
lifecycle to the lifecycles of the views that observe the {+realm+}. For
instance, consider a ``RecyclerView`` that displays ``RealmResults``
data via a ``Fragment``. You could:

- Open a single {+realm+} that contains the data for that view
  in the ``Fragment.onCreateView()`` lifecycle method.
- Close that same {+realm+} in the ``Fragment.onDestroyView()``
  lifecycle method.

.. note::

   If your {+realm+} is especially large, fetching a {+realm+} instance
   in ``Fragment.onCreateView()`` may briefly block rendering. If
   opening your {+realm+} in ``onCreateView()`` causes performance
   issues, consider managing the {+realm+} from ``Fragment.onStart()``
   and ``Fragment.onStop()`` instead.

If multiple ``Fragment`` instances require access to the same dataset,
you could manage a single {+realm+} in the enclosing ``Activity``:

- Open the {+realm+} in the ``Activity.onCreate()`` lifecycle method.
- Close the {+realm+} in the ``Activity.onDestroy()`` lifecycle method.

Multi-process
-------------

You cannot access :ref:`encrypted <android-encrypt-a-realm>` or
:ref:`synced <android-sync-changes-between-devices>` {+realm+}s
simultaneously from different processes. However, local {+realm+}s
function normally across processes, so you can read, write, and
receive notifications from multiple APKs.

Comparison with Other Databases
-------------------------------

The {+service+} data model is similar to both relational and document
databases but has distinct differences from both. To underscore these
differences, it's helpful to highlight what a {+realm+} **is not**:

A {+realm+} is not a single, application-wide database.
    Unlike other applications, which store all of their data in a single
    database, {+app+}s often split data across multiple {+realms+} to
    organize data more efficiently and to enforce access controls.

A {+realm+} is not a table.
    Tables typically only store one kind of information, such as street
    addresses or items in a store inventory, whereas a {+realm+} can contain
    any number of object types.

A {+realm+} is not a collection of schemaless documents.
    Application objects are similar to documents, but every object in a
    {+realm+} conforms to a defined schema for its object type. An object
    cannot contain a field that is not described by its schema.

.. _android-realm-schema:

Realm Schema
------------

A **{+backend-schema+}** is a list of valid :ref:`object schemas
<android-realm-objects>` that each define an object type that a {+app+}
may persist. All objects in a {+realm+} must conform to the {+backend-schema+}.

Client applications provide a {+frontend-schema+} when they open a
{+realm+}. If a {+realm+} already contains data, then {+client-database+}
validates each existing object to ensure that an object schema was
provided for its type and that it meets all of the constraints specified
in the schema.

.. example::
   
   A {+realm+} that contains basic data about books in libraries might use a
   schema like the following:
   
   .. code-block:: json
      
      [
        {
          "type": "Library",
          "properties": {
            "address": "string",
            "books": "Book[]"
          }
        },
        {
          "type": "Book",
          "primaryKey": "isbn",
          "properties": {
            "isbn": "string",
            "title": "string",
            "author": "string",
            "numberOwned": { "type": "int?", "default": 0 },
            "numberLoaned": { "type": "int?", "default": 0 }
          }
        }
      ]

.. _android-realm-path:

Synced Realms are Partitions of Atlas Data
------------------------------------------

Each {+realm+} corresponds to a subset of the data in your
:term:`{+app+}'s <{+app+}>`
:term:`synced {+atlas+} cluster <synced cluster>`. You can customize the
:ref:`partitioning <partitioning>` of data using your application's
:ref:`partition key <partition-keys>`. Unique values of the partition
key, known as :term:`partition values <partition value>`, correspond to
individual {+realms+}.

You can customize permissions for these partitions of data using
:ref:`{+service-short+} Rules <sync-rules>`.

.. _android-realm-file:

Find Your Realm File
--------------------

.. include:: /includes/find-realm-file-android.rst

.. _android-realm-file-size:

Realm File Size
---------------

{+client-database+} usually takes up less space on disk than an
equivalent SQLite database. However, in order to give you a consistent
view of your data, {+service-short+} operates on multiple versions of a
{+realm+}. If many versions of a {+realm+} are opened simultaneously,
the {+realm+} file can require additional space on disk.

These versions take up an amount of space dependent on the amount of
changes in each transaction. Many small transactions have the same
overhead as a small number of large transactions.

Unexpected file size growth usually happens for one of three reasons:

1) *You open a {+realm+} on a background thread and forget to close it
   again.* As a result, {+client-database+} retains a reference to the
   older version of data on the background thread. Because
   {+client-database+} automatically updates {+realm+}s to the most
   recent version on threads with loopers, the UI thread and other
   Looper threads do not have this problem.

2) *You hold references to too many versions of frozen objects.*
   Frozen objects preserve the version of a {+realm+} that existed when
   the object was first frozen. If you need to freeze a large number of
   objects, consider using :java-sdk:`Realm.copyFromRealm()
   <io/realm/Realm.html#copyFromRealm-E->` instead to only preserve the
   data you need.

3) *You read some data from a {+realm+}. Then, you block the thread with
   a long-running operation. Meanwhile, you write many times to the
   {+realm+} on other threads.* This causes {+client-database+} to
   create many intermediate versions. You can avoid this by:

   - batching the writes

   - avoiding leaving the {+realm+} open while otherwise blocking the
     background thread.

.. _android-limit-max-number-of-active-versions:

Limit the Maximum Number of Active Versions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can set :java-sdk:`maxNumberOfActiveVersions()
<io/realm/RealmConfiguration.Builder.html#maxNumberOfActiveVersions-long->`
when building your ``RealmConfiguration`` to throw an
``IllegalStateException`` if your application opens more versions of
a {+realm+} than the permitted number. Versions are created when
executing a write transaction.

{+client-database+} automatically removes older versions of data once
they are no longer used by your application. However,
{+client-database+} does not free the space used by older versions of
data; instead, that space is used for new writes to the {+realm+}.

.. _android-compact-a-realm:

Compact a Realm
~~~~~~~~~~~~~~~

You can remove unused space by **compacting** the {+realm+} file:

- Manually: call :java-sdk:`compactRealm()
  <io/realm/Realm.html#compactRealm-io.realm.RealmConfiguration->`

- Automatically: specify the :java-sdk:`compactOnLaunch()
  <io/realm/RealmConfiguration.Builder.html#compactOnLaunch-io.realm.CompactOnLaunchCallback->`
  builder option when opening the first connection to a {+realm+} in your
  Android application

.. _android-backup-and-restore-realms:

Backup and Restore Realms
-------------------------

{+client-database+} persists {+realms+} to disk using files on your
Android device. To back up a {+realm+}, :ref:`find your {+realm+} file
<android-realm-file>` and copy it to a safe location. You should close
all instances of the {+realm+} before copying it.

Alternatively, you can also use :java-sdk:`realm.writeCopyTo()
<io/realm/Realm.html#writeCopyTo-java.io.File->` to write a compacted
version of a {+realm+} to a destination file.

.. seealso::

   If you want to back up a {+realm+} to an external location like
   Google Drive, see the following article series: (`Part 1
   <https://medium.com/glucosio-project/example-class-to-export-import-a-realm-database-on-android-c429ade2b4ed#.80ibsc7wm>`__,
   `Part 2 <https://medium.com/glucosio-project/backup-restore-a-realm-database-on-google-drive-with-drive-api-c238515a5975#.qbuugb322>`__,
   `Part 3 <https://medium.com/glucosio-project/build-a-nice-ux-to-backup-and-sync-your-app-data-on-google-drive-3-3-a3b598cab68b#.5mjk4w4se>`__).

Summary
-------

- A :term:`{+realm+}` is a collection of objects that conform to a
  schema. It is not a single, application-wide database. There can and
  usually will be more than one {+realm+} per application.

- A :term:`{+backend-schema+}` is a versioned specification of the
  object types used in a {+app+}.

- {+service-short+} Rules define who can read or write
  the {+realm+} and apply to the {+realm+} as a whole.

- A :term:`partition value` is a {+realm+}'s unique identifier.

- Modules let you selectively include subsets of the Realm objects defined
  in your application schema when opening a {+realm+}.
