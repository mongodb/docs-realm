.. _android-bundle-a-realm:

==========================================
Copy and Bundle a Realm File - Android SDK
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. note:: Bundle Synchronized Realms

   SDK version 10.9.0 introduced the ability to bundle synchronized {+realm+}s.
   Before version 10.9.0, you could only bundle local {+realm+}s.

{+service-short+} supports **bundling** {+realm+} files. When you bundle
a {+realm+} file, you include a database and all of its data in your
application download.

This allows users to start applications for the first time with a set of
initial data. For synced {+realm+}s, bundling can avoid a lengthy
initial download the first time a user opens your application. Instead,
users must only download the synced changes that occurred since you
generated the bundled file.

.. warning:: Synced Realm Bundling and Client Maximum Offline Time

   If your application has enabled :ref:`advanced backend compaction
   <advanced-backend-compaction>` by configuring a
   :ref:`client maximum offline time <client-maximum-offline-time>`,
   users could experience a client reset the first time they open the
   bundled {+realm+} file. This can happen if:

   - the bundled {+realm+} file was generated more than
     **client maximum offline time** days before the user syncs the
     {+realm+} for the first time.

   Users experiencing a client reset download the full state of the
   {+realm+} from the application backend. This negates the
   advantages of bundling a {+realm+} file. To prevent client resets and
   preserve the advantages of {+realm+} file bundling:

   - Avoid using a client maximum offline time in applications that
     bundle a synchronized {+realm+}.

   - If your application does use a client maximum offline time, ensure
     that your application download always includes a recently synced
     {+realm+} file. Generate a new file each application version,
     and ensure that no version ever stays current for more than
     **client maximum offline time** number of days.

Overview
--------

To create and bundle a {+realm+} file with your application:

1. Build a temporary {+realm+} app that shares the data model of your
   application.

#. Open a {+realm+} and add the data you wish to bundle.

#. If using a synchronized {+realm+}, allow time for the {+realm+} to fully sync.

#. Make a :ref:`compacted <android-compact-a-realm>` copy of the {+realm+}.
   This reduces the {+realm+} file size, which makes your app lighter to
   download.

#. Bundle the {+realm+} file in the :file:`/<app name>/src/main/assets` folder of your application.

In your production app (the one that will use this bundled {+realm+} when first
loading), always open the {+realm+} using the asset file as an identifier. For
synced {+realm+}s, you must also supply the partition key.

.. _copy_a_realm_file:

Copy a Realm File
-----------------

1. Create a new project with the same data models as your production app. Open 
   the {+realm+} containing the data you wish to bundle.

#. Use the :android-sdk:`writeCopyTo() <io/realm/Realm.html#writeCopyTo-java.io.File->` 
   method to copy the {+realm+} to a new file:

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. include:: /examples/generated/android/sync/BundleTest.codeblock.copy-a-realm-file.kt.code-block.rst

      .. tab::
         :tabid: java

         .. include:: /examples/generated/android/sync/BundleTest.codeblock.copy-a-realm-file.java.code-block.rst

   .. note:: Differences Between Synced Realms and Local-only Realms

      The above example uses a ``SyncConfiguration`` to configure a synchronized
      {+realm+}. To create a copy of a local {+realm+}, configure your {+realm+}
      with ``RealmConfiguration`` instead.

Include the Realm File in Your Project
--------------------------------------

Now that you have a copy of the {+realm+} that contains the initial data,
bundle it with your production application.

1. Search your application logs to find the location of the {+realm+} file
   copy you just created.

#. Using the "Device File Explorer" widget in the bottom right of your
   Android Studio window, navigate to the file.

#. Right click on the file and select "Save As". Navigate to the
   :file:`/<app name>/src/main/assets` folder of your production application.
   Save a copy of the {+realm+} file there.

.. note:: Asset Folders

   If your application does not already contain an asset folder, you can
   create one by right clicking on your top-level application
   folder (:file:`<app name>`) in Android Studio and selecting
   :guilabel:`New > Folder > Assets Folder` in the menu.

Using the Copied Realm File
---------------------------

Now that you have a copy of the {+realm+} included with your app, you need to 
add code to use it. Use the :android-sdk:`assetFile()
<io/realm/RealmConfiguration.Builder.html#assetFile-java.lang.String->`
method when configuring your {+realm+} to open the realm using data
from a bundled file:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/android/sync/BundleTest.codeblock.use-a-bundled-realm-file.kt.code-block.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/android/sync/BundleTest.codeblock.use-a-bundled-realm-file.java.code-block.rst

.. note:: Differences Between Synced Realms and Local-only Realms

   The above example uses a ``SyncConfiguration`` to configure a synchronized
   {+realm+}. To create a copy of a local {+realm+}, configure your {+realm+}
   with ``RealmConfiguration`` instead.
