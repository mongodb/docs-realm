.. _android-encrypt-a-realm:

=============================
Encrypt a Realm - Android SDK
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can encrypt the {+realm+} database file on disk with AES-256 +
SHA-2 by supplying a 64-byte encryption key when :ref:`opening a
{+realm+} <android-open-a-local-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. {+service-short+}
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

Considerations
--------------

Storing & Reusing Keys
~~~~~~~~~~~~~~~~~~~~~~

You must pass the same encryption key when opening the encrypted
{+realm+} again. Apps should store the encryption key in the
:android:`Android KeyStore <training/articles/keystore.html>` so
that other apps cannot read the key. Here is a recommended way to use
the KeyStore for encryption with {+service-short+}:

1. Generate an asymmetric RSA key that Android can securely store and
   retrieve using the Android KeyStore.

   .. note:: Android Version M and Above: Keystore Security

      Versions M and above require user PIN or fingerprint to unlock
      the KeyStore.

#. Generate a symmetric key (AES) you can use to encrypt the {+realm+}.

#. Encrypt the symmetric AES key using your private RSA key.

#. Store the encrypted AES key on filesystem (in a
   ``SharedPreferences``, for example).

When you need to use your encrypted {+realm+}:

a. retrieve your encrypted AES key
#. decrypt it using the public RSA key
#. use it in the ``RealmConfiguration`` to open the encrypted
   {+realm+}.

.. seealso::

   For an end-to-end example of storing and reusing encryption keys, see
   the following example projects:

   - `realm-android-user-store <https://github.com/realm/realm-android-user-store>`__
   - `store_password <https://github.com/realm/realm-java/tree/feature/example/store_password/examples/StoreEncryptionPassword>`__
     (using the fingerprint API)

Performance Impact
~~~~~~~~~~~~~~~~~~

Typically, reads and writes on encrypted {+realm+}s can be up to 10%
slower than unencrypted {+realm+}s.

Encryption and Realm Sync
~~~~~~~~~~~~~~~~~~~~~~~~~

You can encrypt a :ref:`synced realm <android-sync-data>`. {+service+} only
encrypts the data on the device and stores the data unencrypted in your
{+atlas+} :term:`data source`.

Example
-------

The following code demonstrates how to generate an encryption key and
open an encrypted {+realm+} with the :java-sdk:`encryptionKey() <io/realm/mongodb/sync/SyncConfiguration.Builder.html#encryptionKey-byte:A->`
method:

.. warning:: This Example Does Not Securely Handle Encryption Keys

   This example does not demonstrate best security practices for generating
   or storing encryption keys. For proper key handling, please consult
   `the Android documentation <https://developer.android.com/training/articles/keystore.html>`__
   or `third party guides <http://nelenkov.blogspot.dk/2012/05/storing-application-secrets-in-androids.html>`__.

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/android/sync/EncryptTest.codeblock.encrypt.kt
         :language: kotlin

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/android/sync/EncryptTest.codeblock.encrypt.java
         :language: java

