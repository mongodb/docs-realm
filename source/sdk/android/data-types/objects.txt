.. _android-realm-objects:

===========================
Realm Objects - Android SDK
===========================

Overview
--------

{+service+} applications model data as objects composed of field-value pairs
that each contain one or more primitive data types or other {+service-short+}
objects. :term:`{+service-short+} objects <Realm object>` are essentially the same
as regular objects, but they also include
additional features like
:ref:`real-time updating data views <android-live-object>` and reactive
:ref:`change event handlers <android-client-notifications>`.

Every {+service-short+} object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<android-object-schema>` that defines the fields and relationships of those
objects. You can define your own object schemas using Kotlin and
Java class declarations.

Example
-------

.. example::

   The following code block shows an object schema that describes a Dog.
   Every Dog object must include a ``name`` and ``age`` and may
   optionally include the dog's ``breed`` and a reference to a Person
   object that represents the dog's ``owner``.

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/Schemas/DogSchema.kt
            :language: kotlin

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/Schemas/DogSchema.java
            :language: java

.. _android-live-object:

Live Objects
------------

Objects in {+service-short+} clients are **live objects** that
update automatically to reflect data changes, including
:doc:`synced </sync>` remote changes, and emit
:ref:`notification events <android-client-notifications>` that you
can subscribe to whenever their underlying data changes. You
can use live objects to work with object-oriented data
natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object always references the most up-to-date data on disk and
:wikipedia:`lazy loads <Lazy_loading>` field values when you access
them from a :ref:`collection <android-client-collections>`. This means that a
{+realm+} can contain many objects but only pays the performance cost for
data that the application is actually using.

Valid write operations on a live object automatically persist to the
{+realm+} and propagate to any other synced clients. You do not need to
call an update method, modify the {+realm+}, or otherwise "push" updates.

Summary
-------

- {+service-short+} objects are of a **type** defined as you would any other
  class.

- {+service-short+} objects are **live**: they always reflect the latest version
  on disk and update automatically when the underlying object changes.

- The {+service-short+} object's **schema** defines the fields of the object and
  which fields are optional, which fields have a default value,
  and which fields are indexed.
