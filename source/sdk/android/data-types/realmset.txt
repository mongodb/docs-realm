.. _android-realmset:

=============================
RealmSet (beta) - Android SDK
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.6.0

.. include:: /includes/note-beta-feature.rst

You can use the :java-sdk:`RealmSet <io/realm/RealmSet.html>` data type
to manage a collection of unique keys. ``RealmSet`` implements Java's
``Set`` interface, so it works just like the built-in ``HashSet`` class,
except managed ``RealmSet`` instances persist their contents to a
{+realm+}. ``RealmSet`` instances that contain {+service-short+} objects
actually only store references to those objects, so deleting a
{+service-short+} object from a {+realm+} also deletes that object from
any ``RealmSet`` instances that contain the object.

Because ``RealmSet`` implements ``RealmCollection``, it has some useful
mathematical methods, such as ``sum``, ``min``, and ``max``. For a complete
list of available ``RealmSet`` methods, see: :java-sdk:`the RealmSet API 
reference <io/realm/RealmSet.html>`.

.. note:: ``RealmSet`` Limitations

   Objects containing ``RealmSet`` fields currently cannot use the
   following ``Realm`` methods:

   - ``Realm.insert()``
   - ``Realm.insertOrUpdate()``
   - ``Realm.createAllFromJson()``
   - ``Realm.createObjectFromJson()``
   - ``Realm.createOrUpdateAllFromJson()``
   - ``Realm.createOrUpdateObjectFromJson()``

Usage
-----

To create a field of type ``RealmSet``, define an object property of
type ``RealmSet<E>``, where ``E`` defines the keys you would like to
store in your ``RealmSet``.

- Add an object to a ``RealmSet`` with
  :java-sdk:`RealmSet.add() <io/realm/RealmSet.html#add-E->`

- Add multiple objects with
  :java-sdk:`RealmSet.addAll() <io/realm/RealmSet.html#addAll-Collection->`

- Check if the set contains a specific object with
  :java-sdk:`RealmSet.contains() <io/realm/RealmSet.html#contains-Object->`

- Check if the set contains all of multiple objects with
  :java-sdk:`RealmSet.containsAll() <io/realm/RealmSet.html#containsAll-Collection->`

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/android/local/FrogSetKt.codeblock.complete.kt
          :language: kotlin

       .. literalinclude:: /examples/generated/android/local/SnackKt.codeblock.complete.kt
          :language: kotlin

       .. literalinclude:: /examples/generated/android/local/DataTypesTest.codeblock.realmSet.kt
          :language: kotlin

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/android/local/FrogSet.codeblock.complete.java
          :language: java

       .. literalinclude:: /examples/generated/android/local/Snack.codeblock.complete.java
          :language: java

       .. literalinclude:: /examples/generated/android/local/DataTypesTest.codeblock.realmSet.java
          :language: java

Notifications
-------------

To subscribe to changes to a ``RealmSet``, pass a
:java-sdk:`SetChangeListener <io/realm/SetChangeListener.html>`
implementation to the :java-sdk:`RealmSet.addChangeListener <io/realm/RealmSet.html#addChangeListener-io.realm.SetChangeListener->` method.
Your ``SetChangeListener`` implementation must define an
``onChange()`` method, which accepts a reference to the changed ``RealmSet``
and a set of changes as parameters. You can access the number of items
added to the set as well as the number of items removed from the set
through the ``SetChangeSet`` parameter.

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/android/local/DataTypesTest.codeblock.realmset-notifications.kt
          :language: kotlin

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/android/local/DataTypesTest.codeblock.realmset-notifications.java
          :language: java
