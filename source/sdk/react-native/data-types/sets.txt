.. _react-native-data-types-sets:

==============================
Sets (beta) - React Native SDK
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.5.0-beta.1

.. include:: /includes/note-beta-feature.rst

Overview
--------
A **{+service-short+} Set** is a special object that allows you to store a
collection of unique values. **{+service-short+} Sets** are based on JavaScript
:mdn:`sets <Web/JavaScript/Reference/Global_Objects/Set>`, but can only contain
values of a single type and can only be modified within a write transaction.
Sets allow you to perform math operations such as finding the union,
intersection, or difference between two sets. To learn more about performing
these operations, see the MDN docs for :mdn:`Implementing basic set operations
<Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations>`.

.. note:: **{+service-short+} Sets** Do Not Guarantee Traversal Order
   
   When using a ``forEach()`` loop or alternative :mdn:`iteration method
   <Web/JavaScript/Reference/Global_Objects/Set#iteration_methods>` to traverse
   the set in a loop, the content of the **{+service-short+} Set** may be in a
   different order than originally written to. If you require an ordered version
   of your set, you must implement that ordering yourself. If you require an
   ordered version of your set, you must implement that order yourself. You can
   do this by creating an array from the set, using :mdn:`Array.from(mySet)
   <Web/JavaScript/Reference/Global_Objects/Array/from>` or the :mdn:`spread
   operator <Web/JavaScript/Reference/Operators/Spread_syntax>`. You can keep
   that array updated by using a :ref:`change listener <react-native-object-listener>`
   to react to changes to the set.

   
.. _react-native-define-set-objects:

Realm Object Models
-------------------
To define a property type as a ``{+service-short+} Set``, specify the data type
you want in the set, followed by ``<>``. For instance, for a set made of integer
values, specify ``"int<>"``. 

.. literalinclude:: /examples/generated/node/data-types.codeblock.define-set-objects.js
   :language: javascript

.. _react-native-create-set-objects:

Create an Object With a Set
---------------------------
To create an object with a **{+service-short+} Set** property, you must create
the object within a write transaction. When defining your {+service-short+}
object, initialize the **{+service-short+} Set** by passing an empty array or an
array with your initial values.

.. literalinclude:: /examples/generated/node/data-types.codeblock.create-set-objects.js
   :language: javascript


.. _react-native-add-items-to-set:

Add Items to a Set
------------------
To add an item to a set, pass the new value to the ``<Realm.Set>.add()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.codeblock.add-items-to-set.js
   :language: javascript

.. _react-native-check-if-set-has-items:

Check if a Set has Specific Items
---------------------------------
To determine if a set contains a particular value, pass the value to the ``<Realm.Set>.has()`` method. The
``set.has()`` method will return true if the set contains the value specified.

.. literalinclude:: /examples/generated/node/data-types.codeblock.check-if-set-has-items.js
   :language: javascript

.. _react-native-check-set-size:

Check the Size of a Set
-----------------------
To discover how many items are in a set, you can check the set's ``size`` property.

.. literalinclude:: /examples/generated/node/data-types.codeblock.check-set-size.js
   :language: javascript

.. _react-native-remove-specific-item-from-set:

Remove an Item from a Set
-------------------------
To remove a specific value from a set, pass the value to the ``<Realm.Set>.delete()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.codeblock.remove-specific-item-from-set.js
   :language: javascript


.. _react-native-remove-all-items-from-set:

Remove all Items from a Set
---------------------------
To clear the set, run the ``<Realm.Set>.clear()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.codeblock.remove-all-items-from-set.js
   :language: javascript
