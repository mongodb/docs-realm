.. _react-native-bundle-a-realm:

======================================
Bundle a Realm File - React Native SDK
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service-short+} supports **bundling** {+realm+} files. When you bundle
a {+realm+} file, you include a database and all of its data in your
application download.

This allows users to start applications for the first time with a set of
initial data. For synced {+realm+}s, bundling can avoid a lengthy
initial download the first time a user opens your application. Instead,
users must only download the synced changes that occurred since you
generated the bundled file.

Procedure
---------

Follow these steps to create and bundle a {+realm+} file for your React Native application.
On a high level you:

#. Create a bundled realm file in a Node.Js script.
#. Copy the bundled realm to the iOS and/or Android builds for your application. 
#. Call ``Realm.copyBundledRealmFiles()``  before you open the bundled Realm in 
   your React Native JavaScript code. 



.. note:: Bundle Synchronized Realms

   SDK version 10.12.0 introduced the ability to bundle synchronized {+realm+}s.
   Before version 10.12.0, you could only bundle local {+realm+}s.

   :ref:`See the Bundle a Synchronized Realm section for details on considerations and limitations
   when bundling a synchronized {+realm+}. <react-native-bundle-synced-realm>`

.. _react-native-create-a-realm-for-bundling:

.. procedure:: 

   .. step:: Create Realm File for Bundling

      The easiest way to create a bundled realm for your React Native app is 
      to write a separate Node.Js script to create the bundle. 

      #. Build a temporary {+realm+} app that shares the data model of your
         application.

      #. Open a {+realm+} and add the data you wish to bundle. If using a
         synchronized {+realm+}, allow time for the {+realm+} to fully sync.

      #. Use the :js-sdk:`writeCopyTo() <Realm.html#writeCopyTo>`
         method to copy the {+realm+} to a new file.

         .. literalinclude:: /examples/generated/node/bundle-a-realm.codeblock.copy-realm-to-new-file.js
            :language: javascript

         ``writeCopyTo()`` automatically compacts your {+realm+} to the smallest
         possible size before copying.

         .. note:: Differences Between Synchronized Realms and Local-only Realms

            The above example uses a :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`
            to configure a synchronized {+realm+} for the ``sync`` field of the 
            :js-sdk:`Configuration <Realm.html#~Configuration>`.
            To create a copy of a local {+realm+}, do not include the ``sync`` field 
            in your Configuration object.

      #. Note the filepath of the bundled {+realm+} file, which can be found at the location specified in the argument 
         passed to ``writeCopyTo()`` in the previous step. You'll need this file to use
         the bundled {+realm+} in your production application, as described in the next 
         section.

         .. code-block::
            :caption: temp_realm_app
            :emphasize-lines: 2

            .
            ├── copyOfDefault.realm
            ... rest of files in _temp_ application

      .. _react-native-bundle-realm-file:

   .. step:: Bundle Realm File in Your Production Application

      Now that you have a copy of the {+realm+} that contains the initial data,
      bundle it with your production application.

      Add the bundled {+realm+} file made in the previous section to your production
      application. Where you place the bundled realm differs for iOS and Android 
      builds. 

      .. note:: Add bundled realm to Expo apps

         If you'd like to add a bundled realm to an Expo app, you must first 
         eject your app. To learn how to do this and it's implications for your app,
         refer to the `Expo documentation on adding custom native code 
         <https://docs.expo.dev/workflow/customizing/>`__.


      .. tabs:: 

         .. tab:: iOS
            :tabid: ios

            #. Open up the ``android`` folder generated by React Native in Android Studio.
            #. In the :guilabel:`Project` tree, navigate to ``app > src > main``.
               Right click the ``main`` directory. Create a new subdirectory named ``assets``.
            #. Drag the realm file into the ``assets`` directory.

         .. tab:: Android
            :tabid: android

            #. Open up the ``ios`` directory in Xcode.
            #. Right click on your app name in the project navigator and
               create a new group named "Resources".
            #. Drag the bundled realm file you created into the :guilabel:`Resources` group.
               Accept the default options in the box that pops up.
            #. Click on the project name in the tree, and in the project info window,
               go to Build Phases and expand the :guilabel:`Copy Bundle Resources` phase.
            #. Click the :guilabel:`+` icon. 
               Find your realm file in the :guilabel:`Resources` group and add it.

      .. _react-native-open-a-realm-from-a-bundled-realm-file:

   .. step:: Open a Realm from Bundle

      To add the bundled realm file to your app's document directory, call 
      :js-sdk:`Realm.copyBundledRealmFiles() <Realm.html#.copyBundledRealmFiles>`
      before you :ref:`open the realm <react-native-open-close-realm>`. 

      ``Realm.copyBundledRealmFiles()`` adds all ``*.realm`` files from the application
      bundle to the application documents directory. This method doesn't override 
      any existing files with the same name, so it's safe to call every time the 
      app starts. 

      Open the bundled realm with the same name and configuration that you specified when you initially 
      created the bundled realm in step one with ``writeCopyTo()``.

      Now that you have a copy of the {+realm+} included with your production
      application, you need to add code to use it. 

      TODO: literal include

      .. code-block:: javascript

         Realm.copyBundledRealmFiles(); // this copies *.realm from the app bundle into the documents folder, so will copy myRealm.realm into a place where we can start modifying it

         const realm = await Realm.open({ 
            path: 'myRealm.realm' // this tells it to use myRealm.realm from the documents dir, which got copied in by copyBundledRealmFiles
         });

      .. _react-native-bundle-synced-realm:


Bundle a Synchronized Realm
---------------------------

Generally, bundling a synchronized realm works the same as bundling a local-only realm. 
However, there are some limitations to bundling realms that use {+sync+}.

#. You can only bundle fully synchronized realms. Make sure that the realm has fully synchronized 
   with the server before bundling: 

   .. literalinclude:: /examples/generated/node/bundle-a-realm.codeblock.fully-sync-before-copy.js
      :language: javascript

#. When opening a bundled synchronized realm, you must use the same partition key 
   that was used in the original realm. If you use a different partition key, the SDK throws
   an error when opening the bundled realm. 

.. warning:: Synchronized Realm Bundling and Client Maximum Offline Time

   If your application has enabled :ref:`advanced backend compaction
   <advanced-backend-compaction>` by configuring a
   :ref:`client maximum offline time <client-maximum-offline-time>`,
   users could experience a client reset the first time they open the
   bundled {+realm+} file. This can happen if:

   - the bundled {+realm+} file was generated more than
     **client maximum offline time** days before the user syncs the
     {+realm+} for the first time.

   Users experiencing a client reset download the full state of the
   {+realm+} from the application backend. This negates the
   advantages of bundling a {+realm+} file. To prevent client resets and
   preserve the advantages of {+realm+} file bundling:

   - Avoid using a client maximum offline time in applications that
     bundle a synchronized {+realm+}.

   - If your application does use a client maximum offline time, ensure
     that your application download always includes a recently synchronized
     {+realm+} file. Generate a new file each application version,
     and ensure that no version ever stays current for more than
     **client maximum offline time** number of days.


