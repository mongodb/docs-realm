.. _react-native-use-realm-hooks:

===============
Use Realm Hooks
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------
:npm:`Realm Hooks <package/@realm/react>` provides an easy-to-use API to perform
common Realm operations, such as querying or writing to a realm and listening to
realm objects.

Using Realm React allows you to avoid creating boilerplate code, such as
creating your own listeners and state management. Realm React provides access to Realm through a
set of Hooks, which return Realm data that are automatically subscribed to updates. This means that
components using these Hooks will re-render on any changes to Realm data.


.. _react-native-setup-realm-hooks:

Setup Realm Hooks
-----------------
To set up realm hooks, you can either start from scratch with a new application
using the :github:`Realm Expo template <expo/examples/tree/master/with-realm>`
or install Realm Hooks for an existing `React Native application
<https://reactnative.dev/docs/environment-setup#creating-a-new-application>`_ .

.. tabs::

   tabs:
     - id: create-a-new-app-with-realm-hooks-preconfigured
       name: Create a New App with Realm Hooks
       content: |
         If you don't have an existing application, we recommend developing with
         the :github:`Realm Expo template <expo/examples/tree/master/with-realm>`.
         The Realm Expo template allows you to bootstrap your application with
         `Expo <https://docs.expo.dev/>`_ and Realm Hooks preconfigured.

         To initialize the Realm Expo template, read the :ref:`Quick Start
         with Expo <react-native-client-quick-start-expo>` documentation.

     - id: use-npm-to-add-realm-hooks-to-an-old-app
       name: Add Realm Hooks to an Existing App
       content: |
         To install Realm Hooks on an existing React Native application, run the
         following command in your terminal from the root of your application
         where your ``package.json`` file is located:

         .. code-block:: shell

            npm install @realm/react

.. _react-native-realm-context:

Create a Realm Context
----------------------------------------------

The ``createRealmContext()`` method creates a Realm :reactjs:`Context
<docs/context.html>` object with a given :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>`. The ``Realm Context`` object contains the
following: 

- A :reactjs:`Context Provider <docs/context.html#contextprovider>` component that wraps around a component, and provides any of its child components with access to the hooks.
- Various pre-built :reactjs:`Hooks <docs/hooks-intro.html>` that you can use to get access to the opened {+realm+}, query the {+realm+}, etc.

Setup
~~~~~
In the following example, we create a file where you will define a Realm object
type, a Realm configuration, and create a Realm Context. At the top of the file,
import Realm and the ``createRealmContext()`` method.

.. literalinclude:: /examples/generated/expo/Task.codeblock.add-imports-to-task.ts
    :language: typescript

Next, define a Realm model using a JavaScript class. The ``Task``
class below contains the following:

- A ``generate()`` method that returns a ``Task`` insertion object, that automatically sets computed values, such as `_id` and `createdAt`. This insertion can be forwarded to `realm.create` to preform an insertion. 
- A schema

.. literalinclude:: /examples/generated/expo/Task.codeblock.create-task-class.ts
    :language: typescript

Next, create a ``Realm.Configuration`` object and set it's ``schema`` property
to the ``Task`` class you created. Pass the configuration object to the
``createRealmContext()`` method. Export the return value of
``createRealmContext()`` so you can use it's ``Context`` in other files.

.. literalinclude:: /examples/generated/expo/Task.codeblock.create-realm-context.ts
    :language: typescript

.. _react-native-realm-provider:

Using the Realm Provider
------------------------

Wrap the component needing access to {+service-short+} with the Realm Provider
component. This also gives any child components of the wrapped component access
to the {+service-short+} and the Realm Hooks. 

.. tip:: Choosing Which Components to Wrap inside the Realm Provider
   
   For simple use-cases, you may want to wrap your entire application in the
   ``RealmProvider`` component, such as the example below. For additional security,
   you may only want to give access to the opened {+realm+} to specific screens, or
   after the user has logged in.

Usage
~~~~~
Import the ``Context`` object that you created. In the example below, the
Context object is called "TaskContext" since it refers to the Realm Context of
the Task. :mdn:`Destructure
<Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring>`
the TaskContext object to get it's ``RealmProvider``. 

.. literalinclude:: /examples/generated/expo/App.codeblock.import-task-context.tsx
    :language: typescript

Finally, wrap the ``RealmProvider`` component around the component that you want
to give access to the Realm Hooks. In the example below, we give the entire
app access to the Realm Hooks by wrapping the ``RealmProvider`` around
the ``App`` component which renders the application.

.. literalinclude:: /examples/generated/expo/App.codeblock.wrap-app-within-realm-provider.tsx
    :language: typescript

Dynamically Update the {+service-short+} Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can dynamically update the {+service-short+} configuration, by setting
:reactjs:`props <docs/components-and-props.html>` on the ``RealmProvider``
component. The props you set on the ``RealmProvider`` will overwrite any
property passed into ``createRealmContext()``.

In the following example, we update the RealmProvider with a :js-sdk:`sync
configuration <Realm.App.Sync.html#~SyncConfiguration>` and a ``fallback``
property that is used to render a temporary LoadingSpinner component while
waiting for {+sync+} to respond:

.. literalinclude:: /examples/generated/expo/App.codeblock.dynamically-update-realm-config.tsx
    :language: typescript

Use Realm Hooks In Child Components
-----------------------------------

Once you have wrapped your component with your ``RealmProvider``, your component
and it's child components will have access to the ``useRealm()``,
``useObject()``, and ``useQuery()`` hooks.

Usage
~~~~~
Import the ``Context`` object that you created. In the example below, the
Context object is called "TaskContext" since it refers to the Realm Context of
the Task. :mdn:`Destructure
<Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring>`
the TaskContext object to get it's Realm Hooks. 

.. literalinclude:: /examples/generated/expo/App.codeblock.get-access-to-the-hooks.tsx
    :language: typescript

useRealm
````````
The ``useRealm()`` hook returns the opened {+realm+} instance. In the following
example, a ``handleAddTask()`` method is created for the ``App`` component. The
``handleAddTask()`` method writes to the realm returned by the ``useRealm()``
hook.

.. literalinclude:: /examples/generated/expo/App.codeblock.example-userealm-hook-usage.tsx
    :language: typescript

The :js-sdk:`Realm.create() <Realm.html#create>` call invokes the ``Task.generate()`` method defined in the ``Task`` class.  This method is used to instantiate
a JavaScript object with default values for the ``_id``, ``isComplete``, and
``createdAt`` properties.

.. seealso::
  - :ref:`write to a realm <react-native-write-operations>`

useObject
`````````
The ``useObject()`` Hook returns a {+realm+} object for a given primary key.  It is invoked with either the class model definition (this will add types to the returned object in TypeScript) or the class name as a string and the primary key.
``useObject()`` will return null if the object doesn't exist or has been
deleted.  The Hook will automatically subscribe to updates and re-render the component using the Hook on any change to the object.

In the following example, a ``Task`` object is retrieved using the
``useObject()`` hook, and its description is logged to the console.

.. literalinclude:: /examples/generated/expo/App.codeblock.example-useobject-hook-usage.tsx
    :language: typescript

useQuery
````````
To retrieve a collection of realm objects of a given type, pass the class (or
the class name as a string) to the ``useQuery()`` hook.

In the following example, the ``Task`` class is passed to the ``useQuery()``
hook and then the tasks are set as a prop of a ``TaskList`` component. 

.. literalinclude:: /examples/generated/expo/App.codeblock.example-usequery-hook-usage.tsx
    :language: typescript

Summary
-------
- You can set up Realm Hooks on an existing application by installing it through npm, or on a new application through the Realm Expo template.
- A Realm Context opens a {+realm+} and contains a ``RealmProvider`` and a set of prebuilt Realm Hooks. 
- A ``RealmProvider`` provides access to the configured Realm using hooks, which can be used to display and modify data.
- The prebuilt Realm Hooks provide functionality like interacting with a {+realm}, and finding {+realm+} object(s).