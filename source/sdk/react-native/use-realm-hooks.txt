.. _react-native-use-realm-hooks:

===============
Use Realm Hooks
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
:npm:`Realm Hooks <package/@realm/react>` provides an easy-to-use API to perform
common Realm operations, such as querying or writing to a realm and listening to
realm objects.

Using Realm React Hooks allows you to avoid creating boilerplate code, such as
creating your own listeners and state management. Realm React Hooks provides a
set of React Hooks, which return state-aware Realm data. This means that React
components using the Realm React Hooks will re-render whenever you change the
Realm data.


.. _react-native-install-realm-react:

Install Realm React
-------------------

.. tabs::

   tabs:
     - id: use-npm-to-install-realm-hooks
       name: Install through NPM
       content: |
         To install Realm Hooks on an existing React Native application, run the
         following command in your terminal from the root of your application
         where your ``package.json`` file is located:

         .. code-block:: shell

            npm i @realm/react

     - id: use-expo-to-install-realm-hooks
       name: Install with Expo
       content: |
         If you don't have an existing application, we recommend developing with
         the :github:`Realm Expo template <expo/examples/tree/master/with-realm>`.
         The Realm Expo template allows you to bootstrap your application with
         `Expo <https://docs.expo.dev/>`_ and Realm Hooks preconfigured.

         To initialize the Realm Expo template, read the :ref:`Quick Start
         with Expo <react-native-client-quick-start-expo>` documentation.

.. _react-native-realm-context:

Create a Realm Configuration and Realm Context
----------------------------------------------

The ``createRealmContext()`` method creates a Realm :reactjs:`Context
<docs/context.html>` object that opens a realm with a given :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>`. The ``Realm Context`` object contains the following: 

- Various pre-built :reactjs:`Hooks <docs/hooks-intro.html>` that you can use to
   get access to the opened {+realm+}, query the {+realm+}, etc.
- A :reactjs:`Context Provider <docs/context.html#contextprovider>` component
   that wraps around a component, and provides any of it's child components with access
   to the hooks.

Usage
~~~~~
First, create a file where you will define a Realm object type, a Realm
configuration, and create a Realm Context. At the top of the file, import Realm
and the ``createRealmContext()`` method.

.. literalinclude:: /examples/generated/expo/Task.codeblock.add-imports-to-task.ts
    :language: typescript

Define a Realm object type is defined using a JavaScript class. The ``Task``
class below contains the following:

- A ``generate()`` method to generate ``Task`` objects with specific values that you do not want the user to override. 
- A schema

.. literalinclude:: /examples/generated/expo/Task.codeblock.create-task-class.ts
    :language: typescript

Next, create a ``Realm.Configuration`` object and set it's ``schema`` property
to the ``Task`` class you created. Pass the configuration object to the
``createRealmContext()`` method. Export the return value of
``createRealmContext()`` so you can use the ``Realm Context`` in other files.

.. literalinclude:: /examples/generated/expo/Task.codeblock.create-realm-context.ts
    :language: typescript

.. _react-native-realm-provider:

Using the Realm Provider
------------------------

.. _react-native-realm-config:

Update a Realm Configuration
----------------------------

.. _react-native-use-realm-hooks-in-child-components:

Use Realm Hooks In Child Components
-----------------------------------