.. _react-native-use-realm-react:

======================
@realm/react Reference
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

:npm:`@realm/react <package/@realm/react>` is an npm package that streamlines
common Realm operations like querying, writing to a realm, and listening to
realm objects. This reduces boilerplate code, like creating your own listeners
and state management.

``@realm/react`` provides access to Realm through a set of providers that have
various hooks. The hooks update React state when the Realm data changes.
This means that components using these hooks rerender on any changes to data
in the realm.

.. include:: /includes/note-realmreact-version-requirements-for-realmjs.rst

.. _react-native-setup-realm-hooks:

Set Up @realm/react
-------------------

To set up ``@realm/react``, start with a new `bare React Native app 
<https://reactnative.dev/docs/environment-setup#creating-a-new-application>`_ 
or use the :github:`Realm Expo template <expo/examples/tree/master/with-realm>`.

You can also install ``@realm/react`` for existing React Native apps.

Add @realm/react to a New App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can start with a new bare React Native app  or use the :github:`Realm Expo 
template <expo/examples/tree/master/with-realm>`.

The React Native SDK documentation generally assumes that you're using a bare
React Native app and not Expo.

To create a bare React Native app:

#. Follow the `React Native documentation 
   <https://reactnative.dev/docs/environment-setup#creating-a-new-application>`_.
#. Install ``@realm/react``.

   .. code-block:: shell

      npm install @realm/react

To create a new app with ``@realm/react`` and Expo, follow the :ref:`Quick Start
with Expo <react-native-client-bootstrap-with-expo>` documentation.

Add @realm/react to an Existing App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To install ``@realm/react`` on an existing React Native application, run the
following command in your terminal from the root of your application
where your ``package.json`` file is located:

.. code-block:: shell

    npm install @realm/react

.. _react-native-app-provider:

AppProvider
-----------

Components nested within ``AppProvider`` can access your App Services App
and use the ``AppProvider`` hooks.

.. include:: /includes/realm-react-provider-app.rst

Configure AppProvider
~~~~~~~~~~~~~~~~~~~~~

To set up your App client, pass the App ID string
to the ``id`` prop of the ``AppProvider``.
Wrap any components that need to access the App with the ``AppProvider``.

.. literalinclude:: /examples/generated/react-native/ts/app-provider.test.snippet.app-provider.tsx
   :language: typescript

.. include:: /includes/multiple-app-client-details-and-app-config-cache.rst

AppProvider Hooks
~~~~~~~~~~~~~~~~~

useAuth()
`````````

.. include:: /includes/realm-react-hook-auth.rst

useEmailPasswordAuth()
`````````

.. include:: /includes/realm-react-hook-emailpasswordauth.rst

.. _react-native-use-app-hook:

useApp()
````````

The ``useApp()`` hook provides access to the :js-sdk:`Realm.App <Realm.App.html>`
instance.

In the following example, we call ``useApp()`` within a ``LoginComponent``, and
then use the app instance to log in with email/password authentication.

.. TODO: change this to a table reference?

.. literalinclude:: /examples/generated/expo/LoginComponent.snippet.useApp-hook-usage.tsx
    :language: typescript
    :emphasize-lines: 1, 7, 11

.. _react-native-user-provider:

UserProvider
------------

Components nested within ``UserProvider`` can access the logged-in user object
and use the ``UserProvider`` hooks.

.. include:: /includes/realm-react-provider-user.rst

Configure UserProvider
~~~~~~~~~~~~~~~~~~~~~~

Components wrapped by :realm-react-sdk:`AppProvider <functions/AppProvider.html>`
can access the :realm-react-sdk:`useApp <functions/useApp.html>` and
:realm-react-sdk:`useAuth <functions/useAuth.html>` hooks. These components only
render if ``AppProvider`` successfully connects to your App Services backend.

Components wrapped by :realm-react-sdk:`UserProvider <functions/UserProvider.html>`
can access authenticated users with the :realm-react-sdk:`useUser 
<functions/useUser.html>` hook. These components only render if your app has an
authenticated user

To configure user authentication:

#. Wrap all components that need to access App Services in ``AppProvider``.
#. Inside of ``AppProvider``, wrap all components that you want to have access
   to an authenticated user with ``UserProvider``.
#. In ``UserProvider``, include a ``fallback`` prop with a component
   that logs a user in. The app renders this component if there
   is no authenticated user.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.configure-user-provider.tsx.rst

UserProvider Hooks
~~~~~~~~~~~~~~~~~~

.. _react-native-use-user-hook:

useUser()
`````````

The ``useUser()`` hook provides access to the logged-in user.

In the following example, we call ``useApp()`` within a ``SampleTask``
component and display the logged-in user's ``_id``.

.. literalinclude:: /examples/generated/expo/SampleSyncedTask.snippet.useUser-hook-usage.tsx
    :language: typescript
    :emphasize-lines: 1, 5, 11

.. _react-native-realm-provider:

RealmProvider
-------------

Components nested within ``RealmProvider`` can access the configured realm
and use the ``RealmProvider`` hooks.

.. include:: /includes/realm-react-provider-realm.rst

Configure RealmProvider
~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Configure realm with sync
      :tabid: configure-sync-realm
   
      Configure a synced realm using the providers from ``@realm/react``.

      By default, Realm syncs all data from the server before returning anything.
      If you want to sync data in the background, read :ref:`Configure a Synced Realm
      While Offline <react-native-open-synced-realm-offline>`.

      To configure a synced realm:

      #. Import providers from ``@realm/react``.
      #. Configure ``AppProvider``.
      #. Configure ``UserProvider`` and nest it within ``AppProvider``.
      #. Configure ``RealmProvider`` for sync and nest it within ``UserProvider``.

      You must set up a sync subscription. The example below uses an initial subscription,
      but you can also set up subscriptions in ``RealmProvider`` child components.

      This is how you nest providers:

      .. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.configure-realm-sync-full.tsx
        :language: javascript

      For for information about configuring a synced realm, refer to :ref:`
      Configure a Synced Realm <react-native-synced-realm>`.

   .. tab:: Configure realm without sync
      :tabid: configure-non-sync-realm
   
      :realm-react-sdk:`RealmProvider <functions/RealmProvider.html>` is a wrapper
      that exposes a realm to its child components. You configure your realm by
      passing props to ``RealmProvider``.

      When ``RealmProvider`` is rendered, it opens the realm. This means that the
      provider renders successfully or its child components can't access the realm.

      To configure a non-synced realm:

      #. Import ``RealmProvider`` from ``@realm/react``.
      #. Pass your object models to the ``schema`` prop.
      #. Add other :realm-react-sdk:`Configuration object <types/Realm.BaseConfiguration.html>` 
         properties as props to ``RealmProvider`` to configure your realm.

      .. literalinclude:: /examples/generated/react-native/ts/configure-realm-local.test.snippet.configure-realm.tsx
        :language: typescript


Dynamically Update the Realm Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can dynamically update the Realm configuration by setting
:reactjs:`props <docs/components-and-props.html>` on the ``RealmProvider``
component. The props you set on the ``RealmProvider`` will overwrite any
property passed into ``createRealmContext()``.

In the following example, we update the ``RealmProvider`` with a 
:realm-react-sdk:`FlexibleSyncConfiguration <types/Realm.FlexibleSyncConfiguration.html>`
and a ``fallback`` property that is used to render a temporary
``LoadingSpinner`` component while waiting for Device Sync to fully synchronize
data before opening the realm:

.. literalinclude:: /examples/generated/expo/AppWrapper.snippet.dynamically-update-realm-config.tsx
    :language: typescript

RealmProvider Hooks
~~~~~~~~~~~~~~~~~~~

.. _react-native-use-realm-hook:

useRealm()
``````````

The ``useRealm()`` hook returns the opened realm instance.

The ``handleAddTask()`` method of the ``App`` component writes to the realm
returned by the ``useRealm()`` hook in the following example.

.. literalinclude:: /examples/generated/expo/App.snippet.example-userealm-hook-usage.tsx
    :language: typescript

The :realm-react-sdk:`Realm.create() <classes/Realm-1.html#create>` call invokes
the ``Task.generate()`` method defined in the ``Task`` class.  This method
instantiates a JavaScript object with default values for the ``_id``,
``isComplete``, and ``createdAt`` properties.

To learn more about modifying Realm data, refer to :ref:`Write Transactions
<react-native-write-transactions>`.

.. _react-native-use-object-hook:

useObject()
```````````

The ``useObject()`` hook returns a Realm object for a given
:ref:`primary key <react-native-primary-keys>`. You can invoke it with the class
model definition (this will add types to the returned object in TypeScript) or
the class name as a string and the primary key. The ``useObject()`` method
returns null if the object doesn't exist or you have deleted it.  The hook will
automatically subscribe to updates and re-render the component using the hook on
any change to the object.

In the following example, the ``useObject()`` hook retrieves a ``Task`` object,
and its description is rendered in the UI.

.. literalinclude:: /examples/generated/expo/SampleTask.snippet.example-useobject-hook-usage.tsx
    :language: typescript

.. _react-native-use-query-hook:

useQuery()
``````````

The ``useQuery()`` hook returns a collection of realm objects of a given type.
Like ``useObject``, it is either invoked with the Object Schema class or the model
name as a string.  The ``useQuery()`` method subscribes to updates to any
objects in the collection and re-renders the component using it on any change to the query results.

In the following example, of a ``TaskList`` component, The ``Task``
class is passed to the ``useQuery()`` and the tasks are set as a ``data`` prop
of a `FlatList <https://reactnative.dev/docs/flatlist>`_ component.

.. literalinclude:: /examples/generated/expo/TaskList.snippet.tasklist-use-query-example.tsx
    :language: typescript
    :emphasize-lines: 2, 6

To learn how to render a :ref:`filtered <react-native-filter-results>` or
:ref:`sorted <react-native-sort-results>` list of tasks, read the :ref:`CRUD - Read
<react-native-read-objects>` docs.

.. TODO: clean up and figure out how to address this bit. Using default 
    RealmProvider context imported from @realm/react or creating your own
    context objects with createRealmContext().

.. _react-native-realm-context:

createRealmContext()
--------------------

The ``createRealmContext()`` method creates a :reactjs:`React Context
<docs/context.html>` object for a realm with a given
:realm-react-sdk:`Configuration <types/Realm.BaseConfiguration.html>`. The
``Context`` object contains the following: 

- A :reactjs:`Context Provider <docs/context.html#contextprovider>` component that wraps around a component and provides any of its child components with access to the hooks.
- Various pre-built :reactjs:`Hooks <docs/hooks-intro.html>` that you can use to access the opened realm, query the realm, etc.

Setup
~~~~~

We recommend creating a file where you will define a Realm object type, a Realm
configuration, and create a Realm ``Context``. At the top of the file, import
Realm and the ``createRealmContext()`` method.

.. literalinclude:: /examples/generated/expo/Task.snippet.add-imports-to-task.ts
    :language: typescript

Next, define a Object Schema using a JavaScript class. The ``Task``
class below contains the following:

- A ``generate()`` method that returns a ``Task`` insertion object that automatically sets computed values, such as ``_id`` and ``createdAt``. This insertion can be forwarded to ``realm.create`` to perform an insertion 
- A ``schema`` property that defines this Object Schema. Read the :ref:`Define a Realm Object Schema <react-native-define-a-realm-object-schema>` documentation to learn more.

.. literalinclude:: /examples/generated/expo/Task.snippet.create-task-class.ts
    :language: typescript

Finally, create a ``Realm.Configuration`` object and set its ``schema`` property
to the classes you have created. Pass the configuration object to the
``createRealmContext()`` method. Export the return value of
``createRealmContext()``, so you can use the ``Context`` object in other files.

.. literalinclude:: /examples/generated/expo/Task.snippet.create-realm-context.ts
    :language: typescript

Usage
~~~~~

Import the ``Context`` object that you created. In the example below, the
``Context`` object is called ``TaskContext`` since it refers to the Realm ``Context`` of
the Task. You can :mdn:`Destructure
<Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring>`
the ``TaskContext`` object to get its ``RealmProvider``. 

.. literalinclude:: /examples/generated/expo/AppWrapper.snippet.import-task-context.tsx
    :language: typescript

Wrap the ``RealmProvider`` around the component that you want
to give access to the configured realm. In the example below, we give the entire
app access to the realm by wrapping the ``RealmProvider`` around
the ``App`` component, which renders the application.

.. literalinclude:: /examples/generated/expo/AppWrapper.snippet.wrap-app-within-realm-provider.tsx
    :language: typescript
