.. _react-native-use-realm-react:

======================
@realm/react Reference
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

:npm:`@realm/react <package/@realm/react>` is an npm package that streamlines
common Realm operations like querying, writing to a realm, and listening to
realm objects. This reduces boilerplate code, like creating your own listeners
and state management.

``@realm/react`` provides access to Realm through a set of providers that have
various hooks. The hooks update React state when the Realm data changes.
This means that components using these hooks rerender on any changes to data
in the realm.

.. include:: /includes/note-realmreact-version-requirements-for-realmjs.rst

.. _react-native-setup-realm-hooks:

Set Up @realm/react
-------------------

To set up ``@realm/react``, start with a new `bare React Native app 
<https://reactnative.dev/docs/environment-setup#creating-a-new-application>`_ 
or use the :github:`Realm Expo template <expo/examples/tree/master/with-realm>`.

You can also install ``@realm/react`` for existing React Native apps.

Add @realm/react to a New App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can start with a new bare React Native app  or use the :github:`Realm Expo 
template <expo/examples/tree/master/with-realm>`.

The React Native SDK documentation generally assumes that you're using a bare
React Native app and not Expo.

To create a bare React Native app:

#. Follow the `React Native documentation 
   <https://reactnative.dev/docs/environment-setup#creating-a-new-application>`_.
#. Install ``@realm/react``.

   .. code-block:: shell

      npm install @realm/react

To create a new app with ``@realm/react`` and Expo, follow the :ref:`Quick Start
with Expo <react-native-client-bootstrap-with-expo>` documentation.

Add @realm/react to an Existing App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To install ``@realm/react`` on an existing React Native application, run the
following command in your terminal from the root of your application
where your ``package.json`` file is located:

.. code-block:: shell

    npm install @realm/react

.. _react-native-realm-provider:

RealmProvider
-------------

Type signature: *RealmProvider(props, context?): null | ReactElement<any, any>* 

Components nested within ``RealmProvider`` can access the configured realm
and use the ``RealmProvider`` hooks.

.. include:: /includes/realm-react-provider-realm.rst

Configure RealmProvider
~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Configure realm with sync
      :tabid: configure-sync-realm
   
      Configure a synced realm using the providers from ``@realm/react``.

      By default, Realm syncs all data from the server before returning anything.
      If you want to sync data in the background, read :ref:`Configure a Synced Realm
      While Offline <react-native-open-synced-realm-offline>`.

      To configure a synced realm:

      #. Import providers from ``@realm/react``.
      #. Configure ``AppProvider``.
      #. Configure ``UserProvider`` and nest it within ``AppProvider``.
      #. Configure ``RealmProvider`` for sync and nest it within ``UserProvider``.

      You must set up a sync subscription. The example below uses an initial subscription,
      but you can also set up subscriptions in ``RealmProvider`` child components.

      This is how you nest providers:

      .. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.configure-realm-sync-full.tsx
        :language: javascript

      For for information about configuring a synced realm, refer to
      :ref:`Configure a Synced Realm <react-native-synced-realm>`.

   .. tab:: Configure realm without sync
      :tabid: configure-non-sync-realm
   
      :realm-react-sdk:`RealmProvider <functions/RealmProvider.html>` is a wrapper
      that exposes a realm to its child components. You configure your realm by
      passing props to ``RealmProvider``.

      When ``RealmProvider`` is rendered, it opens the realm. This means that the
      provider renders successfully or its child components can't access the realm.

      To configure a non-synced realm:

      #. Import ``RealmProvider`` from ``@realm/react``.
      #. Pass your object models to the ``schema`` prop.
      #. Add other :realm-react-sdk:`Configuration object <types/Realm.BaseConfiguration.html>` 
         properties as props to ``RealmProvider`` to configure your realm.

      .. literalinclude:: /examples/generated/react-native/ts/configure-realm-local.test.snippet.configure-realm.tsx
        :language: typescript

Configure More Than One Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you import ``RealmProvider`` from ``@realm/react``, that provider has a
specific context and is associated with a single realm. If you need to configure
more than one realm, use ``createRealmContext()`` to instantiate a new provider
for each realm.

If you import ``useRealm()``, ``useQuery()``, or ``useObject()`` directly from
``@realm/react``, those hooks use the default realm context. To work with more
than one realm, you need to destructure a new realm provider and its associated
hooks from the result of ``createRealmContext()``. You should namespace providers
to avoid confusion about which provider and hooks you're working with.

For a detailed guide, refer to :ref:`Expose more than one realm 
<react-native-expose-multiple-realms>`.

For a details about ``createRealmContext()``, refer to :ref:`createRealmContext() 
<react-native-realm-context>` on this page.

RealmProvider Hooks
-------------------

.. _react-native-use-realm-hook:

useRealm()
~~~~~~~~~~

Type signature: *useRealm(): Realm* 

The ``useRealm()`` hook returns an opened realm instance. The realm instance
gives you access to realm methods and properties. For example, you can call
``realm.write()`` to add a realm object to your realm.

.. literalinclude:: /examples/generated/react-native/ts/create-test.test.snippet.crud-create-object.tsx
   :language: typescript
   :emphasize-lines: 3, 6-8, 15

To learn more about modifying Realm data, refer to :ref:`Write Transactions
<react-native-write-transactions>`.

.. _react-native-use-object-hook:

useObject()
~~~~~~~~~~~

Type signature: *useObject<T>(type, primaryKey): T & Realm.Object<T> | null* 

The ``useObject()`` hook returns a Realm object for a given
:ref:`primary key <react-native-primary-keys>`. You can pass an object class
or the class name as a string and the primary key.

The ``useObject()`` method returns null if the object doesn't exist or you have
deleted it. The hook will automatically subscribe to updates and rerender the
component using the hook on any change to the object.

.. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-object-by-id.tsx
         :language: typescript

.. _react-native-use-query-hook:

useQuery()
~~~~~~~~~~

Type signature: *useQuery<T>(type, query?, deps?): Realm.Results<T & Realm.Object<T>>* 

The ``useQuery()`` hook returns a collection of realm objects of a given type.
These are the results of your query. A query can be an object class or the class
name as a string.

The ``useQuery()`` method subscribes to updates to any objects in the collection
and rerenders the component using it on any change to the results.

You can use ``.filtered()`` and ``.sorted()`` to filter and sort your query
results. For more details, refer to the :ref:`CRUD - Read 
<react-native-read-objects>` docs.

.. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-filter-data.tsx
    :language: typescript
    :emphasize-lines: 4-6, 8-14

.. _react-native-app-provider:

AppProvider
-----------

Type signature: *AppProvider(props, context?): null | ReactElement<any, any>* 

Components nested within ``AppProvider`` can access your App Services App
and use the ``AppProvider`` hooks.

.. include:: /includes/realm-react-provider-app.rst

Configure AppProvider
~~~~~~~~~~~~~~~~~~~~~

To set up your App client, pass the App ID string
to the ``id`` prop of the ``AppProvider``.
Wrap any components that need to access the App with the ``AppProvider``.

.. literalinclude:: /examples/generated/react-native/ts/app-provider.test.snippet.app-provider.tsx
   :language: typescript

.. include:: /includes/multiple-app-client-details-and-app-config-cache.rst

AppProvider Hooks
-----------------

useAuth()
~~~~~~~~~

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useAuth(): UseAuth

result
``````

Type signature:

.. code:: typescript
   :copyable: false
   :caption: Type signature

   result: AuthResult

Result of authentication hook operation. For example, ``result.operation`` gives
you the name of the current operation.

**Values**

- ``state``. Can be "not-started", "pending", "success", "error".
- ``operation``. For a list of all operation names, refer to the
  :realm-react-sdk:`API documentation <enums/AuthOperationName.html>`.
- ``pending``. Can be ``true`` or ``false``.
- ``success``. Can be ``true`` or ``false``.
- ``error``. Error-based object or undefined.

logIn(credentials)
``````````````````

Type signature:

.. code:: typescript
   :copyable: false
   :caption: Type signature

   logIn(credentials: Realm.Credentials): void

Logs in a user with any authentication mechanism supported by
Realm. If called when a user is logged in, the current user switches to
the new user. Usually, it's better to use the more specific login
methods.

.. code:: typescript

  const {logIn, result} = useAuth();

  useEffect(() => logIn(Realm.Credentials.anonymous()), []);

  if(result.pending) {
    return (<LoadingSpinner/>)
  }

  if(result.error) {
    return (<ErrorComponent/>)
  }

  if(result.success) {
    return (<SuccessComponent/>)
  }
  //...

**Parameters**

- ``credentials``. A Realm credential supplied by any supported Realm
  authentication.

**Returns**

``void``

useEmailPasswordAuth()
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/realm-react-hook-emailpasswordauth.rst

.. _react-native-use-app-hook:

useApp()
~~~~~~~~

Type signature: *useApp<FunctionsFactoryType, CustomDataType>(): Realm.App<FunctionsFactoryType, CustomDataType>* 

The ``useApp()`` hook provides access to the :js-sdk:`Realm.App <Realm.App.html>`
instance.

.. literalinclude:: /examples/generated/react-native/ts/use-app.test.snippet.use-app.tsx
   :language: typescript

.. _react-native-user-provider:

UserProvider
------------

Type signature: *UserProvider(props, context?): null | ReactElement<any, any>* 

Components nested within ``UserProvider`` can access the logged-in user object
and use the ``UserProvider`` hooks.

.. include:: /includes/realm-react-provider-user.rst

Configure UserProvider
~~~~~~~~~~~~~~~~~~~~~~

Components wrapped by :realm-react-sdk:`AppProvider <functions/AppProvider.html>`
can access the :realm-react-sdk:`useApp <functions/useApp.html>` and
:realm-react-sdk:`useAuth <functions/useAuth.html>` hooks. These components only
render if ``AppProvider`` successfully connects to your App Services backend.

Components wrapped by :realm-react-sdk:`UserProvider <functions/UserProvider.html>`
can access authenticated users with the :realm-react-sdk:`useUser 
<functions/useUser.html>` hook. These components only render if your app has an
authenticated user

To configure user authentication:

#. Wrap all components that need to access App Services in ``AppProvider``.
#. Inside of ``AppProvider``, wrap all components that you want to have access
   to an authenticated user with ``UserProvider``.
#. In ``UserProvider``, include a ``fallback`` prop with a component
   that logs a user in. The app renders this component if there
   is no authenticated user.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.configure-user-provider.tsx.rst

UserProvider Hooks
------------------

.. _react-native-use-user-hook:

useUser()
~~~~~~~~~

Type signature: *useUser<FunctionsFactoryType, CustomDataType, UserProfileDataType>(): Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>* 

The ``useUser()`` hook provides access to the logged-in user. For example,
you can use ``useUser()`` to log the current user out.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.log-user-out.tsx.rst

.. _react-native-realm-context:

createRealmContext()
--------------------

Type signature: *createRealmContext(realmConfig?): RealmContext* 

Most of the time, you will only use ``createRealmContext()`` if you need to
configure more than one realm. Otherwise, you should import``RealmProvider``
and hooks directly from ``@realm/react``.

The ``createRealmContext()`` method creates a :reactjs:`React Context
<docs/context.html>` object for a realm with a given
:realm-react-sdk:`Configuration <types/Realm.BaseConfiguration.html>`. The
``Context`` object contains the following: 

- A :reactjs:`Context Provider <docs/context.html#contextprovider>` (referred to
  as ``RealmProvider`` elsewhere) component that wraps around a child components
  and provides them with access to hooks.
- Various prebuilt :reactjs:`Hooks <docs/hooks-intro.html>` that access the
  configured realm.

For a detailed guide, refer to :ref:`Expose more than one realm 
<react-native-expose-multiple-realms>`.
