.. _react-native-sync-changes-between-devices:

===============================================
Sync Changes Between Devices - React Native SDK
===============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _react-native-open-a-synced-realm:

Open a Synced Realm
-------------------
To open a synced {+realm+}, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.


.. example::

   In the following example, a synced {+realm+} is opened with a :doc:`schema
   </sdk/react-native/examples/define-a-realm-object-model>` value of a predefined
   ``TaskSchema`` ``SyncConfiguration`` object that uses the currently logged in
   user  and a partition value of "MyPartition".

   .. literalinclude:: /examples/SyncChanges/open-a-synced-realm.js
      :language: javascript


.. _react-native-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------
You may want to sync changes in the background to display partial data to the
user while the synced {+realm+} downloads data from the server, preventing the
user experience from being blocked. We recommend syncing changes in the
background for applications in which the user's device may go offline. To sync
changes in the background, open a synced {+realm+} synchronously.

Create a :js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` object and set its
``type`` to ``"openImmediately"``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-sync-changes-in-the-background-create-OpenRealmBehaviorObject.js
      :language: javascript

Create a :js-sdk:`Configuration <Realm.html#~Configuration>` object, which must
include the ``sync`` property defining a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>` object. Set this
``OpenRealmBehaviorConfiguration`` object as the value for
the ``newRealmFileBehavior`` and ``existingRealmFileBehavior`` fields of the
``SyncConfiguration``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-sync-changes-in-the-background-create-config.js
      :language: javascript

Finally,  call :js-sdk:`Realm.open() <Realm.html#.open>`
to open a synced {+realm+}. This will create a sync session and begin
downloading any existing data from the server in the background.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-sync-changes-in-the-background-open-realm.js
      :language: javascript


.. warning:: Read-only Realms Must Not Be Synced in the Background

   If a {+realm+} has read-only {+realm+} level permissions, then you must
   asynchronously open the {+realm+}. Opening a file-level read-only {+realm+}
   without the asynchronous API will cause an error if your session is online.
   Synced realms are opened asynchronously by default. Learn how to :ref:`open a
   synced {+realm+} <react-native-open-a-synced-realm>`.

.. _react-native-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------
You can pause synchronization using the :js-sdk:`syncSession.pause()
<Realm.App.Sync.Session.html#~pause>` method. To resume synchronization, use the
:js-sdk:`syncSession.resume() <Realm.App.Sync.Session.html#~resume>` method

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-pause-or-resume-sync-session.js
   :language: javascript

.. _react-native-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------
To check the upload and download progress for a sync session, add a progress
notification using the :js-sdk:`syncSession.addProgressNotification() <Realm.App.Sync.Session.html#.addProgressNotification>` method.

The ``syncSession.addProgressNotification()`` method takes in the following three parameters:

- A ``direction`` parameter that can be set to ``"upload"`` or ``"download"`` to register notifications for either event.
- A ``mode`` parameter that can be set to ``"reportIndefinitely"`` (for the notifications to continue until the callback is unregistered using the :js-sdk:`syncSession.removeProgressNotification() <Realm.App.Sync.Session.html#.removeProgressNotification>` method), or ``"forCurrentlyOutstandingWork"`` (for the notifications to continue until only the currently transferable bytes are synced).
- A callback parameter with the arguments ``transferred`` and ``transferable``, representing the current number of bytes already transferred and the number of transferable bytes (the number of bytes already transferred plus the number of bytes pending transfer), respectively.

.. example::

   In the following example, an application developer registers a callback on the ``syncSession`` to
   listen for upload events indefinitely. The developer writes to the realm and
   then unregisters the ``syncSession`` notification callback. 

   .. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-check-upload-and-download-progress.js
      :language: javascript


.. _react-native-check-network-connection:

Check the Network Connection
----------------------------
To check the current state of the connection to the server, call the
:js-sdk:`syncSession.connectionState()
<Realm.App.Sync.Session.html#.connectionState>` method.

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't need to
   check the current network connection state. That said, the
   ``syncSession.connectionState()`` method is available if your app needs to
   gets the current state of the connection to the server.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-check-network-connection.js
   :language: javascript

.. _react-native-set-the-client-log-level:

Set the Client Log Level
------------------------
You can set the {+realm+} Sync client :js-sdk:`log level
<Realm.App.Sync.html#~LogLevel>` by calling
:js-sdk:`Realm.App.Sync.setLogLevel() <Realm.App.Sync.html#.setLogLevel>` with
your :js-sdk:`Realm.App <Realm.App.html>`.

.. example::

   In the following example, an application developer sets the sync client
   log level to ``"debug"``.

   .. literalinclude:: /examples/SyncChanges/set-log-level.js
      :language: javascript

.. include:: /includes/tip-sync-log-levels.rst

.. _react-native-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------
To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing() <Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`. 

.. warning::

   Only use session multiplexing if you see errors about reaching the file descriptor limit,
   and you know you are using many sync sessions.

.. example::
   
   .. literalinclude:: /examples/SyncChanges/enable-session-multiplexing.js
      :language: javascript

.. _react-native-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses {+sync+}, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

Set an error handler by registering an error callback as part of the :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.


.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-handle-sync-errors.js
   :language: javascript

.. _react-native-perform-a-client-reset:

Perform a Client Reset
----------------------

You can customize behavior in the event of a :ref:`client reset
<react-native-client-resets>` error with a custom error handler function:

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-perform-a-client-reset.js
   :language: javascript

.. tip::

   To see how to recover unsynced local changes in a client reset, check out
   this :github:`example on GitHub
   <mongodb/realm-practice/blob/main/react-native/App.js#L85>`.
