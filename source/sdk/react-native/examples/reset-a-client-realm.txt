.. _react-native-client-resets:

=======================================
Reset a Client Realm - React Native SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. seealso:: Learn More About Client Resets

   To learn about the causes of and strategies for handling client
   resets, check out the Sync :ref:`Client Resets <client-resets>` page.

A **client reset error** is a scenario where a client realm cannot sync
data with the application backend. Clients in this state may continue to
run and save data locally but cannot send or receive sync changesets
until they perform a client reset strategy.

You can handle client resets in your application using one of the
available **client reset strategies**:

- :ref:`Discard Unsynced Changes <react-native-discard-unsynced-changes>`:
  Restores the realm to a syncable state by discarding changes made
  since the last sync.

- :ref:`Manually Recover Unsynced Changes <react-native-manually-recover-unsynced-changes>`:
  Downloads a new copy of the realm, and moves the unsyncable realm
  to a backup. Migrate unsynced data from the backup copy of the
  realm to the new syncable copy.


.. _react-native-discard-unsynced-changes:

Discard Unsynced Changes
------------------------

.. versionadded:: 10.11.0

The **discard unsynced changes** client reset strategy helps you perform
a client reset with minimal code and minimal disruption to your application
workflow. This strategy restores your local realm to a syncable state without
closing the realm or missing notifications.

This strategy comes with a downside: it permanently deletes all
local unsynced changes made since the last successful sync of the realm.
Do not use the "discard unsynced changes" strategy if your application
cannot lose data already written to the client realm file but not yet
synced to the backend.

The "discard unsynced changes" strategy can handle every kind of client
reset error *except* for client resets triggered by
:ref:`breaking schema changes <destructive-changes-synced-schema>`.
If your application experiences a breaking schema change, this strategy
falls back to a mode that mimics the "manually recover unsynced changes"
strategy.

To handle client resets with the "discard unsynced changes" strategy, 
pass a :js-sdk:`ClientResetConfiguration <Realm.App.Sync.html#~ClientResetConfiguration>`
to the ``clientReset`` field of your
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`. 
Include these properties in the ClientResetConfiguration: 

- ``mode``: Set to ``"discardLocal"``.
- ``clientResetBefore()``: Optional. Callback function invoked before the SDK executes this strategy,
  when the SDK receives a client reset error from the backend. 
  Provides a copy of the realm. 
- ``clientResetAfter()``: Optional. Callback function invoked after the SDK successfully
  executes this strategy. Provides instances of the realm 
  before and after the client reset.

The following example implements this strategy:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes.js
   :language: javascript

.. _react-native-discard-unsynced-changes-after-breaking-schema-changes:

Discard Unsynced Changes after Breaking Schema Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/destructive-schema-change-app-update.rst

If your application experiences a breaking schema change, the "discard
unsynced changes" strategy cannot handle the resulting client reset
automatically. Instead, you must provide a manual client reset
implementation in the SyncConfiguration ``error()`` callback. The following
example demonstrates how you can manually handle this error case by
discarding all unsynced changes:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes-after-destructive-schema-changes.js
   :language: javascript

.. _react-native-manually-recover-unsynced-changes:

Manually Recover Unsynced Changes
---------------------------------

Manual recovery requires significant amounts of code, schema concessions,
and custom conflict resolution logic. To learn more about the **manually
recover unsynced changes** client reset strategy, see the
:ref:`Advanced Guide to Manual Client Reset Data Recovery
<react-native-advanced-manual-client-reset-data-recovery>`.
