.. _react-native-use-listeners-in-components:

=====================================================
Use Change Listeners In Components - React Native SDK
=====================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------
You can copy your {+service-short+} objects to your component's :reactjs:`state
<docs/state-and-lifecycle.html>`. However, since {+service-short+} objects are
live and automatically update in response to changes, you must update the copies
of them to prevent your UI from being out of date. You can do this by
registering a change listener in your component and updating the state variable
when that listener fires.  


.. warning::

   Failing to update copies of {+realm+} objects leads to your UI being out of date. 

Adding Change Listeners to Functional Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Declare a state variable for your {+service-short+} objects using the
:reactjs:`useState() <docs/hooks-state.html>` hook. Within a
:reactjs:`useEffect() <docs/hooks-effect.html>` hook, set state to the initial
value of your objects and then declare a change listener on the {+service-short+} objects.

Finally, return an anonymous cleanup function that you can use to remove the
change listener and close the realm. React.js will call this cleanup function when
the component unmounts.

.. literalinclude:: /examples/generated/rn/using-change-listeners-functional-component.codeblock.using-change-listeners-functional-component.js
   :language: javascript
   :emphasize-lines: 4, 13-17, 29-35
