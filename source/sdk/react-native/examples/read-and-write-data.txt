.. _react-native-read-and-write-data:

====================================
Read & Write Data - React Native SDK
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About the Examples on this Page
-------------------------------
The examples on this page use the following schemas:

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-data-schemas.js
  :language: javascript

.. _react-native-read-operations:

Read Operations
---------------

.. _react-native-find-a-specific-object-by-primary-key:

Find a Specific Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you know the :ref:`primary key <react-native-primary-keys>` for a given object, you
can look it up directly with :js-sdk:`Realm.objectForPrimaryKey()
<Realm.html#objectForPrimaryKey>`.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-data-object-for-primary-key.js
  :language: javascript

.. _react-native-query-an-object-type:
.. _react-native-get-all-objects:

Query an Object Type
~~~~~~~~~~~~~~~~~~~~

To query for objects of a given type in a {+realm+}, pass the type name to
:js-sdk:`Realm.objects() <Realm.html#objects>`.

Query operations return a collection of {+service-short+} objects that match the
query as a :js-sdk:`Realm.Results <Realm.Results.html>` object. A basic query
matches all objects of a given type in a {+realm+}, but you can also apply a
:ref:`filter <react-native-filter-queries>` to the collection to find specific objects.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-data-query-an-object-type.js
  :language: javascript

.. _react-native-filter-queries:
.. _react-native-filter-results:

Filter Queries
~~~~~~~~~~~~~~

A **filter** selects a subset of results based on the value(s) of one or more
object properties. {+client-database+} provides a full-featured :ref:`query
engine <react-native-client-query-engine>` that you can use to define filters.

To filter a query, call the :js-sdk:`filtered()
<Realm.Collection.html#filtered>` method on the query results collection.

.. example::

   In the following example, we use the :ref:`query engine
   <react-native-client-query-engine>`'s comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` property falls within a certain range.

   .. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-filter-queries.js
     :language: javascript

.. tip:: Filter on Related and Embedded Object Properties
   
   To filter a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-client-relationships>`, use dot-notation as if it were in a regular,
   nested object.

.. _react-native-sort-query-results:
.. _react-native-sort-results:

Sort Query Results
~~~~~~~~~~~~~~~~~~

A **sort** operation allows you to configure the order in which
{+client-database+} returns queried objects. You can sort based on one or more
properties of the objects in the results collection. {+client-database+} only
guarantees a consistent order of results if you explicitly sort them.

To sort a query, call the :js-sdk:`sorted() <Realm.Collection.html#sorted>`
method on the query results collection.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-sorted-queries.js
  :language: javascript
  :emphasize-lines: 4, 6, 8, 13

.. tip:: Sort on Related and Embedded Object Properties
   
   To sort a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-client-relationships>`, use dot-notation as if it were in a regular,
   nested object.

.. .. _react-native-aggregate-data:

.. Aggregate Data
.. ~~~~~~~~~~~~~~

.. _react-native-write-operations:

Write Operations
----------------

.. _react-native-create-a-new-object:

Create a New Object
~~~~~~~~~~~~~~~~~~~

To add an object to a {+realm+}, instantiate it as you would any other object
and then pass it to :js-sdk:`Realm.create() <Realm.html#create>` inside of a
write transaction. If the {+realm+}'s :ref:`schema <react-native-realm-schema>` includes
the object type and the object conforms to the schema, then {+service-short+}
stores the object, which is now *managed* by the {+realm+}.
   
.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-create-a-new-object.js
  :language: javascript
  :emphasize-lines: 6

.. _react-native-update-an-object:

Update an Object
~~~~~~~~~~~~~~~~

You can add, modify, or delete properties of a {+service-short+} object inside
of a write transaction in the same way that you would update any other
JavaScript object.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-update-an-object.js
  :language: javascript
  :emphasize-lines: 7, 8

.. tip:: Update Related and Embedded Objects
   
   To update a property of an :ref:`embedded object <react-native-embedded-objects>` or
   a :ref:`related object <react-native-client-relationships>`, modify the property with
   :mdn:`dot-notation or bracket-notation
   <Web/JavaScript/Reference/Operators/Property_accessors>` as if it were in a
   regular, nested object.

.. _react-native-upsert-an-object:

Upsert an Object
~~~~~~~~~~~~~~~~

To upsert an object, call :js-sdk:`Realm.create() <Realm.html#create>` with the
update mode set to ``modified``. The operation either inserts a new object with
the given primary key or updates an existing object that already has that
primary key.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-upsert-an-object.js
  :language: javascript
  :emphasize-lines: 4, 13

.. _react-native-update-a-collection:
.. _react-native-bulk-update:

Bulk Update a Collection
~~~~~~~~~~~~~~~~~~~~~~~~

To apply an update to a collection of objects, iterate through the collection
(e.g. with :mdn:`forEach()
<Web/JavaScript/Reference/Global_Objects/Array/forEach>`). In the iterator
callback, update each object individually:

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-bulk-update.js
  :language: javascript
  :emphasize-lines: 7, 9

.. note:: Inverse Relationships

   Thanks to an :ref:`inverse relationship <react-native-inverse-relationship>` from
   ``Dog.owner`` to ``Person.dogs``, {+client-database+} automatically updates
   Ali's list of dogs whenever we set her as a puppy's owner.

.. _react-native-delete-an-object:
.. _react-native-delete:

Delete an Object
~~~~~~~~~~~~~~~~

To delete an object from a {+realm+}, pass the object to :js-sdk:`Realm.delete()
<Realm.html#delete>` inside of a write transaction.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-delete-object.js
  :language: javascript
  :emphasize-lines: 3

.. important:: Do not use objects after delete
   
   You cannot access or modify an object after you have deleted it from a Realm.
   If you try to use a deleted object, {+client-database+} throws an error.

.. _react-native-delete-multiple-objects:
.. _react-native-delete-collection:

Delete Multiple Objects
~~~~~~~~~~~~~~~~~~~~~~~

To delete a collection of objects from a {+realm+}, pass the collection to
:js-sdk:`Realm.delete() <Realm.html#delete>` inside of a write transaction.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-delete-multiple-objects.js
  :language: javascript
  :emphasize-lines: 5

.. _react-native-delete-all-object-of-a-specific-type:

Delete All Objects of a Specific Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To delete all objects of a given object type from a {+realm+}, pass
``Realm.objects(<ObjectType>)`` to the :js-sdk:`Realm.delete()
<Realm.html#delete>` method inside of a write transaction.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-delete-all-objects-of-a-specific-type.js
  :language: javascript
  :emphasize-lines: 3

.. _react-native-delete-all-objects-in-a-realm:

Delete All Objects in a Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To delete **all** objects from the {+realm+}, call :js-sdk:`Realm.deleteAll()
<Realm.html#deleteAll>` inside of a write transaction. This clears the {+realm+}
of all object instances but does not affect the {+realm+}'s schema.

.. literalinclude:: /examples/generated/node/read-and-write-data.codeblock.read-and-write-delete-all.js
  :language: javascript
  :emphasize-lines: 3

.. tip:: Delete All In Development
   
   :js-sdk:`Realm.deleteAll() <Realm.html#deleteAll>` is a useful method to
   quickly clear out your {+realm+} in the course of development. For example,
   rather than writing a migration to update objects to a new schema, it may be
   faster to delete and then re-generate the objects with the app itself.
