.. _react-native-using-listeners-in-components:

============================================================
Using Change Listeners In Your Components - React Native SDK
============================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------
You can copy our {+realm+} objects to our component's :reactjs:`state
<docs/state-and-lifecycle.html>`.  However, since {+realm+} objects are live and
automatically update in response to changes, you must also update the copy of
{+realm+} objects in state. You can do this by registering a change listener in
your component and updating the state variable when that listener fires.  

.. warning::

   Failing to update copies of {+realm+} objects leads to your UI being out of date. 

Adding Change Listeners to Functional Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Declare a state variable for your {+realm+} objects using the
:reactjs:`useState() <docs/hooks-state.html>` hook. Within a
:reactjs:`useEffect() <docs/hooks-effect.html>` hook, set state to the initial
value of your objects and then declare a change listener on the {+realm+} objects.

Finally, return an anonymous cleanup function that you can use to remove the
change listener and close the realm. Reactjs will call this cleanup function when
the component unmounts.

.. literalinclude:: /examples/generated/rn/using-change-listeners-functional-component.codeblock.using-change-listeners-functional-component.js
   :language: javascript
   :emphasize-lines: 4, 13-17, 29-35

Adding Change Listeners to Class Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In your component's constructor, create a :reactjs:`ref
</refs-and-the-dom.html#creating-refs>` to store your {+realm+} instance. When
the value of the {+realm+} changes, the component will not re-render, as it would
with a state variable. Declare a state variable to store your {+realm+} objects.

Within your :reactjs:`componentDidMount()
<react-component.html#componentdidmount>` method, set state to the initial value
of your objects and then declare a change listener on the {+realm+} objects.

Finally, within your :reactjs:`componentWillUnmount()
<react-component.html#componentwillunmount>` method, remove the listener and
close the {+realm+}.

.. literalinclude:: /examples/generated/rn/using-change-listeners-class-component.codeblock.using-change-listeners-class-component.js
   :language: javascript
   :emphasize-lines: 13, 22-25, 38-49