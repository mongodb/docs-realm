.. _react-native-read-write-data:

====================================
Read & Write Data - React Native SDK
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _react-native-realm-database-writes:
.. _react-native-write-transactions:

Within a ``<RealmProvider>``, you can access a realm with
the ``useRealm()`` hook. Then, you can create Realm objects
using a :js-sdk:`Realm.write() <Realm.html#write>` transaction block.

All operations within a write transaction are :wikipedia:`atomic <Atomicity_(database_systems)>`.
If an operation in the write transaction fails, the whole transaction fails,
Realm throws an error, and no changes from the transaction block are applied to the realm.

Every write operation must occur in a write transaction.

.. literalinclude:: /examples/generated/react-native/ts/create-test.snippet.crud-create-object.tsx
  :language: typescript
  :emphasize-lines: 6-8

Transaction Lifecycle
---------------------

A given realm only processes one write transaction at a time. When you 
make a write transaction, the realm adds the transaction to a queue. The 
realm evaluates each transaction in the order it arrived.

After processing a transaction, Realm Database either **commits** it or
**cancels** it:

- After a **commit**, the realm applies all operations in the transaction. 
  Once applied, the realm automatically updates :ref:`live queries
  <react-native-live-queries>`. It notifies listeners of created, modified, 
  and deleted objects.
     
  - When using :ref:`Sync <sync>`, the SDK also queues
    the changes to send to Atlas App Services. The SDK sends
    these changes when a network is available.

  - After a commit, objects and collections returned by ``useQuery`` or 
    ``useObject`` rerender to include relevant changes.

- Realm Database does not apply any operations in a **cancelled**
  transaction. Realm Database cancels a transaction if an operation 
  fails or is invalid.

Write operations
----------------

.. _react-native-create-objects:

Create
~~~~~~

The example in this section uses the following schema:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Dog.snippet.ts-dog-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/Dog.snippet.js-dog-schema.js
         :language: javascript

.. _react-native-create-a-new-object:

Create a New Object
```````````````````

To add a new Realm object to a realm instance, use :js-sdk:`realm.create()
<Realm.html#create>` inside of a write transaction. If the
:ref:`schema <react-native-realm-schema>` includes the object type and the
object conforms to the schema, then Realm Database stores the object.

In the following example of a ``CreateDogInput`` component, we:

#. Get access to an opened realm instance by calling the ``useRealm()`` hook within the component. 
#. Create a component method ``handleAddItem()`` that performs a :ref:`write transaction <react-native-write-transactions>`, and creates a new ``Dog`` :js-sdk:`object <Realm.Object.html>` based on the TextInput value.
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the submit button that calls ``handleAddItem()`` 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/create-test.snippet.crud-create-object.tsx
        :language: typescript
        :emphasize-lines: 3, 6-8
        :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/create-test.snippet.crud-create-object.jsx
         :language: javascript
         :emphasize-lines: 3, 6-8
         :linenos:

.. _react-native-read-objects:

Read
~~~~

The examples in this section use the following schemas:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Person.snippet.ts-person-schema.ts
         :language: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Task.snippet.ts-task-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Person.snippet.js-person-schema.js
         :language: javascript

      .. literalinclude:: /examples/generated/react-native/js/Task.snippet.js-task-schema.js
         :language: typescript


.. _react-native-read-operations:

Read operations are queries to find your data stored in Realm Database. Use the
following ``@realm/react`` hooks to read data in a realm:

- ``useObject()``: Find a specific object by primary key.
- ``useQuery()``: Get a collection of objects by object type.

These hooks return live objects, which are automatically updated when the data in the realm changes. When objects returned by these hooks are updated,
the component calling the hook rerenders.

.. _react-native-find-a-specific-object-by-primary-key:

Find a Specific Object by Primary Key
`````````````````````````````````````

If you know the :ref:`primary key <react-native-primary-keys>` for a given
object, you can look it up directly by passing the class type and primary key to
the ``useObject()`` hook. 

In the following example of a ``TaskItem`` component, we use the ``useObject()``
hook to find a task based on its primary key: ``_id``. Then we render the task's
name and priority in the UI.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-object-by-id.tsx
         :language: typescript
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-object-by-id.jsx
         :language: javascript
         :linenos:

.. _react-native-query-an-object-type:
.. _react-native-get-all-objects:
.. _react-native-filter-queries:
.. _react-native-filter-results:

Query for an Object Type and Filter Results
```````````````````````````````````````````

The ``useQuery()`` hook returns a collection of Realm objects that match the query as a
:js-sdk:`Realm.Results <Realm.Results.html>` object. A basic query matches all
objects of a given type in a realm, but you can also apply a filter to the
collection to find specific objects.

A **filter** selects a subset of results based on the value(s) of one or more
object properties. Realm Database lets you filter data using
:ref:`Realm Query Language <rql>`, a string-based query language to constrain
searches when retrieving objects from a realm.

Call :js-sdk:`filtered() <Realm.Collection.html#filtered>` on the query results
collection to filter a query. Pass a Realm Query Language query as an argument
to ``filtered()``.

In the following example of a ``TaskList`` component, we:

#. Obtain all ``Task`` objects by passing "Task" to the ``useQuery()`` hook.
#. Obtain all high-priority tasks and low-progress task by passing a query to ``filtered()``.
#. Use the map function to render a list of Text components displaying information about the high-priority and low-progress tasks.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-filter-data.tsx
         :language: typescript
         :emphasize-lines: 3, 6, 9-11
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-filter-data.jsx
         :language: javascript
         :emphasize-lines: 3, 6, 9-11
         :linenos:

.. tip:: Filter on Related and Embedded Object Properties

   To filter a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-relationships>`, use dot-notation as if it were in a regular,
   nested object.

.. seealso::

   - :ref:`Realm Query Language Reference <rql>`
   - :ref:`Query Data - React Native SDK <react-native-query-data>`

.. _react-native-sort-query-results:
.. _react-native-sort-results:

Query for an Object Type and Sort Results
`````````````````````````````````````````

A **sort** operation allows you to configure the order in which
Realm Database returns queried objects. You can sort based on one or more
properties of the objects in the results collection. Realm Database only
guarantees a consistent order of results if you explicitly sort them.

To sort a query, call the :js-sdk:`sorted() <Realm.Collection.html#sorted>`
method on the query results collection.

In the following example of a ``TaskList`` component, we use the ``useQuery()``
hook to initially retrieve the set of Task objects. We then use the
``sorted()`` method to work with the data in various ways:

#. Sort objects based on the task's name alphabetically.
#. Sort objects based on the task's name alphabetically in descending order.
#. Sort objects based on the task's priority in descending order and the task's name in ascending order.
#. Sort objects based on the assignee object's name alphabetically.

Finally, we map through each list of tasks and render them in the UI.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-sort-data.tsx
         :language: typescript
         :emphasize-lines: 3, 5, 7, 9-12
         :linenos:
          
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-sort-data.jsx
         :language: javascript
         :emphasize-lines: 3, 5, 7, 9-12
         :linenos:

.. tip:: Sort on Related and Embedded Object Properties
   
   To sort a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-relationships>`, use dot-notation as if it were in a
   regular, nested object.

.. _react-native-update-objects:

Update
~~~~~~

The examples on this page use the following schema:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Task.snippet.ts-task-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Task.snippet.js-task-schema.js
         :language: javascript

.. _react-native-update-an-object:

Update an Object
````````````````

You can add, modify, or delete properties of a Realm object in the same way that
you would update any other JavaScript object. But, you must do it inside of a
:ref:`write transaction <react-native-write-transactions>`.

In the following example of a ``TaskItem`` component, we:

#. Get access to the opened realm instance by calling the ``useRealm()`` hook within the component. 
#. Retrieve a task by calling ``useObject()`` with "Task" and the ``_id`` parameter of the component.
#. Create a component method ``incrementTaskProgress()`` that performs a write transaction and increments the task's ``progressMinutes``.
#. Render the task's ``name`` and ``progressMinutes`` in the UI.
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the "increment" button that calls ``incrementTaskProgress()``.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/update-test.snippet.crud-update-object.tsx
         :language: typescript
         :emphasize-lines: 2-3, 7-9
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/update-test.snippet.crud-update-object.jsx
         :language: javascript
         :emphasize-lines: 2-3, 7-9
         :linenos:

.. tip:: Update Related and Embedded Objects
   
   To update a property of an :ref:`embedded object <react-native-embedded-objects>` or
   a :ref:`related object <react-native-relationships>`, modify the property with
   :mdn:`dot-notation or bracket-notation
   <Web/JavaScript/Reference/Operators/Property_accessors>` as if it were in a
   regular, nested object.

.. _react-native-upsert-an-object:

Upsert an Object
````````````````

To upsert an object within a write transaction, call :js-sdk:`Realm.create()
<Realm.html#create>` with the update mode set to ``modified``. The operation
either inserts a new object with the given primary key or updates an existing
object that already has that primary key.

.. note:: Upserting Requires ``Realm.create()``

   You **must** call ``Realm.create()`` within a write transaction to upsert an object. 
   This is different than creating a new :js-sdk:`Realm Objects <Realm.Object.html>` by
   calling the :mdn:`new <Web/JavaScript/Reference/Operators/new>` operator.

In the following example of a ``CreateTaskItem`` component we:

#. Get access to the opened realm instance by calling the ``useRealm()`` hook within the component. 
#. Perform a write transaction, and :ref:`create <react-native-create-a-new-object>` a ``Task`` object with an ``_id`` value of ``1234``.
#. Call ``Realm.create()`` inside the write transaction to upsert a ``Task`` object by specifying the same ``_id`` and a different``progressMinutes`` and the update mode set to "modified".
#. Render the task's ``name`` and ``progressMinutes`` in the UI, showing the modified progress. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/update-test.snippet.crud-upsert-object.tsx
         :language: typescript
         :emphasize-lines: 2, 8-12, 17-21
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/update-test.snippet.crud-upsert-object.jsx
         :language: javascript
         :emphasize-lines: 2, 8-12, 17-21
         :linenos:

.. _react-native-update-a-collection:
.. _react-native-bulk-update:

Bulk Update a Collection
````````````````````````

To apply an update to a collection of objects, iterate through the collection
(e.g. with :mdn:`for...of
<Web/JavaScript/Reference/Statements/for...of>`). In the loop, update each object individually.

In the following example of a ``TaskDashboard`` component, we:

#. Get access to the opened realm instance by calling the ``useRealm()`` hook within the component.
#. Retrieve all tasks in the realm instance by passing ``Task`` to the ``useQuery()`` hook.
#. Create a component method ``resetProgressOnAllTasks()`` that performs a write transaction. Within that write transaction, we bulk update all tasks by looping through them using ``for...of`` and set their ``progressMinutes`` to 0.
#. `Map <https://reactjs.org/docs/lists-and-keys.html>`__ through the tasks to render a list of ``Text`` components displaying each task's ``name`` and ``progressMinutes``.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/update-test.snippet.crud-bulk-update.tsx
         :language: typescript
         :emphasize-lines: 2-3, 6-10
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/update-test.snippet.crud-bulk-update.jsx
         :language: javascript
         :emphasize-lines: 2-3, 6-10
         :linenos:

.. _react-native-delete-objects:

Delete
~~~~~~

The examples on this page use the following schema:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Dog.snippet.ts-dog-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/Dog.snippet.js-dog-schema.js
         :language: javascript

.. _react-native-delete-an-object:
.. _react-native-delete:

Delete an Object
````````````````

To delete an object from a realm, pass the object to :js-sdk:`Realm.delete()
<Realm.html#delete>` inside of a write transaction.

In the following example of a ``DogList`` component, we:

#. Get access to the opened realm instance by calling the ``useRealm()`` hook. 
#. Retrieve all dogs in the realm instance by passing ``Dog`` to the ``useQuery()`` hook.
#. Create a component method ``deleteDog()`` that takes in a ``Dog`` object as a parameter. Within the method, we pass ``Realm.delete()`` the ``Dog`` object, deleting it from the realm. 
#. `Map <https://reactjs.org/docs/lists-and-keys.html>`__ through the dogs to render a list of ``Text`` components that contain a dog's ``name`` and a "Delete Dog" button. 
#. Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the "Delete Dog" button that calls the component's ``deleteDog()`` method.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/delete-test.snippet.crud-delete-object.tsx
         :language: typescript
         :emphasize-lines: 3, 6-8
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/delete-test.snippet.crud-delete-object.jsx
         :language: javascript
         :emphasize-lines: 3, 6-8
         :linenos:

.. important:: Do not use objects after delete
   
   You cannot access or modify an object after you have deleted it from a Realm.
   If you try to use a deleted object, Realm Database throws an error.

.. _react-native-delete-multiple-objects:
.. _react-native-delete-collection:
.. _react-native-delete-all-object-of-a-specific-type:

Delete Multiple Objects
```````````````````````

You can delete multiple objects from a realm in a couple of ways:

#. To **delete all objects of a given object type** from a realm, pass the results of useQuery(<ObjectType>) to the :js-sdk:`Realm.delete() <Realm.html#delete>` method inside of a write transaction.
#. To **delete many specific objects** from a realm, pass :js-sdk:`Collection.filtered() <Realm.Collection.html#filtered>` to ``Realm.delete()`` inside of a write transaction.

In the following example of a ``DogList`` component, we:

#. Retrieve the realm instance using the ``useRealm()`` hook. 
#. Set a variable, ``myDogs`` to all the ``Dog`` objects by passing the ``Dog`` class to the ``useQuery()`` hook.
#. Create a component method ``deleteAllYoungDogObjects()`` that performs a write transaction. Within the write transaction, we set a variable, ``youngDogs``, to the result of ``myDogs.filtered()`` with a query to obtain all dogs younger than three. Then pass ``youngDogs`` to ``realm.delete()``, deleting all young dogs from the realm.
#. Create a component method ``deleteAllDogObjects()`` that performs a write transaction. Within the write transaction, we pass ``myDogs`` to ``realm.delete()``, deleting all the dogs from the realm.
#. `Map <https://reactjs.org/docs/lists-and-keys.html>`__ through the dogs to render a list of ``Text`` components that contain a dog's ``name`` and ``age``.
#. Add an ``onPress`` event on the "Delete Young Dog Objects" button that calls ``deleteAllYoungDogObjects()``, deleting all young dogs from the realm, which triggers a re-render and removes them from the UI. 
#. Add an ``onPress`` event on the "Delete All Dog Objects" button that calls ``deleteAllDogObjects()``, deleting every dog from the realm, which triggers a re-render and removes them from the UI. 

.. note:: 

   When you delete objects from the realm instance, the component automatically re-renders and removes them from the UI.



.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/delete-test.snippet.crud-delete-multiple-objects.tsx
         :language: typescript
         :emphasize-lines: 3, 6-9, 12-14
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/delete-test.snippet.crud-delete-multiple-objects.jsx
         :language: javascript
         :emphasize-lines: 3, 6-9, 12-14
         :linenos:

.. _react-native-delete-all-objects-in-a-realm:

Delete All Objects in a Realm
`````````````````````````````

To delete **all** objects from the realm, call :js-sdk:`Realm.deleteAll()
<Realm.html#deleteAll>` inside of a write transaction. This clears the realm
of all object instances but does not affect the realm's schema.

In the following example of a ``DeleteProfileSettingsScreen`` component, we:

#. Get access to the opened realm instance by calling the ``useRealm()`` hook within the component. 
#. Create a component method ``deleteAllData()`` that performs a write transaction and calls ``Realm.deleteAll()``, deleting all objects from the realm. 
#. Add an ``onPress`` event on the "Delete all data" button that calls ``deleteAllData()``.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/delete-test.snippet.crud-delete-all-objects.tsx
         :language: typescript
         :emphasize-lines: 2, 5-7
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/delete-test.snippet.crud-delete-all-objects.jsx
         :language: javascript
         :emphasize-lines: 2, 5-7
         :linenos:

.. tip:: Delete All In Development
   
   :js-sdk:`Realm.deleteAll() <Realm.html#deleteAll>` is a useful method to
   quickly clear out your realm in the course of development. For example,
   rather than writing a migration to update objects to a new schema, it may be
   faster to delete and then re-generate the objects with the app itself.
