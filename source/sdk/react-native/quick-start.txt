.. _react-native-client-quick-start-local:
.. _react-native-client-quick-start:

==============================
Quick Start - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get Realm Database
integrated into your app.

Before you begin:
- Install the :ref:`Realm React Native SDK <react-native-install>`
- Install the :github:`@realm/react library <https://github.com/realm/realm-js/tree/master/packages/realm-react#installation>`

About the @realm/react Library
------------------------------

:github:`@realm/react </realm/realm-js/tree/master/packages/realm-react>` library
provides state-aware React hooks for Realm data. This means you don't need to manually
add and remove listeners. The hooks watch the Realm data and re-render components
as needed.

The Reack Native SDK defaults to using ``@realm/react`` for examples and when
describing concepts.

.. _react-native-quickstart-local-import-realm:

Import Hooks From @realm/react
------------------------------

At the top of your source files where you want to use Realm, import the
``@realm/react`` hooks.

.. code-block:: javascript

   import { AppProvider, UserProvider, createRealmContext } from '@realm/react';

.. _react-native-quickstart-local-define-an-object-model:

Define Your Object Model
------------------------

Your application's :ref:`object model <react-native-object-schemas>` defines the data
that you can store within Realm Database. An object model is made up of object types.

To define a basic Realm object type, create a class that contains a static 
``schema`` field. Within this field, define the object's ``name``, ``properties``,
and ``primaryKey``. 

The type name and primary key must be unique among object types in a realm.

.. TODO: update to class for both JS and TS

.. literalinclude:: /examples/generated/node/quickstart.snippet.define-an-object-model.js
  :language: javascript

.. _react-native-quickstart-local-open-a-realm:

Configure a Realm
-----------------

The ``@realm/react`` library exposes realms in your application using 
`React Context objects <https://reactjs.org/docs/context.html>`__ and Provider 
components. You can access realms with React hooks.

To configure and open a local realm, create a Context with the realm's configuration. The 
Context exports a ``<RealmProvider>`` component that exposes a configured realm. 
All child components of ``<RealmProvider>`` can access the realm using hooks.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.open-a-realm.js
  :language: javascript

Work With Objects
-----------------

.. TODO: present this as parent section to all things objects

.. _react-native-quickstart-local-create-realm-objects:

Create Realm Objects
~~~~~~~~~~~~~~~~~~~~

In components nested inside of ``<RealmProvider>``, you can create Realm :ref:`objects
<react-native-object-types>`. 

Within a :ref:`write transaction <react-native-write-transactions>`, call
:js-sdk:`Realm.create() <Realm.html#create>` and pass in your object class, followed
by an object that defines the new object's properties.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.create-realm-objects.js
  :language: javascript

.. _react-native-quickstart-local-find-sort-and-filter-objects:
.. _react-native-quickstart-local-watch-a-collection:

Find, Sort, and Filter Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO: Add info about useQuery and link to a page with more info.
.. TODO: Potentially combine this section with the following two sections.

.. The following code demonstrates how to:

.. - Query for all instances of the "Task" object type.
.. - Filter the query to retrieve only the tasks that are "Open".
.. - Sort the tasks by the name in an ascending order.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.find-sort-and-filter-objects.js
  :language: javascript

.. _react-native-quickstart-local-modify-an-object:

Modify an Object
~~~~~~~~~~~~~~~~

.. TODO: Combine with previous section

As with writes, any changes to a Realm object must occur within a 
:ref:`Write transaction <react-native-write-transactions>` block. 
To modify an object, you update the object properties:

In the following example, an application developer updates ``task1`` from the
:ref:`Create Realm Objects <react-native-quickstart-local-create-realm-objects>`
example above. The developer begins progress on the "go grocery shopping
task" and sets ``task1`` to "InProgress".

.. literalinclude:: /examples/generated/node/quickstart.snippet.modify-an-object.js
  :language: javascript

.. _react-native-quickstart-local-delete-an-object:

Delete an Object
~~~~~~~~~~~~~~~~

.. TODO: Combine with previous section?

You can delete an object by calling the :js-sdk:`realm.delete()
<Realm.html#delete>` method within a write transaction block:

In the following example, an application developer deletes ``task1`` from the
:ref:`Create Realm Objects <react-native-quickstart-local-create-realm-objects>`
example above. 

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.delete-an-object.js
  :language: javascript

.. _react-native-quickstart-local-close-a-realm:

Close a Realm
-------------

.. TODO: Add info about how @realm/react handles closing a realm for you.
   Make it clear when, exactly, this happens.
   Potentially also include the regular JS way of closing a realm or link to
   the Node.js docs.

Add Device Sync (Optional)
--------------------------

This section illustrates how to authenticate with an Anonymous User and open a
Flexible Sync realm to sync data between devices.

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with :ref:`Development Mode <development-mode>`
  on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

Initialize the App using <AppProvider>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use App Services features, such as authentication and sync, you must first access
your App Services App using your App ID. You can :ref:`find your App ID <find-your-app-id>`
in the App Services UI.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.initialize.js
  :language: javascript

Authenticate a User with <UserProvider>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To authenticate and log in a user, call :js-sdk:`App.logIn()
<Realm.App.html#logIn>`. When :ref:`anonymous authentication
<anonymous-authentication>` is enabled, users can immediately log into your app
without providing any identifying information:

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.anonymous-login.js
  :language: javascript

Define an Object Model
~~~~~~~~~~~~~~~~~~~~~~

Object models for synced realms work the same way as :ref:`local-only Realms 
<react-native-quickstart-local-define-an-object-model>`. Define your object model 
just as you would for a local-only Realm.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.define-an-object-model.js
  :language: javascript

Configure a Synced Realm with <RealmProvider>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you have initialized your App, authenticated a user, and
defined your object model, you can create a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`.

To open a Flexible Sync realm, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object. 
To use Flexible Sync, in the SyncConfiguration, you must include include a 
``user`` and ``flexible: true``.

Additionally, you need at least one subscription before you can read from or write to the
realm. Use ``Configuration.sync.initialSubscriptions`` to define the initial 
subscription set when the Realm file is first opened.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.open-realm-with-subscriptions.js
  :language: javascript

The syntax to :ref:`read <react-native-read-objects>` and :ref:`update <react-native-update-objects>`, 
on a synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.

Next: Check out the Template Apps and Tutorial
----------------------------------------------

Check out the :ref:`template app <template-apps>` to experiment with another
quick way to start coding with the Realm React Native SDK and ``@realm/react``. 
The React Native SDK template app, labeled ``react-native.todo.flex``, is a premade 
application that integrates Realm Database and Atlas Device Sync into a 
customizable android app.

Alternatively, if you are interested in a guided experience, you can read our
:ref:`Realm React Native SDK tutorial <react-native-tutorial>` that expands on
the template app.
