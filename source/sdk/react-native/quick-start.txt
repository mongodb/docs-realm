.. _react-native-client-quick-start-local:
.. _react-native-client-quick-start:

==============================
Quick Start - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page demonstrates how to use Realm Database using the React Native SDK.

Before you begin, install :ref:`install the Realm React Native SDK <react-native-install>`.

About the @realm/react Library
------------------------------

:github:`@realm/react </realm/realm-js/tree/master/packages/realm-react>` is a
library used in the React Native SDK. It provides state-aware React hooks for Realm data.

This means you don't need to manually add and remove listeners. The hooks watch
the Realm data and re-render components as needed.

The React Native SDK documentation uses``@realm/react`` for examples 
and describing concepts.

Set Up Your Realm App
---------------------

After installing the Realm React Native SDK and ``@realm/react``, there are a
few more things to set up before you can access your realm and work with local
data:

- Import hooks from ``@realm/react``
- Define an object model
- Configure a realm

.. _react-native-quickstart-local-import-realm:

Import Context and Providers From @realm/react
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the top of your source files where you want to use Realm, import the
``@realm/react`` context and providers.

``AppProvider`` and ``UserProvider`` are only necessary if you want to use
:ref:`Atlas Device Sync <react-native-realm-sync>` or other App Services.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.setup-import-hooks.tsx
  :language: javascript

.. _react-native-quickstart-local-define-an-object-model:

Define an Object Model
~~~~~~~~~~~~~~~~~~~~~~

Your application's :ref:`object model <react-native-object-schemas>` defines the data
that you can store within a realm. An object model is made up of object types.

To define a Realm object type:, 

#. Create a class that extends ``Realm.Object``.
   For TypeScript, include the class name as a type. This allows the ``Realm.Object``
   constructor to return a typed instance of the class.
#. Add a ``schema`` field.
#. For the ``schema`` value, create an object that contains ``properties`` and 
   ``name`` properties. The name value must be unique among object types in a realm.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.setup-define-model.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.setup-define-model.jsx
         :language: javascript

.. _react-native-quickstart-local-open-a-realm:

Configure a Realm
~~~~~~~~~~~~~~~~~

Before you can work with any data, you need to configure a realm. With
``@realm/react``, anything nested inside ``RealmProvider`` will be able to
access your realm's data.

To properly configure a realm, tell the realm what kind of data
it will contain. To do this, ensure your realm has access to your data models.

In the example below, we write our models in the same file where we configure a 
realm, but it's common to write them elswhere and import them where you want to 
create a realm context.

To configure and access a local realm:

#. Create the realm's :js-sdk:`Configuration <Realm.html#~Configuration>` object.
   The Configuration object defines the parameters of a realm and identifies it.
   When creating a configuration object, make sure to pass your data models into
   the ``schema`` property.
#. Create a realm context with ``createRealmContext``. A realm context is a 
   `React Context object <https://reactjs.org/docs/context.html>`__ that contains
   context for your realm.
#. Expose a realm with the ``<RealmProvider>``. To expose a realm, you need a 
   realm context. From that context, extract ``RealmProvider``. This provider 
   contains your realm's context. Components nested within ``<RealmProvider>`` 
   have access to hooks that let you read, write, and update data.

A properly-configured realm might look like this:

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.quickstart-setup.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.quickstart-setup.jsx
         :language: javascript

Work With Data
--------------

After you have a data model and a configured realm, you can create, update, or 
delete :ref:`Realm objects <react-native-object-types>`.

To use those tools, you need an open realm. This means that object hooks and 
methods only work in components that are nested inside of ``<RealmProvider>``;
In a component wrapped with a ``<RealmProvider>``, the ``useRealm()`` hook gives you access to your realm that you can use to work with the database.

Any changes to a Realm object must occur within a 
:ref:`Write transaction <react-native-write-transactions>` block.

.. _react-native-quickstart-local-find-sort-and-filter-objects:
.. _react-native-quickstart-local-watch-a-collection:

Find, Sort, and Filter Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``@realm/react`` provides a couple of hooks to help you find a Realm collection
or object.

- ``useQuery()``. Returns ``Realm.Results`` for the object type that you pass to it.
  If you can't use this hook, try the Realm method
  :js-sdk:`Realm.objects() <Realm.html#objects>`.
- ``useObject()``. Returns one ``Realm.Object`` for the object type and primary key 
  that you pass to it. If you can't use this hook, try the Realm method
  :js-sdk:`Realm.objectForPrimaryKey() <Realm.html#objectForPrimaryKey>`.

After finding a collection, you can filter or sort the results using 
:ref:`Realm Query Language (RQL) <rql>`.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-find.tsx
  :language: javascript

.. _react-native-quickstart-local-create-realm-objects:
.. _react-native-quickstart-local-modify-an-object:
.. _react-native-quickstart-local-delete-an-object:

Create, Modify, and Delete Realm Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After instantiating ``useRealm()``, you can use Realm methods to create, modify,
and delete Realm objects inside of a :js-sdk:`write transaction block <Realm.html#write>`.

For more information, refer to :ref:`Write Transactions <react-native-write-transactions>`.

Create Objects
``````````````

To create a new Realm Object, specify the object type, pass in the object's
initialized values, and add it to the realm in a write transaction block:

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-create.tsx
  :language: javascript

Modify Objects
``````````````

To modify a Realm Object, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-modify.tsx
  :language: javascript

Delete Objects
``````````````

To delete a Realm Object, call the :js-sdk:`Realm.delete() <Realm.html#delete>`
method in a write transaction block:

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-delete.tsx
  :language: javascript

.. _react-native-quickstart-local-close-a-realm:

Add Atlas Device Sync (Optional)
--------------------------------

After getting your local-only realm running, you may want to add Atlas Device Sync
so that your realm data can be synced with an Atlas cluster and other client devices.

To do this, you'll need to do a bit more set up:

- Create a backend in Atlas App Services (see the prerequisites below)
- Configure a Flexible Sync realm instead of a local-only realm

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with :ref:`Development Mode <development-mode>`
  on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

Configure and Access a Flexible Sync realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure and access a synced realm:

#. Initialize the App using ``<AppProvider>``
#. Authenticate a User with ``<UserProvider>``
#. Configure a Synced Realm with ``<RealmProvider>``

Initialize the App using <AppProvider>
``````````````````````````````````````

To use App Services features, such as authentication and sync, you must first access
your App Services App using your App ID. You can :ref:`find your App ID <find-your-app-id>`
in the App Services UI.

.. literalinclude:: /examples/generated/react-native/ts/quickstart-sync.test.snippet.configure-expose-realm.tsx
  :language: javascript
  :emphasize-lines: 4, 14

Authenticate a User with <UserProvider>
```````````````````````````````````````

Use ``UserProvider`` to handle sections of your app that need an authenticated user.

To authenticate and log in a user, provide a fallback for ``<UserProvider>``. This
could be a log in screen component or a simple function that calls :js-sdk:`App.logIn()
<Realm.App.html#logIn>`. After a user has succesfully authenticated, they can
access the parts of your app nested within ``<UserProvider>``.

When :ref:`anonymous authentication <anonymous-authentication>` is enabled,
users can immediately log into your app without providing any identifying
information:

.. literalinclude:: /examples/generated/react-native/ts/quickstart-sync.test.snippet.configure-expose-realm.tsx
  :language: javascript
  :emphasize-lines: 5, 13

Configure a Synced Realm with <RealmProvider>
`````````````````````````````````````````````

After you have initialized your App, authenticated a user, and defined your
object model, you can configure a synced realm. This is similar to configuring
a local realm; however, you need to add some additional properties to
``<RealmProvider>``.

#. Create the realm's :js-sdk:`Configuration <Realm.html#~Configuration>` object.
   The Configuration object defines the parameters of a realm and identifies it.
   When creating a configuration object, make sure to pass your data models into
   the ``schema`` property.
#. Create a realm context with ``createRealmContext``. A realm context is a 
   `React Context object <https://reactjs.org/docs/context.html>`__ that contains
   context for your realm.
#. Expose a realm with the ``<RealmProvider>``. To expose a realm, extract
   ``RealmProvider`` from the realm context.
#. Add the ``sync`` property to ``<RealmProvider>`` and pass it a
   :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.
   This sync object must contain ``flexible: true``.

You need at least one sync subscription before you can read or write synced data.
You can add subscriptions in your components or set up 
:ref:`initial subscriptions <react-native-sync-bootstrap-initial-subscriptions>` on
``<RealmProvider>``.

.. literalinclude:: /examples/generated/react-native/ts/quickstart-sync.test.snippet.configure-expose-realm.tsx
  :language: javascript
  :emphasize-lines: 6, 12

The syntax to create, read, update, and delete objects in a synced realm is i
dentical to the syntax for non-synced realms. While you work with local data, a
background thread efficiently integrates, uploads, and downloads changesets.

Next: Check out the Template Apps and Tutorial
----------------------------------------------

Check out the :ref:`template app <template-apps>` to experiment with another
way to get started with the Realm React Native SDK and ``@realm/react``. 
The React Native SDK template app is a customizable application built on 
Realm Database (local-only or Flexible Sync).

Alternatively, if you are interested in a guided experience, you can read our
:ref:`Realm React Native SDK tutorial <react-native-tutorial>` that expands on
the template app.
