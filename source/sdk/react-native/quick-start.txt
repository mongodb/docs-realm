.. _react-native-client-quick-start-local:
.. _react-native-client-quick-start:

==============================
Quick Start - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This Quick Start demonstrates how to use Realm Database with the React Native SDK
and ``@realm/react`` library.

Before you begin, ensure you have :ref:`installed the 
Realm React Native SDK <react-native-install>` and ``@realm/react`` library.

About the @realm/react Library
------------------------------

:github:`@realm/react </realm/realm-js/tree/master/packages/realm-react>` is an 
additional library that works with and relies on the React Native SDK. It 
provides state-aware React hooks for Realm data. This means you don't need to 
manually add and remove listeners. The hooks watch the Realm data and re-render 
components as needed.

The React Native SDK documentation defaults to using ``@realm/react`` for examples 
and describing concepts.

Set Up Your Realm App
---------------------

After installing the Realm React Native SDK and ``@realm/react``, there are a
few more things to set up before you can access your realm and work with local
data:

- Import hooks from ``@realm/react``
- Define an object model
- Configure a realm

.. _react-native-quickstart-local-import-realm:

Import Hooks From @realm/react
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the top of your source files where you want to use Realm, import the
``@realm/react`` hooks.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.setup-import-hooks.tsx
  :language: javascript

.. _react-native-quickstart-local-define-an-object-model:

Define an Object Model
~~~~~~~~~~~~~~~~~~~~~~

In Realm Database, all data is a type of object. Becuase of this, your 
application's :ref:`object model <react-native-object-schemas>` defines the data
that you can store within a realm. An object model is made up of object types.

To define a basic Realm object type, create a class that contains a static 
``schema`` field. Within this field, define the object's ``name``, ``properties``,
and ``primaryKey``. You can add other properties, but these three are required.

The type name and primary key must be unique among object types in a realm.

.. TODO: Update the JS example below after creating JS version of quickstart.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.setup-define-model.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Profile.snippet.js-profile-schema.js
         :language: javascript

.. _react-native-quickstart-local-open-a-realm:

Configure a Realm
~~~~~~~~~~~~~~~~~

.. TODO: write intro that links to configure page and adds a little context.
   Maybe include the numbered list and link to the individual sections?

Before you can work with any data, you need to configure a realm. With
``@realm/react``, anything nested inside ``RealmProvider`` will be able to
access your realm's data and features.

.. TODO: update configure a realm page with this better approach.

To configure and access a local realm:

#. Import object models
#. Create a :js-sdk:`Configuration object <Realm.html#~Configuration>`
#. Create a realm context
#. Expose a realm

A properly-configured basic realm might look like this:

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.quickstart-setup.tsx
  :language: javascript

Import Object Models
````````````````````

To properly-configure a realm, you need to let the realm know what kind of data
the realm will contain. You do this by ensuring your realm has access to your
data models. 

You can write your models in the same file as your realm, but it's common to 
write them elswhere and import them where you want to create a realm context.

Create a Configuration Object
`````````````````````````````

The Configuration object defines the parameters of a realm and identifies it.
When creating a configuration object, make sure to pass your data models into
the ``schema`` property.

.. TODO: create JS version and add tab

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.configure-config-object.tsx
  :language: javascript

Create a Realm Context
``````````````````````

A realm context is a `React Context object <https://reactjs.org/docs/context.html>`__
that contains context for your realm.

To create a realm context, pass a Configuration object into ``createRealmContext()``.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.configure-realm-context.tsx
  :language: javascript

Expose and access a realm
`````````````````````````

To expose a realm, you need a realm context. From that context, extract
``RealmProvider``. This provider contains your realm's context. Components
nested within ``<RealmProvider>`` have access to hooks that let you read, write,
and update data.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.configure-expose-realm.tsx
  :language: javascript

Work With Data
--------------

Realm gives you many tools to work with the :ref:`Realm objects
<react-native-object-types>` you define in your app's 
object modal.

To use those tools, you need an open realm. This means that object hooks and 
methods only work in components that are nested inside of ``<RealmProvider>``;
Within a nested component, the ``useRealm()`` hook gives you access to all
the methods available for your realm.

Any changes to a Realm object must occur within a 
:ref:`Write transaction <react-native-write-transactions>` block.

.. _react-native-quickstart-local-find-sort-and-filter-objects:
.. _react-native-quickstart-local-watch-a-collection:

Find, Sort, and Filter Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO: Refine the content in this section

There are a couple of ways to find a Realm object.

- ``useQuery``
- ``useObject``

If you need to find an object, but can't use these hooks, try these Realm
methods.

- :js-sdk:`Realm.create() <Realm.html#objects>`
- :js-sdk:`realm.delete() <Realm.html#objectForPrimaryKey>`

After finding a collection, you can filter or sort the results using Realm
Query Language (RQL) logic.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-find.tsx
  :language: javascript

.. _react-native-quickstart-local-create-realm-objects:
.. _react-native-quickstart-local-modify-an-object:
.. _react-native-quickstart-local-delete-an-object:

Create, Modify, and Delete Realm Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After instantiating ``useRealm()``, you can use Realm methods to create, modify,
and delete Realm objects. For example:

- :js-sdk:`Realm.create() <Realm.html#create>`
- :js-sdk:`realm.delete() <Realm.html#delete>`

These methods rely on you previously finding objects or collections to pass to 
them. They should be used alongside the``useQuery()`` and ``useObject`` hooks.

.. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-crud.tsx
  :language: javascript

.. _react-native-quickstart-local-close-a-realm:

Add Atlas Device Sync (Optional)
--------------------------------

After getting your local-only realm running, you may want to add Atlas Device Sync
so that your realm data can be synced with an Atlas cluster and other client devices.

To do this, you'll need to do a bit more set up:

- Create a backend in Atlas App Services (see the prerequisites below)
- Configure a Flexible Sync realm instead of a local-only realm

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with :ref:`Development Mode <development-mode>`
  on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

.. TODO: figure out where to put this.

Configure and Access a Flexible Sync realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure and access a synced realm:

#. Initialize the App using <AppProvider>
#. Authenticate a User with <UserProvider>
#. Configure a Synced Realm with <RealmProvider>

Initialize the App using <AppProvider>
``````````````````````````````````````

To use App Services features, such as authentication and sync, you must first access
your App Services App using your App ID. You can :ref:`find your App ID <find-your-app-id>`
in the App Services UI.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.initialize.js
  :language: javascript

Authenticate a User with <UserProvider>
```````````````````````````````````````

To authenticate and log in a user, call :js-sdk:`App.logIn()
<Realm.App.html#logIn>`. When :ref:`anonymous authentication
<anonymous-authentication>` is enabled, users can immediately log into your app
without providing any identifying information:

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.anonymous-login.js
  :language: javascript

Configure a Synced Realm with <RealmProvider>
`````````````````````````````````````````````

.. TODO: Make this mirror the local realm setup
  #. Import your object models
  #. Create a :js-sdk:`Configuration object <Realm.html#~Configuration>` (but with flexible: true and s sync conf object)
  #. Create a synced realm context
  #. Expose and access a synced realm

After you have initialized your App, authenticated a user, and
defined your object model, you can create a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`.

To open a Flexible Sync realm, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object. 
To use Flexible Sync, in the SyncConfiguration, you must include include a 
``user`` and ``flexible: true``.

Additionally, you need at least one subscription before you can read from or write to the
realm. Use ``Configuration.sync.initialSubscriptions`` to define the initial 
subscription set when the Realm file is first opened.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/quickstart.snippet.open-realm-with-subscriptions.js
  :language: javascript

The syntax to :ref:`read <react-native-read-objects>` and :ref:`update <react-native-update-objects>`, 
on a synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.

Next: Check out the Template Apps and Tutorial
----------------------------------------------

Check out the :ref:`template app <template-apps>` to experiment with another
way to get started with the Realm React Native SDK and ``@realm/react``. 
The React Native SDK template app is a customizable application built on 
Realm Database (local-only or Flexible Sync).

Alternatively, if you are interested in a guided experience, you can read our
:ref:`Realm React Native SDK tutorial <react-native-tutorial>` that expands on
the template app.
