.. _react-native-client-quick-start-local:
.. _react-native-client-quick-start:

==============================
Quick Start - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page demonstrates how to use Realm using the React Native SDK.

Before you begin, :ref:`install the Realm React Native SDK <react-native-install>`.

About the @realm/react Package
------------------------------

:github:`@realm/react </realm/realm-js/tree/master/packages/realm-react>` is a
package used in the React Native SDK. It provides state-aware React hooks for Realm data. 
The hooks watch the Realm data and re-render components as needed.

The React Native SDK documentation uses the ``@realm/react``
npm package for examples and describing concepts.

Set Up Your Realm App
---------------------

After installing the ``realm`` and ``@realm/react`` packages, there are a
few more things to set up before you can access your realm and work with local
data:

- Define your object models
- Configure a realm by creating a realm context object, extracting hooks, and 
  setting up providers

.. _react-native-quickstart-local-define-an-object-model:

Define Object Models
~~~~~~~~~~~~~~~~~~~~

Your application's :ref:`object models <react-native-object-schemas>` define the data
types that you can store within a realm. Each object model becomes a Realm
object type.

**To define a Realm object model:**

#. Create a class that extends :js-sdk:`Realm.Object <Realm.Object.html>`.
   For TypeScript, include the class name as a type.
   This lets you use the class with other Realm SDK methods
   that accept ``Realm.Object`` types.
#. Add a ``schema`` field.
#. For the ``schema`` value, create an object that contains ``properties`` and 
   ``name`` properties. The name value must be unique among object types in a 
   Realm object model.

To learn more, refer to
:ref:`Define a Realm Object Model <react-native-define-a-realm-object-model>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.setup-define-model.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.setup-define-model.jsx
         :language: javascript

.. _react-native-quickstart-local-import-realm:
.. _react-native-quickstart-local-open-a-realm:

Configure a Realm
~~~~~~~~~~~~~~~~~

Before you can work with data, you need to configure a realm. This means you need
to set up context and providers from ``@realm/react``. To learn more, refer to 
:ref:`Configure a Realm <react-native-configure-realm>`.

**To configure and access a local realm:** 

#. Import ``createRealmContext()`` from ``@realm/react``.
#. Create a realm :js-sdk:`Configuration <Realm.html#~Configuration>` object.
   You must include your Realm object models in the ``schema`` property.
   You can also include optional configuration properties,
   like making the realm read only or adding Atlas Device Sync.
#. Create a realm context with ``createRealmContext()``. A realm context is a 
   `React Context object <https://reactjs.org/docs/context.html>`__ that contains
   React providers and hooks for working with your realm.
#. Expose a realm with ``<RealmProvider>``. To expose a realm, you need a 
   realm context. From that context, extract ``<RealmProvider>``, which 
   contains your realm's context.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.quickstart-setup.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.quickstart-setup.jsx
         :language: javascript

Work With Realm Objects
-----------------------

After you have a data model and a configured realm, you can create, read, update, or 
delete Realm objects.

You must nest any components that perform these operations inside of a 
``<RealmProvider>``. The ``useRealm()``, ``useQuery()``, and ``useObject()`` hooks 
enable you to perform read and write operations in your realm.


.. _react-native-quickstart-local-find-sort-and-filter-objects:
.. _react-native-quickstart-local-watch-a-collection:

Find, Sort, and Filter Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``@realm/react`` provides hooks to help you find a collection of Realm objects
or a single Realm object.

- ``useQuery()``: Takes ``Realm.Object`` type as argument. Returns 
  :js-sdk:`Realm.Results <Realm.Results.html>` with all objects in the realm
  for the type that you pass to it.
- ``useObject()``. Takes ``Realm.Object`` type and primary key as arguments.
  Returns the Realm object for the primary key that you pass to it.

After finding a collection, you can filter or sort the results using 
:ref:`Realm Query Language (RQL) <rql>`.

To learn more, refer to the :ref:`Query Data <react-native-query-data>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart-find-sort-filter.test.snippet.find-sort-filter.tsx
         :language: typescript
         :emphasize-lines: 44, 45
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart-find-sort-filter.test.snippet.find-sort-filter.jsx
         :language: javascript
         :emphasize-lines: 37, 38

.. _react-native-quickstart-local-create-realm-objects:
.. _react-native-quickstart-local-modify-an-object:
.. _react-native-quickstart-local-delete-an-object:

Create, Modify, and Delete Realm Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After accessing the realm with ``useRealm()``, you can create, modify,
and delete objects inside of the realm in a :js-sdk:`Realm.write() transaction block <Realm.html#write>`.

To learn more, refer to :ref:`Write Transactions <react-native-write-transactions>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart-userealm.test.snippet.quickstart-setup.tsx
         :language: typescript
         :emphasize-lines: 44, 47-49
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart-userealm.test.snippet.quickstart-setup.jsx
         :language: javascript
         :emphasize-lines: 37, 40-42

Create Objects
``````````````

To create a new Realm object, specify the object type, pass in the object's
initial values, and add it to the realm in a write transaction block.

To learn more, refer to :ref:`CRUD - Create <react-native-create-objects>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-create.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.objects-create.jsx
         :language: javascript

Update Objects
``````````````

To update a Realm Object, update its properties in a write transaction block.

To learn more, refer to :ref:`CRUD - Update <react-native-update-objects>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-modify.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.objects-modify.jsx
         :language: javascript

Delete Objects
``````````````

To delete a Realm Object, call the :js-sdk:`Realm.delete() <Realm.html#delete>`
method in a write transaction block.

To learn more, refer to :ref:`CRUD - Delete <react-native-delete-objects>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart.test.snippet.objects-delete.tsx
         :language: typescript
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart.test.snippet.objects-delete.jsx
         :language: javascript

.. _react-native-quickstart-local-close-a-realm:

Add Atlas Device Sync (Optional)
--------------------------------

After getting your local-only realm running, you can add Atlas Device Sync
so that your realm's data can sync with a MongoDB Atlas cluster and other client devices.

To use Device Sync, you need to set up a couple more things:

- Create a backend in Atlas App Services (see the prerequisites below)
- Configure a Flexible Sync realm instead of a local-only realm

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App 
  Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with 
  :ref:`Development Mode <development-mode>` on

Configure and Access a Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure and access a synced realm:

#. Initialize the App using ``<AppProvider>``
#. Authenticate a User with ``<UserProvider>``
#. Configure a Synced Realm with ``<RealmProvider>``

To learn more, refer to :ref:`Configure a Synced Realm <react-native-synced-realm>`.

Initialize the App using <AppProvider>
``````````````````````````````````````

To use App Services features, such as authentication and Device Sync, you must 
first access your App Services App using your App ID. You can 
:ref:`find your App ID <find-your-app-id>` in the App Services UI.

.. literalinclude:: /examples/generated/react-native/ts/quickstart-sync-app-provider.test.snippet.app-provider.tsx
  :language: javascript
  :emphasize-lines: 6-8

Authenticate a User with <UserProvider>
```````````````````````````````````````

Use the ``<UserProvider>`` to handle sections of your app that need an authenticated user.

To authenticate and log in a user, provide a ``fallback`` prop for ``<UserProvider>``. 
This could be a log in screen component or a simple function that calls 
:js-sdk:`App.logIn() <Realm.App.html#logIn>`. 

Users can only access the parts of your app nested within ``<UserProvider>``
after they have authenticated. If there's no authenticated user,
the ``fallback`` component renders and nested components do not.

.. literalinclude:: /examples/generated/react-native/ts/quickstart-sync-user-provider.test.snippet.user-provider.tsx
  :language: javascript
  :emphasize-lines: 8-10

Configure a Synced Realm with <RealmProvider>
`````````````````````````````````````````````

After you have initialized your App, authenticated a user, and defined your
object model, you can configure a synced realm. This is similar to configuring
a local realm. However, you need to add some additional props to the
``<RealmProvider>``.

#. Create the realm's :js-sdk:`Configuration <Realm.html#~Configuration>` object.
   The Configuration object defines the parameters of a realm and identifies it.
   When creating a configuration object, make sure to pass your data models into
   the ``schema`` property.
#. Create a realm context with ``createRealmContext()``. A realm context is a 
   `React Context object <https://reactjs.org/docs/context.html>`__ that contains
   app-wide access to your realm.
#. Extract the ``<RealmProvider>`` from the realm context, and then expose it
   to your app.
#. Add the ``sync`` property to ``<RealmProvider>`` and pass it a
   :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.
   This sync object must contain ``flexible: true``.

You need at least one sync subscription before you can read or write synced data.
You can add subscriptions in your components or set up 
:ref:`initial subscriptions <react-native-sync-bootstrap-initial-subscriptions>` on
``<RealmProvider>``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
   
      .. literalinclude:: /examples/generated/react-native/ts/quickstart-sync.test.snippet.quickstart-setup.tsx
         :language: javascript
         :emphasize-lines: 34-45
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/quickstart-sync.test.snippet.quickstart-setup.jsx
         :language: javascript
         :emphasize-lines: 31-42

The syntax to create, read, update, and delete objects in a synced realm is
identical to the syntax for non-synced realms. While you work with local data, a
background thread efficiently integrates, uploads, and downloads changesets.

To learn more, refer to :ref:`Configure a Synced Realm <react-native-synced-realm>`.

Next: Check out the Template Apps and Tutorial
----------------------------------------------

If you are interested in a guided experience, you can read our
:ref:`Realm React Native SDK tutorial <react-native-tutorial>`. This tutorial
implements and expands on a base React Native app
built with Realm and Device Sync.

You could also use the template app to experiment with the React Native SDK on 
your own. To set up the template app, refer to :ref:`template-apps`
in the Atlas App Services documentation.
