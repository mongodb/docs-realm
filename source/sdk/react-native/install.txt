.. _react-native-install:

==============================
Install Realm for React Native
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

The Realm React Native SDK enables development of `React
Native <https://facebook.github.io/react-native/>`__
applications using the JavaScript and `TypeScript
<https://www.typescriptlang.org/>`__ languages. React Native
enables you to build cross-platform iOS and Android apps
with a single codebase using the `React
<https://reactjs.org/>`__ framework.

Prerequisites
-------------

Before getting started, ensure your development environment
meets the following prerequisites:

- React Native v0.31.0 or later. Follow the `official React Native CLI Quickstart instructions <https://facebook.github.io/react-native/docs/getting-started.html>`__ to set up your environment.
- `CocoaPods <https://cocoapods.org/>`__ 1.10.1 or later (recommended for building an iOS app with React Native v.60+).

.. important:: Using Realm with Expo

   `Expo <https://docs.expo.dev/>`_ now supports Realm with the Expo SDK version
   44. To use Realm with Expo, upgrade to `Expo SDK version 44
   <https://docs.expo.dev/workflow/upgrading-expo-sdk-walkthrough/>`_. Realm
   does not work with earlier versions of Expo or with Expo version 45 on
   **Android**. To follow progress on its compatibility with Expo v45 on
   Android, check out the :github:`GitHub issue<realm/realm-js/issues/4639>`.

.. note:: Realm JS version 10.6.0 Supports Mac Catalyst
   
   For `React Native version 0.64 and below
   <https://reactnative.dev/versions>`_, building your Realm React
   Native application requires additional steps in order to :doc:`build your
   application when using Mac Catalyst
   </sdk/react-native/integrations/mac-catalyst>`.

Installation
------------

Select the tab below that corresponds to your React Native
version. Follow the steps to create a React Native project
and add the Realm React Native SDK to it.

.. tabs::

   .. tab:: React Native v.60+
      :tabid: rn-v-60-plus

      .. procedure::

         .. step:: Create a React Native Project


            Create your React Native project with the following
            command:

            .. code-block:: bash

               npx react-native init MyRealmApp

            Change to the project directory that the previous command
            just created:

            .. code-block:: bash

               cd MyRealmApp
         
         .. step:: Install Realm with npm

            In your React Native project directory, add Realm to your
            project with the following command:

            .. code-block:: bash

               npm install realm
         
         .. step:: Enable Hermes (optional)

            .. note::
               
               To use Hermes, your app must use Realm v11 or later and React Native 0.70.0 or later

            Realm supports React Native's mobile-optimized JavaScript
            engine, Hermes. By default, new apps created with the React
            Native CLI already have Hermes enabled.
            
            We recommend that you use Hermes with Realm. However, Realm
            also supports the :apple:`JavaScriptCore (JSC) engine
            <documentation/javascriptcore>` if your app requires it.
            
            Existing apps that currently use JSC can enable Hermes
            separately for Android and iOS. To learn how, see the `Using
            Hermes <https://reactnative.dev/docs/hermes>`_ guide in the
            React Native docs.
         
         .. step:: Resolve CocoaPods Dependencies

            For the iOS app, fetch the CocoaPods dependencies with
            the following commands from your React Native project
            directory:

            .. code-block:: bash

               cd ios && pod install && cd ..

            This downloads the Realm libraries and regenerates the
            project ``.xcworkspace`` file that you can work with in
            Xcode to run your application.


         .. step:: Run the App


            .. include:: /includes/react-native-run-the-app.rst


   .. tab:: Older React Native Versions
      :tabid: rn-pre-v-60

      .. procedure::

         .. step:: Create a React Native Project


            Create your React Native project with the following
            command:

            .. code-block:: bash

               react-native init MyRealmApp

            Change to the project directory that the previous command
            just created:

            .. code-block:: bash

               cd MyRealmApp


         .. step:: Install Realm Using NPM


            In your React Native project directory, add Realm to your
            project with the following command:

            .. code-block:: bash

               npm install realm


         .. step:: Link the Realm Native Module


            In your React Native project directory, link the Realm
            native module to your project with the following command:

            .. code-block:: bash

               react-native link realm


         .. step:: Confirm the Link Step (Android)


            For Android development, confirm that the link step
            correctly added the Realm module to the Gradle
            configuration files. In some versions, React Native has
            been known to fail to link Realm properly. If this
            happens, you can link Realm manually by adding any
            missing lines below to the corresponding files.

            First, ensure the ``android/settings.gradle`` file
            includes Realm and specifies Realm's project directory:

            .. code-block:: text
               :emphasize-lines: 2-3

               rootProject.name = 'MyRealmApp'
               include ':realm'
               project(':realm').projectDir = new File(rootProject.projectDir, '../node_modules/realm/android')
               apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesSettingsGradle(settings)
               include ':app'

            Second, ensure the ``android/app/build.gradle`` file's
            ``dependencies`` section declares Realm as a dependency:

            .. code-block:: text
               :emphasize-lines: 2

               dependencies {
                   implementation project(':realm')
                   implementation fileTree(dir: "libs", include: ["*.jar"])
                   implementation "com.facebook.react:react-native:+"  // From node_modules
                   // ...
               }

            Finally, ensure the ``MainApplication.java`` file imports
            the ``RealmReactPackage`` and instantiates it in its
            packages list.

            .. code-block:: java
               :emphasize-lines: 1, 8

               import io.realm.react.RealmReactPackage; // Add this import.

               public class MainApplication extends Application implements ReactApplication {
                   @Override
                   protected List<ReactPackage> getPackages() {
                       return Arrays.<ReactPackage>asList(
                           new MainReactPackage(),
                           new RealmReactPackage() // Add this line.
                       );
                   }
                   // ...
               }


         .. step:: Enable TypeScript (optional)


            .. include:: /includes/react-native-enable-typescript.rst


         .. step:: Run the App


            .. include:: /includes/react-native-run-the-app.rst

.. _react-native-typescript-support:

TypeScript Support (Optional)
-----------------------------

If you are using `React Native version 0.60 or greater
<https://reactnative.dev/versions>`_, you can declare a Realm Object Model using
TypeScript property types declarations on classes. The Realm JS SDK will derive
the schema at runtime from the types declared in your TS source files. This
allows you to use TypeScript syntax without needing to explicitly define a
schema.

To do so, follow the steps below to install and configure:

-  the :npm:`Realm Babel Plugin <package/@realm/babel-plugin>`
-  the :npm:`@babel/plugin-proposal-decorators <package/@babel/plugin-proposal-decorators>`

Although we recommend installing and configuring
``@babel/plugin-proposal-decorators`` as detailed below, it is only required if
you intend to use :ref:`decorators  <react-native-ts-decorators>` in your
classes. 

.. procedure::

   .. step:: Enable TypeScript

      .. include:: /includes/react-native-enable-typescript.rst

   .. step:: Install the Realm Babel Plugin and Babel Plugin Proposal Decorators Package
      
      Run the following command to add them to your `dev dependencies
      <https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file>`_:

      .. code-block:: shell
         npm install --save-dev @realm/babel-plugin @babel/plugin-proposal-decorators

   .. step:: Add the Plugins to Your Babel Config

      Add the following to your ``babel.config.js`` file to apply the `plugins <https://babeljs.io/docs/en/plugins>`_

      .. code-block:: javascript

         const presets = [ ... ];
         module.exports = { 
            presets,
            plugins: [
               '@realm/babel-plugin',
               ['@babel/plugin-proposal-decorators', { legacy: true }],  // Optional, unless you're using decorators
            ],
         };
   .. step:: Enable Decorators in your TS Config File (Optional)

      Enable experimental decorators in your `tsconfig.json <https://www.typescriptlang.org/docs/handbook/tsconfig-json.html>`_ within your ``compilerOptions``:

      .. code-block:: json

         {
            "compilerOptions": {
               "experimentalDecorators": true
            },
         }

   .. step:: Restart the Package Cache

      If you're using TypeScript, you must restart the package cache to work with the newly applied plugin in your app. For most React Native applications, you can run the command:

      .. code-block:: shell

         npm start -- --reset-cache

      However, if you are using Expo, read the docs on `clearing the cache with MacOS and Linux <https://docs.expo.dev/troubleshooting/clear-cache-macos-linux/>`_ or with `Windows <https://docs.expo.dev/troubleshooting/clear-cache-windows/>`_.

   .. step:: Run the App
      
      .. include:: /includes/react-native-run-the-app.rst

Import Realm
------------

Add the following line to the top of your source files where
you want to use Realm:

.. code-block:: typescript

   import Realm from "realm";
