.. _react-native-relationships-and-embedded-objects:
.. _react-native-client-relationships:
.. _react-native-define-relationship-properties:
.. _react-native-relationships:

================================
Relationships - React Native SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Realm allows you to define explicit relationships between the types of
objects in an App. A relationship is an object property that references
another Realm object type. You can define
relationships by setting an object's property to another object type
in the :ref:`property schema <react-native-realm-schema>`.

Relationships are direct references to other objects in a realm.
You don't need bridge tables or joins to define a relationship like you
would in a relational database. 
Instead, you can access related objects by reading and writing to the property
that defines the relationship.

Realm Database executes read operations lazily as they come in.
Querying a relationship is just as performant as reading a regular property.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <react-native-to-one-relationship>`
- :ref:`One-to-Many Relationship <react-native-to-many-relationship>`
- :ref:`Inverse Relationship <react-native-inverse-relationship>`

.. note:: Realm vs Other Databases
   
   Objects often contain direct references to other objects.
   When working with objects and references,
   you often copy from database storage into application memory.
   This situation leaves the developer with a choice of what to copy into memory:
   
   - You can copy the entire referenced object ahead of time.
     This means that all referenced data is always available quickly
     but can use up a lot of resources. Depending on the amount of available memory,
     this may not be viable.
   
   - You can copy only a foreign key value for each object ahead of time that you
     can use to query the full object if it's needed.
     These referenced lookups are memory-efficient.
     However, they require more query code, and too many lookups can slow your application down.
   
   Realm's query architecture avoids the tradeoff between memory usage and computational overhead.
   Instead, Realm queries can directly reference :ref:`related objects
   <react-native-relationships>` and their properties on disk.

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _react-native-to-one-relationship:
.. _react-native-define-a-to-one-relationship-property:

One-to-One Relationship
-----------------------

A **one-to-one** relationship means an object is related to at most 
one other object of a particular type. 
To define a one-to-one relationship, specify the property type as the related
Realm object type.

Example
~~~~~~~

In the following example of a **one-to-one** relationship, a ``PetOwner`` may own a single ``Pet``: 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/PetOwner.snippet.ts-petowner-schema.ts
         :language: typescript
         :emphasize-lines: 4, 11
         :linenos:

      .. literalinclude:: /examples/generated/react-native/ts/Pet.snippet.ts-pet-schema.ts
         :language: typescript
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/PetOwner.snippet.js-petowner-schema.js
         :language: javascript
         :emphasize-lines: 7
         :linenos:

      .. literalinclude:: /examples/generated/react-native/js/Pet.snippet.js-pet-schema.js
         :language: typescript
         :linenos:


.. _react-native-to-many-relationship:
.. _react-native-define-a-to-many-relationship-property:

One-to-Many Relationship
------------------------

A **one-to-many** relationship means an object may be related to
multiple objects. To define a to-many relationship, specify a property where the
type is a list or array of the related Realm object type in its :ref:`object
schema <react-native-object-schemas>`.

Example
~~~~~~~
In the following example of a **one-to-many** relationship, a ``User`` may own multiple ``Post`` objects:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
         :language: typescript
         :emphasize-lines: 5, 13
         :linenos:

      .. literalinclude:: /examples/generated/react-native/ts/Post.snippet.ts-post-schema.ts
         :language: typescript
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
         :language: javascript
         :emphasize-lines: 8
         :linenos:

      .. literalinclude:: /examples/generated/react-native/js/Post.snippet.js-post-schema.js
         :language: typescript
         :linenos:

.. _react-native-inverse-relationship:

Inverse Relationship
--------------------

An inverse relationship :ref:`backlinks <rql-backlinks>` to any other objects
that refer to it in a defined one-to-one or one-to-many relationship. Relationship
definitions are unidirectional by default. 

For example, if you define a relationship that maps ``User.posts`` to a list of
``Post`` objects, then you could use an inverse relationship to look up the
``User`` object related to a given ``Post`` object in this way.

To use inverse relationships, you can: 

#. :ref:`Obtain an implicitly backlinked object <react-native-obtain-an-implicitly-backlinked-object>` using the :js-sdk:`Realm.Object.linkingObjects() <Realm.Object.html#linkingObjects>` method.
#. :ref:`Define an inverse relationship explicitly in a schema <react-native-define-an-inverse-relationship-property>` using the ``LinkingObjects`` property.

.. _react-native-obtain-an-implicitly-backlinked-object:

Obtain an Implicitly Backlinked Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To obtain an inversely linked object **without** altering the
object's schema, call the :js-sdk:`Realm.Object.linkingObjects()
<Realm.Object.html#linkingObjects>` method.

Example
````````
Consider the ``User`` and ``Post`` classes from the :ref:`one-to-many relationship
example <react-native-to-many-relationship>`. Since the ``User`` class has a
``posts`` field that is a list of ``Post`` objects, you can obtain the ``User``
object who owns a specific ``Post`` object by calling the
``post.linkingObjects()`` method.

In the following ``PostItem`` example, we obtain information about the user to
whom the post belongs by running a query to look up the linked user.


The ``PostItem`` component does the following:

- Gets the post by passing the ``Post`` class and ``postID`` to the ``useObject()`` hook.
- Gets the user by passing the object type ``'User'`` and the property ``'posts'`` to the ``linkingObjects()`` method and retrieving the first result.
- Returns "The post or user could not be found" if the post or user is ``undefined``.
- Returns the post's title and the user's name if the post and user are found.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/relationships-test.snippet.dynamically-obtain-inverse-relationship.tsx
         :language: typescript
         :emphasize-lines: 3
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/relationship-test.snippet.dynamically-obtain-inverse-relationship.jsx
         :language: typescript
         :emphasize-lines: 3
         :linenos:

.. _react-native-define-an-inverse-relationship-property:

Define an Inverse Relationship Explicitly in a Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To create an inverse relationship, you can define it in your object model by
specifying the ``linkingObjects`` property. The ``linkingObjects`` property
specifies the object type and property name of the relationship that it links
back to.
   
Example
```````
In the following example of an inverse relationship, each ``Post`` object may
belong to a single ``User`` object. This indicates:

- A ``User`` object may have many ``Post`` objects.
- A ``User`` object's ``posts`` property contains all of their posts.
- The ``Post`` object's ``user`` property inverts this relationship: the post's ``user``
  automatically updates to refer back to any ``User`` object that contains the
  ``Post`` object in its ``posts`` property. 
- Each ``Post`` object automatically keeps track of which ``User`` object it belongs to. If a
  ``User`` object is modified, the ``Post`` objects that refer to it are automatically updated.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
         :language: typescript
         :emphasize-lines: 5, 13
         :linenos:

      .. literalinclude:: /examples/generated/react-native/ts/InverseRelationshipPost.snippet.ts-inverserelationshippost-schema.ts
         :language: typescript
         :emphasize-lines: 4, 10-14
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
         :language: javascript
         :emphasize-lines: 8
         :linenos:

      .. literalinclude:: /examples/generated/react-native/js/InverseRelationshipPost.snippet.js-inverserelationshippost-schema.js
         :language: typescript
         :emphasize-lines: 7-11
         :linenos: