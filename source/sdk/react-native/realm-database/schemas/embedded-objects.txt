.. _react-native-data-types-embedded-objects:
.. _react-native-define-an-embedded-object-property:
.. _react-native-embedded-objects:

===================================
Embedded Objects - React Native SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

An embedded object is a special type of :ref:`Realm object <react-native-object-schemas>`
that models complex data about a specific object. Embedded objects are similar
to :ref:`relationships <react-native-relationships>`, but they provide additional
constraints and map more naturally to the denormalized :manual:`MongoDB document
model </core/data-modeling-introduction/>`.

Realm enforces unique ownership constraints that treat each embedded object as
nested data inside a single, specific parent object. An embedded object
inherits the lifecycle of its parent object and cannot exist as an independent
Realm object. This means that embedded objects cannot have a primary key and
that Realm automatically deletes embedded objects if their parent object is
deleted.

.. tip:: Embedded object types are reusable and composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. Any objects that your
   application must persist after the deletion of their parent object
   should use :ref:`relationships <react-native-relationships>`
   instead.

Realm Object Models
~~~~~~~~~~~~~~~~~~~

To define an embedded object, set ``embedded``
to ``true``. You can reference an embedded object type from parent object types
in the same way as you would define a relationship:

.. tabs-realm-languages::

    .. tab::
       :tabid: typescript

       .. literalinclude:: /examples/generated/react-native/ts/Address.snippet.ts-address-schema.ts
          :language: typescript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Contact.snippet.ts-contact-schema.ts
          :language: typescript
          :emphasize-lines: 13
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Business.snippet.ts-business-schema.ts
          :language: typescript
          :emphasize-lines: 12
          :linenos:

    .. tab::
       :tabid: javascript

       .. literalinclude:: /examples/generated/react-native/js/Address.snippet.js-address-schema.js
          :language: javascript
          :emphasize-lines: 4
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Contact.snippet.js-contact-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Business.snippet.js-business-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

.. important::
   
   Embedded objects cannot have a :ref:`primary key <react-native-primary-keys>`.

JSON Schema
~~~~~~~~~~~

.. include:: /includes/embedded-object-json-schema.rst

Read and Write Embedded Objects
-------------------------------

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign an instance of the embedded object
to a parent object's property.

Example
~~~~~~~

In the following ``CreateContact`` example, we create a new ``Contact`` object 
with an embedded ``Address`` object.

The ``CreateContact`` component does the following:

- Creates React `state <https://reactjs.org/docs/react-component.html#state>`__ variables that
  represent the contact's name and address details.
- Gets access to an open realm instance by calling the ``useRealm()`` hook within the 
  component.
- Creates a component method ``submitContact()`` that performs a write transaction 
  to create a new ``Address`` embedded object and ``Contact`` parent object based 
  on the ``TextInput`` values for the contact's name and address.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the
  "Submit Contact" button that calls ``submitContact()``.

.. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.create-embedded-object.tsx
   :language: typescript
   :emphasize-lines: 13-25
   :linenos:

Query a Collection on Embedded Object Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use dot notation to filter or sort a :ref:`collection
<react-native-results-collections>` of objects based on an embedded object
property value.

Example
~~~~~~~

In the following ``ContactList`` example, we filter and query an embedded 
``Address`` object.

The ``ContactList`` component does the following:

- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook.
- Filters for contacts with the name "John Smith" by passing :js-sdk:`collection.filtered()
  <Realm.Collection.html#filtered>` on the query ``"name == 'John Smith'"``.
- Retrieves the contact's street address by using dot notation.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.query-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 3, 7-9
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.query-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 3, 7-9
         :linenos:

Update an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update a property in an embedded object, modify the property in a
write transaction.

Example
~~~~~~~

In the following ``UpdateContact`` example, we update the ``street`` property for 
an embedded ``Address`` object.

The ``UpdateContact`` component does the following:

- Creates a React `state <https://reactjs.org/docs/react-component.html#state>`__ variable
  that represents the contact's new street address.
- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook 
  and filters for the contact that matches the name passed into the component as a `prop 
  <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an opened realm instance by calling the ``useRealm()`` hook within the 
  component. 
- Creates a component method ``updateStreet()`` that performs a write transaction and 
  sets the contact's street address to the value of the ``street`` state variable.
- Renders a ``TextInput`` that displays and changes the ``street`` state variable.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the 
  ``'Update Street Address'`` button that calls ``updateStreet()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.update-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 4, 11
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.update-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 4, 11
         :linenos:

Overwrite an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To overwrite an embedded object, reassign the embedded object property
of a party to a new instance in a write transaction.

Example
~~~~~~~

In the following ``OverwriteContact`` example, we overwrite an embedded ``Address`` object.

The ``OverwriteContact`` component does the following:

- Creates React `state <https://reactjs.org/docs/react-component.html#state>`__ variables
  that represent the contact's new address.
- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook 
  and filters for the contact that matches the name passed into the component as a `prop
  <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an opened realm instance by calling the ``useRealm()`` hook within the 
  component.
- Creates a component method ``updateAddress()`` that performs a write transaction and 
  creates a new ``Address`` object that overwrites the existing address in the ``Contact`` object.
- Renders ``TextInput`` components that display and change the state variables for the 
  new address.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the 
  ``'Overwrite Address'`` button that calls ``updateAddress()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.overwrite-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 8, 14-21
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.overwrite-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 6, 12-19
         :linenos:

Delete an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~
Realm Uses Cascading Deletes for Embedded Objects. To delete an embedded object,
delete the embedded object's parent. 

Example
~~~~~~~

In the following ``DeleteContact`` example, we delete an embedded object and its 
parent object.

The ``DeleteContact`` component does the following:

- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook.
- Filters for the ``Contact`` object that matches the name passed into the component as a 
  `prop <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an open realm instance by calling the ``useRealm()`` hook within the component. 
- Creates a component method ``deleteContact()`` that performs a write transaction and calls
  :js-sdk:`Realm.delete() <Realm.html#delete>` to remove the ``Contact`` object.
- Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the "Delete Contact" 
  button that calls ``deleteContact()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.delete-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 8-10, 11-13, 20, 26-29
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.delete-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 3-5, 6-8, 15, 21-24
         :linenos:
