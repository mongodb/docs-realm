.. _react-native-data-types-sets:

=======================
Sets - React Native SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.5.0

Overview
--------
A **Realm Set** is a special object that allows you to store a
collection of unique values. **Realm Sets** are based on JavaScript
:mdn:`sets <Web/JavaScript/Reference/Global_Objects/Set>`, but can only contain
values of a single type and can only be modified within a write transaction.
Sets allow you to perform math operations such as finding the union,
intersection, or difference between two sets. To learn more about performing
these operations, see the MDN docs for :mdn:`Implementing basic set operations
<Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations>`.
   
.. _react-native-define-set-objects:

Realm Object Models
-------------------
To define a property type as a ``Realm Set``, specify the data type
you want in the set, followed by ``<>``. For instance, for a set made of integer
values, specify ``"int<>"``. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Character.snippet.ts-character-schema.ts
         :language: typescript
         :emphasize-lines: 4-5, 13-14
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/Character.snippet.js-character-schema.js
         :language: javascript
         :emphasize-lines: 8-9
         :linenos:

.. _react-native-create-set-objects:

Create an Object With a Set
---------------------------
To create an object with a **Realm Set** property, you must create
the object within a write transaction. When defining your Realm
object, initialize the **Realm Set** by passing an empty array or an
array with your initial values.

Example
~~~~~~~

In the following example of a ``CreateInitialCharacters`` component we create
``Character`` objects with ``Set`` properties.

The ``CreateInitialCharacters`` component does the following:

- Get access to an opened realm instance by calling the ``useRealm()`` hook within the component. 
- Use React's `useEffect <https://reactjs.org/docs/hooks-effect.html>`__ hook to call an anonymous function only once by passing ``useEffect`` an `empty dependency array <https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects>`__ as a second argument.
- Within the anonymous function, we create two different ``Character`` objects by using the :mdn:`new <Web/JavaScript/Reference/Operators/new>` operator operator to create new realm objects within a write transaction. We set each character's ``inventory`` and ``levelsCompleted`` sets as an array with initial values.
- Retrieve all characters in the realm instance by passing the ``Character`` class to the ``useQuery()`` hook.
- Display each character's name in the UI as a ``Text`` element.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.create-set-object.tsx
         :language: typescript
         :emphasize-lines: 4-5, 13-14
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.create-set-object.jsx
         :language: javascript
         :emphasize-lines: 8-9
         :linenos:

.. _react-native-add-items-to-set:

Add Items to a Set
------------------
To add an item to a set, pass the new value to the ``<Realm.Set>.add()`` method within a write transaction.

Example
~~~~~~~

In the following example of a ``AddInventoryToCharacter`` component we add new ``Set`` elements to the character's inventory.

The ``AddInventoryToCharacter`` component does the following:

- Get access to an opened realm instance by calling the ``useRealm()`` hook within the component. 
- Creates a `state variable <https://reactjs.org/docs/hooks-state.html>`__ called "inventoryItem" that represents the new inventory item to add to the inventory set.
- Uses the ``useQuery`` hook to perform a query for all characters, and filter the results to only include the characters with the name matching the ``characterName`` passed to the component as a `prop <https://reactjs.org/docs/components-and-props.html>`__. Then we get the first matching result.
- Create a component method ``addInventoryItem()`` that performs a write transaction that adds an inventory item to the character's inventory by passing the ``inventoryItem`` state variable to the :js-sdk:`Realm.Set.add() <Realm.Set.html#add>` method.
- Render a ``TextInput`` that changes the ``inventoryItem`` state variable, and a ``Button`` that calls the ``addInventoryItem()`` method.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/sets-test.snippet.add-items-to-set.tsx
         :language: typescript
         :emphasize-lines: 4-5, 13-14
         :linenos:

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/react-native/js/sets-test.snippet.add-items-to-set.jsx
         :language: javascript
         :emphasize-lines: 8-9
         :linenos:

.. _react-native-check-if-set-has-items:

Check if a Set has Specific Items
---------------------------------
To determine if a set contains a particular value, pass the value to the ``<Realm.Set>.has()`` method. The
``set.has()`` method will return true if the set contains the value specified.

.. literalinclude:: /examples/generated/node/data-types.snippet.check-if-set-has-items.js
   :language: javascript

.. _react-native-check-set-size:

Check the Size of a Set
-----------------------
To discover how many items are in a set, you can check the set's ``size`` property.

.. literalinclude:: /examples/generated/node/data-types.snippet.check-set-size.js
   :language: javascript

.. _react-native-remove-specific-item-from-set:

Remove an Item from a Set
-------------------------
To remove a specific value from a set, pass the value to the ``<Realm.Set>.delete()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.snippet.remove-specific-item-from-set.js
   :language: javascript


.. _react-native-remove-all-items-from-set:

Remove all Items from a Set
---------------------------
To clear the set, run the ``<Realm.Set>.clear()`` method within a write transaction.

.. literalinclude:: /examples/generated/node/data-types.snippet.remove-all-items-from-set.js
   :language: javascript

.. react-native-traverse-set:

Traverse a Set
--------------
To traverse a set, use the ``<Realm.Set>.forEach()`` method or alternative :mdn:`iteration method
<Web/JavaScript/Reference/Global_Objects/Set#iteration_methods>`. 

.. literalinclude:: /examples/generated/node/data-types.snippet.traverse-a-set.js
   :language: javascript


.. example:: Traversing a Set in Order

   The order of the **Realm Set** may be different from the order that 
   the items were added.

   You can track the set order by updating an array when a new value is added. For example:

   .. literalinclude:: /examples/generated/node/data-types.snippet.make-array-with-insertion-order-from-set.js
      :language: javascript
