.. _react-native-object-models:

============================
Object Models - React Native
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. _react-native-object-types:
.. _react-native-object-schemas:

Key Concept: Object Types & Schemas
-----------------------------------

Every Realm object conforms to a specific **object type**, which is essentially
a class that defines the properties and :ref:`relationships <react-native-client-relationships>`
for objects of that type using a pre-defined schema. Realm guarantees that all
objects in a realm conform to the schema for their object type and validates
objects whenever they're created, modified, or deleted.

Realm objects are fundamentally similar to a common JavaScript object but they
also bring along a few additional features like schema validation and :ref:`live
queries <react-native-live-queries>`. The React Native SDK memory maps Realm objects directly
to native JavaScript objects, which means there's no need to use a special data
access library, such as an :wikipedia:`ORM <Object-relational_mapping>`.
Instead, you can work with Realm objects as you would any other object.

.. example::
   
   The following schema defines a ``Student`` object type with a string name and
   a list of integer grades.
   
   .. code-block:: javascript
      
      const studentSchema = {
        name: "Student",
        properties: {
          name: "string",
          grades: "int[]"
        }
      }

.. tip:: Learn How to Define an Object Schema
   
   For code examples that show how to define a Realm object schema in the
   React Native SDK, see :ref:`Define a Realm Object Schema
   <react-native-define-a-realm-object-schema>`.

.. _react-native-realm-schema:

Realm Schema
~~~~~~~~~~~~

A **realm schema** is a list of valid :ref:`object schemas
<react-native-object-schemas>` that a realm may contain. Every Realm object must conform
to an object type that's included in its realm's schema.

If a realm already contains data when you open it, Realm Database
validates each object to ensure that an object schema was provided for its type
and that it meets all of the constraints specified in the schema.

.. example::
   
   A realm that contains basic data about books in libraries might use a
   schema like the following:
   
   .. code-block:: json
      
      [
        {
          "type": "Library",
          "properties": {
            "address": "string",
            "books": "Book[]"
          }
        },
        {
          "type": "Book",
          "primaryKey": "isbn",
          "properties": {
            "isbn": "string",
            "title": "string",
            "author": "string",
            "numberOwned": { "type": "int?", "default": 0 },
            "numberLoaned": { "type": "int?", "default": 0 }
          }
        }
      ]
