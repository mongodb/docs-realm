.. _react-native-configure-realm:

=======================================
Configure a Realm - React Native SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``@realm/react`` library uses `React Context objects <https://reactjs.org/docs/context.html>`__
to create and configure realms. You can access realms with React hooks.

``@realm/react`` automatically opens and closes realms for you. To manage how it
does so, you need to pass props to the ``@realm/react`` Context Providers:

- ``<AppProvider>``
- ``<UserProvider>``
- ``<RealmProvider>``

For Flexible Sync realms, you need all three Providers, nested in the order above.
For local-only realms, you only need ``<RealmProvider>``.

Create a Context Object with ``createRealmContext``
---------------------------------------------------

By passing a :js-sdk:`Configuration <Realm.html#~Configuration>` object to 
``createRealmContext``, you can create a Context object that contains an open 
realm and some hooks that give you access to the realm.

In this example, we create and export our config object so that it can be used elsewhere.

.. literalinclude:: /examples/generated/react-native/js/index.snippet.create-realm-context.js
   :language: javascript

Configure a realm with ``<RealmProvider>``
------------------------------------------

``<RealmProvider>`` is a wrapper for your Realm Database. All child components
inside ``<RealmProvider>`` have access to hooks that let you read, write, and update
data. This is what a local-only realm wrapper might look like:

.. literalinclude:: /examples/generated/react-native/js/configure-realm-local.test.snippet.configure-realm.jsx
   :language: javascript

Enable Flexible Sync
~~~~~~~~~~~~~~~~~~~~

To use a Flexible Sync realm, you must nest ``<RealmProvider>`` within ``<AppProvider>`` 
and ``<UserProvider>``. This ensures your client has access to your App Services App
and that a user with permissions exists to access your realm data.

.. literalinclude:: /examples/generated/react-native/js/configure-realm-sync.test.snippet.configure-realm-sync.jsx
   :language: javascript

Open more than one realm
~~~~~~~~~~~~~~~~~~~~~~~~

You can open more than one realm at a time by creating another Context object.

.. literalinclude:: /examples/generated/react-native/js/configure-realm-sync.test.snippet.two-realm-contexts.jsx
   :language: javascript

Key Concept: Realm Files
------------------------

Realm Database stores a binary encoded version of every object and type in a
realm in a single ``.realm`` file. The file is located at a specific path that
you define when you open the realm.

.. tip:: Implement Compacting in Your Production Application

   Every production application should implement a ``shouldCompactOnLaunch`` 
   callback to periodically reduce the realm file size.

.. note:: Auxiliary Realm Files
   
   Realm Database creates additional files for each realm.
   To learn more about these files, see :ref:`Realm Database Internals <react-native-realm-database>`.

.. warning:: Use Caution When Deleting Realm Files
   
   In some circumstances, such as a client reset scenario, you might need to
   delete a realm file and its auxiliary files.
   
   If you delete a realm file or any of its auxiliary files while one or
   more instances of the realm are open, you might corrupt the realm or
   disrupt :ref:`sync <sync>`.
   
   You may safely delete these files when all instances of a realm are
   closed. Before you delete a realm file, make sure that you back up any
   important objects as you will lose all unsynced data in the realm.
