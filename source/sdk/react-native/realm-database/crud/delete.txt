.. _react-native-delete-objects:

================================
CRUD - Delete - React Native SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About the Examples on this Page
-------------------------------

The examples on this page use the following schema:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/reactnative/ts/Dog.snippet.ts-dog-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/reactnative/js/Dog.snippet.js-dog-schema.js
         :language: javascript

.. _react-native-delete-an-object:
.. _react-native-delete:

Delete an Object
----------------

To delete an object from a realm, pass the object to :js-sdk:`Realm.delete()
<Realm.html#delete>` inside of a write transaction.

To delete an object from a realm, pass the object to Realm.delete() inside of a
write transaction.

In the following example of a ``DogList`` component, we get access to our realm
instance by calling the ``useRealm()`` hook. Then we retrieve all ``Dog``
objects from the realm by passing the ``Dog`` class to the ``useQuery()`` hook. We
render the dog's name and a delete button for each dog in the UI. When an
application user presses a delete button for the dog, we call the component's
``deleteDog()`` method. Within that method, We perform a write transaction and
pass the dog object to the ``Realm.delete()`` method. 

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/reactnative/ts/delete-test.snippet.crud-delete-object.tsx
         :language: typescript
         :emphasize-lines: 3, 10-12
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/reactnative/js/delete-test.snippet.crud-delete-object.jsx
         :language: javascript
         :emphasize-lines: 3, 10-12
         :linenos:

.. important:: Do not use objects after delete
   
   You cannot access or modify an object after you have deleted it from a Realm.
   If you try to use a deleted object, Realm Database throws an error.

.. _react-native-delete-multiple-objects:
.. _react-native-delete-collection:
.. _react-native-delete-all-object-of-a-specific-type:

Delete Multiple Objects
-----------------------

To delete a collection of objects from a realm, pass the collection to
:js-sdk:`Realm.delete() <Realm.html#delete>` inside of a write transaction.

To delete all objects of a given object type from a realm, pass
``Realm.objects(<ObjectType>)`` to the :js-sdk:`Realm.delete()
<Realm.html#delete>` method inside of a write transaction.

In the following example of a ``DogList`` component, we get access to our realm
instance by calling the ``useRealm()`` hook. Then we set the ``myDogs`` variable
to all the ``Dog`` objects in the realm by passing the ``Dog`` class to the
``useQuery()`` hook. 

Within the component's render method, we:

- Display the "Delete Young Dog Objects" and  "Delete all Dog Objects" buttons
- Map through the ``Dog`` objects, displaying the dog's name and age

When an application user presses the "Delete all Dog Objects," we call the
component's ``deleteAllDogObjects()`` method that performs a write transaction.
Within the write transaction, we pass the ``myDogs`` variable to
``Realm.delete()``. 

When an application user presses the "Delete Young Dog Objects," we call the
component's ``deleteAllDogObjects()`` method. We call
:js-sdk:`Collection.filtered() <Realm.Collection.html#filtered>` to retrieve
only the dogs under age 3. Within the write transaction, we pass the young dogs
to ``Realm.delete()``. 

When you delete``Dog`` objects from the realm instance, the UI re-renders and
automatically removes them. 


.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/reactnative/ts/delete-test.snippet.crud-delete-multiple-objects.tsx
         :language: typescript
         :emphasize-lines: 3, 6-9, 12-14
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/reactnative/js/delete-test.snippet.crud-delete-multiple-objects.jsx
         :language: javascript
         :emphasize-lines: 3, 6-9, 12-14
         :linenos:

.. _react-native-delete-all-objects-in-a-realm:

Delete All Objects in a Realm
-----------------------------

To delete **all** objects from the realm, call :js-sdk:`Realm.deleteAll()
<Realm.html#deleteAll>` inside of a write transaction. This clears the realm
of all object instances but does not affect the realm's schema.

In the following example of a ``DeleteProfileSettingsScreen`` component, we get
access to our realm instance by calling the ``useRealm()`` hook. 

Within the UI, we render a "Delete all data" button that calls the component's
``deleteAllData()`` method. The ``deleteAllData()`` method performs a write
transaction and deletes all objects from the realm using the
``Realm.deleteAll()`` method.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/reactnative/ts/delete-test.snippet.crud-delete-all-objects.tsx
         :language: typescript
         :emphasize-lines: 2, 5-7
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/reactnative/js/delete-test.snippet.crud-delete-all-objects.jsx
         :language: javascript
         :emphasize-lines: 2, 5-7
         :linenos:

.. tip:: Delete All In Development
   
   :js-sdk:`Realm.deleteAll() <Realm.html#deleteAll>` is a useful method to
   quickly clear out your realm in the course of development. For example,
   rather than writing a migration to update objects to a new schema, it may be
   faster to delete and then re-generate the objects with the app itself.
