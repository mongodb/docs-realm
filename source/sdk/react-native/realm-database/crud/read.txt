.. _react-native-read-objects:

==============================
CRUD - Read - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About the Examples on this Page
-------------------------------
The examples on this page use the following schemas:

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/Person.snippet.ts-person-schema.ts
         :language: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Task.snippet.ts-task-schema.ts
         :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Person.snippet.js-person-schema.js
         :language: javascript

      .. literalinclude:: /examples/generated/react-native/js/Task.snippet.js-task-schema.js
         :language: typescript


.. _react-native-read-operations:

Read Operations
---------------

Read operations are queries to find your data stored in Realm Database. Use the
``@realm/react`` hooks to find specific objects and get collections by object
type.

.. _react-native-find-a-specific-object-by-primary-key:

Find a Specific Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you know the :ref:`primary key <react-native-primary-keys>` for a given
object, you can look it up directly by passing the class type and primary key to
the ``useObject()`` hook. 

In the following example of a ``TaskItem`` component, we use the ``useObject()``
hook to find a task based on its primary key: ``_id``. Then we render the task's
name and priority in the UI.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-object-by-id.tsx
         :language: typescript
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-object-by-id.jsx
         :language: javascript
         :linenos:

.. _react-native-query-an-object-type:
.. _react-native-get-all-objects:
.. _react-native-filter-queries:
.. _react-native-filter-results:

Query for an Object Type and Filter Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Query operations return a collection of Realm objects that match the query as a
:js-sdk:`Realm.Results <Realm.Results.html>` object. A basic query matches all
objects of a given type in a realm, but you can also apply a filter to the
collection to find specific objects.

A **filter** selects a subset of results based on the value(s) of one or more
object properties. Realm Database lets you filter data using
:ref:`Realm Query Language <rql>`, a string-based query language to constrain
searches when retrieving objects from a realm.

Call :js-sdk:`filtered() <Realm.Collection.html#filtered>` on the query results
collection to filter a query. Pass a Realm Query Language query as an argument
to ``filtered()``.

In the following example of a ``TaskList`` component, we:

#. Obtain all ``Task`` objects by passing "Task" to the ``useQuery()`` hook.
#. Obtain all high-priority tasks and low-progress task by passing a query to ``filtered()``.
#. Use the map function to render a list of Text components displaying information about the high-priority and low-progress tasks.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-filter-data.tsx
         :language: typescript
         :emphasize-lines: 3, 6, 9-11
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-filter-data.jsx
         :language: javascript
         :emphasize-lines: 3, 6, 9-11
         :linenos:

.. tip:: Filter on Related and Embedded Object Properties

   To filter a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-relationships>`, use dot-notation as if it were in a regular,
   nested object.

.. seealso::

   - :ref:`Realm Query Language Reference <rql>`
   - :ref:`Query Data - React Native SDK <react-native-query-data>`

.. _react-native-sort-query-results:
.. _react-native-sort-results:

Query for an Object Type and Sort Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **sort** operation allows you to configure the order in which
Realm Database returns queried objects. You can sort based on one or more
properties of the objects in the results collection. Realm Database only
guarantees a consistent order of results if you explicitly sort them.

To sort a query, call the :js-sdk:`sorted() <Realm.Collection.html#sorted>`
method on the query results collection.

In the following example of a ``TaskList`` component, we use the ``useQuery()``
hook to initially retrieve the set of Task objects. We then use the
``sorted()`` method to work with the data in various ways:

#. Sort objects based on the task's name alphabetically.
#. Sort objects based on the task's name alphabetically in descending order.
#. Sort objects based on the task's priority in descending order and the task's name in ascending order.
#. Sort objects based on the assignee object's name alphabetically.

Finally, we map through each list of tasks and render them in the UI.

.. tabs-realm-languages::
      
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/react-native/ts/read-test.snippet.crud-read-sort-data.tsx
         :language: typescript
         :emphasize-lines: 3, 5, 7, 9-12
         :linenos:
          
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/read-test.snippet.crud-read-sort-data.jsx
         :language: javascript
         :emphasize-lines: 3, 5, 7, 9-12
         :linenos:

.. tip:: Sort on Related and Embedded Object Properties
   
   To sort a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-relationships>`, use dot-notation as if it were in a
   regular, nested object.
