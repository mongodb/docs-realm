.. _react-native-read-objects:

==============================
CRUD - Read - React Native SDK
==============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

About the Examples on this Page
-------------------------------
The examples on this page use the following schema:

.. literalinclude:: /examples/generated/node/read-and-write-data.snippet.task-schema-crud.js
  :language: javascript


.. _react-native-read-operations:

Read Operations
---------------

.. _react-native-find-a-specific-object-by-primary-key:

Find a Specific Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you know the :ref:`primary key <react-native-primary-keys>` for a given object, you
can look it up directly with :js-sdk:`Realm.objectForPrimaryKey()
<Realm.html#objectForPrimaryKey>`.

.. literalinclude:: /examples/generated/node/read-and-write-data.snippet.read-and-write-data-object-for-primary-key.js
  :language: javascript

.. _react-native-query-an-object-type:
.. _react-native-get-all-objects:

Query an Object Type
~~~~~~~~~~~~~~~~~~~~

To query for objects of a given type in a realm, pass the type name to
:js-sdk:`Realm.objects() <Realm.html#objects>`.

Query operations return a collection of Realm objects that match the
query as a :js-sdk:`Realm.Results <Realm.Results.html>` object. A basic query
matches all objects of a given type in a realm, but you can also apply a
:ref:`filter <react-native-filter-queries>` to the collection to find specific objects.

.. literalinclude:: /examples/generated/node/read-and-write-data.snippet.read-and-write-data-query-an-object-type.js
  :language: javascript

.. _react-native-filter-queries:
.. _react-native-filter-results:

Filter Queries
~~~~~~~~~~~~~~

A **filter** selects a subset of results based on the value(s) of one or more
object properties. Realm Database lets you filter data using
:ref:`Realm Query Language <rql>`, a string-based query language to constrain
searches when retrieving objects from a realm.

To filter a query, call :js-sdk:`filtered()
<Realm.Collection.html#filtered>` on the query results collection.
Pass a Realm Query Language query as argument to ``filtered()``.

In the following example, we use the comparison operators to:

- Find high priority tasks by comparing the value of the ``priority`` property
  value with a threshold number, above which priority can be considered high.
- Find just-started or short-running tasks by seeing if the ``progressMinutes``
  property falls within a certain range.

.. literalinclude:: /examples/generated/node/read-and-write-data.snippet.read-and-write-filter-queries.js
  :language: javascript

.. tip:: Filter on Related and Embedded Object Properties
   
   To filter a query based on a property of an :ref:`embedded object
   <react-native-embedded-objects>` or a :ref:`related object
   <react-native-client-relationships>`, use dot-notation as if it were in a regular,
   nested object.

.. seealso::

   - :ref:`Realm Query Language Reference <rql>`
   - :ref:`Query Data - React Native SDK <react-native-query-data>`

.. _react-native-sort-query-results:
.. _react-native-sort-results:

Sort Query Results
~~~~~~~~~~~~~~~~~~

A **sort** operation allows you to configure the order in which
Realm Database returns queried objects. You can sort based on one or more
properties of the objects in the results collection. Realm Database only
guarantees a consistent order of results if you explicitly sort them.

To sort a query, call the :js-sdk:`sorted() <Realm.Collection.html#sorted>`
method on the query results collection.

.. literalinclude:: /examples/generated/node/read-and-write-data.snippet.read-and-write-sorted-queries.js
  :language: javascript
  :emphasize-lines: 4, 6, 8, 13

To sort a query based on a property of an :ref:`embedded object
<react-native-embedded-objects>` or a :ref:`related object
<react-native-client-relationships>`, use dot-notation as if it were in a
regular, nested object.