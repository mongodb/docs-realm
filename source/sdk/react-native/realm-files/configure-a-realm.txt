.. _react-native-configure-realm:

====================================
Configure a Realm - React Native SDK
====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To configure and open a non-synced realm using the ``@realm/react`` library, pass
a Realm configuration object to a ``RealmProvider`` component. All child
components of ``RealmProvider`` can access the realm using hooks.

By passing a :js-sdk:`Configuration object <Realm.html#~Configuration>` to 
``RealmProvider`` you get:

- A component that contains an open realm 
- Some hooks that give you access to the realm

How you configure your realm will determine the capabilities of your realm
and how you work with your data.

Configure a Realm Without Sync
------------------------------

You can import ``RealmProvider`` from ``@realm/react``. This provider is a
wrapper that exposes a realm to its child components. All child components
inside ``RealmProvider`` have access to hooks that let you read, write, and
update data.

When ``RealmProvider`` is rendered, it opens the realm. This means that you need
to ensure the provider renders before its child components can access the realm.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-local.test.snippet.configure-realm.tsx
   :language: typescript
   :emphasize-lines: 24-26

Configuration Options
~~~~~~~~~~~~~~~~~~~~~

You can configure ``RealmProvider`` by setting props that match the properties
of a :js-sdk:`Configuration object <Realm.html#~Configuration>`. You can also
set ``fallback`` and ``realmRef`` props.

- ``realmRef``. Used with ``useRef`` to expose the configured realm to processes
   outside of ``RealmProvider``. This can be useful for things like a client
   reset fallback. 
- ``fallback``. Rendered while waiting for the realm to open. Local realms
   usually open fast enough that the ``fallback`` prop isn't needed.

Configure a Synced Realm
------------------------

To open a realm that synchronizes data with Atlas using Device Sync,
refer to :ref:`Open a Synced Realm <react-native-open-a-synced-realm>`.

Expose More Than One Realm
--------------------------

The ``@realm/react`` library exposes realms in your application using 
`React Context objects <https://react.dev/learn/passing-data-deeply-with-context>`__
and Provider components. You can access realms with React hooks.

To expose more than one realm, consider the following:

- Each realm needs its own context object, created with ``createRealmContext()``.
- The providers and hooks within each context should be namespaced so that it's
  easy to reason about the realm you're working with.
- If you import ``RealmProvider`` directly from ``@realm/react``, it is a
  separate context object. That object's providers and hooks can't be unsynced
  with context objects created using ``createRealmContext``.

Create Separate Context Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can open more than one realm at a time by creating additional Context
Objects.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-multiple.test.snippet.create-contexts.tsx
   :language: typescript

Extract Providers and Hooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need to extract providers and hooks from each Context Object. You
should namespace the providers and hooks using destructuring so that it's easy
to reason about the realm you're working with.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-multiple.test.snippet.extract-providers-and-hooks.tsx
   :language: typescript

Use Namespaced Providers and Hooks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After extracting a Context Object's providers and hooks, you can use them in
your app's components. Child components inside of extracted providers have
access to extracted hooks.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-multiple.test.snippet.use-contexts.tsx
   :language: typescript

Configure an In-Memory Realm
----------------------------

To create a realm that runs entirely in memory without being written to a file,
add ``inMemory: true`` to your :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object:

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-in-memory.test.snippet.in-memory-realm.tsx
   :language: typescript
   :emphasize-lines: 6-8

In-memory realms may use disk space if memory is running low, but files created 
by an in-memory realm are deleted when you close the realm.

Access a Realm Without Providing a Schema
-----------------------------------------

After a realm has been created on a device, you don't need to always pass in a
schema to access the realm. Instead, you can use ``RealmProvider`` without
passing any object models to its ``schema`` property. The realm's schema is
derived from the existing realm file at ``Realm.defaultPath``.

Accessing a realm without providing a schema only works for local realms. You
must always pass a schema when using a Synced realm.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-no-schema.test.snippet.configure-no-schema.tsx
   :language: typescript

Encrypt a Realm
---------------

To encrypt a realm file on disk, refer to 
:ref:`Encrypt a Realm <react-native-encrypt-a-realm>`.

Key Concept: Realm Files
------------------------

Realm stores a binary encoded version of every object and type in a
realm in a single ``.realm`` file. The file is located at a specific path that
you define when you open the realm.

.. tip:: Implement Compacting in Your Production Application

   Every production application should implement a ``shouldCompactOnLaunch`` 
   callback to periodically reduce the realm file size.

.. note:: Auxiliary Realm Files
   
   Realm creates additional files for each realm.
   To learn more about these files, see :ref:`Realm Internals <react-native-realm-database>`.

.. warning:: Use Caution When Deleting Realm Files
   
   In some circumstances, such as a client reset scenario, you might need to
   delete a realm file and its auxiliary files.
   
   If you delete a realm file or any of its auxiliary files while one or
   more instances of the realm are open, you might corrupt the realm or
   disrupt :ref:`sync <sync>`.
   
   You may safely delete these files when all instances of a realm are
   closed. Before you delete a realm file, make sure that you back up any
   important objects as you will lose all unsynced data in the realm.
