.. _react-native-authenticate-users:

=====================================
Authenticate Users - React Native SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The SDK provides an API for authenticating users using any enabled
authentication provider. Instantiate a :js-sdk:`Realm.Credentials <Realm.Credentials.html>`
object and pass it to :js-sdk:`Realm.App.logIn() <Realm.App.html#logIn>`
to authenticate and obtain a :js-sdk:`Realm.User <Realm.User.html>` object.
The ``Realm.Credentials`` class exposes factory methods that correspond to
each of the authentication providers.

Prerequisites
-------------

Before you can authenticate a user, you must:

- :ref:`Create an App Services App <create-a-realm-app>`
- Enable one or more :ref:`authentication providers <authentication-providers>`
  in the App.
- :ref:`Install the React Native SDK <react-native-install>`

.. _react-native-configure-authentication:

Configure User Authentication in Client
---------------------------------------

Configure user authentication with the ``@realm/react`` ``AppProvider``
and ``UserProvider`` components and ``useApp()`` and ``useUser()`` hooks.

To set up user authentication:

#. Wrap all components you want to use with App Services in an ``AppProvider`` component.
#. Inside of ``AppProvider``, wrap all components that you want to have access
   to an authenticated user with a ``UserProvider`` component.
#. In ``UserProvider``, include a ``fallback`` prop with another component
   that logs a user in. The app renders this component if there
   is no authenticated user.
#. In the component passed to the ``UserProvider.fallback`` prop, authenticate a user
   with ``Realm.App.logIn()``, which you can access with the ``useApp()`` hook.

Components wrapped by ``UserProvider`` only render if your app has
an authenticated user. These components can access the authenticated user
with the ``useUser()`` hook.

.. literalinclude:: /examples/generated/react-native/ts/log-in.test.snippet.log-in-user.tsx
   :language: ts

Log In
------

Realm provides an API for authenticating users using any enabled
authentication provider. Instantiate a ``Credentials`` object and pass it to the
``app.login()`` method to authenticate a user login and create a ``User``
object.

User Sessions
~~~~~~~~~~~~~

The React Native SDK communicates with Atlas App Services to manage sessions
with access tokens and refresh tokens.

To learn more about session management, refer to  :ref:`<user-sessions>`
in the App Services documentation.

.. _react-native-anonymous-login:
.. _react-native-login-anonymous:

Anonymous User
--------------

The :ref:`Anonymous <anonymous-authentication>` provider allows users to log in
to your application with temporary accounts that have no associated information.

To log in, create an anonymous credential and pass it to ``App.logIn()``:

.. literalinclude:: /examples/generated/node/authenticate.snippet.anonymous-login.js
   :language: javascript

.. _react-native-email-password-login:
.. _react-native-login-email-password:

Email/Password User
-------------------

The :ref:`email/password <email-password-authentication>` authentication
provider allows users to log in to your application with an email address and a
password.

To log in, create an email/password credential with the user's email address and
password and pass it to ``App.logIn()``:

.. literalinclude:: /examples/generated/node/authenticate.snippet.email-password-login.js
   :language: javascript


.. _react-native-api-key-login:
.. _react-native-login-api-key:

API Key User
------------

The :ref:`API key <api-key-authentication>` authentication provider allows
server processes to access your app directly or on behalf of a user.

To log in with an API key, create an API Key credential with a server or user
API key and pass it to ``App.logIn()``:

.. literalinclude:: /examples/generated/node/authenticate.snippet.server-api-key-login.js
   :language: javascript

.. _react-native-custom-jwt-login:
.. _react-native-login-custom-jwt:

Custom JWT User
---------------

The :ref:`Custom JWT <custom-jwt-authentication>` authentication provider
allows you to handle user authentication with any authentication system that
returns a :ref:`JSON web token <json-web-tokens>`.

To log in, create a Custom JWT credential with a JWT from the external system
and pass it to ``App.logIn()``:

.. literalinclude:: /examples/generated/node/authenticate.snippet.custom-jwt-login.js
   :language: javascript

.. _react-native-custom-function-login:
.. _react-native-login-custom-function:

Custom Function User
--------------------

The :ref:`Custom Function <custom-function-authentication>` authentication
provider allows you to handle user authentication by running a :ref:`function
<functions>` that receives a payload of arbitrary information about a user.

To log in with the custom function provider, create a Custom Function credential
with a payload object and pass it to ``App.logIn()``:

.. literalinclude:: /examples/generated/node/authenticate.snippet.custom-function-login.js
   :language: javascript

.. _react-native-facebook-login:
.. _react-native-login-facebook:

Facebook User
-------------

The :ref:`Facebook <facebook-authentication>` authentication provider allows
you to authenticate users through a Facebook app using their existing Facebook
account.

To log a user in with their existing Facebook account, you must configure and
enable the :ref:`Facebook authentication provider <facebook-authentication>`
for your App Services App.

.. include:: /includes/note-facebook-profile-picture-url.rst

You can use the :facebook:`official Facebook SDK <docs/facebook-login/overview>`
to handle the user authentication and redirect flow from a client application.
Once authenticated, the Facebook SDK returns an access token that you can send
to your React Native app and use to finish logging the user in to your app.

.. code-block:: javascript

   // Get the access token from a client application using the Facebook SDK
   const accessToken = getFacebookAccessToken();

   // Log the user in to your app
   const credentials = Realm.Credentials.facebook(accessToken);
   app.logIn(credentials).then(user => {
   console.log(`Logged in with id: ${user.id}`);
   });

.. _react-native-google-login:
.. _react-native-login-google:

Google User
-----------

The :ref:`Google <google-authentication>` authentication provider allows you to
authenticate users with their existing Google account.

To authenticate a Google user, you must configure the :ref:`Google
authentication provider <google-authentication>` for your App Services App.

There is no official Sign in with Google integration with React Native. The simplest
approach to integrating Sign in With Google into your React Native app
with Realm authentication is to use a third-party library.
The below example uses the library
:github:`React Native Google Sign In <react-native-google-signin/google-signin>`.
You can also build your own solution using :google:`Google Identity Services <identity>` to handle the user
authentication and redirect flow from a client application.

Regardless of implementation, you must retrieve an ID token from the Google Authorization server.
Use that ID token to log into Realm.

.. code-block:: javascript

   // Get the Google OAuth 2.0 access token
   const idToken = getGoogleAccessToken();

   // Log the user in to your app
   const credentials = Realm.Credentials.google({ idToken });
   app.logIn(credentials).then((user) => {
      console.log(`Logged in with id: ${user.id}`);
   });

.. _example-auth-google-react-native:

.. example:: Authenticate with Google in React Native

   This example uses the library
   :github:`React Native Google Sign In<react-native-google-signin/google-signin>`.
   In addition to the React Native code, you must also set up additional configuration
   in your project's ``ios`` and ``android`` directories to use Sign in with Google.
   Refer to the package's documentation for
   :github:`iOS-specific <react-native-google-signin/google-signin/blob/master/docs/ios-guide.md>`
   and :github:`Android-specific <react-native-google-signin/google-signin/blob/master/docs/android-guide.md>`
   documentation.

   .. literalinclude:: /examples/generated/rn/sign-in-with-google.snippet.react-native-sign-in-with-google.jsx
      :caption: SignInWithGoogleButton.jsx
      :language: javascript

.. _react-native-apple-login:
.. _react-native-login-apple:

Apple User
----------

The :ref:`Apple <apple-id-authentication>` authentication provider allows you to
authenticate users through Sign-in With Apple.

To authenticate an Apple user, you must configure the :ref:`Apple
authentication provider <apple-id-authentication>` for your App Services App.

You can use the :apple:`official Sign in with Apple JS SDK
<documentation/sign_in_with_apple/sign_in_with_apple_js>` to handle the user
authentication and redirect flow from a client application. Once authenticated,
the Apple JS SDK returns an ID token that you can send to your React Native app and
use to finish logging the user in to your app.

.. code-block:: javascript

   // Get the access token from a client application using the Apple JS SDK
   const idToken = getAppleIdToken();

   // Log the user in to your app
   const credentials = Realm.Credentials.apple(idToken);
   app.logIn(credentials).then(user => {
      console.log(`Logged in with id: ${user.id}`);
   });

.. include:: /includes/authorization-appleidcredential-string.rst

.. _react-native-offline-login:

Offline Login
-------------

.. include:: /includes/offline-login.rst

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.use-cached-user.ts
   :language: javascript

To learn how to use the cached user in the Sync Configuration and access a
realm while offline, read the :ref:`Open a Synced Realm While Offline
<react-native-open-synced-realm-offline>` docs.

.. _react-native-get-user-access-token:

Get a User Access Token
-----------------------

.. include:: /includes/user-access-token.rst

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/authenticate.snippet.get-user-access-token.js
         :language: javascript
   
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/node/authenticate.snippet.get-user-access-token.ts
         :language: typescript

.. _react-native-logout:

Log a User Out
--------------

To log any user out, call the ``User.logOut()`` on their user instance.

.. include:: /includes/log-out-queries-in-progress.rst

.. literalinclude:: /examples/generated/node/authenticate.snippet.logout-current-user.js
   :language: javascript
