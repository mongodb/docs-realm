.. _react-native-manage-user-api-keys:
.. _react-native-create-manage-api-keys:

================================================
Create & Manage User API Keys - React Native SDK
================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

User API keys let you give access to a user to another service without sharing
that users credentials. User API keys can be revoked at any time by the authenticated user.
User API keys do not expire on their own.

You can manage a user API key with the :js-sdk:`ApiKeyAuth <Realm.Auth.ApiKeyAuth.html>`
client returned by calling an authenticated user's :js-sdk:`User.apiKeys()
<Realm.User.html#apiKeys>` method.

If you are using ``@realm/react``, you can access a user's ``ApiKeyAuth`` client
with the ``useUser()`` hook in a component wrapped by ``UserProvider``.

.. _react-native-create-a-user-api-key:

Create a User API Key
---------------------

To create a new :ref:`user API key <api-key-authentication-user-api-key>`, pass
a name that's unique among all of the user's API keys to
:js-sdk:`ApiKeyAuth.create() <Realm.Auth.ApiKeyAuth.html#create>`.

The SDK returns the value of the user API key when you create it. Make
sure to store the ``key`` value securely so that you can use it to log in.
If you lose or do not store the ``key`` value there is no way to recover it.
You will need to create a new user API key.

You **cannot** create a user API key for a :ref:`server API key
<api-key-authentication-server-api-key>`  or an :ref:`anonymous user
<anonymous-authentication>`.

.. code-block:: typescript

   const key = await user.apiKeys.create("apiKeyName");

.. _react-native-look-up-a-user-api-key:

Look up a User API Key
----------------------

To get an array that lists all of a user's API keys, call
:js-sdk:`ApiKeyAuth.fetchAll() <Realm.Auth.ApiKeyAuth.html#fetchAll>`.

To find a specific API key, pass the key's ``_id`` to
:js-sdk:`ApiKeyAuth.fetch() <Realm.Auth.ApiKeyAuth.html#fetch>`.

.. code-block:: typescript

   // List all of a user's keys
   const keys = await user.apiKeys.fetchAll();
   // Get a specific key by its ID
   const key = await user.apiKeys.fetch("5eb5931548d79bc784adf46e");

.. _react-native-enable-or-disable-a-user-api-key:

Enable or Disable an API Key
----------------------------

To enable or disable a user API key, pass the key's ``_id`` to
:js-sdk:`ApiKeyAuth.enable() <Realm.Auth.ApiKeyAuth.html#enable>` or
:js-sdk:`ApiKeyAuth.disable() <Realm.Auth.ApiKeyAuth.html#disable>`. When a key
is disabled, it cannot be used to log in on behalf of the user.

.. code-block:: typescript

   const apiKeys = await user.apiKeys.fetchAll();
   const keyId = apiKeys[0]["_id"];

   // Enable the User API Key
   await user.apiKey.enable(keyId);
   // Disable the User API Key
   await user.apiKey.disable(keyId);

.. _react-native-delete-a-user-api-key:

Delete an API Key
-----------------

To permanently delete a user API, pass the key's ``_id`` to
:js-sdk:`ApiKeyAuth.delete() <Realm.Auth.ApiKeyAuth.html#delete>`. Deleted keys
cannot be recovered.

.. code-block:: typescript

   // Get the ID of a User API Key
   const user = app.currentUser;
   const apiKeys = await user.apiKeys.fetchAll();
   const keyId = apiKeys[0]["_id"];

   // Delete the User API Key
   await user.apiKey.delete(keyId);
