.. _react-native-manage-email-password-users:

==============================================
Manage Email/Password Users - React Native SDK
==============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

If you have enabled the email/password authentication provider in your App Services App,
you can register a new account, confirm an email address, and reset a user's password
in the React Native client code.



Prerequisites
-------------

Enable Email/Password Authentication Provider
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before you can manage email/password users from your React Native app,
you must enable email/password authentication in your App Services App backend.
To learn more about configuring email/password authentication,
refer to :ref:`email-password-authentication` in the App Services documentation.

Add AppProvider to App
~~~~~~~~~~~~~~~~~~~~~~

Wrap any components that need to manage email/password users with the ``AppProvider``.
You can then access :js-sdk:`Realm.App.emailPasswordAuth <Realm.App.html#emailPasswordAuth>`
to manage email/password authentication with the ``useApp()`` hook.

TODO: create JS example as well

.. code-block:: ts

   function MyApp() {
     return (
       <AppProvider id={APP_ID}>
         <RegisterUser/>
         // ...
       <AppProvider>
     );
   }

   function RegisterUser() {
     const app = useApp();

     async function registerUser(email: string, password: string) {
       await app.registerUser(email, password);
     }

     // ...
   }

.. _react-native-register-new-user:

Register a New User Account
---------------------------

To register a new email/password user, pass the user's email address and desired
password to :js-sdk:`EmailPasswordAuth.registerUser()
<Realm.Auth.EmailPasswordAuth.html#registerUser>`. The email address must not be
associated with another email/password user and the password must be between 6
and 128 characters.

You must :ref:`confirm a new user's email address <react-native-confirm-user>`
before they can log in to your app.

.. literalinclude:: /examples/generated/node/authenticate.snippet.register-email-pass-user.js
   :language: javascript

.. _react-native-confirm-user:

Confirm a New User's Email Address
----------------------------------

New users must confirm that they own their email address before they can log in
to your app unless the provider is configured to :ref:`automatically confirm new
users <auth-automatically-confirm-users>`.

.. _react-native-complete-confirmation:

Complete a User Confirmation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need a valid ``token`` and ``tokenId`` for a registered user in order to
confirm them and allow them to log in. These values are available in different
places depending on the provider configuration:

- If the provider is set to :ref:`send a confirmation email
  <auth-send-a-confirmation-email>`, the ``token`` and ``tokenId`` values are
  included as query parameters in the :guilabel:`Email Confirmation URL`.

- If the provider is set to :ref:`run a confirmation function
  <auth-run-a-confirmation-function>`, the ``token`` and ``tokenId`` values are
  passed to the function as arguments.

To confirm a registered user, pass a valid ``token`` and ``tokenId`` to
:js-sdk:`EmailPasswordAuth.confirmUser()
<Realm.Auth.EmailPasswordAuth.html#confirmUser>`.

.. literalinclude:: /examples/generated/node/authenticate.snippet.confirm-email-pass-user.js
   :language: javascript

.. _react-native-email-password-retry-user-confirmation:

Retry User Confirmation Methods
-------------------------------

The SDK provides methods to resend user confirmation emails or retry custom 
confirmation methods.

.. _react-native-resend-confirmation-email:

Resend a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the provider is configured to :ref:`send a confirmation email
<auth-send-a-confirmation-email>`, Atlas App Services automatically sends a
confirmation email when a user registers. The email contains a link to the
configured :guilabel:`Email Confirmation URL` with a token that is valid for 30
minutes after the email is sent. If a user did not receive the initial email or
didn't click the confirmation link in time, you can use the SDK to send a new
confirmation email to the user.

To send a new confirmation email to a user, pass their email address to
:js-sdk:`EmailPasswordAuth.resendConfirmationEmail()
<Realm.Auth.EmailPasswordAuth.html#resendConfirmationEmail>`.

.. literalinclude:: /examples/generated/node/authenticate.snippet.resend-confirmation-email.js
   :language: javascript

.. _react-native-email-password-resend-confirmation-function:

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To re-run your :ref:`custom confirmation function
<auth-run-a-confirmation-function>`, call the ``retryCustomConfirmation()`` method
with the user's email address:

.. literalinclude:: /examples/generated/node/authenticate.snippet.retry-user-confirmation-function.js
   :language: javascript

.. _react-native-reset-password:

Reset a User's Password
-----------------------

.. _react-native-send-password-reset-email:

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To :ref:`send a password reset email <auth-send-a-password-reset-email>` (if the
provider is configured to do so), call
:js-sdk:`EmailPasswordAuth.sendResetPasswordEmail()
<Realm.Auth.EmailPasswordAuth.html#sendResetPasswordEmail>`. The email contains
a link to the configured :guilabel:`Password Reset URL`.

.. literalinclude:: /examples/generated/node/authenticate.snippet.send-pass-reset-email.js
   :language: javascript

.. _react-native-call-password-reset-function:

Call a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To :ref:`run a password reset function <auth-run-a-password-reset-function>` (if
the provider is configured to do so), pass the user's email address, new
password, and any additional function arguments to
:js-sdk:`EmailPasswordAuth.callResetPasswordFunction()
<Realm.Auth.EmailPasswordAuth.html#callResetPasswordFunction>`.

.. literalinclude:: /examples/generated/node/authenticate.snippet.call-password-reset-function.js
   :language: javascript

.. _react-native-complete-password-reset:

Complete a Password Reset
~~~~~~~~~~~~~~~~~~~~~~~~~

Once a user requests a password reset, either by :ref:`sending a password reset
email <react-native-send-password-reset-email>` or :ref:`calling a password reset
function <react-native-call-password-reset-function>`, Realm generates a pair of unique
``token`` and ``tokenId`` values that they can use to complete the password
reset within 30 minutes of the initial request.

To complete the password reset, pass the ``token``, ``tokenId``, and new
password to :js-sdk:`EmailPasswordAuth.resetPassword()
<Realm.Auth.EmailPasswordAuth.html#resetPassword>`.

.. literalinclude:: /examples/generated/node/authenticate.snippet.complete-pass-reset.js
   :language: javascript
