.. _react-native-open-a-synced-realm:
.. _react-native-realms:

======================================
Open a Synced Realm - React Native SDK
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _react-native-synced-realm:

Overview
--------

You can configure a realm to automatically synchronize data between many devices
that each have their own local copy of the data. Synced realms use a different
configuration than local-only realms and require an Atlas App Services backend to handle
the synchronization process.

Applications can always create, modify, and delete synced realm objects locally,
even when offline. Whenever a network connection is available, the Realm SDK
opens a connection to an application server and syncs changes to and from other
clients. The :ref:`Atlas Device Sync protocol <sync-protocol>` and server-side
operational transforms guarantee that all fully synced instances of a realm see
exactly the same data, even if some changes occurred offline and/or were
received out of order.

.. tip:: Learn How to Configure and Use Sync
   
   For more information on synced realms, including directions on how to set up
   sync in an App Services App, see :ref:`Atlas Device Sync Overview <sync>`.

Open a Flexible Sync Realm
--------------------------

By default, Realm syncs all data from the server before returning.
If you want to sync data in the background, read the :ref:`Open a Synced Realm
While Offline <react-native-open-synced-realm-offline>` section.

This section covers Flexible Sync realms. For information about Partition-Based
realms, refer to the :ref:`Partition-Based Sync <react-native-partition-realms>`
page.

Nesting Within <AppProvider> and <UserProvider>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use a Flexible Sync realm and ``@realm/react``, you must nest ``<RealmProvider>``
within ``<UserProvider>``. And ``<UserProvider>`` must be nested in ``<AppProvider>``. 
This ensures that ``<RealmProvider>`` has all of the context it needs, like a 
logged-in user.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.configure-realm-sync-full.tsx
   :language: javascript

.. _react-native-flexible-sync-open-realm:

Configure a Flexible Sync Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To open a realm using Flexible Sync, use ``@realm/react``'s `React 
Context objects <https://reactjs.org/docs/context.html>`__ and Provider 
components.

In a ``<RealmProvider>`` that's nested in a ``<UserProvider>``, pass a 
:js-sdk:`Configuration <Realm.html#~Configuration>` object. Include the ``sync`` 
property with a :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` 
object that contains ``flexible:true``.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.configure-realm-sync.tsx
   :language: javascript

.. important:: Flexible Sync Requires a Subscription

   You can't use a Flexible Sync realm until you add at least one subscription.
   To learn how to add subscriptions, see: :ref:`<react-native-sync-add-subscription>`.

.. _react-native-open-synced-realm-offline:

Access a Synced Realm While Offline
-----------------------------------

.. include:: /includes/offline-login.rst

The following subsections show how to use background synchronization to access a
realm while offline. To do this, use a cached user and an
:js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` object. 

Within ``<RealmProvider>``'s sync configuration, set the optional ``newRealmFileBehavior`` 
and ``existingRealmFileBehavior`` fields to your ``OpenRealmBehaviorConfiguration`` 
object to enable background synchronization. 

You can open a realm immediately with background sync or after a timeout elapses.

.. _react-native-open-immediately-with-background-sync:

Access Immediately with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You may want to sync changes in the background to display partial data to the
user while the synced realm downloads data from the server, preventing the
user experience from being blocked. We recommend syncing changes in the
background for applications in which the user's device may go offline. To sync
changes in the background, open a synced realm synchronously.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync-offline.test.snippet.offline-config.tsx
   :language: javascript

.. _react-native-open-after-timeout-with-background-sync:

Access After Timeout with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to sync data but you're in an environment where it's uncertain if
the user has an Internet connection, specify a ``timeOut``. This
automatically opens the realm when either: 

- the timeout period elapses.
- the realm has completely downloaded.

If the realm doesn't finish downloading before the timeout, the initial
Sync continues in the background.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync-timeout.test.snippet.timeout-config.tsx
   :language: javascript
