.. _react-native-flexible-sync:

=====================================================
Manage Flexible Sync Subscriptions - React Native SDK
=====================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your App. The ``@realm/react`` library streamlines permissions
and queries for you.

.. include:: /includes/note-flexible-sync-prerequisite.rst

Prerequisites
-------------

To use Flexible Sync in a React Native client:

#. :ref:`Configure Flexible Sync <enable-flexible-sync>` on the Atlas App Services backend
#. :ref:`Initialize the app client <react-native-app-client-configuration>` 
#. :ref:`Authenticate a user <react-native-login-anonymous>` in the client
#. :ref:`Configure a synced Realm <react-native-flexible-sync-open-realm>` in the client

.. _react-native-sync-subscribe-to-queryable-fields:

Align Subscriptions with Backend App
------------------------------------

Your client-side subscription queries must align with the Device Sync configuration
in your backend App Services App.

Subscription queries return all objects of a type. You can filter results
with a Realm Query Language query that includes one or more queryable fields.

To learn more about configuring queryable fields, refer to 
:ref:`Queryable Fields <queryable-fields>` in the App Services documentation.

To learn more about the limitations of using Realm Query Language with Flexible Sync,
refer to the :ref:`Flexible Sync RQL Limitations
<react-native-flexible-sync-rql-limitations>` section.

Manage Your Subscriptions
-------------------------

When configuring Flexible Sync on the backend, you specify which fields your
client application can query. In the client application, use the
:js-sdk:`Realm.subscriptions <Realm.html#subscriptions>` property to
manage a set of subscriptions to specific queries on queryable fields.

If you're using ``@realm/react``, you can manage realm subscriptions inside of
a properly-configured ``<RealmProvider>``. There, the ``useRealm()`` gives you 
access to the currently-opened realm.

You can do the following with your subscriptions:

- :ref:`Add subscriptions <react-native-sync-add-subscription>`
- :ref:`Configure a realm with initial subscriptions <react-native-sync-bootstrap-initial-subscriptions>`
- :ref:`Get a list of all subscriptions <react-native-get-subscriptions>`
- :ref:`Check the status of subscriptions <react-native-flexible-sync-wait-for-sync>`
- :ref:`Remove subscriptions <react-native-remove-subscription>`

When the data matches the subscription, and the authenticated user has the
appropriate permissions, Device Sync syncs the backend data with the client app.

Subscription sets persist across sessions even if you no longer include
the subscription in your code.
Subscription information is stored in the synced realm's database file.
You must explicitly remove a subscription
for it to stop attempting to sync matching data.

You should name your subscription. This makes updating your subscription easier.

If you do not give your subscription a name, the name is set to ``null`` and 
the subscription is based on the :ref:`Realm Query Language <react-native-query-data>`
(RQL) string. If the RQL string changes and the subscription is not named, you 
won't be able to update your subscription.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.

.. _react-native-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Compose queries using :ref:`Realm Query Language <react-native-query-data>`
and add them to your Flexible Sync subscriptions.

#. Create a transaction by passing a callback function to the
   :js-sdk:`SubscriptionSet.update() <Realm.App.Sync.SubscriptionSet.html#update>`
   method of your ``SubscriptionSet``. The callback function provides
   a :js-sdk:`MutableSubscriptionSet <Realm.App.Sync.MutableSubscriptionSet.html>`
   as an argument.
#. Within the callback function, call the 
   :js-sdk:`add() <Realm.App.Sync.MutableSubscriptionSet.html#add>`
   method on the ``MutableSubscriptionSet`` to add a query to the subscription.

The ``add()`` method on the ``MutableSubscriptionSet`` takes a ``query`` and a
:js-sdk:`SubscriptionOptions <Realm.App.Sync.html#.SubscriptionOptions>` object.
The subscription options include:

- a ``name`` string field
- a ``throwOnUpdate`` boolean field.

If ``throwOnUpdate`` is false or undefined, adding a subscription with an
existing name will replace the existing query with the new query. However, if
you set ``throwOnUpdate`` to true, adding a subscription with an existing name
but a different query throws an exception.

.. literalinclude:: /examples/generated/react-native/ts/add-query-to-subs.test.snippet.add-query.tsx
   :language: javascript

.. _react-native-sync-bootstrap-initial-subscriptions:

Configure a Realm with Initial Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must have at least one subscription before you can read from or write to a
Flexible Sync realm. Initial subscriptions let you define subscriptions when you
:ref:`configure a synced realm <react-native-open-a-synced-realm>`.

To open a synced realm with initial subscriptions, add an  ``initialSubscriptions`` 
property to ``<RealmProvider>``'s 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.

You **cannot** use the ``@realm/react`` library hooks ``useQuery`` and ``useObject``
when setting initial subscriptions.

.. literalinclude:: /examples/generated/react-native/ts/initial-subscriptions.test.snippet.initial-subscriptions.tsx
   :language: javascript

.. _react-native-get-subscriptions:

Get Subscriptions
~~~~~~~~~~~~~~~~~

Within a ``<RealmProvider>`` that's configured for Flexible Sync, you can access
a collection of all subscriptions for your app. This is called a 
:js-sdk:`SubscriptionSet <Realm.html#subscriptions>`.

.. literalinclude:: /examples/generated/react-native/ts/get-subscriptions.test.snippet.get-subscriptions.tsx
   :language: javascript

You can use this ``SubscriptionSet`` to add queries to the list of subscriptions and
update existing subscriptions.

.. _react-native-flexible-sync-wait-for-sync:

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can check the :js-sdk:`state <Realm.App.Sync.SubscriptionSet.html#state>` of
a ``SubscriptionSet`` to see if the server has acknowledged all subscriptions and 
the device has downloaded the data locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

.. literalinclude:: /examples/generated/react-native/ts/check-subs-status.test.snippet.check-sub-status.tsx
   :language: javascript

Subscription State "Complete"
`````````````````````````````

The subscription set state "complete" does not mean "sync is done" or "all 
documents have been synced". "Complete" means the following two things have happened:

The subscription has become the active subscription set that is currently being 
synchronized with the server.

The documents that matched the subscription at the time the subscription was 
sent to the server are now on the local device. Note that this does not necessarily 
include all documents that currently match the subscription.

The Realm SDK does not provide a way to check whether all documents that match 
a subscription have synced to the device.

.. _react-native-remove-subscription:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

You can remove subscriptions in several ways:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions on a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

If you're using ``@realm/react``, these examples assume you're working with a
component that's nested inside ``<RealmProvider>``.

Remove a Subscription by Query
``````````````````````````````

You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :js-sdk:`remove()
<Realm.App.Sync.MutableSubscriptionSet.html#remove>` method on
``MutableSubscriptionSet`` within a transaction.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-single-subscription.js
    :language: javascript

Remove a Subscription by Name
`````````````````````````````

To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:js-sdk:`removeByName()
<Realm.App.Sync.MutableSubscriptionSet.html#removeByName>` method on
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-name.js
    :language: javascript

Remove a Subscription by Reference
``````````````````````````````````

If you have a reference to a subscription, you can remove that subscription. To
do so, execute a transaction on the subscriptions set. Within the transaction,
pass the reference variable to the :js-sdk:`removeSubscription
<Realm.App.Sync.MutableSubscriptionSet.html#removeSubscription>` method on
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-reference.js
    :language: javascript

Remove All Subscriptions on an Object Type
``````````````````````````````````````````

To remove all subscriptions on a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :js-sdk:`removeByObjectType
<Realm.App.Sync.MutableSubscriptionSet.html#removeByObjectType>` method on
``MutableSubscriptionSet``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions-of-object-type.js
    :language: javascript

Remove All Subscriptions
````````````````````````

To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call the :js-sdk:`removeAll()
<Realm.App.Sync.MutableSubscriptionSet.html#removeAll>` method on
``MutableSubscriptionSet`` within the transaction

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions.js
    :language: javascript

.. _react-native-flexible-sync-rql-limitations:

Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
