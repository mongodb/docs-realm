.. _react-native-flexible-sync:

=====================================================
Manage Flexible Sync Subscriptions - React Native SDK
=====================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your App. The ``@realm/react`` library streamlines permissions
and handles subscriptions for you.

.. include:: /includes/note-flexible-sync-prerequisite.rst

Before You Begin
----------------

To use Flexible Sync in a React Native client:

# :ref:`Configure Flexible Sync <enable-flexible-sync>` on the Atlas App Services backend
# :ref:`Initialize the app client <react-native-app-client-configuration>` 
# :ref:`Authenticate a user <react-native-login-anonymous>` in the client
# :ref:`Open a synced Realm <react-native-flexible-sync-open-realm>` in the client

.. _react-native-sync-subscribe-to-queryable-fields:

Query Collections using @realm/react
------------------------------------
.. TODO: Add intro para


Get Collections with useQuery
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. TODO: Describe useQuery

.. Returns Realm.Results from a given type. This Hook will update on any changes to 
.. any Object in the Collection and return an empty array if the Collection is empty. 
.. The result of this can be consumed directly by the data argument of any React 
.. Native VirtualizedList or FlatList. If the component used for the list's renderItem 
.. prop is wrapped with React.Memo, then only the modified object will re-render.


Get a Specific Object with useObject
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. TODO: Describe useObject

.. Returns a Realm.Object for a given type and primary key. The Hook will update on 
.. any changes to the properties on the returned Object and return null if it either 
.. doesn't exist or has been deleted.

.. _react-native-sync-add-subscription:
.. _react-native-sync-bootstrap-initial-subscriptions:

Bootstrap a Realm with Initial Subscriptions
--------------------------------------------
.. TODO: realm reactify

You must have at least one subscription before you can read from or write to a
realm with Flexible Sync enabled. You can bootstrap a realm with an initial subscription set when you open
it with a :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`
and Flexible Sync enabled. Include the ``initialSubscriptions`` field into the
``SyncConfiguration``. Within the ``initialSubscriptions`` object, add an ``update``
field set to a callback in which you can subscribe to queries to bootstrap your
application:

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.create-initial-subscriptions-on-fs-realm.js
   :language: javascript


Granular Subscription management
--------------------------------
.. TODO: useRealm returns a subscription set: https://www.mongodb.com/docs/realm-sdks/js/latest/Realm.App.Sync.SubscriptionSet.html
.. TODO: Introduce useRealm() and subscriptions in useEffect()


.. _react-native-flexible-sync-wait-for-sync:

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. TODO: Can do this with const realm = useRealm(); Then realm.subscriptions.state.

You can check the subscription state to see if the server has acknowledged the
subscription and the device has downloaded the data locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

To the status of subscriptions, log the value of the subscription's
:js-sdk:`state <Realm.App.Sync.SubscriptionSet.html#state>`.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.log-subscription-state.js 
    :language: javascript

.. include:: /includes/note-sync-state-complete.rst

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions on a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

Remove a Subscription by Query
``````````````````````````````
.. TODO: Can do this with const realm = useRealm();

You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :js-sdk:`remove()
<Realm.App.Sync.MutableSubscriptionSet.html#remove>` method on the
``MutableSubscriptionSet`` within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-single-subscription.js
    :language: javascript

Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:js-sdk:`removeByName()
<Realm.App.Sync.MutableSubscriptionSet.html#removeByName>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-name.js
    :language: javascript

Remove a Subscription by Reference
``````````````````````````````````
If you have a reference to a subscription, you can remove that subscription. To
do so, execute a transaction on the subscriptions set. Within the transaction,
pass the reference variable to the :js-sdk:`removeSubscription
<Realm.App.Sync.MutableSubscriptionSet.html#removeSubscription>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-reference.js
    :language: javascript

Remove All Subscriptions on an Object Type
``````````````````````````````````````````
To remove all subscriptions on a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :js-sdk:`removeByObjectType
<Realm.App.Sync.MutableSubscriptionSet.html#removeByObjectType>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions-of-object-type.js
    :language: javascript

Remove All Subscriptions
````````````````````````
To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call the :js-sdk:`removeAll()
<Realm.App.Sync.MutableSubscriptionSet.html#removeAll>` method on the
``MutableSubscriptionSet`` within the transaction

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions.js
    :language: javascript

.. _react-native-flexible-sync-rql-limitations:

More Subscription Management Options
------------------------------------
.. TODO: Link off to Node SDK docs and the regular JavaScript API docs.


Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
