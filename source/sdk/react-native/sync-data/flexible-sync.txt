.. _react-native-flexible-sync:

=====================================================
Manage Flexible Sync Subscriptions - React Native SDK
=====================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your App. The ``@realm/react`` library streamlines permissions
and queries for you.

.. include:: /includes/note-flexible-sync-prerequisite.rst

Before You Begin
----------------

To use Flexible Sync in a React Native client:

# :ref:`Configure Flexible Sync <enable-flexible-sync>` on the Atlas App Services backend
# :ref:`Initialize the app client <react-native-app-client-configuration>` 
# :ref:`Authenticate a user <react-native-login-anonymous>` in the client
# :ref:`Open a synced Realm <react-native-flexible-sync-open-realm>` in the client

.. _react-native-sync-subscribe-to-queryable-fields:

Align Subscriptions with Backend App
------------------------------------

Your client-side subscription queries must align with the Device Sync configuration
in your backend App Services App.

Subscription queries return all objects of a type. You can filter query results
with a Realm Query Language query that includes one or more queryable fields.

To learn more about configuring queryable fields, refer to 
:ref:`Queryable Fields <queryable-fields>` in the App Services documentation.

To learn more about the limitations of using Realm Query Language with Flexible Sync,
refer to the :ref:`Flexible Sync RQL Limitations
<react-native-flexible-sync-rql-limitations>` section.

Define Your Subscriptions
-------------------------

The ``@realm/react`` library provides hooks that streamline how you define 
subscriptions in the React Native SDK.

Get Collections with useQuery()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``useQuery()`` hook returns a ``Realm.Results`` collection that contains all 
objects of a given type in your realm. The hook will automatically monitor the
collection and re-render its parent component when changes to its objects are detected.

This hook doesn't update any subscriptions on its own.

.. TODO: Find a better place for this info. Maybe the Query Data page?
.. The result of ``useQuery()`` can be consumed directly by the data argument of any React 
.. Native VirtualizedList or FlatList. If the component used for the list's ``renderItem`` 
.. prop is wrapped with ``React.Memo``, then only the modified object will re-render.

.. TODO: provide example of useQeury() in conjunction with sub management
.. literalinclude:: /examples/generated/node/flexible-sync.snippet.get-subscriptions.js
    :language: javascript

Get a Specific Object with useObject()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``useObject()`` hook returns a single Realm object for a given type and
primary key. The hook updates if any properties on the returned object change.

This hook doesn't update any subscriptions on its own.

.. TODO: provide example of useObject() in conjunction with sub management
.. literalinclude:: /examples/generated/node/flexible-sync.snippet.get-subscriptions.js
    :language: javascript

Manage Your Subscriptions
-------------------------
.. TODO: useRealm returns a subscription set: https://www.mongodb.com/docs/realm-sdks/js/latest/Realm.App.Sync.SubscriptionSet.html

When configuring Flexible Sync on the backend, you specify which fields your
client application can query. In the client application, use the
:js-sdk:`Realm.subscriptions <Realm.html#subscriptions>` property to
manage a set of subscriptions to specific queries on queryable fields.

You can do the following with your subscriptions:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update a subscription with a new query
- Remove subscriptions

When the data matches the subscription, and the authenticated user has the
appropriate permissions, Device Sync syncs the backend data with the client app.

Subscription sets persist across sessions even if you no longer include
the subscription in your code.
Subscription information is stored in the synced realm's database file.
You must explicitly remove a subscription
for it to stop attempting to sync matching data.

You can specify a string name for your subscription. If you do not give your
subscription a name, the name is set to ``null``.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.

Get Subscriptions
~~~~~~~~~~~~~~~~~

Within a ``<RealmProvider>`` that's configured for Flexible Sync, you can access
a collection of all subscriptions for your app. This is called a 
:js-sdk:`SubscriptionSet <Realm.html#subscriptions>`.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.get-subscriptions.js
    :language: javascript

You can use this ``SubscriptionSet`` to add queries to the list of subscriptions and
update existing subscriptions.

Add a Query to the Set of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Compose queries to add to your Flexible Sync subscriptions using the
:ref:`query engine <react-native-client-query-engine>`: 

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.create-queries-to-subscribe-to.js
     :language: javascript

Add queries to your ``SubscriptionSet`` to sync the query's data. 

#. Create a transaction by passing a callback function to the
   :js-sdk:`SubscriptionSet.update() <Realm.App.Sync.SubscriptionSet.html#update>`
   method of your ``SubscriptionSet``. The callback function provides
   a :js-sdk:`MutableSubscriptionSet <Realm.App.Sync.MutableSubscriptionSet.html>`
   as an argument.
#. Within the callback function, call the 
   :js-sdk:`add() <Realm.App.Sync.MutableSubscriptionSet.html#add>`
   method on the ``MutableSubscriptionSet`` to add a query to the subscription.

.. TODO: realm/reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.subscribe-to-queryable-fields.js
     :language: javascript

The ``add()`` method on the ``MutableSubscriptionSet`` takes a ``query`` and a
:js-sdk:`SubscriptionOptions <Realm.App.Sync.html#.SubscriptionOptions>` object.
The subscription options include:

- a ``name`` string field
- a ``throwOnUpdate`` boolean field.

If ``throwOnUpdate`` is false or undefined, adding a subscription with an
existing name will replace the existing query with the new query. However, if
you set ``throwOnUpdate`` to true, adding a subscription with an existing name
but a different query throws an exception.

.. _react-native-sync-add-subscription:
.. _react-native-sync-bootstrap-initial-subscriptions:

Open a Realm with Initial Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must have at least one subscription before you can read from or write to a
Flexible Sync realm. Initial subscriptions let you define subscriptions as you
:ref:`open a synced realm <react-native-open-a-synced-realm>`.

To open a synced realm with initial subscriptions, you need to add an 
``initialSubscriptions`` property to ``<RealmProvider>``'s 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.create-initial-subscriptions-on-fs-realm.js
   :language: javascript

You can't use the ``@realm/react`` library hooks ``useQuery`` and ``useObject``
when setting initial subscriptions.

.. _react-native-flexible-sync-wait-for-sync:

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. TODO: Can do this with const realm = useRealm(); Then realm.subscriptions.state.

You can check the subscription state to see if the server has acknowledged the
subscription and the device has downloaded the data locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

To the status of subscriptions, log the value of the subscription's
:js-sdk:`state <Realm.App.Sync.SubscriptionSet.html#state>`.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.log-subscription-state.js 
    :language: javascript

.. include:: /includes/note-sync-state-complete.rst

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions on a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

Remove a Subscription by Query
``````````````````````````````
.. TODO: Can do this with const realm = useRealm();

You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :js-sdk:`remove()
<Realm.App.Sync.MutableSubscriptionSet.html#remove>` method on the
``MutableSubscriptionSet`` within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-single-subscription.js
    :language: javascript

Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:js-sdk:`removeByName()
<Realm.App.Sync.MutableSubscriptionSet.html#removeByName>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-name.js
    :language: javascript

Remove a Subscription by Reference
``````````````````````````````````
If you have a reference to a subscription, you can remove that subscription. To
do so, execute a transaction on the subscriptions set. Within the transaction,
pass the reference variable to the :js-sdk:`removeSubscription
<Realm.App.Sync.MutableSubscriptionSet.html#removeSubscription>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-subscription-by-reference.js
    :language: javascript

Remove All Subscriptions on an Object Type
``````````````````````````````````````````
To remove all subscriptions on a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :js-sdk:`removeByObjectType
<Realm.App.Sync.MutableSubscriptionSet.html#removeByObjectType>` method on the
``MutableSubscriptionSet``.

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions-of-object-type.js
    :language: javascript

Remove All Subscriptions
````````````````````````
To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call the :js-sdk:`removeAll()
<Realm.App.Sync.MutableSubscriptionSet.html#removeAll>` method on the
``MutableSubscriptionSet`` within the transaction

.. TODO: realm reactify

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.remove-all-subscriptions.js
    :language: javascript

More Subscription Management Options
------------------------------------
.. TODO: Link off to Node SDK docs and the regular JavaScript API docs.

.. _react-native-flexible-sync-rql-limitations:

Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
