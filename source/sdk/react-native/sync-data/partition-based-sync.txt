.. _react-native-partition-realms:

=======================================
Partition-Based Sync - React Native SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Partition-Based Sync is an older mode for Atlas Device Sync. We recommend using
Flexible Sync for new apps. The information on this page is for users who are 
still using Partition-Based Sync.

For more information about Partition-Based Sync itself, refer to the 
:ref:`Partition-Based Sync <partition-based-sync>` page.

.. _react-native-partition-sync-open-realm:

Configure a Partition-Based Sync Realm
--------------------------------------

To open a realm that uses Partition-Based Sync, use ``@realm/react``'s `React 
Context objects <https://reactjs.org/docs/context.html>`__ and Provider 
components.

In a ``<RealmProvider>`` that's nested in a ``<UserProvider>``, pass a 
:js-sdk:`Configuration <Realm.html#~Configuration>` object. Include the ``sync`` 
property with a :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` 
object that contains the ``partitionValue`` property and set its
value to the name of your partition.

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.partition-based-config.tsx
   :language: javascript

.. _react-native-open-existing-realm-different-configuration:
.. _react-native-copy-data-and-open-new-realm:

Copy Data and Open a New Realm
------------------------------

.. versionadded:: 10.14.0

To copy data from an existing realm to a new realm with different
configuration options, pass the new configuration the
:js-sdk:`Realm.writeCopyTo() <Realm.html#writeCopyTo>` method.

.. include:: /includes/note-writecopy-pbs-only.rst

In the new realm's configuration, you *must* specify the ``path``. 

If you write the copied realm to a realm file that already exists, the data is written object by object.
The copy operation replaces objects if there already exists objects for given primary keys.
The schemas of the realm you copy and the realm you are writing to must be 
compatible for the copy operation to succeed.
Only objects in the schemas of both configurations are copied over.

The configuration change can include modifications to :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`: 

- Local realm to synced realm
- Synced Realm to local realm

The configuration change can also include changes to ``encryptionKey`` 
property of the ``Configuration``: 

- Encrypted realm to unencrypted realm
- Unencrypted realm to encrypted realm

.. example:: Convert Local Realm to Synced Realm

   .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-local-as-synced.js
      :language: javascript
      :emphasize-lines: 15-16

You can also combine changes to configuration. For example, you can open a
local encrypted realm as a synced unencrypted realm or a unencrypted synced realm
as an encrypted synced realm.

.. example:: Convert Synced Encrypted to Local Unencrypted Realm

   .. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.sync-encrypted-to-local-unencrypted.js
      :language: javascript
      :emphasize-lines: 19-20