.. _react-native-manage-sync-session:

========================================
Manage a Sync Session - React Native SDK
========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas Device Sync, the Realm REact Native SDK syncs data with Atlas
in the background using a sync session. The sync session starts whenever
you open a synced realm.

Prerequisites
-------------

Before you can manage a sync session, you must perform the following:

#. :ref:`Open a synced realm <react-native-open-a-synced-realm>`
#. If you're using Flexible Sync, :ref:`add a sync subscription
   <react-native-sync-subscribe-to-queryable-fields>`

.. _react-native-access-sync-session:

Access Sync Session
-------------------

If you're using @realm/react, access a synced realm in a component
with the ``useRealm()`` hook. Access the sync session with the synced realm's
:js-sdk:`Realm.syncSession <Realm.html#syncSession>` property.

.. literalinclude:: /examples/generated/react-native/ts/sync-session.test.snippet.sync-session.tsx
   :language: typescript

You must wrap components that use the ``useRealm()`` hook for a synced realm
with the ``AppProvider``, ``UserProvider``, and ``RealmProvider`` components.
For more information on configuring and opening a synced realm,
refer to :ref:`Open a Synced Realm <react-native-open-a-synced-realm>`.

.. _react-native-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------

Opening a synced realm starts a :js-sdk:`sync session <Realm.App.Sync.Session.html>`.
You can pause and resume the sync session on the realm. Pausing a sync
session only pauses that realm's sync session. If you have more than one
open realm, pause does not affect the sync sessions for other realms.

To pause synchronization, use the :js-sdk:`syncSession.pause()
<Realm.App.Sync.Session.html#~pause>` method. To resume synchronization, use the
:js-sdk:`syncSession.resume() <Realm.App.Sync.Session.html#~resume>` method.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-pause-or-resume-sync-session.js
   :language: javascript

.. |pause_func_name| replace:: ``.pause()``
.. include:: /includes/note-details-about-pause.rst

.. _react-native-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

To check the upload and download progress for a sync session, add a progress
notification using the :js-sdk:`syncSession.addProgressNotification() <Realm.App.Sync.Session.html#.addProgressNotification>` method.

The ``syncSession.addProgressNotification()`` method takes in the following three parameters:

- A ``direction`` parameter.
  Set to ``"upload"`` to register notifications for uploading data.
  Set to ``"download"`` to register notifications for downloading data.
- A ``mode`` parameter. Set to ``"reportIndefinitely"``
  for the notifications to continue until the callback is unregistered using
  :js-sdk:`syncSession.removeProgressNotification() <Realm.App.Sync.Session.html#.removeProgressNotification>`.
  Set to ``"forCurrentlyOutstandingWork"`` for the notifications to continue
  until only the currently transferable bytes are synced.
- A callback function parameter that has the arguments ``transferred`` and ``transferable``.
  ``transferred`` is the current number of bytes already transferred.
  ``transferable`` is the total number of bytes already transferred
  plus the number of bytes pending transfer.

.. include:: /includes/flex-sync-unsupported-progress-notifications.rst

In the following example, an application developer registers a callback on the ``syncSession`` to
listen for upload events indefinitely. The developer writes to the realm and
then unregisters the ``syncSession`` notification callback.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-check-upload-and-download-progress.js
  :language: javascript

.. _react-native-check-network-connection:

Check the Network Connection
----------------------------

To check the current state of the connection to the server, call the
:js-sdk:`syncSession.connectionState()
<Realm.App.Sync.Session.html#.connectionState>` method.

Realm's *offline-first* design means that you generally don't need to
check the current network connection state. That said, the
``syncSession.connectionState()`` method is available if your app needs to
gets the current state of the connection to the server.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-check-network-connection.js
   :language: javascript

.. _react-native-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------

Enable :wikipedia:`session multiplexing <Session_multiplexing>` to consolidate
multiple sync sessions of a Realm app.
Only use session multiplexing if you see errors about reaching the file descriptor limit,
and you know you are using many sync sessions.

To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing()
<Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`.

.. literalinclude:: /examples/SyncChanges/enable-session-multiplexing.js
  :language: javascript
