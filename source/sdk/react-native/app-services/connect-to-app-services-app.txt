.. _react-native-connect-to-mongodb-realm-backend-app:

=======================================================
Connect to an Atlas App Services App - React Native SDK
=======================================================

Overview
--------

The App client is the interface to the App Services
backend. It provides access to the :ref:`authentication functionality
<react-native-authenticate-users>`, :ref:`Atlas Functions <react-native-call-a-function>`,
and :ref:`Atlas Device Sync <react-native-realm-sync>`.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`
#. :ref:`Get Your App ID <find-your-app-id>`

.. _react-native-app-client-configuration:
.. _react-native-access-the-app-client:

Configure the App Client
------------------------

To set up your App client, pass the App ID string
to the ``id`` prop of the ``AppProvider``.
Wrap any components that need to access the App with the ``AppProvider``.

TODO: new literalinclues for both examples

.. literalinclude:: /examples/generated/expo/AppWrapper.snippet.wrap-app-within-app-provider.tsx
    :language: typescript
    :emphasize-lines: 1, 5

You can also include additional configuration in the ``AppProvider`` by passing
the properties of :js-sdk:`Realm.AppConfiguration <Realm.AppConfiguration.html>` as props.

TODO: literalincludes for both examples

.. _react-native-app-retrieve-client:

Retrieve an Instance of the App Client
--------------------------------------

All components wrapped within an ``AppProvider`` can access the :js-sdk:`App <Realm.App.html>`
client with the ``useApp()`` hook. Using the App, you can authenticate users
and access App Services.

TODO: literalincludes for both examples

.. literalinclude:: /examples/generated/expo/LoginComponent.snippet.useApp-hook-usage.tsx
    :language: typescript
    :emphasize-lines: 1, 7, 11

.. _react-native-retrieve-client-outside-provider:

Retrieve App Outside the App Provider
-------------------------------------

TODO: i don't fully grok this
