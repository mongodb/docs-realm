.. _react-native-relationships:

================================
Relationships - React Native SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can define relationships between objects in a realm. Realm models
relationships as object properties that point to other objects of a
given type in the realm. You define a relationship at the type level by
declaring a property in the type's schema where the value is another
object type.

Querying a relationship is just as performant as a regular property.
Relationships are direct references to other objects, so you don't need
to use joins and complex models to define and use them like you would in
a relational database. Instead, you can access related objects by
reading and writing to the relationship property directly.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <react-native-to-one-relationship>`
- :ref:`One-to-Many Relationship <react-native-to-many-relationship>`
- :ref:`Inverse Relationship <react-native-inverse-relationship>`

.. note:: Realm vs Other Databases
   
   Objects often contain direct references to other objects.
   When working with objects and references,
   you typically copy data from database storage into application memory.
   This situation leaves the developer with a choice of what to copy
   into memory:
   
   - You can copy all referenced objects into memory ahead of time.
     This means that all referenced data is always available quickly
     but can use up a lot of resources. If a system has limited memory,
     this may not be viable.
   
   - You can copy just a foreign key value for each object. Later, you
     can use the key to look up the full object when you need it.
     These "lazy" lookups are more memory-efficient than copying all
     referenced objects ahead of time. However, they require you to
     maintain more query code and use runtime lookups that can slow
     your app down.

   Realm's query architecture avoids the tradeoff between memory usage
   and computational overhead. Instead, Realm queries can directly
   reference :ref:`related objects <react-native-relationships>` and
   their properties on disk.

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _react-native-to-one-relationship:

One-to-One Relationship
-----------------------

A **one-to-one** relationship means an object is related to at most one
other object of a particular type. To define a one-to-one relationship,
specify the property type as the related Realm object type.

.. example::

   In the following example of a **one-to-one** relationship, a
   ``PetOwner`` may own a single ``Pet``:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/PetOwner.snippet.ts-petowner-schema.ts
            :language: typescript
            :emphasize-lines: 4, 11
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/Pet.snippet.ts-pet-schema.ts
            :language: typescript
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/PetOwner.snippet.js-petowner-schema.js
            :language: javascript
            :emphasize-lines: 7
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/Pet.snippet.js-pet-schema.js
            :language: typescript
            :linenos:


.. _react-native-to-many-relationship:

One-to-Many Relationship
------------------------

A **one-to-many** relationship means an object may be related to
multiple objects. To define a to-many relationship, specify a property where the
type is a list or array of the related Realm object type in its :ref:`object
schema <react-native-object-schemas>`.

.. example::

   In the following example of a **one-to-many** relationship, a
   ``User`` may own multiple ``Post`` objects:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
            :language: typescript
            :emphasize-lines: 5, 13
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/Post.snippet.ts-post-schema.ts
            :language: typescript
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
            :language: javascript
            :emphasize-lines: 8
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/Post.snippet.js-post-schema.js
            :language: typescript
            :linenos:

.. _react-native-inverse-relationship:

Inverse Relationship
--------------------

An inverse relationship connects an object to all other objects that
refer to it in a one-to-one or one-to-many relationship. Whenever you
define a relationship, you also implicity create an inverse
relationship.

You can use inverse relationships to "backlink" from one object to
another based on a particular relationship. For example, if you define a
relationship that maps ``User.posts`` to a list of ``Post`` objects,
then you could use an inverse relationship to look up the ``User``
object related to a given ``Post`` object in this way.

.. _react-native-define-an-inverse-relationship-property:

Define Inverse Relationship Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can assign an inverse relationship to a property in the object
schema using the ``linkingObjects`` property type. This lets you access
the inverse relationship like a normal property.

A ``linkingObjects`` property backlinks to a specific relationship. You
specify which relationship to backlink with the object type and property
name of the relationship.

.. example::

   In the following example of an inverse relationship, each ``Post``
   object may belong to a single ``User`` object.

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
            :language: typescript
            :emphasize-lines: 5, 13
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/InverseRelationshipPost.snippet.ts-inverserelationshippost-schema.ts
            :language: typescript
            :emphasize-lines: 4, 11-14
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
            :language: javascript
            :emphasize-lines: 8
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/InverseRelationshipPost.snippet.js-inverserelationshippost-schema.js
            :language: typescript
            :emphasize-lines: 7-11
            :linenos:


.. _react-native-linkingObjects-method:

Find Linking Objects In Code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can find all objects that link to a given object by calling the
object's :js-sdk:`Realm.Object.linkingObjects()
<Realm.Object.html#linkingObjects>` method. This is useful for when you
want to access all linking objects for a particular relationship without
adding a property to the object schema.

.. example::

   A ``User`` object may reference multiple ``Post`` objects in the
   ``User.posts`` property. You can use the ``linkingObjects()`` method
   to find all the ``User`` objects that reference a given ``Post``:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/relationships-test.snippet.dynamically-obtain-inverse-relationship.tsx
            :language: typescript
            :emphasize-lines: 3
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/relationships-test.snippet.dynamically-obtain-inverse-relationship.jsx
            :language: typescript
            :emphasize-lines: 3
            :linenos:

.. _react-native-backlinks-query:

Filter a Query Based On Linking Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can reference linking objects in an RQL query by using the
``@links.<Type>.<Property>`` syntax. This is useful for when you want to
use inverse relationships in queries and subscriptions. For more
information, see :ref:`Backlink Queries <rql-backlinks>`.

.. example::

   A filter can match a ``Post`` object based on properties of the
   ``User`` object that references it. In the following example, the
   ``@links`` operator references the relationship defined for
   ``User.posts``. If a ``User`` was born on or after January 1, 2000,
   then their ``Post`` objects are included in the query results.

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/relationships-test.snippet.query-backlinks.tsx
            :language: typescript
            :emphasize-lines: 4-6
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/relationships-test.snippet.query-backlinks.jsx
            :language: typescript
            :emphasize-lines: 4-6
            :linenos:

.. _react-native-data-types-embedded-objects:
.. _react-native-define-an-embedded-object-property:
.. _react-native-embedded-objects:

Embedded Objects
----------------

An embedded object is a special type of :ref:`Realm object <react-native-object-schemas>`
that models complex data about a specific object. Embedded objects are similar
to :ref:`relationships <react-native-relationships>`, but they provide additional
constraints and map more naturally to the denormalized :manual:`MongoDB document
model </core/data-modeling-introduction/>`.

Realm enforces unique ownership constraints that treat each embedded object as
nested data inside a single, specific parent object. An embedded object
inherits the lifecycle of its parent object and cannot exist as an independent
Realm object. This means that embedded objects cannot have a primary key and
that Realm automatically deletes embedded objects if their parent object is
deleted.

.. tip:: Embedded object types are reusable and composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. Any objects that your
   application must persist after the deletion of their parent object
   should use :ref:`relationships <react-native-relationships>`
   instead.

Realm Object Models
~~~~~~~~~~~~~~~~~~~

To define an embedded object, set ``embedded``
to ``true``. You can reference an embedded object type from parent object types
in the same way as you would define a relationship:

.. tabs-realm-languages::

    .. tab::
       :tabid: typescript

       .. literalinclude:: /examples/generated/react-native/ts/Address.snippet.ts-address-schema.ts
          :language: typescript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Contact.snippet.ts-contact-schema.ts
          :language: typescript
          :emphasize-lines: 12
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Business.snippet.ts-business-schema.ts
          :language: typescript
          :emphasize-lines: 12
          :linenos:

    .. tab::
       :tabid: javascript

       .. literalinclude:: /examples/generated/react-native/js/Address.snippet.js-address-schema.js
          :language: javascript
          :emphasize-lines: 4
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Contact.snippet.js-contact-schema.js
          :language: javascript
          :emphasize-lines: 8
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Business.snippet.js-business-schema.js
          :language: javascript
          :emphasize-lines: 8
          :linenos:

.. important::
   
   Embedded objects cannot have a :ref:`primary key <react-native-primary-keys>`.

JSON Schema
~~~~~~~~~~~

.. include:: /includes/embedded-object-json-schema.rst

Read and Write Embedded Objects
-------------------------------

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign an instance of the embedded object
to a parent object's property.

Example
```````

In the following ``CreateContact`` example, we create a new ``Contact`` object 
with an embedded ``Address`` object.

The ``CreateContact`` component does the following:

- Creates React `state <https://reactjs.org/docs/react-component.html#state>`__ variables that
  represent the contact's name and address details.
- Gets access to an open realm instance by calling the ``useRealm()`` hook within the 
  component.
- Creates a component method ``submitContact()`` that performs a write transaction 
  to create a new ``Address`` embedded object and ``Contact`` parent object based 
  on the ``TextInput`` values for the contact's name and address.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the
  "Submit Contact" button that calls ``submitContact()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.create-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 7, 10-24
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.create-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 7, 10-24
         :linenos:

Query a Collection on Embedded Object Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use dot notation to filter or sort a :ref:`collection
<react-native-results-collections>` of objects based on an embedded object
property value.

Example
``````` 

In the following ``ContactList`` example, we filter and query an embedded 
``Address`` object.

The ``ContactList`` component does the following:

- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook.
- Filters for contacts with the name "John Smith" by passing :js-sdk:`collection.filtered()
  <Realm.Collection.html#filtered>` on the query ``"name == 'John Smith'"``.
- Retrieves the contact's street address by using dot notation.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.query-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 3, 7-8
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.query-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 3, 7-8
         :linenos:

Update an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To update a property in an embedded object, modify the property in a
write transaction.

Example
``````` 

In the following ``UpdateContact`` example, we update the ``street`` property for 
an embedded ``Address`` object.

The ``UpdateContact`` component does the following:

- Creates a React `state <https://reactjs.org/docs/react-component.html#state>`__ variable
  that represents the contact's new street address.
- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook 
  and filters for the contact that matches the name passed into the component as a `prop 
  <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an opened realm instance by calling the ``useRealm()`` hook within the 
  component. 
- Creates a component method ``updateStreet()`` that performs a write transaction and 
  sets the contact's street address to the value of the ``street`` state variable.
- Renders a ``TextInput`` that displays and changes the ``street`` state variable.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the 
  ``'Update Street Address'`` button that calls ``updateStreet()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.update-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 4-5, 8-12
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.update-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 4-5, 8-12
         :linenos:

Overwrite an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To overwrite an embedded object, reassign the embedded object property
of a party to a new instance in a write transaction.

Example
``````` 

In the following ``OverwriteContact`` example, we overwrite an embedded ``Address`` object.

The ``OverwriteContact`` component does the following:

- Creates React `state <https://reactjs.org/docs/react-component.html#state>`__ variables
  that represent the contact's new address.
- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook 
  and filters for the contact that matches the name passed into the component as a `prop
  <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an opened realm instance by calling the ``useRealm()`` hook within the 
  component.
- Creates a component method ``updateAddress()`` that performs a write transaction and 
  creates a new ``Address`` object that overwrites the existing address in the ``Contact`` object.
- Renders ``TextInput`` components that display and change the state variables for the 
  new address.
- Adds an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the 
  ``'Overwrite Address'`` button that calls ``updateAddress()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.overwrite-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 6-7, 10-19
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.overwrite-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 6-7, 10-19
         :linenos:

Delete an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~
Realm Uses Cascading Deletes for Embedded Objects. To delete an embedded object,
delete the embedded object's parent. 

Example
```````

In the following ``DeleteContact`` example, we delete an embedded object and its 
parent object.

The ``DeleteContact`` component does the following:

- Performs a query for all contacts by passing the ``Contact`` class to the ``useQuery`` hook.
- Filters for the ``Contact`` object that matches the name passed into the component as a 
  `prop <https://reactjs.org/docs/components-and-props.html>`__.
- Gets access to an open realm instance by calling the ``useRealm()`` hook within the component. 
- Creates a component method ``deleteContact()`` that performs a write transaction and calls
  :js-sdk:`Realm.delete() <Realm.html#delete>` to remove the ``Contact`` object.
- Add an `onPress <https://reactnative.dev/docs/handling-touches>`__ event on the "Delete Contact" 
  button that calls ``deleteContact()``.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/embedded-objects-test.snippet.delete-embedded-object.tsx
         :language: typescript
         :emphasize-lines: 2-4, 7-12
         :linenos:

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/embedded-objects-test.snippet.delete-embedded-object.jsx
         :language: javascript
         :emphasize-lines: 2-4, 7-12
         :linenos:

