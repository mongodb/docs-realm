.. _react-native-define-a-realm-object-schema:
.. _react-native-define-a-realm-object-model:

===============================================
Define a Realm Object Model - React Native SDK
===============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _react-native-object-types:
.. _react-native-object-schemas:
.. _react-native-object-models:

Every Realm object conforms to a specific **object type**. Object types are
classes you define that contain the properties and :ref:`relationships <react-native-relationships>`
for objects of that type using a pre-defined schema.

Realm guarantees that all objects in a realm conform to the schema for their
object type and validates objects whenever they're created, modified, or deleted.

Realm objects are fundamentally similar to a common JavaScript object but they
also bring along a few additional features like schema validation and :ref:`live
queries <react-native-live-queries>`.

The React Native SDK memory maps Realm objects directly
to native JavaScript objects, which means there's no need to use a special data
access library, such as an :wikipedia:`ORM <Object-relational_mapping>`.
Instead, you can work with Realm objects as you would any other object.

.. _react-native-realm-schema:

Realm Schema
~~~~~~~~~~~~

A **realm schema** is a list of valid :ref:`object schemas
<react-native-object-schemas>` that a realm may contain. Every Realm object must conform
to an object type that's included in its realm's schema.

If a realm already contains data when you open it, Realm Database
validates each object to ensure that an object schema was provided for its type
and that it meets all of the constraints specified in the schema.

Using ``@realm/react``, you define a realm schema by passing individual object
schemas to ``<RealmProvider>`` or ``createRealmContext()``.

.. literalinclude:: /examples/generated/react-native/js/RealmConfig.snippet.create-realm-context.js
   :language: javascript
   :emphasize-lines: 8

.. _react-native-define-a-new-object-type:

Define an Object Type
~~~~~~~~~~~~~~~~~~~~~

To define a Realm object type, create a class that extends ``Realm.Object``. 
Define the type's ``name`` and ``properties`` in a static property called ``schema``. 
The type's name must be unique among object types in a realm.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/react-native/ts/Book.snippet.ts-book-schema.ts
        :language: javascript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/react-native/js/Book.snippet.js-book-schema.js
        :language: javascript

Then you can pass the class itself to the schema property of the :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object when opening a realm.

To learn the various types that a Realm Object Model accepts, how to specify
optional fields, define relationships, embedded objects, primary keys, and more,
check out the :ref:`Schemas <react-native-schemas-overview>` section.

TypeScript and Required Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We recommend :ref:`creating Realm objects <react-native-create-a-new-object>` 
with :js-sdk:`Realm.create() <Realm.html#create>`, but you can also use the
``new`` operator for your object model's class.

If you use ``new``, you must add your class as a generic, along with any
required properties, when extending ``Realm.Object``. This enables full
TypeScript support for your object model, including type errors when required
fields are not defined.

.. literalinclude:: /examples/generated/react-native/ts/BookReqProperties.snippet.book-model-req-properties.ts
   :language: javascript
   :emphasize-lines: 1
