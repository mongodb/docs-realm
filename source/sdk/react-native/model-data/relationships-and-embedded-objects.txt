.. _react-native-relationships:

===================================================
Relationships & Embedded Objects - React Native SDK
===================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _react-native-to-one-relationship:

One-to-One Relationship
-----------------------

A **one-to-one** relationship means an object is related to at most one
other object of a particular type. To define a one-to-one relationship,
specify the property type as the related Realm object type.

.. example::

   In the following example of a **one-to-one** relationship, a
   ``PetOwner`` may own a single ``Pet``:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/PetOwner.snippet.ts-petowner-schema.ts
            :language: typescript
            :emphasize-lines: 4, 11
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/Pet.snippet.ts-pet-schema.ts
            :language: typescript
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/PetOwner.snippet.js-petowner-schema.js
            :language: javascript
            :emphasize-lines: 7
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/Pet.snippet.js-pet-schema.js
            :language: typescript
            :linenos:

.. _react-native-to-many-relationship:

One-to-Many Relationship
------------------------

A **one-to-many** relationship means an object may be related to
multiple objects. To define a to-many relationship, specify a property where the
type is a list or array of the related Realm object type in its :ref:`object
schema <react-native-object-schemas>`.

.. example::

   In the following example of a **one-to-many** relationship, a
   ``User`` may own multiple ``Post`` objects:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
            :language: typescript
            :emphasize-lines: 5, 13
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/Post.snippet.ts-post-schema.ts
            :language: typescript
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
            :language: javascript
            :emphasize-lines: 8
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/Post.snippet.js-post-schema.js
            :language: typescript
            :linenos:

.. _react-native-inverse-relationship:

Inverse Relationship
--------------------

An inverse relationship connects an object to all other objects that
refer to it in a one-to-one or one-to-many relationship. Whenever you
define a relationship, you also implicity create an inverse
relationship.

You can use inverse relationships to "backlink" from one object to
another based on a particular relationship. For example, if you define a
relationship that maps ``User.posts`` to a list of ``Post`` objects,
then you could use an inverse relationship to look up the ``User``
object related to a given ``Post`` object in this way.

.. _react-native-define-an-inverse-relationship-property:

Define Inverse Relationship Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can assign an inverse relationship to a property in the object
schema using the ``linkingObjects`` property type. This lets you access
the inverse relationship like a normal property.

A ``linkingObjects`` property backlinks to a specific relationship. You
specify which relationship to backlink with the object type and property
name of the relationship.

.. example::

   In the following example of an inverse relationship, each ``Post``
   object may belong to a single ``User`` object.

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/User.snippet.ts-user-schema.ts
            :language: typescript
            :emphasize-lines: 5, 13
            :linenos:

         .. literalinclude:: /examples/generated/react-native/ts/InverseRelationshipPost.snippet.ts-inverserelationshippost-schema.ts
            :language: typescript
            :emphasize-lines: 4, 11-14
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/User.snippet.js-user-schema.js
            :language: javascript
            :emphasize-lines: 8
            :linenos:

         .. literalinclude:: /examples/generated/react-native/js/InverseRelationshipPost.snippet.js-inverserelationshippost-schema.js
            :language: typescript
            :emphasize-lines: 7-11
            :linenos:


.. _react-native-linkingObjects-method:

Find Linking Objects In Code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can find all objects that link to a given object by calling the
object's :js-sdk:`Realm.Object.linkingObjects()
<Realm.Object.html#linkingObjects>` method. This is useful for when you
want to access all linking objects for a particular relationship without
adding a property to the object schema.

.. example::

   A ``User`` object may reference multiple ``Post`` objects in the
   ``User.posts`` property. You can use the ``linkingObjects()`` method
   to find all the ``User`` objects that reference a given ``Post``:

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/relationships-test.snippet.dynamically-obtain-inverse-relationship.tsx
            :language: typescript
            :emphasize-lines: 3
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/relationships-test.snippet.dynamically-obtain-inverse-relationship.jsx
            :language: typescript
            :emphasize-lines: 3
            :linenos:

.. _react-native-backlinks-query:

Filter a Query Based On Linking Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can reference linking objects in an RQL query by using the
``@links.<Type>.<Property>`` syntax. This is useful for when you want to
use inverse relationships in queries and subscriptions. For more
information, see :ref:`Backlink Queries <rql-backlinks>`.

.. example::

   A filter can match a ``Post`` object based on properties of the
   ``User`` object that references it. In the following example, the
   ``@links`` operator references the relationship defined for
   ``User.posts``. If a ``User`` was born on or after January 1, 2000,
   then their ``Post`` objects are included in the query results.

   .. tabs-realm-languages::

      .. tab::
         :tabid: typescript

         .. literalinclude:: /examples/generated/react-native/ts/relationships-test.snippet.query-backlinks.tsx
            :language: typescript
            :emphasize-lines: 4-6
            :linenos:

      .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/generated/react-native/js/relationships-test.snippet.query-backlinks.jsx
            :language: typescript
            :emphasize-lines: 4-6
            :linenos:

.. _react-native-embedded-objects:

Embedded Objects
----------------

An embedded object is a special type of :ref:`Realm object <react-native-object-schemas>`
that models complex data about a specific object. Embedded objects are similar
to :ref:`relationships <react-native-relationships>`, but they provide additional
constraints and map more naturally to the denormalized :manual:`MongoDB document
model </core/data-modeling-introduction/>`.

Realm enforces unique ownership constraints that treat each embedded object as
nested data inside a single, specific parent object. An embedded object
inherits the lifecycle of its parent object and cannot exist as an independent
Realm object. This means that embedded objects cannot have a primary key and
that Realm automatically deletes embedded objects if their parent object is
deleted.

.. tip:: Embedded object types are reusable and composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. Any objects that your
   application must persist after the deletion of their parent object
   should use :ref:`relationships <react-native-relationships>`
   instead.

Realm Object Models
~~~~~~~~~~~~~~~~~~~

To define an embedded object, set ``embedded``
to ``true``. You can reference an embedded object type from parent object types
in the same way as you would define a relationship:

.. tabs-realm-languages::

    .. tab::
       :tabid: typescript

       .. literalinclude:: /examples/generated/react-native/ts/Address.snippet.ts-address-schema.ts
          :language: typescript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Contact.snippet.ts-contact-schema.ts
          :language: typescript
          :emphasize-lines: 13
          :linenos:

       .. literalinclude:: /examples/generated/react-native/ts/Business.snippet.ts-business-schema.ts
          :language: typescript
          :emphasize-lines: 12
          :linenos:

    .. tab::
       :tabid: javascript

       .. literalinclude:: /examples/generated/react-native/js/Address.snippet.js-address-schema.js
          :language: javascript
          :emphasize-lines: 4
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Contact.snippet.js-contact-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

       .. literalinclude:: /examples/generated/react-native/js/Business.snippet.js-business-schema.js
          :language: javascript
          :emphasize-lines: 9
          :linenos:

.. important::
   
   Embedded objects cannot have a :ref:`primary key <react-native-primary-keys>`.

JSON Schema
~~~~~~~~~~~

.. include:: /includes/embedded-object-json-schema.rst
