.. _react-native-intro:

======================
Realm React Native SDK
======================

.. toctree::
   :titlesonly:
   :hidden:
   
   Install Realm for React Native </sdk/react-native/install>
   Quick Start </sdk/react-native/quick-start-local>
   Quick Start with Sync </sdk/react-native/quick-start>
   Quick Start with Expo </sdk/react-native/quick-start-expo>
   Use Realm React </sdk/react-native/use-realm-react>
   Fundamentals </sdk/react-native/fundamentals>
   Data Types </sdk/react-native/data-types>
   Usage Examples </sdk/react-native/examples>
   Integration Guides </sdk/react-native/integrations>
   Advanced Guides </sdk/react-native/advanced>
   Test & Debug </sdk/react-native/test-and-debug>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Upgrade from Stitch to Realm </sdk/react-native/migrate>
   Release Notes <https://github.com/realm/realm-js/releases>


The Realm React Native SDK allows you to use Realm Database and backend
Apps from `React Native <https://facebook.github.io/react-native/>`__
applications for iOS and Android written in JavaScript or TypeScript. 

.. note::

   The React Native SDK does not support JavaScript or TypeScript
   applications written for web browsers. For that use case, you should
   consider the :ref:`Web SDK <web-intro>`. For development on Node.js
   without React, refer to the :ref:`Node.js SDK <node-intro>`
   documentation.

.. button:: Create an Account
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_reactnative

Local Realm Database
--------------------

With the Realm React Native SDK, you can access objects stored in a local
instance of Realm Database. With Realm Database, you can:

Define an Object Schema
~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Define your object schema <react-native-define-a-realm-object-schema>` by creating
an object or a class.

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-define-object-schema.js
  :language: javascript


Query Realm Database
~~~~~~~~~~~~~~~~~~~~

:ref:`Query <react-native-client-query-engine>` for stored objects:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-query-realm-database.js
  :language: javascript

Update Live Objects
~~~~~~~~~~~~~~~~~~~

:ref:`Update <react-native-update-an-object>` objects in Realm Database by
updating field values on an instance of the object within a transaction:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-update-live-objects.js
  :language: javascript

Watch for Object Updates
~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Receive object updates and notifications automatically
<react-native-react-to-changes>` when objects stored in Realm Database
change:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-watch-for-object-updates.js
  :language: javascript

Always Access the Latest Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Live objects <react-native-live-objects>` keep all instances
of an object up to date at all times:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-access-the-latest-data.js
  :language: javascript

.. seealso::

   To get started with Realm Database, try our
   :ref:`Quick Start <react-native-client-quick-start-local>`.

Realm Apps
----------

Apps are backends for client applications hosted by MongoDB in the cloud.
They provide the ability to synchronize data stored in
Realm Database, called **Device Sync**, as well as a layer of backend
functionality collectively called **App Services**.
The Realm React Native SDK optionally contains the ability to access
these Apps running in the cloud. In addition to local
Realm Database in the SDK, Apps provide the
following functionality:

Atlas Device Sync
~~~~~~~~~~~~~~~~~

Automatically sync data between realms on client devices and your backend
MongoDB Atlas data store with :ref:`Device Sync <react-native-sync-changes-between-devices>`:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-sync-data-between-realms.js
  :language: javascript

App Services
~~~~~~~~~~~~

- Use Realm's built-in user management to enable
  :ref:`user account creation <react-native-register-new-user>`
  and user :ref:`authentication <react-native-authenticate-users>` across
  devices.

- Store data persistently with :ref:`permissions <mongodb-crud-permissions>`
  in your backend App using a
  :ref:`MongoDB data source <data-sources>`.

- Execute logic in your backend App from a client application using
  :ref:`Functions <react-native-call-a-function>`.

- React to events in your backend App using
  :ref:`Triggers <triggers>`.

.. seealso::

   To get started with Realm, try the
   :ref:`Quick Start with Sync <react-native-client-quick-start>`.


.. button:: Create an Account
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_kotlin


Get Started
-----------

To start using the Realm React Native SDK
in your React Native application, see :ref:`Install Realm for React Native
<react-native-install>` to add the Realm JS SDK dependency and then check
out the :ref:`Quick Start <react-native-client-quick-start-local>`. 
To quickly build your App using Expo, check out the :ref:`Quick Start with
Expo <react-native-client-quick-start-expo>`.

To learn more about the concepts that underly Realm Database,
such as :ref:`write transactions <react-native-write-transactions>`, the 
:ref:`Query Engine <react-native-client-query-engine>`, and more,
check out the Fundamentals.

For practical code samples of common tasks in Realm Database and
Apps, take a look at the Examples.
   
.. list-table::
   :header-rows: 1
   :class: index-table

   * - Get Started
     - Fundamentals
     - Examples
     - Realm Apps Examples
     
   * - :doc:`Install Realm for Android </sdk/react-native/install>`
   
       :doc:`Quick Start </sdk/react-native/quick-start-local>`
       
       :doc:`Quick Start with Sync </sdk/react-native/quick-start>`

       :doc:`Quick Start with Expo </sdk/react-native/quick-start-expo>`

       :doc:`Use Realm React </sdk/react-native/use-realm-react>`
              
       :doc:`Upgrade from Stitch to Realm </sdk/react-native/migrate>`
       
     - :doc:`Realms </sdk/react-native/fundamentals/realms>`
            
       :doc:`Live Queries </sdk/react-native/fundamentals/live-queries>`
              
       :doc:`Write Transactions </sdk/react-native/fundamentals/write-transactions>`
       
       :doc:`Relationships & Embedded Objects </sdk/react-native/fundamentals/relationships-and-embedded-objects>`

       :doc:`Application Services </sdk/react-native/fundamentals/application-services>`

       :doc:`Atlas Device Sync </sdk/react-native/fundamentals/device-sync>`
     
     - :doc:`Define a Realm Object Schema </sdk/react-native/examples/define-a-realm-object-model>`
     
       :doc:`Open & Close a Realm </sdk/react-native/examples/open-and-close-a-realm>`
       
       :doc:`Read & Write Data </sdk/react-native/examples/read-and-write-data>`
       
       :doc:`React to Changes </sdk/react-native/examples/react-to-changes>`
       
       :doc:`Query Data </sdk/react-native/examples/query-data>`
       
       :doc:`Modify an Object Schema </sdk/react-native/examples/modify-an-object-schema>`
       
     - :doc:`Connect to an Atlas App Services backend </sdk/react-native/examples/connect-to-app-services-backend>`
     
       :doc:`Authenticate Users </sdk/react-native/examples/authenticate-users>`

       :doc:`Flexible Sync </sdk/react-native/examples/flexible-sync>`

       :doc:`Reset a Client Realm </sdk/react-native/examples/reset-a-client-realm>`
       
       :doc:`Sync Changes Between Devices </sdk/react-native/examples/sync-changes-between-devices>`
       
       :doc:`Call a Function </sdk/react-native/examples/call-a-function>`
       
       :doc:`Manage Email/Password Users </sdk/react-native/examples/manage-email-password-users>`
       
       :doc:`Query MongoDB </sdk/react-native/examples/query-mongodb>`

Advanced Guides
---------------
For information about advanced concepts, such as :ref:`encryption
<react-native-encrypt-a-realm>` and the :ref:`Query Engine <react-native-client-query-engine>`,
see the :ref:`Advanced Guides <react-native-client-advanced-guides>` section.

Realm Database
~~~~~~~~~~~~~~

- :doc:`Encryption </sdk/react-native/advanced/encrypt>`

Realm Apps
~~~~~~~~~~

- :doc:`Link User Identities </sdk/react-native/advanced/link-identities>`
- :doc:`Multi-User Applications </sdk/react-native/advanced/multi-user-applications>`
- :doc:`Custom User Data </sdk/react-native/advanced/access-custom-user-data>`
- :doc:`Client Reset Data Recovery </sdk/react-native/advanced/client-reset-data-recovery>`
