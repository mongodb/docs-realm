:template: product-landing
:hidefeedback: header
:noprevnext:

.. _react-native-intro:

======================
Realm React Native SDK
======================

.. toctree::
   :titlesonly:
   :hidden:
   
   Install Realm for React Native </sdk/react-native/install>
   Quick Start </sdk/react-native/quick-start-local>
   Quick Start with Sync </sdk/react-native/quick-start>
   Quick Start with Expo </sdk/react-native/quick-start-expo>
   Use Realm React </sdk/react-native/use-realm-react>
   Fundamentals </sdk/react-native/fundamentals>
   Data Types </sdk/react-native/data-types>
   Usage Examples </sdk/react-native/examples>
   Integration Guides </sdk/react-native/integrations>
   Advanced Guides </sdk/react-native/advanced>
   Test & Debug </sdk/react-native/test-and-debug>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Upgrade from Stitch to Realm </sdk/react-native/migrate>
   Release Notes <https://github.com/realm/realm-js/releases>

Use the Realm React Native SDK to develop iOS and Android apps with
JavaScript or TypeScript.

.. kicker:: Learning Paths

Get Started with Realm React Native
-----------------------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/react-native/quick-start-local/
      :icon: /images/icons/branding_2022/Technical_ATLAS_Functions3x.png
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with Realm Database.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: /images/icons/branding_2022/Technical_REALM_Mobile3x.png
      :icon-alt: Realm Mobile Icon

      Learn from example by dissecting a working React Native client app that
      uses Realm Database with Device Sync.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://mongodb.com/docs/atlas/app-services/tutorial/react-native/
      :icon: /images/icons/branding_2022/General_CONTENT_Tutorial3x.png
      :icon-alt: Tutorial Icon

      Follow a guided tutorial to learn how to adapt the example app to
      create your own working app with Realm database and Device Sync.

.. kicker:: What You Can Do

Develop Apps with Realm Database
--------------------------------

Use open-source Realm Database to store data on a device. Use Device
Sync to keep data in sync with your MongoDB Atlas cluster and other
clients.

.. tabs::

  .. tab:: Use Realm Database Locally
      :tabid: local-realm

      .. procedure::

         .. step:: Install the Realm React Native SDK

            Set up your project with React Native and Realm.
            See :ref:`Install React Native <react-native-install>` to get started.

         .. step:: Define an Object Schema

            Use JavaScript to :ref:`define an object schema
            <react-native-define-a-realm-object-schema>`.

         .. step:: Open a Realm

            Realm Database stores objects on your device. :ref:`Configure
            and open a realm <react-native-open-close-realm>` to get
            started reading and writing data.

         .. step:: Read and Write Data

            You can create, read, update, and delete objects from the
            realm.

            For more information, see :ref:`Read & Write Data
            <react-native-read-and-write-data>` and :ref:`Query Data
            <react-native-query-data>`.


         .. step:: React to Changes

            Realm's live objects mean that your data is always up-to-date.
            You can register a change listener, a notification handler
            that watches for changes and performs logic like updating
            your UI.

            For more information, visit :ref:`React to Changes
            <react-native-react-to-changes>`.


      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

  .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules or use
            Development Mode to infer a schema from your client's data model.

            Then, :ref:`connect to the backend
            <react-native-connect-to-mongodb-realm-backend-app>`
            from your client.

         .. step:: Authenticate a User

            App Services provides access to custom JWT authentication,
            our built-in email/password provider, anonymous
            authentication, and popular
            authentication providers like Apple, Google, and Facebook.

            For more information, see :ref:`Authenticate Users
            <react-native-authenticate-users>`.

         .. step:: Open a Synced Realm

            A synced realm allows you to access data across devices.
            To determine what data a synced realm can read and write,
            subscribe to a query.

            For more information, see :ref:`Open & Close a Realm
            <react-native-open-close-realm>` and :ref:`Subscribe to
            Queryable Fields <react-native-sync-subscribe-to-queryable-fields>`.

         .. step:: Read and Write Synced Data

            The APIs for reading and writing data are the same for both synced
            and local realms. Data that you read and write is automatically kept
            in sync with your Atlas cluster and other clients.
            Apps keep working offline and sync changes when a network connection
            is available.

            For more information on reading and writing data, see
            :ref:`Read & Write Data <react-native-read-and-write-data>`.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

  .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <react-native-call-a-function>`
         from your client application that run in an App Services backend.

         .. code-block:: javascript
            :copyable: false

            const myFunctionResult =
            await user.functions.myServerlessFunction(
               arguments
            );

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         You can :ref:`query data stored in MongoDB <react-native-mongodb-remote-access>`
         directly from your client application code.

         .. code-block:: javascript
            :copyable: false

            const mongodb = app.currentUser.mongoClient("mongodb-atlas");
            const animals = mongodb.db("example").collection("animals");

            const cheetah = await animals.findOne({ name: "cheetah" });

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <react-native-authenticate-users>`. Use the authenticated user
         to access App Services.

         .. code-block:: javascript
            :copyable: false

            const jwt = await authenticateWithExternalSystem();
            const credentials = Realm.Credentials.jwt(jwt);

            const user = await app.logIn(credentials);

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

  .. tab:: Use Realm React
      :tabid: realm-react

      .. container::

         Realm React is an npm package that provides an easy-to-use API to
         perform common Realm operations in your React Native app,
         such as querying or writing to a realm and listening to realm
         objects. Realm React includes React context, providers, and hooks
         for working with Realm.

         Use Realm React to manage a Realm  Database, Atlas App Services,
         and Atlas Device Sync.

         For more information, see :ref:`Realm React
         <react-native-use-realm-react>`.

      .. image:: /images/illustrations/Spot_MauvePurple_Logic_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: React Native Reference
      :url: https://www.mongodb.com/docs/realm-sdks/js/latest/
      :icon: /images/icons/branding_2022/General_ACTION_BestPractices3x.png
      :icon-alt: Realm Icon

      Explore generated reference docs for the React Native SDK.

   .. card::
      :headline: React Native Quick Start with Expo
      :cta: Explore the Quick Start
      :url: https://www.mongodb.com/docs/realm/sdk/react-native/quick-start-expo/
      :icon: /images/icons/expo_logo.svg
      :icon-alt: Expo Icon

      Build and deploy a React Native application quickly using an
      Expo template application with Realm React.
