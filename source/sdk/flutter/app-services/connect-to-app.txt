.. _flutter-connect-to-backend:

=====================================
Connect to App Services - Flutter SDK
=====================================

.. meta::
  :description: Connect your Atlas Device SDK for Flutter client app to the Atlas App Services backend.
  :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``App`` client is the interface to the Atlas App Services
backend. It provides access to App Services features like :ref:`user authentication
<flutter-authenticate>` and Device Sync.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`
#. :ref:`Find the App ID in the App Services UI <find-your-app-id>`

.. _flutter-access-the-app-client:

Access the App Client
---------------------

.. versionchanged:: 1.7.0
   ``App`` must be created on the main isolate.

Create an ``App`` instance to access App Services features throughout your 
client application. We recommend that you create the ``App`` instance only 
once on the main isolate, ideally as soon as the app starts.

#. Get your App Services App's ID from the App Services UI. To learn how, 
   refer to :ref:`Find your App ID <find-your-app-id>`.
#. Create an :flutter-sdk:`AppConfiguration <realm/AppConfiguration-class.html>`
   object with your App's App ID as the argument.
#. Create an :flutter-sdk:`App <realm/App-class.html>`
   with the ``AppConfiguration`` you just created. In Flutter v1.7.0 and later, 
   this must be done on the main isolate, otherwise the SDK throws an error.  

After you create the ``App``, you can access the constructed ``App`` instance 
on a background isolate using ``App.getById``. Refer to the
:ref:`Get App by ID <flutter-get-app-by-id>` section on this page for more 
information.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.access-app-client.dart
   :language: dart

.. include:: /includes/multiple-app-client-details-and-app-config-cache.rst

.. _flutter-app-client-configuration:

Advanced Configuration
----------------------

.. deprecated:: 1.6.0
   ``App.localAppName`` and ``App.localAppVersion`` are no longer used.

You can add optional arguments to the ``AppConfiguration`` for more granular control
of your ``App`` client. You may want to add things like custom timeouts
for connections or keys for local metadata encryption.
To learn about the available configuration options, refer to the
:flutter-sdk:`AppConfiguration <realm/AppConfiguration-class.html>` reference documentation.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.app-client-advanced-configuration.dart
   :language: dart

.. note:: Connect Using Android 7 or Older

   The default HTTP client included with the Realm Flutter SDK does not work
   for apps running on Android 7 or older. To work around this, you must add
   a custom HTTP client to your ``AppConfiguration``. To learn more,
   refer to :ref:`Connect to App Services Using Android 7 or Older <flutter-connect-old-android>`.

.. _flutter-get-app-by-id:

Get App by ID
-------------

.. versionadded:: 1.7.0

After you have created an ``App`` instance on the main isolate, you can access 
the constructed instance on a background isolate by passing the App ID to the 
:flutter-sdk:`App.getById() <realm/App/getById.html>` method. Then, you can use it to work with the ``App`` and users as needed.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.access-app-by-id.dart
   :language: dart
   :emphasize-lines: 14

