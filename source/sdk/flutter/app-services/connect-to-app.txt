.. _flutter-connect-to-backend:

=====================================
Connect to App Services - Flutter SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``App`` client is the interface to the Atlas App Services
backend. It provides access to the :ref:`authentication
<flutter-authenticate>` and Device Sync.

Before You Begin
----------------

#. :ref:`Create an App Services App <create-a-realm-app>`

.. _flutter-access-the-app-client:

Access the App Client
---------------------

#. :ref:`Find the App ID in the Realm UI <find-your-app-id>`.
#. Create an :flutter-sdk:`AppConfiguration <realm/AppConfiguration-class.html>`
   object with your App's App ID as the argument.
#. Create an :flutter-sdk:`App <realm/App-class.html>`
   with the ``AppConfiguration`` you just created. You use this
   ``App`` instance to access App Services features throughout your client application.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.access-app-client.dart
   :language: dart

.. note::

   You can create multiple ``App`` instances to connect to multiple
   Apps or to the same App with different configurations. All
   ``App`` instances that share the same App ID use the same underlying
   connection.

.. _flutter-app-client-configuration:

Advanced Configuration
----------------------

Add additional configuration for more granular control of the details of your app client,
such as custom timeouts for connections and keys for local encryption.
You can add optional arguments to the :flutter-sdk:`AppConfiguration <realm/AppConfiguration-class.html>`:

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.app-client-advanced-configuration.dart
   :language: dart

.. note::

   For most use cases, you only need your application's App ID to connect
   to App Services. The other settings demonstrated here are optional.

.. _flutter-connect-old-android:

Connect Using Android 7 or Older
--------------------------------

To use App Services with the Realm SDK on a device using Android 7 or older,
you must add an HTTP client with a custom Let's Encrypt Transport Layer Security (TLS) encryption certificate
to the ``App``.

This is due to a known issue using Flutter on devices running Android 7 or older
to connect to web servers that use Let's Encrypt TLS certificates.
As App Services server uses a Let's Encrypt TLS certificate, you must add the custom certificate.

You can download the Let's Encrypt certificate to add to your app
by clicking this link: https://letsencrypt.org/certs/lets-encrypt-r3.pem

To set up the custom HTTP client, adapt the following code example to your app.

.. literalinclude:: /examples/generated/flutter/app_services_test.snippet.custom-ssl-cert.dart
   :language: dart
