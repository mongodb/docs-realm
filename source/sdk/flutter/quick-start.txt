.. _flutter-quick-start:
.. _flutter-quick-start-local:

=========================
Quick Start - Flutter SDK
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get Realm Database
integrated into your Flutter app.

Before you begin, ensure you have:

- :ref:`Installed the Flutter SDK <flutter-install>`

.. _flutter-define-object-model:

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within Realm Database.
You can define your application's data model via Dart
classes in your application code with
a Realm object schema.
You then have to generate the :flutter-sdk:`RealmObject <realm/RealmObject-mixin.html>`
class that's used within your application.

.. seealso:: Further Reading

   :ref:`Define a Realm Object Schema - Flutter SDK <flutter-define-realm-object-schema>`

Create Data Model
~~~~~~~~~~~~~~~~~

To define your application's data model, add a Realm model class
definition to your application code.

Some considerations when defining your Realm model class:

- Import package at the top of your class definition file.

- In your file, give your class a private name (starting with ``_``),
  such as a file ``car.dart`` with a class ``_Car``.
  You generate the public RealmObject class using the command in the following
  Generate RealmObject Class section. This command
  outputs a public class, such as ``Car``.

- Make sure to include the generated file name, such as ``part car.g.dart``,
  before the code defining your model.
  This is required to generate the RealmObject class.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. literalinclude:: /examples/generated/flutter/define_realm_model_test.snippet.define-model-flutter.dart
         :language: dart
         :caption: car.dart

   .. tab:: Dart
      :tabid: dart

      .. literalinclude:: /examples/generated/flutter/define_realm_model_test.snippet.define-model-dart.dart
         :language: dart
         :caption: car.dart



.. _flutter-generate-realmobject-class:

Generate RealmObject Class
~~~~~~~~~~~~~~~~~~~~~~~~~~

Now generate a RealmObject class ``Car`` from the data model class ``Car``:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block::

         flutter pub run realm generate

   .. tab:: Dart
      :tabid: dart

      .. code-block::

         dart run realm_dart generate

Running this creates a ``Car`` class in a ``car.g.dart`` file located in the directory
where you defined the model class per the preceding Create Data Model section.
This ``Car`` class is public and part of the same library
as the ``_Car`` data model class.
The generated ``Car`` class is what's used throughout your application.

If you'd like to watch your data model class to generate a new ``Car`` class whenever
there's a change to ``_Car``, run:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block::

         flutter pub run realm generate --watch

   .. tab:: Dart
      :tabid: dart

      .. code-block::

         dart run realm_dart generate --watch

Open a Realm
------------

Use the :flutter-sdk:`Configuration <realm/Configuration-class.html>` class
to control the specifics of the realm you
would like to open, including schema and whether the realm is local-only or synced.

Pass your configuration to the :flutter-sdk:`Realm constructor <realm/Realm-class.html>`
to generate an instance of that realm:

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.open-realm.dart
   :language: dart

You can now use that realm instance to work with objects in the database.

.. seealso:: Further Reading

   :ref:`Open and Close a Realm - Flutter SDK <flutter-open-close-realm>`

Work with Realm Objects
-----------------------

Once you've opened a realm, you can create objects within it using a
:flutter-sdk:`write transaction block <realm/Realm/write.html>`.

.. seealso:: Further Reading

   :ref:`Read and Write Data - Flutter SDK <flutter-read-write-data>`

Create Objects
~~~~~~~~~~~~~~

To create a new ``Car``, instantiate an instance of the
``Car`` class and add it to the realm in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.create-realm-object.dart
   :language: dart

Update Objects
~~~~~~~~~~~~~~

To modify a car, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.update-realm-object.dart
   :language: dart

Query for Objects
~~~~~~~~~~~~~~~~~

Retrieve a collection of all objects of a data model in the realm with the
:flutter-sdk:`Realm.all() <realm/Realm/all.html>` method:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.query-all-realm-objects.dart
   :language: dart

Filter a collection to retrieve a specific segment
of objects with the :flutter-sdk:`Realm.query() <realm/Realm/query.html>` method.
In the ``query()`` method's argument,
use :ref:`Realm Query Language operators<rql-operators>` to perform filtering.


.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.query-realm-objects-with-filter.dart
   :language: dart

Sort the results using the :ref:`Realm Query Language SORT() operator
<rql-sort-distinct-limit>` in the ``query()`` method's argument.

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.query-realm-objects-with-sort.dart
   :language: dart

Delete Objects
~~~~~~~~~~~~~~

Delete a car by calling the :flutter-sdk:`Realm.delete() <realm/Realm/delete.html>`
method in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.delete-one-realm-object.dart
   :language: dart

Delete multiple cars with the :flutter-sdk:`Realm.deleteMany()
<realm/Realm/deleteMany.html>` method in a write transaction block.

.. literalinclude:: /examples/generated/flutter/quick_start_test.snippet.delete-many-realm-objects.dart
   :language: dart

React to Changes
~~~~~~~~~~~~~~~~

Listen and respond to changes to a query, a single object, or a list within an object.
The change listener is a Stream that invokes a callback function with an containing
changes since last invocation as its argument.

To listen to a query, use  :flutter-sdk:`RealmResults.changes.listen()
<realm/RealmResultsChanges-class.html>`.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.query-change-listener.dart
   :language: dart

To listen to a single Realm object, use :flutter-sdk:`RealmObject.changes.listen()
<realm/RealmObjectChanges-class.html>`.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.realm-object-change-listener.dart
   :language: dart

To listen to a list of Realm objects within another Realm object, use :flutter-sdk:`RealmList.changes.listen()
<realm/RealmListChanges-class.html>`.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.realm-list-change-listener.dart
   :language: dart

You can pause and resume subscriptions as well.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.pause-resume-subscription.dart
   :language: dart

Once you've finished listening to changes, close the change listener to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.cancel-subscription.dart
   :language: dart

.. seealso:: Further Reading

   :ref:`React to Changes - Flutter SDK <flutter-react-to-changes>`

Close a Realm
-------------

Once you've finished working with a realm, close it to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.close-realm.dart
   :language: dart


Further Examples
----------------

For further examples of all the Flutter SDK methods described above and more, refer to
the :github:`Realm Dart Samples Github repo <realm/realm-dart-samples>`.

