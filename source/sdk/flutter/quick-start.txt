.. _flutter-quick-start: 
.. _flutter-quick-start-local:

=========================
Quick Start - Flutter SDK
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get {+client-database+}
integrated into your Flutter app. 

Before you begin, ensure you have:

- :ref:`Installed the Flutter SDK <flutter-install>`

.. include:: /includes/note-flutter-local-realm-only.rst

.. TODO(DOCSP-20150): replace the current reference links with new ones, 
.. once the Alpha SDK reference is out 


.. _flutter-define-object-model: 

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within {+client-database+}.
You can define your application's data model via Dart
classes in your application code with
:ref:`Realm Object Models <create-schema-from-rom>`.

To define your application's data model, add the following class
definition to your application code:

.. code-block:: dart
   :caption: Car.dart

   import 'package:realm/realm.dart';

   part 'Car.g.dart';

   @RealmModel()
   class _Car {
      @PrimaryKey()
      late final String make;

      late final String model;
      late int? miles;
   }

Now generate a RealmObject class ``Car`` from the data model class ``Car``:

.. code-block::
   
   flutter run realm generate

This creates the ``Car`` class in a ``Car.g.dart`` file in the same directory as 
where you defined the model class. 

Open a Realm
------------

Use `Configuration <realm/Configuration-class.html>`__
to control the specifics of the {+realm+} you
would like to open, including schema.

Pass your configuration to the `Realm constructor <https://pub.dev/documentation/realm/latest/realm/Realm-class.html>`__
to generate an instance of that {+realm+}:

.. literalinclude:: /examples/generated/flutter/open_realm_test.codeblock.open-realm.dart
   :language: dart

You can now use that {+realm+} instance to work with objects in the database.

Work with Realm Objects
-----------------------

Once you've opened a {+realm+}, you can create objects within it in a
`write transaction block <https://pub.dev/documentation/realm/latest/realm/Realm/write.html>`_.

Create Objects
~~~~~~~~~~~~~~

To create a new ``Car``, instantiate an instance of the
``Car`` class and add it to the {+realm+} in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.create-realm-object.dart
   :language: dart

Update Objects
~~~~~~~~~~~~~~

To modify a car, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.update-realm-object.dart
   :language: dart

Query for Objects
~~~~~~~~~~~~~~~~~

Retrieve a collection of all objects of a data model in the {+realm+} with the
`Realm.query<RealmObject>() <https://pub.dev/documentation/realm/latest/realm/Realm/objects.html>`__
method:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.query-all-realm-objects.dart
   :language: dart

Filter a collection to retrieve a more specific collection
of objects:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.query-realm-objects-with-filter.dart
   :language: dart

Sort the results using `NSPredicate syntax <https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pCreating.html>`_:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.query-realm-objects-with-sort.dart
   :language: dart

Delete Objects
~~~~~~~~~~~~~~

Delete a car by calling the `Realm.delete(RealmObject) <https://pub.dev/documentation/realm/latest/realm/Realm/delete.html>`__
method in a write transaction block:

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.delete-one-realm-object.dart
   :language: dart

Delete multiple cars with the `Realm.deleteMany(List<RealmObject>) 
<https://pub.dev/documentation/realm/latest/realm/Realm/deleteMany.html>`__ method in a write transaction block. 

.. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.delete-many-realm-objects.dart
   :language: dart

.. TODO(DOCSP-20150): refactor everything here. this is the roughest of sketches. 
.. there's little confidence anything here is correct. the APIs for these operations 
.. haven't been finished yet. 
.. Listen for Changes to Objects
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. Listen and respond to changes to an entire {+realm+} database, a collection or a single object. 

.. To listen to an entire {+realm+}, use the `Realm.addListener(Event, ListenerCallback) <https://pub.dev/documentation/realm/latest/realm/Realm/addListener.html>`__ method. 

.. .. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.listen-to-entire-realm.dart
..    :language: dart

.. To listen to an a collection of {+realm+} objects, use the `Results<RealmObject>.addListener(ResultsListenerCallback) <https://pub.dev/documentation/realm/latest/realm/Results/addListener.html>`__ method. 

.. .. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.listen-to-collection-realm-objects.dart
..    :language: dart

.. To listen to an a single {+realm+} object, use the `RealmObject.addListener(ResultsListenerCallback) <https://pub.dev/documentation/realm/latest/realm/RealmObject/addListener.html>`__ method. 

.. .. literalinclude:: /examples/generated/flutter/quick_start_test.codeblock.listen-to-single-realm-object.dart
..    :language: dart

Close a Realm
-------------

Once you've finished working with a {+realm+}, close it to prevent memory leaks.  

.. literalinclude:: /examples/generated/flutter/open_realm_test.codeblock.close-realm.dart
   :language: dart


Further Examples
----------------

For further examples of all the Flutter SDK methods described above and more, refer to 
the :github:`Realm Dart Samples Github repo <realm/realm-dart-samples>`.

