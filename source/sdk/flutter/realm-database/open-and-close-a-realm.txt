.. _flutter-open-close-realm:

==================================
Open & Close a Realm - Flutter SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _flutter-open-realm:

Open a Realm
------------

Use the :flutter-sdk:`Configuration <realm/Configuration-class.html>` class
to control the specifics of the realm you
would like to open, including the schema.

.. _flutter-open-local-only-realm:

Open a Local-Only Realm
~~~~~~~~~~~~~~~~~~~~~~~

To create a realm that only persists data locally,
create a configuration with :flutter-sdk:`Configuration.local() <realm/Realm-class.html>`.
You must provide a list of schemas as an argument.

Pass the ``Configuration`` to the :flutter-sdk:`Realm <realm/Realm-class.html>` constructor.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.open-realm.dart
   :language: dart

You can now use that realm instance to work with objects in the database.

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

To open a realm that synchronizes data with Atlas using Device Sync,
refer to :ref:`Open a Synced Realm <flutter-open-synced-realm>`.

Open an In-Memory Realm
~~~~~~~~~~~~~~~~~~~~~~~

To create a realm that runs entirely in memory without being persisted to a file,
create your ``Configuration`` with :flutter-sdk:`Configuration.inMemory() <realm/Configuration/inMemory.html>`.
You must provide a list of schemas as an argument.
In-memory realms **cannot** also be read-only.

Pass the ``Configuration`` to the :flutter-sdk:`Realm <realm/Realm-class.html>` constructor.


.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.in-memory-realm.dart
   :language: dart

.. _flutter-configure-realm:

Configure a Realm
-----------------

You can add optional properties to the realm's ``Configuration``.

.. _flutter-open-read-only-realm:

Open a Read-Only Realm
~~~~~~~~~~~~~~~~~~~~~~

You can open an existing realm in read-only mode. To open a read-only realm,
add ``readOnly: true`` to your ``Configuration`` object.

You can only open *existing* realms in read-only mode.
If you try to write to a read-only realm, it throws an error.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.read-only-realm.dart
   :language: dart

.. _flutter-set-custom-fifo:

Set Custom FIFO Special Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Set a value for Realm's `FIFO special files
<https://www.ibm.com/docs/en/zos/2.3.0?topic=csf-fifo-special-files>`_ location.
Opening a realm creates a number of lightweight FIFO special files
that coordinate access to the realm across threads and processes.
If the realm file is in a location that doesn't allow for the creation of
FIFO special files (such as FAT32 filesystems), then the realm cannot be opened.
In this case, Realm needs a different location to store these files.
Add ``fifoFilesFallbackPath: <Your Custom FIFO File Path>`` to your ``Configuration`` object.

This property is ignored if the directory for the realm file allows
FIFO special files.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.fifo-file.dart
   :language: dart

.. _flutter-initial-data-callback:

Add Initial Data to Realm
~~~~~~~~~~~~~~~~~~~~~~~~~

Use :flutter-sdk:`initialDataCallback() <realm/InitialDataCallback.html>` to invoke
a callback function the first time that you open a realm.
The function only executes the first time that the realm on the device.
The realm instance passed to the callback function already has a write transaction open,
so you do not need to wrap write operations in a ``Realm.write()`` transaction block.
``initialDataCallback`` can be useful for adding initial data to your application
the first time that it is opened on a device.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.initial-data-callback.dart
   :language: dart
   :emphasize-lines: 1-3, 6

.. _flutter-close-realm:

Close a Realm
-------------

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      Once you've finished working with a realm, close it to prevent memory leaks.

      .. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.close-realm.dart
         :language: dart

   .. tab:: Dart
      :tabid: dart

      Once you've finished working with a realm, close it to prevent memory leaks.

      .. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.close-realm.dart
         :language: dart

      If you're running a Dart CLI application, to prevent the process from hanging
      call :flutter-sdk:`Realm.shutdown() <realm/Realm/shutdown.html>`.

      .. code-block:: dart

         Realm.shutdown();
