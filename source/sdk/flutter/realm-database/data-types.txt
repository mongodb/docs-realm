.. _flutter-data-types:

========================
Data Types - Flutter SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Flutter SDK currently only supports Dart-language data types.
The Flutter SDK supports Dart-language data types, a limited subset of
`BSON <https://bsonspec.org/>`__ types, and :wikipedia:`UUID <Universally_unique_identifier>`.


.. _flutter-dart-types:

Dart Types
----------

Realm supports the following Dart types:

- ``int``
- ``double``
- ``bool``
- ``String``
- ``DateTime``
- ``List<T>``, where T is any of the supported data types or a
  `RealmModel <https://pub.dev/documentation/realm_common/latest/realm_common/RealmModel-class.html>`__

.. _flutter-reference-realm-object:

Reference Realm Objects
-----------------------

You can also reference one or more Realm objects from another. Learn more in the
:ref:`relationship properties documentation <flutter-client-relationships>`.

.. _flutter-additional-types:

Additional Supported Data Types
-------------------------------

ObjectId
~~~~~~~~

ObjectId is a MongoDB-specific 12-byte unique value which you can use as an
identifier for objects. ObjectId is indexable and can be used as a primary key.

To define a property as an ObjectId, set its type as ``ObjectId`` in
your :ref:`object model <flutter-create-model>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.objectid-model.dart
   :language: dart

Call ``ObjectId()`` to set any unique identifier properties of
your object. Alternatively, pass a string
to ``ObjectId()`` to set the unique identifier property to a specific value.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.objectid-use.dart
   :language: dart

UUID
~~~~

UUID (Universal Unique Identifier) is a 16-byte :wikipedia:`unique value
<Universally_unique_identifier>`. You can use a UUID as an identifier for
objects. UUIDs are indexable and you can use them as primary keys.

.. note:: Using UUID Instead of ObjectId

   In general, you can use a UUID for any fields that function as a unique
   identifier. Using a UUID might be particularly useful if you are migrating
   data not stored in MongoDB since it is likely that your object's unique
   identifiers are already of a UUID type. Alternatively, using ``ObjectId``
   might be useful for a collection of data that already exists in MongoDB.

To define a property as a UUID, set its type as ``Uuid`` in
your :ref:`object model <flutter-create-model>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.uuid-model.dart
   :language: dart

To set any unique identifier properties of
your object to a random value, call one of the ``Uuid`` methods to create a UUID,
such as ``Uuid.v4()``.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.uuid-use.dart
   :language: dart

Example
-------

.. example:: Model with some supported data types

   .. literalinclude:: /examples/generated/flutter/data_types_test.snippet.data-types-example-model.dart
      :language: dart
