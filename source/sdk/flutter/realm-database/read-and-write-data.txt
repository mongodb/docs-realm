.. _flutter-read-write-data:

===============================
Read & Write Data - Flutter SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page explains the Realm SDK methods that you can use to create, read, update,
and delete data in a realm.

.. example:: About the Examples on This Page

   The examples on this page use two Realm object types, ``Person`` and ``Team``.

   .. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.models.dart
      :language: dart

.. _flutter-read-data:
.. _flutter-read-operations:

Read Operations
---------------

.. _flutter-find-object-by-primary-key:

Find Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~

Find an object by its primary key with :flutter-sdk:`Realm.find() <realm/Realm/find.html>`.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.query-object-by-pk.dart
   :language: dart

.. _flutter-query-objects:

Query All Objects
~~~~~~~~~~~~~~~~~

Retrieve a collection of all objects of a data model in the realm with the
:flutter-sdk:`Realm.all() <realm/Realm/all.html>` method.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.query-all-objects.dart
   :language: dart

.. _flutter-query-list-realm-objects:

Query List of RealmObjects
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can query any list of :flutter-sdk:`RealmObjects <realm/RealmObject-mixin.html>`.
For more information on querying, refer to :ref:`Filter Results <flutter-filter-results>`.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.query-realm-list.dart
   :language: dart

.. _flutter-filter-results:

Filter Results
~~~~~~~~~~~~~~

Filter a ``RealmList`` to retrieve a specific segment
of objects with the :flutter-sdk:`Realm.query() <realm/Realm/query.html>` method.
In the ``query()`` method's argument, use Realm Query Language to perform filtering.
Realm Query Language is a string-based query language that you can use to retrieve
objects from a realm.

For more information on constructing queries, refer to the
:ref:`Realm Query Language reference documentation <rql>`.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.filter.dart
   :language: dart

.. _flutter-sort-results:

Sort Results
~~~~~~~~~~~~

Sort query results using the :ref:`Realm Query Language SORT() operator
<rql-sort-distinct-limit>` in the ``query()`` method's argument.

Note that you can't use :ref:`parameterized queries <rql-parameterized-queries>`
in RQL SORT() clauses. Instead, use strings or string interpolation.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.sort.dart
   :language: dart

.. _flutter-limit-results:

Limit Results
~~~~~~~~~~~~~

Limit query results using the :ref:`Realm Query Language LIMIT() operator
<rql-sort-distinct-limit>` in the ``query()`` method's argument.

Note that you can't use :ref:`parameterized queries <rql-parameterized-queries>`
in RQL LIMIT() clauses. Instead, use strings or string interpolation.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.limit.dart
   :language: dart

.. _flutter-write-operations:

Write Operations
----------------

Once you've opened a realm, you can create objects within it using a
:flutter-sdk:`Realm.write() <realm/Realm/write.html>` transaction block.

All operations within a write transaction are :wikipedia:`atomic <Atomicity_(database_systems)>`.
If an operation in the write transaction fails, the whole transaction fails,
Realm throws an error, and no changes from the transaction block are applied to the realm.

.. code-block:: dart

   realm.write((){
     // ...write data to realm
   });

You can also return values from the write transaction callback function.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.return-from-write.dart
   :language: dart

.. warning:: Write RealmObjects to One Realm

   You can only write ``RealmObjects`` to a single realm.
   If you already wrote a ``RealmObject`` to one realm,
   the SDK throws a ``RealmException`` if you try to write it to another realm.

.. _flutter-create-objects:

Create Objects
~~~~~~~~~~~~~~

.. _flutter-create-one-object:

Create One Object
`````````````````

To add an object to a realm, pass an instance of a Realm object class
to the realm in a write transaction block with
:flutter-sdk:`Realm.add() <realm/Realm/add.html>`.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.create-object.dart
   :language: dart

.. _flutter-create-multiple-objects:

Create Multiple Objects
```````````````````````

To add multiple objects to a realm, pass a list of multiple objects
to :flutter-sdk:`Realm.addAll() <realm/Realm/addAll.html>` inside a write transaction block.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.create-multiple-objects.dart
   :language: dart

.. _flutter-update-objects:

Update Objects
~~~~~~~~~~~~~~

.. _flutter-update-object-properties:

Update Object Properties
````````````````````````

To modify an object's properties, update the properties in a write transaction block.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.update-object.dart
   :language: dart

.. _flutter-upsert-objects:

Upsert Objects
``````````````

To upsert an object, call :flutter-sdk:`Realm.add() <realm/Realm/add.html>`
with the optional ``update`` flag set to ``true`` inside a transaction block.
The operation inserts a new object with the given primary key
if an object with that primary key does not exist. If there's already an object
with that primary key, the operation updates the existing object for that primary key.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.upsert.dart
   :language: dart

.. _flutter-delete-objects:

Delete Objects
~~~~~~~~~~~~~~

.. _flutter-delete-single-object:

Delete a Single Object
``````````````````````

Delete an object from a realm by calling :flutter-sdk:`Realm.delete() <realm/Realm/delete.html>`
in a write transaction block.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.delete-one-object.dart
   :language: dart

.. _flutter-delete-multiple-objects:

Delete Multiple Objects
```````````````````````

Delete multiple objects from a realm the :flutter-sdk:`Realm.deleteMany()
<realm/Realm/deleteMany.html>` in a write transaction block.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.delete-multiple-objects.dart
   :language: dart

.. _flutter-delete-all-of-type:

Delete All Objects of a Type
````````````````````````````

Delete all objects of a type in a realm with :flutter-sdk:`Realm.deleteAll() <realm/Realm/deleteAll.html>`
in a write transaction block.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.delete-all-objects-of-type.dart
   :language: dart

.. _flutter-write-async:

Background Writes
-----------------

You can add, modify, or delete objects asynchronously using
:flutter-sdk:`Realm.writeAsync() <realm/Realm/writeAsync.html>`. 

When you use ``Realm.writeAsync()`` to perform write operations, waiting 
to obtain the write lock and committing a transaction occur in the background. 
Only the write itself occurs on the main process. 

This can reduce time spent blocking the execution of the main process. This 
is particularly useful when using Device Sync, where you don't know when and
for how long the Sync client will be writing.

.. literalinclude:: /examples/generated/flutter/read_write_data_test.snippet.write-async.dart
   :language: dart
