.. _flutter-data-types:

========================
Data Types - Flutter SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Flutter SDK supports Dart-language data types, a limited subset of
`BSON <https://bsonspec.org/>`__ types, and :wikipedia:`UUID <Universally_unique_identifier>`.

.. _flutter-dart-types:

Dart Types
----------

Realm supports the following Dart types:

- ``int``
- ``double``
- ``bool``
- ``String``
- ``DateTime``

DateTime
~~~~~~~~

When you use ``DateTime`` with the Realm Flutter SDK, you can declare 
it in the model as you would any other Dart type:

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.datetime-model.dart
   :language: dart

However, it is important to note that Realm stores ``DateTime`` in UTC.
When you use ``DateTime``, you must create it in UTC or convert it 
with ``.toUtc()`` before you store it. If your application requires it, 
you can convert it back to local or the desired time zone when reading 
from Realm.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.datetime-use.dart
   :language: dart

.. _flutter-reference-realm-object:

Reference Realm Objects
-----------------------

You can also reference one or more Realm objects from another. Learn more in the
:ref:`relationship properties documentation <flutter-client-relationships>`.

.. _flutter-collections:

Collections
-----------

A Realm collection contains zero or more instances of a
:ref:`Realm supported data type <flutter-data-types>`.
In a Realm collection, all objects in a collection are of the same type.

You can filter and sort any collection using Realm's
:ref:`query language <flutter-filter-results>`. Collections are
:ref:`live objects <flutter-live-object>`, so they always reflect the
current state of the realm instance. The contents of a collection update
when new elements are added to or deleted from the collection or from its Realm.

You can also listen for changes in the collection by subscribing
to :ref:`change notifications <flutter-react-to-changes>`.

Realm has the following types of collections:

- :ref:`RealmList <flutter-realm-list>`
- :ref:`RealmSet <flutter-realm-set>`
- :ref:`RealmResults <flutter-realm-results>`

.. _flutter-realm-list:

RealmList
~~~~~~~~~

Realm objects can contain lists of any supported data type.
Realm uses the :flutter-sdk:`RealmList <realm/RealmList-class.html>` data type
to store the data.

When you include ``RealmObjects`` as the items in a ``RealmList``,  it represents a :ref:`to-many
relationship <flutter-many-to-one-relationship>`.

Deleting an object from the database will remove it from any RealmLists
where it existed. Therefore, a ``RealmList`` of ``RealmObject`` types will never contain null values.
Also, a ``RealmList`` can contain multiple references to the same ``RealmObject``.

A ``RealmList`` of primitive types can contain null values. If you do not
want to allow null values in a list, then either use non-nullable types in
the list declaration (for example, use ``List<int>`` instead of
``List<int?>``).

A ``RealmList`` is mutable and you can add and remove elements on a ``RealmList``
within a write transaction.

Add a RealmList to a Schema
```````````````````````````

You can add a ``RealmList`` to your Realm Object schema by defining a property as type
``List<T>`` where ``T`` can be any :ref:`supported Realm data type <flutter-data-types>`
(except other collections), in your Realm Object model.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realmlist-model.dart
   :language: dart

Work with a RealmList
`````````````````````

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realmlist-use.dart
   :language: dart

.. _flutter-realm-set:

RealmSet
~~~~~~~~

Realm objects can contain sets of any supported data type except another collection.
Realm uses the :flutter-sdk:`RealmSet <realm/RealmSet-class.html>` data type
to store the data. In a ``RealmSet`` collection, all values are *unique*.
``RealmSet`` extends the native Dart `Set <https://api.dart.dev/stable/dart-core/Set-class.html>`__
data type with additional Realm-specific properties and methods.

When you include ``RealmObjects`` as the items in a ``RealmSet``,  it represents a :ref:`to-many
relationship <flutter-many-to-one-relationship>`.

A ``RealmSet`` is mutable and you can add and remove elements in a ``RealmSet``
within a write transaction.

Add a RealmSet to a Schema
``````````````````````````

You can add a ``RealmSet`` to your Realm Object schema by defining a property as type
``Set<T>`` where ``T`` can be any :ref:`supported Realm data type <flutter-data-types>`
except other collections, in your Realm Object model.

When defining a RealmSet in a schema:

- A set of primitive types can be defined as either nullable or non-nullable.
  For example, both ``Set<int>`` and ``Set<int?>`` are valid in a Realm schema.
- A set of ``RealmObject`` and ``RealmValue`` types can only be non-nullable.
  For example ``Set<RealmValue>`` **is valid** and ``Set<RealmValue?>`` **is not valid**.
- You **cannot** define default values when defining a set in a schema.
  For example, ``Set mySet = {0,1,2}`` **is not valid**.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realm-set-model.dart
   :language: dart

Work with a RealmSet
````````````````````

The following example demonstrates some basic usage of ``RealmSet``.
For more information about all available methods, refer to the
:flutter-sdk:`RealmSet reference documentation on pub.dev <realm/RealmSet-class.html>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realm-set-examples.dart
   :language: dart

.. _flutter-realm-results:

RealmResults
~~~~~~~~~~~~

A :flutter-sdk:`RealmResults <realm/RealmResults-class.html>`
collection represents the lazily-evaluated
results of a query operation. Unlike a ``RealmList``, results are immutable: you
cannot add or remove elements on the results collection.
This is because the contents of a results collection are determined by a
query against the database.

:flutter-sdk:`Realm.all() <realm/Realm/all.html>` and :flutter-sdk:`Realm.query()
<realm/Realm/query.html>` return ``RealmResults``.
For more information on querying Realm, refer to :ref:`Read Operations <flutter-read-data>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realmresults-use.dart
   :language: dart

.. _flutter-lazy-evaluated-results:

Results are Lazily Evaluated
````````````````````````````

Realm only runs a query when you actually request the
results of that query, e.g. by accessing elements of the
results collection. This lazy evaluation enables you to
write elegant, highly performant code for handling large
data sets and complex queries.

.. _flutter-live-collections:

Collections are Live
~~~~~~~~~~~~~~~~~~~~

Like :ref:`live objects <flutter-live-object>`, Realm collections
are *usually* live:

- Live **results collections** always reflect the current results of the associated query.
- Live **lists** of ``RealmObjects`` always reflect the current state of the relationship on the realm instance.

There are two cases, however, when a collection is **not** live:

- The collection is unmanaged: a ``RealmList`` property of a Realm object
  that has not been added to a realm yet or that has been copied from a
  realm.
- The collection is :ref:`frozen <flutter-freeze>`.

Combined with :ref:`listening for changes on a collection <flutter-react-to-changes>`,
live collections enable clean, reactive code.
For example, suppose your view displays the results of a query.
You can keep a reference to the results collection in your view class,
then read the results collection as needed without having to refresh it or
validate that it is up-to-date.

.. important:: Indexes may change

   Since results update themselves automatically, do not
   store the positional index of an object in the collection
   or the count of objects in a collection. The stored index
   or count value could be outdated by the time you use
   it.

.. _flutter-additional-types:

Additional Supported Data Types
-------------------------------

.. _flutter-objectid:

ObjectId
~~~~~~~~

ObjectId is a MongoDB-specific 12-byte unique value which you can use as an
identifier for objects. ObjectId is indexable and can be used as a primary key.

To define a property as an ObjectId, set its type as ``ObjectId`` in
your :ref:`object model <flutter-create-model>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.objectid-model.dart
   :language: dart

Call ``ObjectId()`` to set any unique identifier properties of
your object. Alternatively, pass a string
to ``ObjectId()`` to set the unique identifier property to a specific value.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.objectid-use.dart
   :language: dart

.. _flutter-uuid:

UUID
~~~~

UUID (Universal Unique Identifier) is a 16-byte :wikipedia:`unique value
<Universally_unique_identifier>`. You can use a UUID as an identifier for
objects. UUIDs are indexable and you can use them as primary keys.

.. include:: /includes/note-using-uuid-instead-of-objectid.rst

To define a property as a UUID, set its type as ``Uuid`` in
your :ref:`object model <flutter-create-model>`.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.uuid-model.dart
   :language: dart

To set any unique identifier properties of
your object to a random value, call one of the ``Uuid`` methods to create a UUID,
such as ``Uuid.v4()``.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.uuid-use.dart
   :language: dart

.. _flutter-decimal128:

Decimal128
~~~~~~~~~~

Dart doesn't have a native decimal type. You can use 
`Decimal128 <https://pub.dev/documentation/realm/latest/realm/Decimal128-class.html>`__, 
which is a 128-bit implementation of :wikipedia:`IEEE-754 <IEEE_754>`.
When defining a decimal type, use the ``Decimal128`` BSON type.

When using ``Decimal128``, be aware that the Dart ``compareTo()`` method
implements total ordering that mimics the Dart ``double`` type. This means the
following things are true when using ``compareTo()``:

- All ``NaN`` values are considered equal and greater than any numeric value.
- ``-Decimal128.zero`` is less than ``Decimal128.zero`` (and the integer 0)
  but greater than any non-zero negative value.
- Negative infinity is less than all other values and positive infinity is
  greater than all non-NaN values.
- All other values are compared using their numeric value.

.. _flutter-realm-value:

RealmValue
~~~~~~~~~~

The `RealmValue <https://pub.dev/documentation/realm_common/latest/realm_common/RealmValue-class.html>`__
data type is a mixed data type that can represent any other valid Realm data type except a collection.
You can create collections  of type ``RealmValue``, but a ``RealmValue`` itself
cannot be a collection. ``RealmValue`` is indexable, but cannot be a primary key.

.. note::

   When defining your Realm object schema, you cannot create a nullable ``RealmValue``.
   However, if you want a ``RealmValue`` property to contain a null value,
   you can use the special ``RealmValue.nullValue()`` property.

To define a property as ``RealmValue``, set its type in your Realm object model.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realm-value-model.dart
   :language: dart

To add a ``RealmValue`` to a Realm object, call ``RealmValue.from()`` on the data.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realm-value-from.dart
   :language: dart

Access the type of data with ``RealmValue.type`` and the value with ``RealmValue.value``.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.realm-value-type-value.dart
   :language: dart

.. _flutter-embedded-objects:

Embedded Objects
----------------

Realm treats each embedded object as nested data inside of a parent object.
An embedded object inherits the lifecycle of its parent object.
It cannot exist as an independent Realm object.
Embedded objects have the following properties:

- Embedded objects are deleted when their parent object is deleted
  or their parent no longer references them.
- You cannot reassign an embedded object to a different parent object.
- you cannot link to an embedded object from multiple parent objects.
- You can only query an embedded object by accessing it through its parent object.

Declare an embedded objects by passing `ObjectType.embeddedObject
<https://pub.dev/documentation/realm_common/latest/realm_common/ObjectType.html>`__
to the ``@RealmModel()`` annotation.
Embedded objects must be nullable when defining them in the parent object's
``RealmModel``. You must also include the embedded object's schema in the realm's
:flutter-sdk:`Configuration <realm/Configuration-class.html>`.

The following example shows how to model an embedded object in a Realm schema.
The ``_Address`` model is embedded within the ``_Person`` model.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.embedded-object-model.dart
   :language: dart

You can use the :flutter-sdk:`parent <realm/EmbeddedObjectExtension/parent.html>`
property to access the parent of the embedded object. 

The following example shows the unique considerations when working with embedded objects.
The example uses the ``Address`` embedded object generated from the ``_Address``
``RealmModel`` in the above schema.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.embedded-object-examples.dart
   :language: dart

Example
-------

The following model includes some supported data types.

.. literalinclude:: /examples/generated/flutter/data_types_test.snippet.data-types-example-model.dart
   :language: dart
