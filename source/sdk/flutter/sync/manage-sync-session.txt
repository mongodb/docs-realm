.. _flutter-manage-sync-session:

===================================
Manage a Sync Session - Flutter SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas Device Sync, the Realm Flutter SDK syncs data with Atlas
in the background using a sync session. The sync session starts whenever
you open a synced realm.

The sync session manages the following:

- Uploading and downloading changes to the realm
- Pausing and resuming sync
- Monitoring sync progress
- Monitoring network connectivity

You can access the :flutter-sdk:`Session <realm/Session-class.html>` of any synced
realm through the :flutter-sdk:`Realm.syncSession <realm/Realm/syncSession.html>` property.

Prerequisites
-------------

Before you can manage your sync session state, you must perform the following:

#. :ref:`Configure Flexible Sync on the Atlas App Services backend <enable-flexible-sync>`
#. :ref:`Add Device Sync to your app <flutter-add-sync-to-app>`

.. _flutter-sync-wait-for-changes:

Wait for Changes to Upload and Download
---------------------------------------

To asynchronously wait for all changes to upload to Atlas from your synced realm,
call :flutter-sdk:`Session.waitForUpload()
<realm/Session/waitForUpload.html>`. To asynchronously wait for all changes on Atlas
to download to your synced realm, call :flutter-sdk:`Session.waitForDownload()
<realm/Session/waitForDownload.html>`.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.wait-upload-download.dart
   :language: dart

.. _flutter-pause-resume-sync:

Pause and Resume a Sync Session
-------------------------------

To pause syncing for a session, call :flutter-sdk:`Session.pause() <realm/Session/pause.html>`.
The realm will not sync changes with Atlas while the session is paused.

To resume syncing a changes, call :flutter-sdk:`Session.resume() <realm/Session/resume.html>`.

You must manually call ``Session.pause()`` and ``Session.resume()`` for each
realm whose Sync session you want to pause and restart.
The sync state of one session has no impact on other open sessions.

The following code block demonstrates calling these methods:

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.pause-resume-sync.dart
   :language: dart

When to Pause a Sync Session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/when-to-pause-sync.rst

.. _flutter-monitor-sync-progress:

Monitor Sync Upload Progress
----------------------------

To monitor Sync upload progress progress, call :flutter-sdk:`SyncSession.getProgressStream()
<realm/Session/getProgressStream.html>`. This method returns a Stream of
:flutter-sdk:`SyncProgress <realm/SyncProgress-class.html>` objects.
``SyncProgress`` provides the total number of transferrable bytes and the remaining
bytes to be transferred.

``SyncSession.getProgressStream()`` takes two arguments:

- A :flutter-sdk:`ProgressDirection <realm/ProgressDirection.html>`
  enum that must be set to ``upload``.
  This specifies that the progress stream tracks uploads.

- A :flutter-sdk:`ProgressMode <realm/ProgressMode.html>` enum
  that can be set to ``reportIndefinitely`` or ``forCurrentlyOutstandingWork``.
  ``reportIndefinitely`` sets notifications to continue until the callback is unregistered.
  ``forCurrentlyOutstandingWork`` sets notifications to continue until only
  the currently-transferable bytes are synced.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.monitor-progress.dart
   :language: dart

.. warning:: Do Not Track Downloads

   The ``ProgressDirection`` enum also has a ``download`` option to track down downloads.
   The ``download`` case provides planned future support for download progress notifications. 
   However, these notifications do not currently provide an accurate indicator of download progress.
   Do not rely on ``ProgressDirection.download`` for download progress notifications.

.. _flutter-monitor-network-connection:

Monitor Network Connection
--------------------------

You can get the state of the current network connection with
:flutter-sdk:`Session.connectionState <realm/Session/connectionState.html>`.
This returns a :flutter-sdk:`ConnectionState <realm/ConnectionState.html>` enum
that contains the network connection's state: ``connected``, ``disconnected``, or ``connecting``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.get-network-connection.dart
   :language: dart

Monitor the state of the network connection with
:flutter-sdk:`Session.connectionStateChanges <realm/Session/connectionStateChanges.html>`.
This property returns a Stream of :flutter-sdk:`ConnectionStateChange <realm/ConnectionStateChange-class.html>`
objects that updates when the network connection changes.
You can access the current and previous ``ConnectionState`` from ``ConnectionStateChange``.

.. literalinclude:: /examples/generated/flutter/manage_sync_session_test.snippet.monitor-network-connection.dart
   :language: dart
