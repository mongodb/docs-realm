.. _flutter-manage-sync-session:

===================================
Manage a Sync Session - Flutter SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

.. include:: /includes/note-flexible-sync-prerequisite.rst

.. note:: Realm .NET SDK Version Requirement

   In addition to the requirements above, you must use :github:`Realm .NET version
   10.9.0 <realm/realm-flutter/releases>` or greater in order to use Flexible Sync
   in your .NET client application.

Before You Begin
----------------

To use Flexible Sync in a Flutter application:

- :ref:`Configure Flexible Sync on the backend <enable-flexible-sync>`.
- :ref:`Initialize the app <flutter-connect-to-backend>`
- :ref:`Authenticate a user <flutter-authenticate>` in your client project.
- :ref:`Open the synced Realm <flutter-open-synced-realm>`

.. _flutter-flexible-sync-manage-subscriptions:

Manage Your Subscriptions
-------------------------

When configuring Flexible Sync on the backend, you specify which fields your
client application can query. In the client application, use the
:flutter-sdk:`FLUTTER_subscriptions <>` API to
manage a set of subscriptions to specific queries on queryable fields.

You can:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update a subscription with a new query
- Remove individual subscriptions or all subscriptions of a type

When the data matches the subscription, and the authenticated user has the
appropriate permissions, {+service-short+} syncs the backend data with the client app.

You can specify a string name for your subscription. If you do not give your
subscription a name, the name is set to null.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.

.. _flutter-sync-get-subscription:

Get Subscriptions
~~~~~~~~~~~~~~~~~

When using flexible sync, you can access a
:flutter-sdk:`FLUTTER_SubscriptionSet <>`, a
collection of subscriptions, through the :flutter-sdk:`FLUTTER_Realm.Subscriptions
<>` property.

CODE_BLOCK

You can use this subscriptions set to add queries to this list of subscriptions and
update existing subscriptions, as shown in the examples below.

.. _flutter-sync-add-subscription:

Add a Query to the Set Of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must perform all mutations on the subscriptions set within an update block.
To create an update block, call the :flutter-sdk:`FLUTTER_SubscriptionSet.Update()
<>`.
method.

Within the delegate, call the :flutter-sdk:`FLUTTER_SubscriptionSet.Add()
<>`
method on the ``SubscriptionSet`` to add a query to the subscription.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

The ``FLUTTER_Add()`` method takes two arguments, a ``FLUTTER_query`` and an optional 
:flutter-sdk:`FLUTTER_SubscriptionOptions <>` object.

Create the ``FLUTTER_query`` argument using the :ref:`Realm Query Language query <flutter-query-language>`.

``FLUTTER_SubscriptionOptions`` contains additional configuration for your subscription:

- A ``FLUTTER_Name`` string field 
- A ``FLUTTER_UpdateExisting`` boolean field

If ``FLUTTER_UpdateExisting`` is true, adding a subscription with an
existing name will replace the existing query with the new query. However, if
you set ``FLUTTER_UpdateExisting`` to false, adding a subscription with an existing name
but a different query throws an exception. ``FLUTTER_UpdateExisting`` defaults to true.

.. note:: Duplicate Subscriptions 

   If you add a duplicate **unnamed** subscription with the same query, 
   {+service-short+} automatically removes it; adding an identical 
   **named** subscription is a :wikipedia:`no-op <NOP_(code)>`. Therefore, in 
   both cases, duplicate subscriptions are ignored.

You can add a single query, or batch multiple queries within a ``FLUTTER_SubscriptionSet.Update``
block. Performing query updates is an expensive operation on the server. We
strongly advise designing your application to minimize updates. You can do this
by creating all subscriptions in a single update block the first time the user
launches the app and batching any follow-up changes to the subscription set.

In the example below, we subscribe to three queries.

CODE_BLOCK

.. _flutter-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a named subscription with a new query. To update a subscription's
query, pass the new query and a subscription option with the name of the
subscription that you want to update to the
``SubscriptionSet.Add()`` method. Like adding a new subscription,
you must update a subscription within an update block by calling
``SubscriptionSet.Update()`` method.

.. note::

   Updating an unnamed subscription is not possible. Alternatively, you can :ref:`delete the unnamed subscription <flutter-remove-subscriptions>`, and :ref:`create a new subscription <flutter-sync-add-subscription>` with the desired query.

In the following example, long running tasks are re-defined to be any tasks that
have taken more than 130 minutes. 

CODE_BLOCK

.. note::

   Attempting to update a subscription that has the ``FLUTTER_SubscriptionOptions.UpdateExisting``
   field set to false will throw an exception.

.. _flutter-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove a single subscription with the given subscription 
- Remove all subscriptions of a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

Remove a Subscription by Query
``````````````````````````````

Within an update block, you can remove a specific subscription by query. 
Pass the query to the :flutter-sdk:`FLUTTER_Remove() <>`
method on the ``FLUTTER_SubscriptionSet``.

In the following example, the subscription to tasks with an owner named 'Lisa' is
removed from the subscriptions set.

CODE_BLOCK

Remove a Subscription by Name
`````````````````````````````

Within an update block, you can remove a specific subscription by name. Pass the name to the
:flutter-sdk:`FLUTTER_Remove() <>`
method on the ``FLUTTER_SubscriptionSet``.

CODE_BLOCK

Remove All Subscriptions of a Class Name or Object Type
````````````````````````````````````````````````````````

Within an update block, you can remove remove all unnamed subscriptions of a
class by passing the class name as a string to the
:flutter-sdk:`FLUTTER_RemoveAll("ClassName") <>`
method. The ``FLUTTER_RemoveAll()`` method has an optional second argument that is a
boolean, ``FLUTTER_removedName``, which also removes the named subscriptions if it is
set to ``true``. ``FLUTTER_removedName`` is set to false by default.

Alternatively, you can remove all unnamed subscriptions of an object type
with :flutter-sdk:`FLUTTER_RemoveAll() <>`.
The ``FLUTTER_RemoveAll<Type>()`` method has an optional boolean ``FLUTTER_removedName``
argument which also removes the named subscriptions if it is set to ``true``.
``FLUTTER_removedName`` is set to false by default.

CODE_BLOCK

Remove All Subscriptions
````````````````````````

Within an update block, you can remove all unnamed subscriptions from the
subscriptions set. Call the :flutter-sdk:`FLUTTER_RemoveAll() <>`
method on the ``FLUTTER_SubscriptionSet``. The ``FLUTTER_RemoveAll()`` method has an optional
boolean ``FLUTTER_removedName`` argument which also removes the named subscriptions if
it is set to ``true``. ``FLUTTER_removedName`` is set to false by default.

CODE_BLOCK

Wait for Subscription Changes to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mutating the subscription set within an update block is only one part 
of changing a subscription. After the local subscription change, the realm 
synchronizes with the server to resolve any updates to the data due to 
the subscription change. This could mean adding or removing data from the 
synced realm. 

Use the :flutter-sdk:`FLUTTER_SubscriptionSet.WaitForSynchronizationAsync() <>`
method to wait for the server to acknowledge this set of subscriptions.
If the server rejects the change, the :flutter-sdk:`FLUTTER_SubscriptionSetState <>`
will be an error state, and an exception will be thrown.

An exception may occur if: 

- You subscribe to an unsupported query. Subscribing to an unsupported query will pause synchronization.
  To resume synchronization, :ref:`remove the unsupported query <flutter-remove-subscriptions>`.
- You are performing an invalid action, such as adding an object that does not match a subscription.
  This triggers a :ref:`client reset <client-resets>`: data is erased from the {+realm+},
  and a new copy of the data is created without any subscriptions in the set.

CODE_BLOCK
