.. _flutter-manage-sync-session:

===================================
Manage a Sync Session - Flutter SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas Device Sync, the Realm Flutter SDK syncs data with Atlas
in the background using a sync session. The sync session starts whenever
you open a synced realm.

The sync session manages the following:

- Uploading and downloading changes to the realm
- Pausing and resuming sync
- Monitoring sync progress
- Monitoring network connectivity

You can access the :flutter-sdk:`Session <realm/Session-class.html>` of any synced
realm through the :flutter-sdk:`Realm.syncSession <realm/Realm/syncSession.html>` property.

Prerequisites
-------------

Before you can manage your sync session state, you must perform the following:

#. :ref:`Configure Flexible Sync on the Atlas App Services backend <enable-flexible-sync>`
#. :ref:`Add sync to your app <flutter-add-sync-to-app>`

.. _flutter-sync-wait-for-changes:

Wait for Changes to Upload and Download
---------------------------------------

To asynchronously wait for your local changes to upload to Atlas,
call the :flutter-sdk:`Session.waitForUpload()
<realm/Session/waitForUpload.html>`. To asynchronously wait for all changes on Atlas
to sync to your synced realm, call :flutter-sdk:`Session.waitForDownload()
<realm/Session/waitForDownload.html>`.

TODO: flutterify

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.wait-for-changes-to-download-async-progress-notification.cs
   :language: csharp

.. _flutter-pause-resume-sync:

Pause and Resume a Sync Session
-------------------------------

To pause syncing for a session, call :flutter-sdk:`Session.pause() <realm/Session/pause.html>`.
The realm will not sync changes with Atlas while the session is paused.

To resume syncing a changes, call :flutter-sdk:`Session.resume() <realm/Session/resume.html>`.

You must manually call ``Session.pause()`` and ``Session.resume()`` for each
realm whose Sync session you want to pause and restart.
The sync state of one session has no impact on other open sessions.

The following code block demonstrates calling these methods:

TODO: flutterify

.. literalinclude:: /examples/generated/dotnet/DataSyncExamples.snippet.pause-synced-realm.cs
   :language: csharp

.. _flutter-monitor-sync-progress:

Monitor Sync Progress
---------------------

To monitor Sync progress, call :flutter-sdk:`SyncSession.getProgressStream()
<realm/Session/getProgressStream.html>`. This method returns a Stream of
:flutter-sdk:`SyncProgress <realm/SyncProgress-class.html>` objects.
``SyncProgress`` provides the total number of transferrable bytes and the remaining
bytes to be transferred.

``SyncSession.getProgressStream()`` takes two arguments:

- A :flutter-sdk:`ProgressDirection <realm/ProgressDirection.html>`
  enum that can be set to ``upload`` or ``download``.
  This specifies the transfer direction (upload or download) tracked by the progress stream.

- A :flutter-sdk:`ProgressMode <realm/latest/realm/ProgressMode.html>` enum
  that can be set to ``reportIndefinitely``
  for the notifications to continue until the callback is unregistered, or
  ``forCurrentlyOutstandingWork`` for the notifications to continue until only
  the currently transferable bytes are synced.

TODO: flutterify

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.upload-download-progress-notification.cs
   :language: csharp

Considerations when monitoring sync progress with ``SyncSession.getProgressStream()``:

- The number of transferred and transferable bytes are only estimates.
  The Sync changesets are compressed with
  `gzip <https://www.gnu.org/software/gzip/>`_ before transmitting, so
  the actual size of transmitted bytes will be smaller than the reported number
  of both transferable and transferred bytes.
- Realm optimizes download speeds by combining multiple changesets
  into a single download message, up to 16 MB. Since the progress callback is
  only invoked once before and after a download message is processed, this
  means that you'll likely see ``transferredBytes`` change in increments of roughly
  16 MB rather than continuously as the message is being downloaded.

.. _flutter-monitor-network-connection:

Monitor Network Connection
--------------------------

You can get the state of the current network connection with
:flutter-sdk:`Session.connectionState <realm/Session/connectionState.html>`.
This returns a :flutter-sdk:`ConnectionState <realm/ConnectionState.html>` enum
with whether the network connection is ``connected``, ``disconnected``, ``connecting``.

TODO: add example

You can also monitor the state of the network connection with
:flutter-sdk:`Session.connectionStateChanges <realm/Session/connectionStateChanges.html>`.
This property returns a Stream of :flutter-sdk:`ConnectionStateChange <realm/ConnectionStateChange-class.html>`
objects that updates when the network connection changes.
You can access the current and previous ``ConnectionState`` from ``ConnectionStateChange``.
You can listen to the Stream.

TODO: add example

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.connection-state.cs
   :language: csharp

