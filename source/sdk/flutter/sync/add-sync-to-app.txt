.. _flutter-add-sync-to-app:

=======================================
Add Device Sync to an App - Flutter SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol


.. procedure::

   .. step:: Set up Atlas Device Sync in App Services

      Before you can use Device Sync with the Realm Flutter SDK, you must create
      an Atlas App Services App with Device Sync and authentication enabled.

      To learn how to set up Device Sync in your App, refer to :ref:`TODO:`
      in the App Services documentation.

      To set up authentication, refer to :ref:`TODO:` in the App Services documentation.
   
   .. step:: Connect to the App Services Backend

      Initialize the an :flutter-sdk`App <TODO:>` instance to connect
      to your App Services App.
      Pass the App ID for your App, which you can :ref:`find in the App Services UI
      <find-your-app-id>`.

      .. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.initialize-realm.cs
        :language: csharp

   .. step:: Authenticate a user

      :ref:`Authenticate a user <flutter-authenticate>` in your client project.
      This example uses :ref:`anonymous authentication <flutter-login-anonymous>`.

      .. literalinclude:: /examples/generated/dotnet/AuthenticationExamples.snippet.logon_anon.cs
        :language: csharp

   .. step:: Open a Synced Realm

      To open the realm as a synced realm,
      you can specify whether a synced realm should download data before it opens.
      Here, we use a :ref:`Flexible Sync configuration
      <flutter-flexible-sync-open-realm>` and specify that the SDK
      should always download the most recent updates before opening the realm.
      We also :ref:`bootstrap the realm with an initial subscription
      <flutter-sync-add-subscription>`.

      .. literalinclude:: /examples/generated/dotnet/FlexibleSyncExamples.snippet.bootstrap-a-subscription.cs
        :language: csharp

Use the Realm
-------------

The syntax to :ref:`read <flutter-read-data>`, :ref:`write
<flutter-write-operations>`, and
:ref:`watch for changes <flutter-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms.
While you work with local data, a background thread efficiently integrates,
uploads, and downloads changesets.

The following code creates a new ``Task`` object and writes it to the realm:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.create.cs
   :language: csharp

Further Reading
---------------

TODO: add links to relevant pages
