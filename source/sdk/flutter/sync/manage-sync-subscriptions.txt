
.. _flutter-flexible-sync-manage-subscriptions:

=======================================
Manage Sync Subscriptions - Flutter SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Atlas Device Sync with Flexible Sync uses subscriptions and permissions
to determine which data to sync between Atlas and your app.

You can add, update, and remove query subscriptions to determine which data
syncs to the client device.

.. include:: /includes/note-flexible-sync-prerequisite.rst

Before You Begin
----------------

To use Flexible Sync in a Flutter application:

#. :ref:`Configure Flexible Sync on the Atlas App Services backend <enable-flexible-sync>`
#. :ref:`Initialize the app client <flutter-connect-to-backend>`
#. :ref:`Authenticate a user <flutter-authenticate>` in the client
#. :ref:`Open the synced realm <flutter-open-synced-realm>` in the client

.. _flutter-align-subscription-with-app:

Align Subscriptions with Backend App
------------------------------------

Your client-side subscription queries must align with the Device Sync configuration
in your backend App Services App.

You subscription queries can either:

- **Query all objects of a type.**
  Create the query using :flutter-sdk:`Realm.all() <realm/Realm/all.html>`.
- **Query objects that match backend App's queryable fields.**
  Create the query using :flutter-sdk:`Realm.query() <realm/Realm/query.html>`
  and a Realm Query Language query that includes one or more queryable fields.
  The Realm SDK throws an error if you try to create a subscription using fields
  that are not queryable.

  - To learn more about configuring queryable fields,
    refer to :ref:`Queryable Fields <queryable-fields>` in the App Services documentation.
  - To learn more about the limitations of using Realm Query Language with Flexible Sync,
    refer to the :ref:`Flexible Sync RQL Limitations
    <flutter-flexible-sync-rql-limitations>` section.

Manage Your Subscriptions
-------------------------

When configuring Flexible Sync on the backend, you specify which fields your
client application can query. In the client application, use the
:flutter-sdk:`Realm.subscriptions <realm/Realm/subscriptions.html>` property to
manage a set of subscriptions to specific queries on queryable fields.

You can do the following with your subscriptions:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update a subscription with a new query
- Remove subscriptions

When the data matches the subscription, and the authenticated user has the
appropriate permissions, Device Sync syncs the backend data with the client app.

Subscription sets persist across sessions even if you no longer include
the subscription in your code.
Subscription information is stored in the synced realm's database file.
You must explicitly remove a subscription
for it to stop attempting to sync matching data.

You can specify a string name for your subscription. If you do not give your
subscription a name, the name is set to ``null``.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.

.. _flutter-sync-get-subscription:

Get Subscriptions
~~~~~~~~~~~~~~~~~

When using Flexible Sync, you can access a
:flutter-sdk:`SubscriptionSet <realm/SubscriptionSet-class.html>`, a
collection of subscriptions, through the ``Realm.subscriptions`` property.

You can use this subscriptions set to add queries to this list of subscriptions and
update existing subscriptions, as shown in the examples below.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.get-subscriptions.dart
   :language: dart

.. _flutter-sync-add-subscription:

Add a Query to the Set of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You must perform all mutations on the subscriptions set within an update block.
To create an update block, call :flutter-sdk:`SubscriptionSet.update() <realm/SubscriptionSet/update.html>`.

The update block callback function includes a :flutter-sdk:`MutableSubscriptionSet()
<realm/MutableSubscriptionSet-class.html>` object as an argument.
You can modify your method on the ``SubscriptionSet`` to add a query to the subscription.

.. important::

   Flexible Sync does not support all the operators available in Realm
   Query Language. See :ref:`Flexible Sync RQL Limitations
   <flutter-flexible-sync-rql-limitations>` for details.

The ``MutableSubscriptionSet.add()`` method takes three arguments:

- ``RealmResults query``: Required. A ``RealmResults`` object that you can create using the
  :ref:`Realm Query Language query <rql>`.
- ``String name``: Optional. Name for the subscription that you can refer to.
- ``bool update``:  Optional. When true, adding a subscription with an existing name
  replaces the existing query with the new query. Only use with named subscriptions.

.. note:: Duplicate Subscriptions

   If you add a duplicate **unnamed** subscription with the same query,
   Realm automatically removes it; adding an identical
   **named** subscription is a :wikipedia:`no-op <NOP_(code)>`. Therefore, in
   both cases, duplicate subscriptions are ignored.

You can add a single query, or batch multiple queries within a ``SubscriptionSet.update``
block. Performing query updates is an expensive operation on the server. We
strongly advise designing your application to minimize subscription updates.
You can do this by creating all subscriptions in a single update block
the first time the user launches the app and batching any follow-up changes
to the subscription set.

In the example below, we subscribe to two queries.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.add-subscription.dart
   :language: dart

.. _flutter-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a named subscription with a new query. To update a subscription's
query, open an update block with ``SubscriptionSet.update()``.
In the callback function of the update block, pass the following arguments to ``MutableSubscriptionSet.add()``:

- The new query
- The name of the subscription that you want to update
- ``update: true``

You cannot update an unnamed subscription. Alternatively, you can
:ref:`delete the unnamed subscription <flutter-remove-subscriptions>`, and
:ref:`create a new subscription <flutter-sync-add-subscription>` with the desired query.

In the following example, long trains are re-defined to be any trains that
have more than 10 cars.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.update-subscriptions-new-query.dart
   :language: dart

.. _flutter-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name
- Remove a single subscription with the subscription reference
- Remove all subscriptions for a Realm object type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.

Remove a Subscription by Query
``````````````````````````````

Within an update block, you can remove a specific subscription by query.
Open an update block with ``SubscriptionSet.update()``. Pass the ``Subscription`` to
:flutter-sdk:`MutableSubscriptionSet.removeByQuery() <realm/MutableSubscriptionSet/removeByQuery.html>`.

In the following example, the subscription for all ``Plane`` objects is removed.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.remove-subscriptions-by-query.dart
   :language: dart
   :emphasize-lines: 2

Remove a Subscription by Name
`````````````````````````````

Within an update block, you can remove a specific subscription by name. Pass the name to
:flutter-sdk:`MutableSubscriptionSet.removeByName() <realm/MutableSubscriptionSet/removeByName.html>`

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.remove-subscriptions-by-name.dart
   :language: dart
   :emphasize-lines: 2

Remove a Subscription by Reference
``````````````````````````````````

You can remove a subscription if you have a reference to its :flutter-sdk:`Subscription
<realm/Subscription-class.html>` object.
Within a subscription update block, pass the ``Subscription`` reference to
:flutter-sdk:`MutableSubscriptionSet.remove() <realm/MutableSubscriptionSet/remove.html>`.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.remove-subscriptions-by-reference.dart
   :language: dart
   :emphasize-lines: 1, 3

Remove All Subscriptions for an Object Type
```````````````````````````````````````````

You can remove all subscriptions for a given Realm object type. Within a 
subscription update block, call
:flutter-sdk:`MutableSubscriptionSet.removeByType() <realm/MutableSubscriptionSet/removeByType.html>`.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.remove-subscriptions-by-object-type.dart
   :language: dart
   :emphasize-lines: 2

Remove All Subscriptions
````````````````````````

Within a subscription update block, you can remove all unnamed subscriptions from the
subscriptions set with :flutter-sdk:`MutableSubscriptionSet.clear() <realm/MutableSubscriptionSet/clear.html>`.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.remove-all-subscriptions.dart
   :language: dart
   :emphasize-lines: 2

Wait for Subscription Changes to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Mutating the subscription set within an update block is only one part
of changing a subscription. After the local subscription change, the realm
synchronizes with the server to resolve any updates to the data due to
the subscription change. This includes adding or removing data from the
synced realm.

Use :flutter-sdk:`Realm.subscriptions.waitForSynchronization() <realm/SubscriptionSet/waitForSynchronization.html>`
to wait for the server to acknowledge this set of subscriptions.
If the server rejects the change, and an exception is thrown.

An exception may occur if:

- You subscribe to an unsupported query. Subscribing to an unsupported query will pause synchronization.
  To resume synchronization, :ref:`remove the unsupported query <flutter-remove-subscriptions>`.
- You are performing an invalid action, such as adding an object that does not match a subscription.
  This triggers a :ref:`client reset <client-resets>`: data is erased from the realm,
  and a new copy of the data is created without any subscriptions in the set.

.. literalinclude:: /examples/generated/flutter/manage_sync_subscription_test.snippet.wait-for-subscription-change.dart
   :language: dart

Subscription State
~~~~~~~~~~~~~~~~~~

Use the :flutter-sdk:`Realm.subscriptions.state <realm/SubscriptionSet/state.html>`
property to read the current state of the subscription set.

The ``superseded`` state is a :flutter-sdk:`SubscriptionSetState
<realm/SubscriptionSetState.html>` that can occur when another thread updates a
subscription on a different instance of the subscription set. If the state
becomes ``superseded``, you must obtain a new instance of the subscription set
before you can update it.

.. include:: /includes/note-sync-state-complete.rst

.. _flutter-flexible-sync-rql-limitations:

Flexible Sync RQL Requirements and Limitations
-----------------------------------------------

.. include:: /includes/flex-sync-limitations.rst
