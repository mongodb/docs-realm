.. _flutter-handle-sync-errors:

================================
Handle Sync Errors - Flutter SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Handle Sync Errors
------------------

While developing an application that uses :ref:`Device Sync <sync>`, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls.

Add a :flutter-sdk:`syncErrorHandler <realm/FlexibleSyncConfiguration/syncErrorHandler.html>`
property to the :flutter-sdk:`FlexibleSyncConfiguration <realm/FlexibleSyncConfiguration-class.html>`
when creating a synced realm. ``syncErrorHandler`` is a
:flutter-sdk:`SyncErrorHandler <realm/SyncErrorHandler.html>` callback function.
``SyncErrorHandler`` accepts a :flutter-sdk:`SyncError <realm_common/SyncError-class.html>`
as a parameter. Whenever a ``SyncError`` occurs in the realm,
the callback function is invoked with the ``SyncError`` as its argument.

If you do not specify a ``syncErrorHandler``, the default behavior is to print the
``SyncError`` to the console.

.. literalinclude:: /examples/generated/flutter/open_flexible_sync_realm_test.snippet.sync-error-handler.dart
   :language: dart

.. _flutter-client-reset:

Client Reset
------------

When using Device Sync, a **client reset** is an
error recovery task that your client app must perform when a given
synced realm on the server can no longer sync with the client realm.

Clients in this state may continue to run and save data locally
but cannot send or receive sync changesets until they perform a client reset.
The client must reset its realm to a state that matches the
server in order to restore the ability to sync.
The unsyncable realm on the client may contain data that has not yet synced to the server.

The Realm SDK can attempt to recover or discard that data during the client reset process.
The Realm SDK provides methods to automatically handle client resets in most scenarios.

For more information about what can cause a client reset to occur, go to
:ref:`Client Resets in the App Services documentation <client-resets>`.

.. _flutter-client-reset-strategies:

Client Reset Modes
~~~~~~~~~~~~~~~~~~

TODO(DOCSP-24570): add some more pretext here

In the Flutter SDK, you can specify a client
reset mode in your :flutter-sdk:`FlexibleSyncConfiguration_TODO_FLUTTER <TODO_FLUTTER>`.
The :flutter-sdk:`ClientResetHandler_TODO_FLUTTER <TODO_FLUTTER>`
property can be set to one of the following:

.. list-table::
   :header-rows: 1
   :widths: 30 30 50
   
   * - Mode
     - Handler
     - Notes

   * - Recover or discard unsynced changes (Default)
     - :flutter-sdk:`RecoverOrDiscardUnsyncedChangesHandler_TODO_FLUTTER <TODO_FLUTTER>`
     - If recovery fails, this handler falls back to the ``DiscardUnsyncedChangesHandler_TODO_FLUTTER``,
       which deletes all unsynced local changes. If the ``DiscardUnsyncedChangesHandler_TODO_FLUTTER``
       recovery fails, the handler falls back to a ``ManualRecoveryHandler_TODO_FLUTTER``, which
       requires you to implement a manual recovery strategy.

   * - Recover unsynced changes
     - :flutter-sdk:`RecoverUnsyncedChangesHandler_TODO_FLUTTER <TODO_FLUTTER>`
     - If recovery fails, this handler_TODO_FLUTTER falls back to a ``ManualRecoveryHandler_TODO_FLUTTER``,
       which requires you to implement a manual recovery strategy.

   * - Discard unsynced changes
     - :flutter-sdk:`DiscardUnsyncedChangesHandler_TODO_FLUTTER <TODO_FLUTTER>`
     - This strategy *permanently deletes* all local unsynced changes made since
       the last successful sync.

   * - Manual recovery
     - :flutter-sdk:`ManualRecoveryHandler_TODO_FLUTTER <TODO_FLUTTER>`
     - Provides a way for you to implement your own recovery strategy.

The following sections describe the different strategies for handling a client
reset and how you can use each client reset mode.

.. _flutter-automatic-vs-manual-client-reset:

Automatic vs. Manual Client Reset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Realm SDKs provide client reset modes
that automatically handle most client reset errors.

Automatic client reset modes restore your local realm file to a syncable state without
closing the realm or missing notifications.
The following client reset modes support automatic client resets:

- Recover unsynced changes mode
- Recover or discard unsynced Changes mode
- Discard unsynced changes mode

The differences between these modes are based on how they handle
changes on the device that have not yet synced to the backend.
Only manual recovery mode does not perform an automatic client reset.

Choose recover unsynced changes mode to handle most client reset
scenarios automatically. This attempts to recover unsynced changes when a
client reset occurs.

If your app requires specific client reset logic that can't be handled automatically,
you may want or need to add a :ref:`manual client reset handler <flutter-client-reset-manual-recovery-fallback>`
to the automatic client reset mode.

.. _flutter-client-reset-recovery:

Client Reset with Recovery
~~~~~~~~~~~~~~~~~~~~~~~~~~

Client Recovery is a feature that is enabled by default when you configure Device Sync.
When Client Recovery is enabled, Realm Database automatically manages the
client reset process in most cases. When you make schema changes the client
can recover unsynced changes when there are no schema changes, or non-breaking schema changes.

To use Client Recovery, configure your realm with recover unsynced changes or
recover or discard unsynced changes client reset modes.

.. include:: /includes/client-recovery-rules.rst

For more information about configuring Client Recovery, refer to
:ref:`Client Recovery <enable-or-disable-recovery-mode>` in the App Services documentation.

Client Recovery cannot occur when your app makes breaking schema changes.
A breaking change is a change that you can make in your server-side
schema that requires additional action to handle.
In this scenario, client reset with fall back to a
:ref:`manual error client reset fallback <flutter-client-reset-manual-recovery-fallback>`.

For information on breaking vs. non-breaking schema changes, refer to
:ref:`breaking-change-quick-reference` in the App Services documentation.

.. _flutter-client-reset-recover-or-discard-unsynced-changes:

Recover or Discard Unsynced Changes Mode
````````````````````````````````````````

**Recover or discard unsynced changes** is the default client reset mode.
It provides the most robust recovery process.
If the automatic recovery process fails, it falls back to the ``DiscardLocalReset_TODO_FLUTTER``
mode explained in the :ref:`Discard Unsynced Changes section <flutter-recover-discard-unsynced-changes>`.
If that process fails, it falls back again to a manual reset strategy explained
in the :ref:`Manual Recovery section <flutter-client-reset-manual-recovery>`.

This handler provides the following callback methods:

- :flutter-sdk:`OnBeforeReset_FLUTTER_TODO <flutter-recover-discard-unsynced-changes>`,
  which the SDK invokes prior to the client reset. You can use this callback to notify
  the user before the client reset begins.

- :flutter-sdk:`OnAfterRecovery_FLUTTER_TODO <_FLUTTER_TODO>`,
  which the SDK invokes if *and only if* the automatic reset completes successfully.
  You can use it to notify the user that the client reset is complete.

- :flutter-sdk:`OnAfterDiscard__FLUTTER_TODO <_FLUTTER_TODO>`,
  which the SDK invokes only if the automatic client reset fails *and* the discard
  local strategy succeeds. If the discard strategy fails, this callback is not
  invoked.

- :flutter-sdk:`ManualResetFallback__FLUTTER_TODO
  <_FLUTTER_TODO>`,
  which the SDK invokes only if the automatic
  recovery and the discard strategy have failed. You implement this callback to
  handle the reset failure. Your logic here should
  be similar to that described for a
  :ref:`ManualRecoveryHandler <dotnet-client-reset-manual-recovery>`.

  TODO: refactor to use the Manual Client Reset Fallback

The following example shows using each of these callbacks:

.. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.RecoverOrDiscardUnsyncedChangesHandler.cs
   :language: csharp

.. _flutter-client-reset-recover-unsynced-changes:

Recover Unsynced Changes Mode
`````````````````````````````

TODO: add

.. _flutter-recover-discard-unsynced-changes:

Recover or Discard Unsynced Changes Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO: add section

.. _flutter-client-reset-manual-recovery-fallback:

Manual Client Reset Fallback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO: add section

.. _flutter-client-reset-manual-recovery-mode:

Manual Recovery Mode
~~~~~~~~~~~~~~~~~~~~

TODO: add section
