===================
Users - Flutter SDK
===================

.. toctree::
   :titlesonly:

   Authenticate Users </sdk/flutter/users/authenticate>
   Email/Password Users </sdk/flutter/users/email-password-users>
   Work with Multiple Users </sdk/flutter/users/multiple-users>
   Link User Identities </sdk/flutter/users/link-user-identities>
   Custom User Data </sdk/flutter/users/custom-user-data>
   Delete a User </sdk/flutter/users/delete-user>

To access Atlas App Services and use Atlas Device Sync with the Realm Flutter SDK,
TODO:(DOCSP-26078) - more must user blah blah


.. _flutter-creating-and-deleting-users:

Create and Delete Users
-----------------------

For all authentication providers other than email/password authentication,
App Services automatically :ref:`creates a user <flutter-create-user>`
the first time a user authenticates. If a user authenticates via more than
one method, you can :ref:`link these user identities <flutter-link-user-identities>`
to a single user object.

You can also :ref:`delete users <flutter-delete-user>`. Deleting a user
removes metadata attached to the user from App Services, but does not delete user-entered
data from the backend.

.. include:: /includes/apple-account-deletion-requirements.rst

.. _flutter-access-the-app-client:

Log Users In and Out
--------------------

Use one or more :ref:`authentication providers <auth-providers>` to :ref:`log
users in and out <flutter-authenticate>` of your client app. You can:

- Log users in with an existing social account, such as Apple, Facebook,
  or Google.
- Create new user accounts with App Services email/password management,
  or your own custom function or custom JWT user management.
- Enable anonymous users to let users access your App Services App without persisting
  user data.

When you have a logged-in user, you can:

- :ref:`Open a synced realm <flutter-open-synced-realm>` with the user's
  configuration object
- :ref:`Run a backend function <flutter-call-function>` as the logged-in user
- :ref:`Log the user out <flutter-logout>`
- :ref:`Change the active user <flutter-change-active-user>` in a multi-user
  application
- :ref:`Remove a user <flutter-remove-user>` from the device

On successful login, the Flutter SDK caches credentials on the device. You
can bypass the login flow and access the cached user. Use this to open a
realm or call an Atlas Function upon subsequent app opens.

User Object
~~~~~~~~~~~

TODO:(DOCSP-26078): add brief overview and ...refactor the below content from swift

App Services manages sessions with access tokens and refresh tokens.
Client SDKs supply the logic to manage tokens, and provide them with requests.

Some authentication providers enable developers to access user metadata, such
as full name or email address. When you configure these metadata fields on
the App Services application, you can read this medata from your client app. A
user object has a ``profile`` property that you can use to :ref:`access
user metadata <flutter-read-user-metadata>`.

.. seealso::

   :ref:`<user-sessions>`

.. _flutter-app-work-with-custom-user-data:

Custom User Data
----------------

You can :ref:`associate custom data <custom-user-data>` with a user object,
such as a preferred language or local timezone, and read it from your client
application. A user object has a ``customData`` property that you can use
to :ref:`access custom user data <flutter-read-custom-user-data>`.

TODO(DOCSP-26078): add brief section to custom user data page abt create/update custom user data

To :ref:`create <flutter-create-a-users-custom-data-document>` and :ref:`update
<flutter-update-a-users-custom-data>` custom user data, you must access
your MongoDB data source directly. App Services does not offer a SDK
method to create or update this custom user data; it's a read-only property.
