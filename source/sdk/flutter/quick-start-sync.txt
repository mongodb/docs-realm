.. _flutter-quick-start-sync:

===================================
Quick Start with Sync - Flutter SDK
===================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly integrate Realm Database and
:ref:`Atlas Device Sync <sync>` into your Flutter app.
Atlas Device Sync is an MongoDB Atlas App Service that synchronizes data between
a client application and a MongoDB database cluster on Atlas.

To synchronize data with Atlas using Device Sync, the Flutter SDK uses
:ref:`Flexible Sync <flexible-sync>`. Flexible Sync lets you define a query for
the data that you synchronize from the client app.

.. note::

   The Flutter SDK does not support :ref:`Partition-Based Sync <partition-based-sync>`.

.. _flutter-template-app:

Flutter Template App
--------------------

The easiest way to get started with the Realm Flutter SDK is to use the
Realm Flutter template app. The template app comes with a Flutter client and
Atlas App Services backend configured to use Device Sync with the Flutter client.

The Realm Flutter template app is a todo tracker. Using Device Sync, the application
updates data with the server and other clients logged into the same account.

To use the Realm Flutter template app:

#. Follow the instruction to :ref:`create a new template app <create-template-app>`.
#. Create the Flutter template app by selecting: ``flutter.todo.flex``

The examples on this page are loosely based on the Flutter template app.

Add Realm to Project
--------------------

Add the Realm package to your project.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block:: sh

        flutter pub add realm

   .. tab:: Dart
      :tabid: dart

      .. code-block:: sh

        dart pub add realm_dart \
        && dart run realm_dart install


Near the top of any file that uses Realm, add the following import
statement.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block:: dart

        import 'package:realm/realm.dart';

   .. tab:: Dart
      :tabid: dart

      .. code-block:: dart

        import 'package:realm_dart/realm.dart';

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within Realm Database.
You can define your application's data model via Dart
classes in your application code with
a Realm object schema.
You then have to generate the :flutter-sdk:`RealmObject <realm/RealmObject-mixin.html>`
class that's used within your application.

Create Data Model
~~~~~~~~~~~~~~~~~

To define your application's data model, add a Realm model class
definition to your application code.

Some considerations when defining your Realm model class:

- Import package at the top of your class definition file.

- In your file, give your class a private name (starting with ``_``),
  such as a file ``schemas.dart`` with a class ``_Todo``.
  You generate the public RealmObject class using the command in the following
  Generate RealmObject Class section. This command
  outputs a public class, such as ``Todo``.

- Make sure to include the generated file name, such as ``part schemas.g.dart``,
  before the code defining your model.
  This is required to generate the RealmObject class.

TODO: literalinclude

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block:: dart
        :caption: schemas.dart

          import 'package:realm/realm.dart';

          part 'sch emas.g.dart';

          @RealmModel()
          class _Todo {
            // When modeling data for a Realm with Device Sync, you must map
            // your primary key to `_id` with the decorator @MapTo('id').
            @MapTo('_id')
            @PrimaryKey()
            late ObjectId id;
            bool isComplete = false;
            late String summary;
            @MapTo('owner_id')
            late String ownerId;
          }

   .. tab:: Dart
      :tabid: dart

      .. code-block:: dart
        :caption: schemas.dart

          import 'package:real_dart/realm.dart';

          part 'schemas.g.dart';

          @RealmModel()
          class _Todo {
            // When modeling data for a Realm with Device Sync, you must map
            // your primary key to `_id` with the decorator @MapTo('id').
            @MapTo('_id')
            @PrimaryKey()
            late ObjectId id;
            bool isComplete = false;
            late String summary;
            @MapTo('owner_id')
            late String ownerId;
          }

.. seealso:: Further Reading

   :ref:`Define a Realm Object Schema - Flutter SDK <flutter-define-realm-object-schema>`

.. _flutter-generate-realmobject-class:

Generate RealmObject Class
~~~~~~~~~~~~~~~~~~~~~~~~~~

Now generate a RealmObject class ``Todo`` from the data model class ``_Todo``:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      .. code-block::

         flutter pub run realm generate

   .. tab:: Dart
      :tabid: dart

      .. code-block::

         dart run realm_dart generate

Running this creates a ``Todo`` class in a ``schemas.g.dart`` file located in the directory
where you defined the model class per the preceding Create Data Model section.
This ``Todo`` class is public and part of the same library
as the ``_Todo`` data model class.
The generated ``Todo`` class is what's used throughout your application.

Set Up Atlas Device Sync
------------------------

Before you can use Atlas Device Sync with Realm in your Flutter app, you must:

#. :ref:`Create an App Services App <create-a-realm-app>`
#. :ref:`Enable Anonymous Authentication <anonymous-authentication>`
#. :ref:`Enable Flexible Sync <enable-flexible-sync>`

On a high level, to add Device Sync to your Flutter app, you perform the following:

#. Create an Atlas App Services ``App`` instance. Realm uses the ``App``
   to help manage the Device Sync session.
#. Log a user into the ``App``.
#. Open a Realm Database instance with a Device Sync subscription to synchronize
   data between the client app and MongoDB Atlas.

.. tip:: Use Realm Flutter Template App

   If you want a working Flutter app with Device Sync already set up in the client
   and on that App Service backend, use the :ref:`Flutter Template App <flutter-template-app>`.

Initialize the App
~~~~~~~~~~~~~~~~~~

To use App Services features such as authentication and sync, you must
access your App Services App using your App ID. You can find your
App ID in the App Services UI.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.init-app.dart
   :language: dart

Authenticate a User
~~~~~~~~~~~~~~~~~~~

After you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
App Services UI, users can immediately log into your app without providing any identifying
information:

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.log-in.dart
   :language: dart

.. seealso::

   :ref:`Authenticate a User <flutter-authenticate>`

Open a Synced Realm
-------------------

Once you have enabled Device Sync and authenticated a user,
open a synced realm with :flutter-sdk:`Configuration.flexibleSync() <realm/Configuration/flexibleSync.html>`.
Then, pass the configuration to :flutter-sdk:`Realm() <realm/Realm-class.html>`
to open an instance of the realm.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.open-sync-realm.dart
   :language: dart

.. seealso::

   :ref:`Open a Synced Realm <flutter-open-synced-realm>`

Add a Sync Subscription
-----------------------

Now create a subscription to synchronize data with Atlas using Device Sync.
Add the subscription within the :flutter-sdk:`SubscriptionSet.update() <realm/SubscriptionSet/update.html>`
callback function.

The update block callback function, includes a :flutter-sdk:`MutableSubscriptionSet()
<realm/MutableSubscriptionSet-class.html>` object as an argument.
Use ``MutableSubscriptionSet.add()`` to add a new subscription.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.add-sync-subscription.dart
   :language: dart

.. seealso::

   :ref:`Manage Sync Session <flutter-manage-sync-session>`


Work with Realm Objects
-----------------------

Once you've opened a realm, you can create, update, and delete objects
within it using a :flutter-sdk:`write transaction block <realm/Realm/write.html>`.
All creation, update, and deletion operations on objects matching
a sync subscription query synchronize with Atlas in a background thread.

.. seealso:: Further Reading

   :ref:`Read and Write Data - Flutter SDK <flutter-read-write-data>`

Create Objects
~~~~~~~~~~~~~~

To create a new ``Todo``, instantiate an instance of the
``Todo`` class and add it to the realm in a write transaction block.

TODO: literalinclude

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.create-object.dart
   :language: dart

Query for Objects
~~~~~~~~~~~~~~~~~

Retrieve a collection of all objects of a data model in the realm with
:flutter-sdk:`Realm.all() <realm/Realm/all.html>`.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.get-all-objects.dart
   :language: dart

Filter a collection to retrieve a specific segment
of objects with :flutter-sdk:`Realm.query() <realm/Realm/query.html>`.
In the ``query()`` method's argument,
use :ref:`Realm Query Language operators<rql-operators>` to perform filtering.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.filter-results.dart
   :language: dart

Update Objects
~~~~~~~~~~~~~~

To modify a Todo, update its properties in a write transaction block.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.update-object.dart
   :language: dart

Delete Objects
~~~~~~~~~~~~~~

Delete a Todo by calling :flutter-sdk:`Realm.delete() <realm/Realm/delete.html>`
in a write transaction block.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.delete-one.dart
   :language: dart

Delete multiple Todos with :flutter-sdk:`Realm.deleteMany()
<realm/Realm/deleteMany.html>` in a write transaction block.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.delete-many.dart
   :language: dart

React to Changes
~~~~~~~~~~~~~~~~

Listen and respond to changes to a query, a single object, or a list within an object.
The change listener is a Stream that invokes a callback function with an containing
changes since last invocation as its argument. You receive notifications when changes occur
locally and also when synchronized objects on Atlas are updated.

To listen to a query, use  :flutter-sdk:`RealmResults.changes.listen()
<realm/RealmResultsChanges-class.html>`.

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.watch-changes-collection.dart
   :language: dart

To listen to a single Realm object, use :flutter-sdk:`RealmObject.changes.listen()
<realm/RealmObjectChanges-class.html>`.

TODO: literalinclude

.. literalinclude:: /examples/generated/flutter/quick_start_sync_test.snippet.watch-changes-object.dart
   :language: dart

You can pause and resume subscriptions as well.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.pause-resume-subscription.dart
   :language: dart

Once you've finished listening to changes, close the change listener to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/react_to_changes_test.snippet.cancel-subscription.dart
   :language: dart

.. seealso:: Further Reading

   :ref:`React to Changes - Flutter SDK <flutter-react-to-changes>`

Close a Realm
-------------

Once you've finished working with a realm, close it to prevent memory leaks.

.. literalinclude:: /examples/generated/flutter/open_realm_test.snippet.close-realm.dart
   :language: dart

Log Out
-------

Once logged in, you can log out:

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.log-out.dart
   :language: dart

Complete Example
----------------

TODO: this will be a little more involved w Flutter than the other SDKs
b.c you need to generate. also prob easiest to do plain old dart, not flutter version
of SDK. figure out how to elegantly convey.

To see a complete example of  the complete example by replacing the ``TODO_APP_ID_VARIABLE_NAME``
with your App ID and then ...TODO....

TODO_CODE_EXAMPLE

Output
~~~~~~

Running the above code creates an output resembling the following:

TODO_CODE_EXAMPLE
