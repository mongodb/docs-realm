.. _flutter-realm-database:
.. _flutter-realm-database-overview:

=====================================
Realm Database Overview - Flutter SDK
=====================================

.. toctree::
   :titlesonly:

   Overview </sdk/flutter/realm-database>
   Define a Realm Object Schema </sdk/flutter/realm-database/define-realm-object-schema>
   Open & Close a Realm </sdk/flutter/realm-database/open-and-close-a-realm>
   Read & Write Data </sdk/flutter/realm-database/read-and-write-data>
   React to Changes </sdk/flutter/realm-database/react-to-changes>
   Query Language </sdk/flutter/realm-database/query-language>
   Data Types </sdk/flutter/realm-database/data-types>
   Database Internals </sdk/flutter/database-internals>

{+client-database+} is a reactive, object-oriented, cross-platform,
mobile database:

- **Reactive**: query the current state of data
  and subscribe to state changes like the result of a query, or even
  changes to a single object.

- **Object-oriented**: organizes data as objects, rather than rows,
  documents, or columns.

- **Cross-platform**: use the same database on iOS, Android,
  Linux, macOS, or Windows. Just define a schema for each SDK you use.

- **Mobile**: designed for the low-power, battery-sensitive, real-time
  environment of a mobile device.

{+client-database+} is an alternative to `SQLite <https://www.sqlite.org/index.html>`__
and :apple:`Core Data <documentation/coredata>`.


Features
--------

{+client-database+} supports many popular database features.

Queries
~~~~~~~

You can query {+client-database+} using platform-native queries or a
raw query language that works across platforms.


Indexes
~~~~~~~

Indexes are implemented as trees containing values of a given property
instead of a unique internal object key. This means that indexes only
support one column, and thus only one property, at a time.

Schemas
~~~~~~~

Every {+realm+} object has a schema. That schema is defined via a native
object in your SDK's language. Object schemas can include embedded lists
and relations between object instances.

Each {+realm+} uses a versioned schema. When that schema changes, you
must define a migration to move object data between schema versions.
Non-breaking schema changes, also referred to as additive schema changes, 
happen automatically. However, your SDK may require you to increase the 
local schema version to begin using the updated schema in your app. 
Breaking schema changes, also called destructive schema changes, require 
a migration function.
