.. _flutter-install:

=======================
Install the Flutter SDK
=======================

.. meta:: 
   :description: Install the Atlas Device SDK with Flutter for Flutter or Dart applications. 
   :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------

- `Install Flutter in your development environment <https://docs.flutter.dev/get-started/install>`__.
  
  To use the latest version of the Atlas Device SDK for Flutter, you must use:  
  
  - Flutter version 3.10.0 or later.
  - Dart version 3.0.0 or later.

Supported Platforms
~~~~~~~~~~~~~~~~~~~

The Flutter SDK supports the following platforms:

- iOS
- Android
- macOS
- Windows running on 64-bit architecture 
- Linux running on 64-bit architecture

.. important:: Unsupported Platforms

   The Flutter SDK does *not* support the following platforms:

   - Web
   - Windows running on ARM64 or 32-bit architectures
   - Linux running on ARM64 or 32-bit architectures


.. _flutter-install-steps:

Installation
------------

You can use the SDK in a Flutter project, or in a standalone Dart project.

.. tip:: Atlas Device SDK and Realm

   The SDK uses Realm Core database for device data persistence. When you
   install the Flutter or Dart standalone SDK, the package names reflect 
   Realm naming.

Install the SDK in a Flutter Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. procedure::

   .. step:: Create a Flutter Project

      Create a Flutter project. Follow the instructions in the `Flutter documentation
      <https://docs.flutter.dev/get-started/test-drive?tab=terminal>`__.

      .. code-block::

        flutter create <app_name>
        cd <app_name>

   .. step:: Add the SDK to the Project

      To add the `Flutter SDK <https://pub.dev/packages/realm>`__ to your project, run the command:

      .. code-block::

        flutter pub add realm

      This downloads the ``realm`` package and adds it to your project.
      In your ``pubspec.yaml`` file, you should see:

      .. code-block:: yaml
        :caption: pubspec.yaml

        dependencies:
          realm: <latest_version>

   .. step:: Import the Package

      To use the Flutter SDK within your app, import the package
      into files where you will use it:

      .. code-block:: dart

        import 'package:realm/realm.dart';

.. note:: Using Networking in your macOS App

   If you are developing with the Flutter SDK in the macOS App Sandbox,
   network requests do not work by default due to built-in macOS security settings.
   To fix this, you must change the Flutter app's macOS network entitlements.

   To learn how to do this, refer to :ref:`Use the SDK with the macOS App Sandbox
   <flutter-macos-development>`.

.. _dart-install-steps:

Dart Standalone Installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use the SDK with Dart but not Flutter, there is a separate
Dart SDK package with its own installation process.
The Dart SDK can be used for CLI applications or when running Dart in a server environment.
The Dart standalone package ``realm_dart`` has the same usage as the Flutter package
except where otherwise noted.

.. procedure::

   .. step:: Create a Dart Project

      Create a Dart project.

      .. note:: Using Dart without Flutter

        The official Dart docs have helpful getting started material
        for using Dart without Flutter for CLI and server use cases.

        `See the official documentation. <https://dart.dev/server>`__

   .. step:: Add the SDK to the Project


      To add the `Dart SDK <https://pub.dev/packages/realm_dart>`__ to your project, run the command:

      .. code-block::

        dart pub add realm_dart

      This downloads the ``realm_dart`` package and adds it to your project.
      In your ``pubspec.yaml`` file, you should see:

      .. code-block:: yaml
        :caption: pubspec.yaml

        dependencies:
          realm_dart: <latest_version>

   .. step:: Install the SDK into the Application

      Install the ``realm_dart`` package into the application.
      This downloads and copies the required native binaries to the app directory.

      .. code-block::

        dart run realm_dart install

   .. step:: Import the Package

      To use the SDK within your Dart app, import the package
      into files where you will use it:

      .. code-block:: dart

        import 'package:realm_dart/realm.dart';

.. _flutter-update-package:

Update Package Version
----------------------

.. include:: /includes/flutter-v2-breaking-change.rst

To change the version of the Flutter SDK or Dart Standalone SDK in your project, 
follow these steps.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm: <updated_version>

      #. Install the updated version.

         .. code-block::

            flutter pub upgrade realm

      #. Regenerate your object models.

         .. code-block::

            dart run realm generate

      These steps should make the updated SDK version work in your application.
      If issues persist, you can delete the application from your linked client and
      restart it. Note that this will also delete all data stored in the database
      on that client.

   .. tab:: Dart Standalone
      :tabid: dart

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm_dart: <updated_version>

      #. Install the updated version.

         .. code-block::

            dart pub upgrade realm_dart

      #. Install the updated SDK's native binaries.

         .. code-block::

            dart run realm_dart install

      #. Regenerate your object models.

         .. code-block::

            dart run realm_dart generate

      These steps should make the updated SDK version work in your application.
      If issues persist, delete the ``.realm`` database file created by the SDK,
      and restart the application.
      Note that deleting the ``.realm`` file also deletes all data stored in 
      the database on that client.
