.. _flutter-install:

===========================
Install Realm - Flutter SDK
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Prerequisites
-------------

- `Install Flutter in your development environment <https://docs.flutter.dev/get-started/install>`__.
  To use the latest version of the Realm SDK, you must use Flutter version 3.0.3 or later and Dart version 2.17.5 or later.

.. warning:: Incompatible with Dart 2.17.3

   The Realm Flutter SDK and Realm Dart Standalone SDK are not compatible with
   Dart 2.17.3 due to an issue with the Dart virtual machine in this version.
   You may use Dart 2.17.5 version or later with Realm.

Supported Platforms
~~~~~~~~~~~~~~~~~~~

You can use the Realm Flutter SDK on the following platforms:

- iOS
- Android
- macOS
- Windows
- Linux running on 64-bit architecture

You **cannot** use the Realm Flutter SDK on the following platforms:

- Web
- Linux running on ARM64 or 32-bit architectures

.. _flutter-install-steps:

Installation
------------

Follow these steps to add the Realm Flutter SDK to
your Flutter project.

.. include:: /includes/note-use-realm-with-only-dart.rst

.. procedure::

   .. step:: Create a Flutter Project

      Create a Flutter project. Follow the instructions in the `Flutter documentation
      <https://docs.flutter.dev/get-started/test-drive?tab=terminal>`__.

      .. code-block::

        flutter create <app_name>
        cd <app_name>

   .. step:: Add Realm to the Project

      To add the `Realm Flutter SDK <https://pub.dev/packages/realm>`__ to your project, run the command:

      .. code-block::

        flutter pub add realm

      This downloads the ``realm`` package and adds it to your project.
      In your ``pubspec.yaml`` file, you should see:

      .. code-block:: yaml
        :caption: pubspec.yaml

        dependencies:
          realm: <latest_version>


   .. step:: Import Realm Package

      To use the Realm Flutter SDK within your app, import the package
      into files where you will use it:

      .. code-block:: dart

        import 'package:realm/realm.dart';

.. note:: Using Networking in your macOS App

   If you are developing with the Realm Flutter SDK in the macOS App Sandbox,
   network requests do not work by default due to built-in macOS security settings.
   To fix this, you must change the Flutter app's macOS network entitlements.

   To learn how to do this, refer to :ref:`Use Realm with the macOS App Sandbox
   <flutter-macos-development>`.


.. _dart-install-steps:

Dart Standalone Installation
----------------------------

To use Realm with Dart but not Flutter, there is a separate
Dart SDK package with its own installation process.
The Dart SDK can be used for CLI applications or when running Dart in a server environment.
The Dart standalone package ``realm_dart`` has the same usage as the Flutter package
except where otherwise noted.

.. procedure::

   .. step:: Create a Dart Project

      Create a Dart project.

      .. note:: Using Dart without Flutter

        The official Dart docs have helpful getting started material
        for using Dart without Flutter for CLI and server use cases.

        `See the official documentation. <https://dart.dev/server>`_

   .. step:: Add Realm to the Project


      To add the `Realm Dart SDK <https://pub.dev/packages/realm_dart>`__ to your project, run the command:

      .. code-block::

        dart pub add realm_dart

      This downloads the ``realm_dart`` package and adds it to your project.
      In your ``pubspec.yaml`` file, you should see:

      .. code-block:: yaml
        :caption: pubspec.yaml

        dependencies:
          realm_dart: <latest_version>

   .. step:: Install Realm into Application

      Install the ``realm_dart`` package into the application.
      This downloads and copies the required native binaries to the app directory.

      .. code-block::

        dart run realm_dart install

   .. step:: Import Realm Package

      To use the Realm Dart SDK within your app, import the package
      into files where you will use it:

      .. code-block:: dart

        import 'package:realm_dart/realm.dart';

.. _flutter-update-package:

Update Package Version
----------------------

To change the version of the Flutter SDK or Dart Standalone SDK in your project, 
follow these steps.

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm: <updated_version>

      #. Install the updated version.

         .. code-block::

            flutter pub upgrade realm

      #. Regenerate your Realm Object models.

         .. code-block::

            dart run realm generate

      These steps should make the updated SDK version work in your application.
      If issues persist, you can delete the application from your linked client and
      restart it. Note that this will also delete all data stored in the realm
      on that client.

   .. tab:: Dart Standalone
      :tabid: dart

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm_dart: <updated_version>

      #. Install the updated version.

         .. code-block::

            dart pub upgrade realm_dart

      #. Install the updated SDK's native binaries.

         .. code-block::

            dart run realm_dart install

      #. Regenerate your Realm Object models.

         .. code-block::

            dart run realm_dart generate

      These steps should make the updated SDK version work in your application.
      If issues persist, delete the ``.realm`` database file created by the SDK,
      and restart the application.
      Note that deleting the ``.realm`` file also deletes all data stored in the realm
      on that client.
