.. _flutter-install:

=======================
Install the Flutter SDK
=======================

.. meta::
   :description: Install the Atlas Device SDK with Flutter for Flutter or Dart applications.
   :keywords: code example

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can use the Atlas Device SDK for Flutter in a Flutter project or in a
standalone Dart project. This guide provides instructions for installing the
SDK in both types of projects.

Prerequisites
-------------

To get started with the Atlas Device SDK for Flutter, you need to install
Flutter or Dart:

- For Flutter or Dart apps, install Flutter in your development environment.
  Note that the Flutter installation includes the full Dart SDK. To learn
  how, refer to the official `Flutter Installation Guide
  <https://docs.flutter.dev/get-started/install>`__.

- For standalone Dart apps, you can choose install Dart in your development
  environment without Flutter. To learn how, refer to the official `Dart
  Installation Guide <https://dart.dev/get-dart>`__.

The latest version of the Device SDK for Flutter requires the following:

- Flutter version 3.19.0 or later.
- Dart version 3.3.0 or later.

Supported Platforms
~~~~~~~~~~~~~~~~~~~

The Flutter SDK supports the following platforms:

- iOS
- Android
- macOS
- Windows running on 64-bit architecture
- Linux running on 64-bit architecture

.. important:: Unsupported Platforms

   The Flutter SDK does *not* support the following platforms:

   - Web
   - Windows running on ARM64 or 32-bit architectures
   - Linux running on ARM64 or 32-bit architectures

.. _flutter-install-steps:
.. _dart-install-steps:

Installation
------------

The Atlas Device SDK for Flutter has two packages available to install,
depending on whether you are developing a Flutter or Dart standalone app:

- ``realm``: The Flutter SDK package for use in Flutter applications.
- ``realm_dart``: The standalone Dart SDK package for use in Dart applications,
  such as CLI apps or running Dart in a server environment.

The standalone Dart package has the same usage as the Flutter package except
where otherwise noted.

.. tip:: Atlas Device SDK and Realm

   The SDK uses Realm Core database for device data persistence. When you
   install the Kotlin SDK, the package names reflect Realm naming.

.. procedure::

   .. step:: Create a Project

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            To create a Flutter project, run the following commands:

            .. code-block::

               flutter create <app_name>
               cd <app_name>

            For more information, refer to Flutter's `Get Started Guide
            <https://docs.flutter.dev/get-started/test-drive?tab=terminal>`__.

         .. tab:: Standalone Dart
            :tabid: dart

            To create a Dart project, run the following commands:

            .. code-block::

               dart create <app_name>
               cd <app_name>

            For more information, refer to Dart's `Get Started Guide
            <https://dart.dev/tutorials/server/get-started>`__ for standalone
            Dart command-line and server applications.

   .. step:: Add the SDK to the Project

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            To add the SDK to your project, run the following command:

            .. code-block::

               flutter pub add realm

            This downloads the `realm <https://pub.dev/packages/realm>`__
            package, and adds it to your project.

            In your ``pubspec.yaml`` file, you should see:

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm: <latest_version>

            .. tab:: Standalone Dart
               :tabid: dart

            To add the SDK to your project, run the  following command:

            .. code-block::

               dart pub add realm_dart

            This downloads the `realm_dart
            <https://pub.dev/packages/realm_dart>`__ package, and adds it to
            your project.

            In your ``pubspec.yaml`` file, you should see:

            .. code-block:: yaml
               :caption: pubspec.yaml

               dependencies:
                  realm_dart: <latest_version>

            After the package is added, run the following command to install it:

            .. code-block::

               dart run realm_dart install

            This downloads and copies the required native binaries to the app
            directory.

   .. step:: Import the Package into Files

      .. tabs::

         .. tab:: Flutter
            :tabid: flutter

            To use the Flutter SDK within your app, import the package into files where you will use it:

            .. code-block:: dart
               :caption: ExampleFile.dart

               import 'package:realm/realm.dart';

         .. tab:: Standalone Dart
            :tabid: dart

            To use the SDK within your Dart app, import the package into files where you will use it:

            .. code-block:: dart
               :caption: ExampleFile.dart

               import 'package:realm_dart/realm.dart';

.. note:: Using Networking in your macOS App

   If you are developing with the Flutter SDK in the macOS App Sandbox,
   network requests do *not* work by default. This is due to the built-in macOS
   security settings.

   To use networking in your macOS app, you must change your app's macOS network
   entitlements. To learn how, refer to :ref:`flutter-macos-development`.

.. _flutter-update-package:

Update Package Version
----------------------

.. include:: /includes/flutter-v2-breaking-change.rst

To change the version of the SDK in your project, perform the following steps,
depending on whether you have a Flutter or Dart standalone app:

.. tabs::

   .. tab:: Flutter
      :tabid: flutter

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm: <updated_version>

      #. Install the updated version.

         .. code-block::

            flutter pub upgrade realm

      #. Regenerate your object models.

         .. code-block::

            dart run realm generate

      These steps should make the updated SDK version work in your application.
      If issues persist, you can delete the application from your linked client and
      restart it. Note that this will also delete all data stored in the database
      on that client.

   .. tab:: Dart Standalone
      :tabid: dart

      #. Add the new SDK version to your :file:`pubspec.yaml` file.

         .. code-block:: yaml
           :caption: pubspec.yaml

           dependencies:
             realm_dart: <updated_version>

      #. Install the updated version.

         .. code-block::

            dart pub upgrade realm_dart

      #. Install the updated SDK's native binaries.

         .. code-block::

            dart run realm_dart install

      #. Regenerate your object models.

         .. code-block::

            dart run realm_dart generate

      These steps should make the updated SDK version work in your application.
      If issues persist, delete the ``.realm`` database file created by the SDK,
      and restart the application.
      Note that deleting the ``.realm`` file also deletes all data stored in
      the database on that client.

.. _flutter-apple-privacy-manifest:

Apple Privacy Manifest
----------------------

.. versionadded:: 2.2.0

Apple requires apps that use required reason APIs to provide details about the
SDK's data collection and use practices when submitting new apps or app updates
to the App Store. For more details about Apple's requirements, refer to
:apple:`support/third-party-SDK-requirements/` on the Apple Developer website.

Starting in Flutter SDK version 2.2.0, the SDK ships with a privacy manifest for
``iOS`` and ``macOS`` environments, contained in the ``realm`` package. Both
privacy manifests contain Apple's required API disclosures and the reasons for
using those APIs.

You can view the privacy manifests in the package or the ``realm-dart``
GitHub repository:

- ``iOS``:
  `https://github.com/realm/realm-dart/blob/main/packages/realm/ios/Resources/PrivacyInfo.xcprivacy
  <https://github.com/realm/realm-dart/blob/main/packages/realm/ios/Resources/PrivacyInfo.xcprivacy>`__
- ``macOS``:
  `https://github.com/realm/realm-dart/blob/main/packages/realm/macos/Resources/PrivacyInfo.xcprivacy
  <https://github.com/realm/realm-dart/blob/main/packages/realm/macos/Resources/PrivacyInfo.xcprivacy>`__

The Flutter SDK does *not*:

- Include analytics code in builds for the App Store.
- Log into Atlas on its own behalf.

If you write an app that uses any App Services functionality, you may need to
add additional disclosures to your app's privacy manifest detailing your data
collection and use practices when using these APIs.
For example, if your app :ref:`initializes an App client
<flutter-access-the-app-client>` to:

- :ref:`Call an Atlas Function <flutter-call-function>`
- :ref:`Authenticate and manage users <flutter-work-with-users>`
- :ref:`Open a synced database <flutter-open-synced-realm>`

For more information, refer to Apple's
:apple:`documentation/bundleresources/privacy_manifest_files` documentation.
