.. _flutter-link-user-identities:

==================================
Link User Identities - Flutter SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm provides :ref:`multiple authentication providers <authentication-providers>` 
to log users into your app. Each provider creates a unique user identity. 
Realm lets you merge multiple credentials into one user identity.

You can link identities by passing the :flutter-sdk:`Credentials <realm/Credentials-class.html>`
that you want to link to :flutter-sdk:`User.linkCredentials() <realm/User/linkCredentials.html>`. 

.. code-block:: dart
   
   User linkedCredentialUser = await app.currentUser.linkCredentials(credentials);

Example
-------

Consider an application that offers :ref:`anonymous login 
<anonymous-authentication>`. This allows users to explore the app without 
registering. If users like the application, they create permanent 
accounts. They sign up with SSO or email/password authentication. By default, 
this creates a new ``User`` object. The app must link the new 
identity with the original User.

We must first register the new :ref:`email/password
<email-password-authentication>` user before linking. 

.. TODO: add this content when 3rd-party auth is supported 
.. If you are using any of 
.. the other :ref:`Auth Providers <authentication>`, this step is unnecessary.
.. The following example uses  :ref:`Google authentication <google-authentication>`
.. instead of EmailPassword:

.. code-block:: dart
   
   // on app start without registration
   Credentials anonCredentials = Credentials.anonymous();

   // ... user interacts with app
   //... user decides to sign up for app, logging user in

   // link anonymous credentials to logged in user's credentials
   User linkedCredentialUser = await app.currentUser.linkCredentials(anonCredentials);
