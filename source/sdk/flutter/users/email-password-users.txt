.. _flutter-manage-email-password-users:

==================================
Email/Password Users - Flutter SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

With App Services's email/password authentication provider, you can register a new
account, confirm an email address, and reset a user's password from client code.

Before You Begin
----------------


#. :ref:`Create an Atlas App Services app <create-a-realm-app>`.
#. Before you begin writing client code, you should understand the different email/password
   authentication flows that App Services provides, and configure the backend implementation
   for your application. App Services has a variety of ways to confirm email/password
   user identities and reset user passwords.
   Learn more about, enable, and configure App Services :ref:`email/password authentication
   <email-password-authentication>`.


.. _flutter-manage-email-password-users-register:

Register a User
---------------

#. Create a new :flutter-sdk:`EmailPasswordAuthProvider <realm/EmailPasswordAuthProvider-class.html>`
   instance with your ``App`` instance as the argument.
#. Invoke :flutter-sdk:`EmailPasswordAuthProvider.registerUser()
   <realm/EmailPasswordAuthProvider/registerUser.html>`, passing the user's
   email and password as arguments.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.register-user.dart
   :language: dart

.. note::

   Registering a user does not also log that user in. You must log the user in separately.

Log in a User
-------------

#. Create an email/password credential by calling :flutter-sdk:`Credentials.emailPassword()
   <realm/Credentials/Credentials.emailPassword.html>` with the user's email and password.
#. Pass the generated credential to ``app.logIn``.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.email-password-credentials.dart
   :language: dart

.. _flutter-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

Once you register a new email/password user, you must confirm the email address
unless you configure App Services to :ref:`automatically confirm users
<auth-automatically-confirm-users>`.

Custom Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure App Services to use a :ref:`custom function for email address confirmation
<auth-run-a-confirmation-function>`, handle user confirmation with the logic
of your custom function's flow. The App Services backend invokes the custom
function when the user registers.

Send a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~

You only need to send a confirmation email if you :ref:`configure Atlas App Services to handle
user confirmation with an email <auth-send-a-confirmation-email>`.

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to :flutter-sdk:`EmailPasswordAuthProvider.confirmUser() <realm/EmailPasswordAuthProvider/confirmUser.html>`.
These are included in the email sent to the user's email address when they register.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.send-confirmation-email.dart
   :language: dart

.. note:: Use Deep Links in Flutter Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

Retry User Confirmation
-----------------------

The SDK provides methods to resend user confirmation emails or retry custom confirmation.

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use this user confirmation method if you've configured the App Services backend
to retry a :ref:`custom user confirmation function <auth-run-a-confirmation-function>`.

To retry a confirmation function, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.retryCustomConfirmationFunction()
<realm/EmailPasswordAuthProvider/retryCustomConfirmationFunction.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.retry-user-confirmation-function.dart
   :language: dart

Resend a User Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use this user confirmation method if you've configured the App Services backend
to resend a :ref:`confirmation email <auth-send-a-confirmation-email>`.
Email/password URLs expire after 30 minutes, so users who do not visit
within that period need new emails to confirm their accounts.

To resend a confirmation email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resendUserConfirmation()
<realm/EmailPasswordAuthProvider/resendUserConfirmation.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.retry-user-confirmation-email.dart
   :language: dart

.. _flutter-email-password-reset-password:

Reset a User's Password
-----------------------

To reset a user password with App Services, you can either:

- Run a password reset function
- Send a password reset email

To select which of these methods to use in your app,
:ref:`configure the App Services authentication password reset behavior
<email-password-authentication-password-resets>`.

Call a Reset Function
~~~~~~~~~~~~~~~~~~~~~

If you have defined a backend function to reset the user's password, you
pass the user's email address, the **new** password, and optional Map of custom arguments to
:flutter-sdk:`EmailPasswordAuthProvider.callResetPasswordFunction()
<realm/EmailPasswordAuthProvider/callResetPasswordFunction.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-function.dart
   :language: dart

Send Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~

To send a password reset email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resetPassword()
<realm/EmailPasswordAuthProvider/resetPassword.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-email.dart
   :language: dart

Password reset emails contain two values, ``token`` and ``tokenId``.
To complete the password reset flow, you can reset the user's password on the client
or by calling a custom function on the backend.

To reset the password on the client, your UI should prompt the user to enter a new
password and the ``token`` and ``tokenId`` values. You pass these values to
:flutter-sdk:`EmailPasswordAuthProvider.completeResetPassword()
<realm/EmailPasswordAuthProvider/completeResetPassword.html>`.

.. literalinclude:: /examples/generated/flutter/authenticate_users_test.snippet.password-reset-email-confirmation.dart
   :language: dart

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a  :ref:`custom password reset email
   <email-password-authentication-password-resets>` containing a
   `deep link <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

