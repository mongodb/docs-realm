.. _flutter-manage-email-password-users:

=========================================
Manage Email/Password Users - Flutter SDK
=========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Before You Begin
----------------

#. :ref:`Creat a {+app+} <create-a-realm-app>`.
#. Enable and configure {+service+} :ref:`email/password authentication <email-password-authentication>`.
   Before you begin writing client code, you should understand the different email/password
   authentication flows that {+service+} provides, and configure the backend implementation 
   for your application. {+service+} has a variety of ways to confirm email/password
   user identities and reset user passwords. 

.. _flutter-manage-email-password-users-register:

Register a User
---------------

#. Create a new :flutter-sdk:`EmailPasswordAuthProvider <realm/EmailPasswordAuthProvider-class.html>`
   instance with your ``App`` instance as the argument.
#. Invoke :flutter-sdk:`EmailPasswordAuthProvider.registerUser() 
   <realm/EmailPasswordAuthProvider/registerUser.html>`, passing the user's
   email and password as arguments.

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.registerUser("lisa@example.com", "myStr0ngPassw0rd");


.. _flutter-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

Once you register a new email/password user, you must confirm the email address 
unless you configure {+service-short+} to :ref:`automatically confirm users
<auth-automatically-confirm-users>`.

Custom Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you configure {+service-short+} to use a :ref:`custom function for email address confirmation
<auth-run-a-confirmation-function>`, handle user confirmation with the logic 
of your custom function's flow. The {+service-short+} backend invokes the custom
function when the user registers. 

Send a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~

You only need to send a confirmation email if you :ref:`configure {+service+} to handle 
user confirmation with an email <auth-send-a-confirmation-email>`.

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to :flutter-sdk:`EmailPasswordAuthProvider.confirmUser() <realm/EmailPasswordAuthProvider/confirmUser.html>`. 
These are included in the email sent to the user's email address when they register.

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.confirmUser(token, tokenId);

.. note:: Use Deep Links in Flutter Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

Retry User Confirmation
-----------------------

The SDK provides methods to resend user confirmation emails or retry custom confirmation.

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Retry a :ref:`custom user confirmation function <auth-run-a-confirmation-function>`.

To retry a confirmation function, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.retryCustomConfirmationFunction()
<realm/EmailPasswordAuthProvider/retryCustomConfirmationFunction.html>`. 

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.retryCustomConfirmationFunction("lisa@example.com");

Resend a User Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Resend a :ref:`confirmation email <auth-send-a-confirmation-email>`. 
Email/password URLs expire after 30 minutes, so users who do not visit 
within that period need new emails to confirm their accounts.

To resend a confirmation email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resendUserConfirmation()
<realm/EmailPasswordAuthProvider/resendUserConfirmation.html>`. 

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.resendUserConfirmation("lisa@example.com");

.. _flutter-email-password-reset-password:

Reset a User's Password
-----------------------

To reset a user password in {+sync+}, you can either:

- Send a password reset email
- Run a password reset function

To select which of these methods to use in your app, 
:ref:`configure the {+service-short+} password reset behavior
<email-password-authentication-password-resets>`. 

Call a Reset Function
~~~~~~~~~~~~~~~~~~~~~

If you have defined a backend function to reset the user's password, you 
pass the user's email address, the **new** password, and optional Map of custom arguments to 
:flutter-sdk:`EmailPasswordAuthProvider.callResetPasswordFunction()
<realm/EmailPasswordAuthProvider/callResetPasswordFunction.html>`.

.. code-block:: dart

   // The password reset function takes any number of
   // arguments. You might ask the user to provide answers to
   // security questions, for example, to verify the user
   // should be able to complete the password reset.
   Map<String, String> customArgs = {
     "answer1": "Snowball II",
     "answer2": "Springfield Elementary School",
     "answer3": "Bouvier"
   };

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.callResetPasswordFunction(
     "lisa@example.com",
     "n3wSt0ngP4ssw0rd!",
     customArgs
   );

Send Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~

To send a password reset email, pass the email used in sign up to
:flutter-sdk:`EmailPasswordAuthProvider.resetPassword()
<realm/EmailPasswordAuthProvider/resetPassword.html>`. 

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.resetPassword("lisa@example.com");

Password reset emails contain two values, ``token`` and ``tokenId``.
To complete the password reset flow, you can reset the user's password on the client 
or by calling a custom function on the backend.

To reset the password on the client, your UI should prompt the user to enter a new
password and the ``token`` and ``tokenId`` values. You pass these values to 
:flutter-sdk:`EmailPasswordAuthProvider.completeResetPassword()
<realm/EmailPasswordAuthProvider/completeResetPassword.html>`.

.. code-block:: dart

   EmailPasswordAuthProvider authProvider = EmailPasswordAuthProvider(realmApp);
   await authProvider.completeResetPassword("n3wSt0ngP4ssw0rd!", token, tokenId);

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a  :ref:`custom password reset email
   <email-password-authentication-password-resets>` containing a 
   `deep link <https://docs.flutter.dev/development/ui/navigation/deep-linking>`__.

