.. _flutter-authenticate:

================================
Authenticate Users - Flutter SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service+} provides an API for authenticating users using any enabled
authentication provider. Instantiate a ``Credentials_FLUTTER`` object and pass
it to :flutter-sdk:`App.logIn() <realm/App/logIn.html>`
method to authenticate a user and create a :flutter-sdk:`User<realm/User-class.html>`
object for that user.
Each authentication provider corresponds to a
static constructor method
used to instantiate :flutter-sdk:`Credentials <realm/Credentials-class.html>` objects for that
authentication provider.

Before You Begin
----------------

#. :ref:`Create a {+app+} <create-a-realm-app>`.
#. Enable and configure one or more {+service+} :ref:`authentication providers <authentication-providers>`.

.. _flutter-register:

Register a New User Account
---------------------------

Realm registers accounts differently depending on the authentication provider: 

- You do not need to register anonymous users. 
- To register an email/password user, refer to the :ref:`Manage Email/Password User
  Registration documentation <flutter-manage-email-password-users-register>`.
- If you are using Google, Facebook, Apple, or Custom JWT authentication,
  registration is handled by these third-party services.

.. _flutter-login:

Log In
------

You can authenticate users with :flutter-sdk:`App.logIn() <realm/App/logIn.html>`.

If successful, ``app.logIn`` returns a ``User`` object.

.. _flutter-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

The :ref:`anonymous authentication provider <anonymous-authentication>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
:flutter-sdk:`Credentials.anonymous() <realm/Credentials/Credentials.anonymous.html>`
and then pass the generated credential to
``app.logIn``.

.. code-block:: dart

   Credentials anonCredentials = Credentials.anonymous();
   App app = await app.logIn(anonCredentials);

.. _flutter-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

The :ref:`Email/Password authentication provider <email-password-authentication>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling :flutter-sdk:`Credentials.emailPassword() <realm/Credentials/Credentials.emailPassword.html>`
with the user's email and password. Then pass the generated credential
to ``app.logIn``.

.. code-block:: dart

   Credentials emailPwCredentials = Credentials.emailPassword("lisa@example.com", "myStr0ngPassw0rd");
   App app = await app.logIn(emailPwCredentials);

.. _flutter-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using :flutter-sdk:`User.logOut() <realm/User/logout.html>`. This method:

- Deletes locally stored user credentials from the device

- Immediately halts any synchronization to and from the user's {+realm+}s

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. code-block:: dart

   await user.logOut();

.. _flutter-retrieve-current-user:

Retrieve Current User
---------------------

Once you have an authenticated user, you can retrieve the User object with the 
:flutter-sdk:`App.currentUser <realm/App/currentUser.html>` 
property. The ``currentUser`` object is persisted in local storage, so even if 
the app shuts down after the initial authentication, you do not need to call 
``logIn`` again (unless the user logged out). 

.. code-block:: dart

   User user = app.currentUser;

.. TODO(DOCSP-22353): add delete user documentation

.. .. _flutter-delete-user:

.. Delete a User
.. -------------

.. Call the :flutter-sdk:`FLUTTER_App.deleteUser() <>` on a user object to delete 
.. the user's account from your Realm application. This deletes the account from
.. the server in addition to clearing local data.

.. CODE_BLOCK

.. To use your app in the future, the user must sign up for a new account. 
.. They can use the same credentials (depending on the authentication provider),
.. but will not have the same User ID as their deleted account.


