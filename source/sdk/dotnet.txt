.. _dotnet-intro:

======================
MongoDB Realm .NET SDK
======================

.. toctree::
   :titlesonly:
   
   Install Realm for .NET </sdk/dotnet/install>
   Integrate Realm with Unity </sdk/dotnet/unity>
   Quick Start </sdk/dotnet/quick-start-local>
   Quick Start with Sync </sdk/dotnet/quick-start-with-sync>
   Compatibility </sdk/dotnet/compatibility>
   Use Realm in a Console App </sdk/dotnet/async-console>
   Fundamentals </sdk/dotnet/fundamentals>
   Data Types </sdk/dotnet/data-types>
   Usage Examples </sdk/dotnet/examples>
   Advanced Guides </sdk/dotnet/advanced-guides>
   Troubleshooting </sdk/dotnet/troubleshooting>
   .NET SDK Reference Manual <https://docs.mongodb.com/realm-sdks/dotnet/latest>
   Release Notes <https://github.com/realm/realm-dotnet/releases>

The {+service+} .NET SDK enables client applications written in C# for the .NET,
`UWP <https://docs.microsoft.com/en-us/windows/uwp/get-started/>`__, `Xamarin
<https://dotnet.microsoft.com/apps/xamarin>`__, and `Unity
<https://unity.com/>`_ platforms to access data stored in local {+realms+} and
interact with {+backend+} services like Functions, MongoDB Data Access, and
authentication.

.. _dotnet_supported-platforms:

Supported Platforms
-------------------
Realm supports the following platforms for developing Realm apps for iOS and 
.NET devices:

- Xamarin.iOS for iOS 9 or later, using native UI or Xamarin Forms
  
  .. note:: Use Latest Xamarin.iOS Version
  
     Starting with version 10.3.0 of the {+service+} .NET SDK, you must use 
     `Xamarin.iOS version 14.14.2.5 <https://docs.microsoft.com/en-us/xamarin/ios/release-notes/14/14.14#march-2-2021---xamarinios-141425>`__ 
     or later.

- Xamarin.NET for API level 16 or later, using native UI or Xamarin Forms 
- Xamarin.Mac for macOS 10.11 or later, using nativeUI or Xamarin Forms 
- .NET Framework 4.6.1 or later for Windows 8.1 or later 
- Universal Windows Platform applications using .NET Standard 2.0 or later (Fall Creators Update) 
- .NET Core 2.0 or later on the following:

  - Ubuntu 16.04 or later
  - Debian 8 or later
  - RHEL 7.1 or later
  - macOS 10.11 or later
  - Windows 8.1 or later

You can use the following development environments to build Realm apps with 
the .NET SDK:

- Visual Studio 2015 Update 2 or higher for Windows
- Visual Studio for Mac 7.0 or higher
- Unity `2020.3.12f1 (LTS) <https://unity3d.com/get-unity/download/archive>`_ 

.. note::

    The :doc:`{+service-short+} .NET SDK </sdk/dotnet>` may be compatible with
    other versions of Unity, but ``2020.3.12f1 (LTS)`` is the version that the
    {+service-short+} team uses for testing and development. We recommend using
    this version to ensure your project works with {+service-short+} and that
    the install steps match the :doc:`Integrate Realm with Unity
    </sdk/dotnet/unity>` documentation steps  since Unity's UI
    often changes between versions. 

Installation
------------

To learn how to add the {+service+} .NET SDK library as a dependency
to your application, see :ref:`Install Realm for .NET
<dotnet-install>`.

To learn how to add the {+service+} .NET SDK library as a dependency to your
Unity project, see the :doc:`Integrate Realm with Unity
</sdk/dotnet/unity>` documentation.

The Realm Data Model
--------------------

You can store a wide variety of data within {+realms+} stored on your
device, and if you enable :term:`{+sync+}`, updates to that data are available 
across multiple client devices. Data models are classes defined in your 
code and in {+realm+} schemas.

For information about the structure of data you can store in {+realms+},
see :ref:`Realms <dotnet-realms>`, :ref:`Objects
<dotnet-objects>`, and :ref:`Relationships
<dotnet-client-relationships>`.

Building C# classes to represent the data you store in {+realm+} ensures data 
consistency when serializing/deserializing and makes working with the data 
simpler. 

Realm Database
--------------

Once you have defined the data model(s) for your application, you
can :ref:`write <dotnet-realm-database-writes>` and
:ref:`read <dotnet-realm-database-reads>` data to and from
your {+realm+}s.

To learn how to query for data in local {+realms+}, see
:ref:`Query Engine <dotnet-client-query-engine>`.

To learn about the results returned from {+realm+} queries, see
:ref:`Collections <dotnet-client-collections>`.

Mobile application development can be complicated by threading. To learn 
how to work with {+backend-short+} across threads in your application, 
see :ref:`Threading <dotnet-client-threading>`.

MongoDB Realm
-------------

The .NET SDK also connects your {+service-short+} client application
with your {+app+}'s backend services, including Functions, Services,
Webhooks, {+sync+}, and built-in third-party authentication.

To learn how to connect to a {+backend+} app to call
Functions, query data in an instance of {+atlas+}, and synchronize data
in {+realms+}, see :ref:`Call a Function <dotnet-call-a-function>`.

To learn how to handle schema updates in your client application, see
:ref:`<dotnet-schema-versions-and-migrations>`.
