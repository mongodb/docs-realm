.. _kotlin-multiplatform-intro:

======================================
MongoDB Realm Kotlin Multiplatform SDK
======================================

.. toctree::
   :titlesonly:
   
   Install Realm for Android </sdk/kotlin-multiplatform/install>
   Quick Start </sdk/kotlin-multiplatform/quick-start>
   Kotlin Multiplatform Reference Manual <https://docs.mongodb.com/realm-sdks/kotlin/latest/>
   Release Notes <https://github.com/realm/realm-kotlin/releases>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+service+} Kotlin Multiplatform SDK allows you to use {+client-database+} and
backend {+app+}s from Android and iOS applications written in
`Kotlin Multiplatform Multiverse (KMM) <https://kotlinlang.org/docs/mobile/home.html>`__.

Local Realm Database
--------------------

With the {+service+} Kotlin Multiplatform SDK, you can access objects
stored in a local instance of {+client-database+}. With
{+client-database+}, you can:

Define an Object Schema
~~~~~~~~~~~~~~~~~~~~~~~

Define your object schema
with annotated Kotlin classes:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/Frog.codeblock.frog-definition-local.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/FrogJava.codeblock.frog-definition-local.java
         :language: java

Query Realm Database
~~~~~~~~~~~~~~~~~~~~

Query for stored objects:

.. tabs-realm-languages::
     
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.java
         :language: java

Update Live Objects
~~~~~~~~~~~~~~~~~~~

Update objects in {+client-database+} by
updating field values on an instance of the object within a transaction:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.java
         :language: java

Watch for Object Updates
~~~~~~~~~~~~~~~~~~~~~~~~

Receive object updates and notifications automatically
when objects stored in {+client-database+} change:

.. tabs-realm-languages::
  
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.java
         :language: java

Always Access the Latest Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Live objects keep all instances
of an object up to date at all times:

.. tabs-realm-languages::
  
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.java
         :language: java

.. seealso::

   To get started with {+client-database+}, try our
   :ref:`Local Quick Start <kotlin-multiplatform-client-quick-start-local>`.

Realm Apps
----------

{+app+}s are backends for client applications hosted by MongoDB in the cloud.
They provide the ability to synchronize data stored in
{+client-database+}, called **{+sync+}**, as well as a layer of backend
functionality collectively called **App Services**.
The {+service+} Kotlin Multiplatform SDK optionally contains the ability to access
these {+app+}s running in the cloud. In addition to local
{+client-database+} in the SDK, {+app+}s provide the
following functionality:

Realm Sync
~~~~~~~~~~

Automatically sync data between {+realm+}s on client devices and your backend
MongoDB Atlas data store with {+sync+}:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.java
         :language: java

App Services
~~~~~~~~~~~~

- Use {+service-short+}'s built-in user management to authenticate across
  devices.

- Store data persistently with :ref:`permissions <mongodb-crud-permissions>`
  in your backend {+app+} using a
  :ref:`{+atlas+} database <mongodb-service>`.

- Execute logic in your backend {+app+} from a client application using
  :ref:`Functions <functions>`.

- React to events in your backend {+app+} using
  :ref:`Triggers <triggers>`.

Get Started
-----------

To start using the {+service+} Kotlin Multiplatform SDK
in your KMM application, see :ref:`Install Realm for Kotlin Multiplatform
<kotlin-multiplatform-install>` to add the Kotlin Multiplatform SDK
dependency and then check out the :ref:`Quick Start
<kotlin-multiplatform-client-quick-start-local>`.

- :doc:`Install Realm for Kotlin Multiplatform </sdk/kotlin-multiplatform/install>`

- :doc:`Quick Start </sdk/kotlin-multiplatform/quick-start>`
