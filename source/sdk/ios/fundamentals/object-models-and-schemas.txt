.. _ios-object-models-and-schemas:
.. _ios-realm-objects:

=================================
Object Models & Schemas - iOS SDK
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+client-database+} applications model data as objects composed of
field-value pairs that each contain one or more :ref:`supported
<ios-supported-property-types>` data types. :term:`Realm objects <Realm
object>` behave like regular Swift or Objective-C objects, but they also
include additional features like :ref:`real-time updating data views
<ios-live-object>` and reactive :ref:`change event handlers
<ios-react-to-changes>`.

Objects of the same class share an object schema that defines the fields
and relationships of those objects. Every {+realm+} has a schema that
consists of one or more object schemas describing the different forms of
object that can be stored in that {+realm+}.

.. tip::

   To learn how to define a Realm object in Swift or Objective-C, see
   :ref:`ios-define-a-realm-object-schema`.

Property Attributes
-------------------

Declare dynamic {+backend-short+} model properties in the Objective-C runtime. This 
enables them to access the underlying database data. 

You can either:

- Use ``@objc dynamic var`` to declare individual properties
- Use ``@objcMembers`` to declare a class. Then, declare individual 
  properties with ``dynamic var``. 

Use ``let`` to declare ``LinkingObjects``, ``List``, and 
``RealmOptional``. The Objective-C runtime cannot represent these 
generic properties.

.. seealso::

   Our :ref:`Supported Property Types <ios-supported-property-types>` 
   page contains a property declaration cheatsheet.

.. _ios-primary-keys:

Primary Keys
------------

You can :ref:`designate <ios-specify-a-primary-key>` a property as the
**primary key** of your class.

Primary keys allow you to efficiently :ref:`find
<ios-find-a-specific-object-by-primary-key>`, update, and :ref:`upsert
<ios-upsert-an-object>` objects.

Primary keys are subject to the following limitations:

- You can define only one primary key per object model.

- Primary key values must be unique across all instances of an object
  in a {+realm+}. {+client-database+} throws an error if you try to
  insert a duplicate primary key value.

- Primary key values are immutable. To change the primary key value of
  an object, you must delete the original object and insert a new object
  with a different primary key value.

- :ref:`Embedded objects <ios-embedded-objects>` cannot define a
  a primary key.

.. tip::

   To learn how to define a primary key for your Realm object, see
   :ref:`<ios-specify-a-primary-key>`.

Indexes
-------

You can create an index on a given property of your model. Indexes speed
up some queries, but have a negative impact on insert and update
operation speed. Indexes also consume additional space on disk to store
the actual index information.

.. tip::

   To learn how to add an index to your Realm object, see
   :ref:`ios-index-a-property`.

Relationships
-------------

{+client-database+} supports **to-one**, **to-many**, and **inverse**
relationships. You can specify a relationship by adding a reference or
list of references to the related Realm object as a property of your
Realm object.

Inverse relationship properties contain the set of {+service-short+}
objects that point to that object instance through a to-one or to-many
relationship. Inverse relationships automatically update themselves with
corresponding backlinks. You can find the same set of {+service-short+}
objects with a manual query, but the inverse relationship field reduces
boilerplate query code and capacity for error.

.. tip::

   To learn how to add relationships to your Realm object, see
   :ref:`ios-declare-relationship-properties`.

.. _ios-structs:

Swift Structs
-------------

{+client-database+} does not support Swift structs as models for a variety of 
reasons. {+service-short+}'s design focuses on “live” objects. 
This concept is not compatible with value type structs. By design, 
{+service-short+} provides features that are incompatible with these 
semantics, such as:
 
- :ref:`Live data <ios-live-object>`
- :ref:`Reactive APIs <ios-react-to-changes>`
- Low memory footprint of data
- Good operation performance
- :ref:`Lazy and cheap access to partial data <ios-live-queries>`
- Lack of data serialization/deserialization
- :ref:`Keeping potentially complex object graphs synchronized <ios-sync-changes-between-devices>`

That said, it is sometimes useful to detach objects from their backing 
{+realm+}. This typically isn't an ideal design decision. Instead, 
developers use this as a workaround for temporary limitations in our 
library.

You can use key-value coding to initialize an unmanaged object as a copy of 
a managed object. Then, you can work with that unmanaged object
like any other :apple:`NSObject <documentation/objectivec/nsobject>`.

.. code-block:: swift

   let standaloneModelObject = MyModel(value: persistedModelObject)

Summary
-------

- {+service-short+} objects are of a **type** defined as you would any other
  class.

- The {+service-short+} object's **schema** defines the fields of the object and
  which fields are optional, which fields have a default value,
  and which fields are indexed.

- You can define to-one, to-many, and inverse relationships in your schema.
  Inverse relationships automatically form backlinks.

- {+service-short+} does not currently support structs. When required, 
  create "in-memory copies" of {+service-short+} objects.
