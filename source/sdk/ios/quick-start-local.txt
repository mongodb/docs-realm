.. _ios-client-quick-start-local:

==================================
Quick Start (Local-only) - iOS SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get started with a local-only
{+client-database+}. Before you begin, ensure you have:

- :ref:`Installed the iOS SDK <ios-install>`

.. note:: This Quickstart is Local-only
   
   This page contains only the essential information to get started with
   a local-only {+client-database+}. For a quickstart featuring communicating
   with a backend {+app+} over the network using :ref:`{+sync-short+} <sync>`, Realm
   Functions, or user management, see the :ref:`Quick Start with {+sync-short+} 
   <ios-client-quick-start>`, or the full :ref:`iOS Tutorial <ios-swift-tutorial>`.

Import Realm
------------

Near the top of any Swift file that uses Realm, add the following import
statement:

.. code-block:: swift

   import RealmSwift

Define Your Object Model
------------------------

For a local-only {+client-database+} you can define your :ref:`object model
<ios-realm-objects>` directly in code.

.. code-block:: swift

   // LocalOnlyQsTask is the Task model for this QuickStart
   class LocalOnlyQsTask: Object {
      @objc dynamic var name: String = ""
      @objc dynamic var owner: String?
      @objc dynamic var status: String = ""
    
      convenience init(name: String) {
         self.init()
         self.name = name
      }
    }

Open a Realm
------------

In a local-only {+client-database+}, the simplest option to open a {+realm+}
is by omitting the configuration parameter, which uses the default {+realm+}:

.. code-block:: swift

   // Open the local-only default realm
   let localRealm = try! Realm()

You can also specify a :swift-sdk:`Realm.Configuration <Structs/Realm/Configuration.html>` 
parameter to open a {+realm+} at a specific file URL, in-memory, or with a 
subset of classes.

.. seealso::

   :ref:`Open a Local Realm <ios-open-a-local-realm>`

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its :ref:`objects <ios-realm-objects>` 
in a :ref:`write transaction <ios-write-transactions>` block.

To create a new Task, instantiate the Task class and add it to the {+realm+} in a write block:

.. code-block:: swift

   let task = LocalOnlyQsTask(name: "Do laundry")
   try! localRealm.write {
      localRealm.add(task)
   }

You can retrieve a live :ref:`collection <ios-client-collections>` of all tasks in the {+realm+}:

.. code-block:: swift

   // Get all tasks in the realm
   let tasks = localRealm.objects(LocalOnlyQsTask.self)

You can also filter that collection using a :ref:`filter <ios-client-query-engine>`:

.. code-block:: swift

   let tasksInProgress = tasks.filter("status = %@", "InProgress")
   print("A list of all tasks in progress: \(tasksInProgress)")

To modify a task, update its properties in a write transaction block:

.. code-block:: swift

   // All modifications to a realm must happen in a write block.
   let taskToUpdate = tasks[0]
   try! localRealm.write {
      taskToUpdate.status = "InProgress"
   }

Finally, you can delete a task:

.. code-block:: swift

   // All modifications to a realm must happen in a write block.
   let taskToDelete = tasks[0]
   try! localRealm.write {
      // Delete the LocalOnlyQsTask.
      localRealm.delete(taskToDelete)
   }

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<ios-react-to-changes>` with the ``observe`` method.

.. note::

   Be sure to retain the notification token returned by ``observe`` as 
   long as you want to continue observing. When you are done observing, 
   invalidate the token to free the resources.

.. code-block:: swift

   // Retain notificationToken as long as you want to observe
   let notificationToken = tasks.observe { (changes) in
       switch changes {
       case .initial: break
           // Results are now populated and can be accessed without blocking the UI
       case .update(_, let deletions, let insertions, let modifications):
           // Query results have changed.
           print("Deleted indices: ", deletions)
           print("Inserted indices: ", insertions)
           print("Modified modifications: ", modifications)
       case .error(let error):
           // An error occurred while opening the Realm file on the background worker thread
           fatalError("\(error)")
       }
   }

   // Later, when done observing
   notificationToken.invalidate()

Complete Example
----------------

Run the complete example by calling ``runLocalOnlyExample()``.

.. literalinclude:: /examples/generated/code/start/LocalOnlyCompleteQuickStart.codeblock.complete-quick-start.swift
   :language: swift

