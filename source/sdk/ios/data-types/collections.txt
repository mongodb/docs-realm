.. _ios-client-collections:

=====================
Collections - iOS SDK
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service-short+} has several types to represent groups of objects,
which we call **collections**. A collection is an object that contains
zero or more instances of one :ref:`{+service-short+} type
<ios-realm-objects>`. {+service-short+} collections are **homogenous**:
all objects in a collection are of the same type.

You can filter and sort any collection using {+client-database+}'s
:ref:`query engine <ios-client-query-engine>`. Collections are
:ref:`live <ios-live-object>`, so they always reflect the current state
of the :term:`{+realm+} instance` on the current thread. You can also
listen for changes in the collection by subscribing to :ref:`collection
notifications <ios-register-a-collection-change-listener>`.

Collection Types
----------------

The Swift SDK has the following collections:

1. :swift-sdk:`Results <Structs/Results.html>`, a class representing objects 
   retrieved from queries.
#. :swift-sdk:`List <Classes/List.html>`, a class representing 
   :ref:`to-many relationships <ios-to-many-relationship>` in models.
#. :ref:`MutableSet <ios-mutableset-data-type>`, a class representing 
   a :ref:`to-many relationship <ios-to-many-relationship>`.
#. :ref:`Map <ios-map>`, a class representing an associative array of key-value 
   pairs with unique keys.
#. :swift-sdk:`LinkingObjects <Structs/LinkingObjects.html>`, a class representing :ref:`inverse relationships <ios-inverse-relationship>` in models.
#. :swift-sdk:`RealmCollection <Protocols/RealmCollection.html>`, a protocol defining the common interface of any Realm collection.
#. :swift-sdk:`AnyRealmCollection <Structs/AnyRealmCollection.html>`, a :wikipedia:`type-erased <Type_erasure>` class that can forward calls to a concrete Realm collection like Results, List or LinkingObjects.

.. _ios-results-collections:

Results
~~~~~~~

A :swift-sdk:`Results <Structs/Results.html>` collection represents the
lazily-evaluated results of a query operation. Results are immutable:
you cannot add or remove elements to or from the results collection.
Results have an associated query that determines their contents.

.. seealso::

   :ref:`Reads <ios-realm-database-reads>`

.. _ios-list-collections:

List
~~~~

A :swift-sdk:`List <Classes/List.html>` represents a :ref:`to-many
relationship <ios-to-many-relationship>` between two {+service-short+}
types. Lists are mutable: within a write transaction, you can add and
remove elements to and from a list. Lists are not associated with a
query and are usually declared as a property of an :ref:`object model
<ios-object-models-and-schemas>`.

.. seealso::

   :ref:`To-Many Relationships <ios-to-many-relationship>`


.. _ios-linking-objects:

LinkingObjects
~~~~~~~~~~~~~~

A :swift-sdk:`LinkingObjects <Structs/LinkingObjects.html>` collection
represents an :ref:`inverse relationship <ios-inverse-relationship>`
between two {+service-short+} types. You cannot directly add or remove
items from a LinkingObjects collection.

RealmCollection
~~~~~~~~~~~~~~~

All collection types conform to the :swift-sdk:`RealmCollection
<Protocols/RealmCollection.html>` protocol. This protocol inherits from
:apple:`CollectionType <documentation/swift/collection>`, so you can use
a {+service-short+} collection as you would any other standard library
collections.

Using the RealmCollection protocol, you can write generic code that can
operate on any Realm collection:

.. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.generic-collection.swift
   :language: swift

AnyRealmCollection
~~~~~~~~~~~~~~~~~~

To store a collection as a property or variable without needing to know
the concrete collection type, Swift's type system requires a type-erased
wrapper like :swift-sdk:`AnyRealmCollection
<Structs/AnyRealmCollection.html>`:

.. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.any-realm-collection.swift
   :language: swift

.. _ios-live-collections:

Collections are Live
--------------------

Like :ref:`live objects <ios-live-object>`, {+service-short+} collections
are usually **live**:

- Live results collections always reflect the current results of the associated query.
- Live lists always reflect the current state of the relationship on the {+realm+} instance.

There are two cases when a collection is **not** live:

- The collection is unmanaged. For example, a List property of
  a {+service-short+} object that has not been added to a {+realm+} yet
  or that has been copied from a {+realm+} is not live.
- The collection is :ref:`frozen <ios-frozen-objects>`.

Combined with :ref:`collection notifications
<ios-register-a-collection-change-listener>`, live collections enable
clean, reactive code. For example, suppose your view displays the
results of a query. You can keep a reference to the results collection
in your view class, then read the results collection as needed without
having to refresh it or validate that it is up-to-date.

.. important:: Indexes may change

   Since results update themselves automatically, do not
   store the positional index of an object in the collection
   or the count of objects in a collection. The stored index
   or count value could be outdated by the time you use
   it.

.. _ios-lazy-evaluated-results:

Results are Lazily Evaluated
----------------------------

{+client-database+} only runs a query when you actually request the
results of that query. This lazy evaluation enables you to write
elegant, highly performant code for handling large data sets and complex
queries. You can use this fact to :ref:`chain queries together
<ios-chain-queries>`.

.. _ios-limiting-results:

Limiting Query Results
~~~~~~~~~~~~~~~~~~~~~~

As a result of lazy evaluation, you do not need any special mechanism to
limit query results with {+client-database+}. For example, if your query
matches thousands of objects, but you only want to load the first ten,
simply access only the first ten elements of the results collection.

.. _ios-pagination:

Pagination
~~~~~~~~~~

Thanks to lazy evaluation, the common task of pagination becomes quite
simple. For example, suppose you have a results collection associated
with a query that matches thousands of objects in your {+realm+}. You
display one hundred objects per page. To advance to any page, simply
access the elements of the results collection starting at the index that
corresponds to the target page.

Summary
-------

- A {+service-short+} **collection** is a homogenous container of zero
  or more instances of one
  :ref:`{+service-short+} type <ios-realm-objects>`.

- Collections are :ref:`live <ios-live-object>` (auto-updating) unless
  they are :ref:`frozen <ios-frozen-objects>` or they are not part of a {+realm+}.

- Lazy evaluation of results collections means there is no need to
  design a special query to get limited or paginated results. Perform
  the query and read from the results collection as needed.
