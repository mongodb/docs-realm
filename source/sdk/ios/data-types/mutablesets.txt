.. _ios-mutableset-data-type:

====================
MutableSet - iOS SDK
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.8.0-beta.0
   ``MutableSet`` type

.. include:: /includes/note-beta-feature.rst

Overview
--------

A `MutableSet <https://docs.mongodb.com/realm-sdks/swift/10.8.0-beta.0/Classes/MutableSet.html>`_ 
collection represents a :ref:`to-many relationship <ios-to-many-relationship>` 
containing distinct values. A ``MutableSet`` supports the following types 
(and their optional versions): 

- Bool, 
- Int, 
- Int8, 
- Int16, 
- Int32, 
- Int64, 
- Float, 
- Double, 
- String, 
- Data, 
- Date, 
- Decimal128, 
- ObjectId

Like Swift's :apple:`Set <documentation/swift/set>`, ``MutableSet`` is a 
generic type that is parameterized on the type it stores. Unlike 
:apple:`native Swift collections <documentation/swift/swift_standard_library/collections>`, 
{+service-short+} mutable sets are reference types, as opposed to value 
types (structs). 

You can only call the ``MutableSets`` mutation methods during a write 
transaction. As a result, ``MutableSets`` are immutable if you open the 
managing {+realm+} as a read-only {+realm+}. 

You can filter and sort a ``MutableSet`` with the :ref:`same predicates 
<ios-filter-data>` as :ref:`Results <ios-results-collections>`. Like other
{+service-short+} collections, you can :ref:`register a change listener 
<ios-register-a-collection-change-listener>` on a ``MutableSet``.

MutableSet as a Property
~~~~~~~~~~~~~~~~~~~~~~~~

For example, a ``Dog`` class model might contain a ``MutableSet`` for 
``citiesVisited``:

.. literalinclude:: /examples/generated/code/start/MutableSetExample.codeblock.set-collections-model.swift
   :language: swift

Which you can then update during write transactions:

.. literalinclude:: /examples/generated/code/start/MutableSetExample.codeblock.set-collections.swift
   :language: swift

MutableSet Intersection Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service-short+} ``MutableSet`` also provides some set-specific methods to
work with the data, including methods to compare sets and mutate them in place.
For example, ``MutableSet`` intersection methods:

.. literalinclude:: /examples/generated/code/start/MutableSetExample.codeblock.set-intersection-methods.swift
   :language: swift

.. seealso::

   - For a complete list of methods available, such as ``contains``, 
     ``isSubset``, ``union``, ``subtract``, see: 
     `MutableSet API reference <https://docs.mongodb.com/realm-sdks/swift/10.8.0-beta.0/Classes/MutableSet.html>`_
   - For more info on to-many relationships, see: :ref:`To-Many Relationships <ios-to-many-relationship>`
