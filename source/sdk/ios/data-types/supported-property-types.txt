.. _ios-supported-property-types:

==================================
Supported Property Types - iOS SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Property Cheat Sheet
--------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. versionchanged:: 10.8.0-beta.0
         ``RealmProperty`` replaces ``RealmOptional``

      You can use the following types to define your object model
      properties:

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
      
         * - Type
           - Required
           - Optional
         * - Bool
           - ``@objc dynamic var value = false``
           - ``let value = RealmProperty<Bool?>()``
         * - Int, Int8, Int16, Int32, Int64
           - ``@objc dynamic var value = 0``
           - ``let value = RealmProperty<Int?>()``
         * - Float
           - ``@objc dynamic var value: Float = 0.0``
           - ``let value = RealmProperty<Float?>()``
         * - Double
           - ``@objc dynamic var value: Double = 0.0``
           - ``let value = RealmProperty<Double?>()``
         * - String
           - ``@objc dynamic var value = ""``
           - ``@objc dynamic var value: String? = nil``
         * - Data
           - ``@objc dynamic var value = Data()``
           - ``@objc dynamic var value: Data? = nil``
         * - Date
           - ``@objc dynamic var value = Date()``
           - ``@objc dynamic var value: Date? = nil``
         * - Decimal128
           - ``@objc dynamic var decimal: Decimal128 = 0``
           - ``@objc dynamic var decimal: Decimal128?``
         * - `UUID <https://docs.mongodb.com/realm-sdks/swift/10.8.0-beta.0/Extensions.html#/s:10Foundation4UUIDV>`_
           - ``@objc dynamic var uuid = UUID()``
           - ``@objc dynamic var uuidOpt: UUID?``
         * - :swift-sdk:`ObjectId <Classes/ObjectId.html>`
           - ``@objc dynamic var objectId = ObjectId.generate()``
           - ``@objc dynamic var objectId: ObjectId?``
         * - :swift-sdk:`List <Classes/List.html>`
           - ``let value = List<Type>()``
           - 
         * - :ref:`MutableSet <ios-mutableset-data-type>` 
           - ``let value = MutableSet<Type>()``
           - 
         * - :ref:`Map <ios-map>` 
           - ``let value = Map<String, String>()``
           - 
         * - :ref:`AnyRealmValue <ios-anyrealmvalue-data-type>`
           - ``let value = RealmProperty<AnyRealmValue>()``
           - N/A
         * - User-defined :swift-sdk:`Object <Extensions/Object.html>`
           - N/A
           - ``@objc dynamic var value: MyClass?``
      
      Additionally:

      - :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`-derived types
      - :swift-sdk:`Enum <Protocols.html#/s:10RealmSwift0A4EnumP>`

      You can use ``RealmProperty <T?>`` to
      represent integers, doubles, and other types as optional.

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

   .. tab::
      :tabid: objective-c

      You can use the following types to define your object model
      properties:

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
      
         * - Type
           - Required
           - Optional
         * - Boolean
           - ``@property BOOL value;``
           - ``@property NSNumber<RLMBool> *value;``
         * - Integer
           - ``@property int value;``
           - ``@property NSNumber<RLMInt> *value;``
         * - Float
           - ``@property float value;``
           - ``@property NSNumber<RLMFloat> *value;``
         * - Double
           - ``@property double value;``
           - ``@property NSNumber<RLMDouble> *value;``
         * - String
           - ``@property NSString *value;``
           - ``@property NSString *value;``
         * - Data
           - ``@property NSData *value;``
           - ``@property NSData *value;``
         * - Date
           - ``@property NSDate *value;``
           - ``@property NSDate *value;``
         * - Decimal128
           - ``@property RLMDecimal128 *value;``
           - ``@property RLMDecimal128 *value;``
         * - NSUUID
           - ``@property NSUUID *uuid;``
           - 
         * - :objc-sdk:`RLMObjectId <Classes/RLMObjectId.html>`
           - ``@property RLMObjectId *objectId;``
           - ``@property RLMObjectId *objectId;``
         * - :objc-sdk:`RLMArray <Classes/RLMArray.html>`
           - ``@property RLMArray<MyClass *><MyClass> *items;``
           - ``@property RLMArray<MyClass *><MyClass> *items;``
         * - User-defined :objc-sdk:`RLMObject<Classes/RLMObject.html>`
           - N/A
           - ``@property MyClass *value;``

      Additionally:

      - Integral types ``int``, ``NSInteger``, ``long``, ``long long``
      - :objc-sdk:`RLMEmbeddedObject<Classes/RLMEmbeddedObject.html>`-derived types

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.


Unique Identifiers
------------------

.. versionadded:: 10.8.0-beta.0
   ``UUID`` type

ObjectId is a MongoDB-specific 12-byte unique value. UUID is a 16-byte 
globally-unique value. You can :ref:`index <ios-index-a-property>` both types,
and use either as a :ref:`primary key <ios-specify-a-primary-key>`.


.. _ios-size-limitations:

Size Limitations
----------------

Data and string properties cannot hold more than 16MB. To store
larger amounts of data, either:

- Break the data into 16MB chunks, or
- Store data directly on the file system and store paths to the files in the {+realm+}.

{+service-short+} throws a runtime exception if your app attempts to
store more than 16MB in a single property.

To avoid size limitations and a performance impact, it is best not to
store large blobs, such as image and video files, directly in a
{+realm+}. Instead, save the file to a file store and keep only the
location of the file and any relevant metadata in the {+realm+}.

