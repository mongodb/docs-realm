.. _ios-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the iOS SDK <ios-install>`

.. note:: Check Out the Tutorial
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the :ref:`iOS
   Tutorial <ios-swift-tutorial>` where you'll build a mobile app that connects
   to the :ref:`Task Tracker backend <tutorial-task-tracker-create-realm-app>`.

Import Realm
------------

Near the top of any Swift file that uses Realm, add the following import
statement:

.. code-block:: swift

   import RealmSwift

.. _ios-quick-start-init-app:

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. code-block:: swift

   let app = App(id: YOUR_REALM_APP_ID) // Replace YOUR_REALM_APP_ID with your Realm app ID 

Define Your Object Model
------------------------

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled {+sync-short+} with
:term:`development mode` in the {+ui+}, you can define your :ref:`object model
<ios-realm-objects>` directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode, you can copy and paste the object model definitions that {+backend-short+} generated for you from the :guilabel:`SDKs` tab in the {+ui+}. You must re-enable Developer Mode if you want to make changes to the object model definition from client side code. See :ref:`Configure Your Data Model <configure-your-data-model>`.

.. code-block:: swift

   // QsTask is the Task model for this QuickStart
   class QsTask: Object {
       @objc dynamic var _id: ObjectId = ObjectId.generate()
       // When configuring Sync, we selected `_partition` as the partition key.
       // A partition key is only required if you are using Sync.
       @objc dynamic var _partition: String = ""
       @objc dynamic var name: String = ""
       @objc dynamic var owner: String? = nil
       @objc dynamic var status: String = ""
       override static func primaryKey() -> String? {
           return "_id"
       }

       convenience init(partition: String, name: String) {
           self.init()
           self._partition = partition;
           self.name = name;
       }
   }

.. _ios-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. code-block:: swift

   // Log in anonymously.
   app.login(credentials: Credentials.anonymous) { (result) in
       // Remember to dispatch back to the main thread in completion handlers
       // if you want to do anything on the UI.
       DispatchQueue.main.async {
           switch result {
           case .failure(let error):
               print("Login failed: \(error)")
           case .success(let user):
               print("Login as \(user) succeeded!")
               // Continue below
               onLogin()
           }
       }
   }

{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso::

   :ref:`Authenticate a User <ios-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, 
you can open a :ref:`{+realm+} <ios-realms>` asynchronously by calling 
:swift-sdk:`asyncOpen <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`, 
passing in the user's  
:swift-sdk:`Configuration <Structs/Realm/Configuration.html>` object, which  
includes the partition name. The following code demonstrates this:

.. code-block:: swift

   let user = app.currentUser!
  
   // The partition determines which subset of data to access.
   let partitionValue = "myPartition"

   // Get a sync configuration from the user object.
   var configuration = user.configuration(partitionValue: partitionValue)
   configuration.objectTypes = [QsTask.self]
   // Open the realm asynchronously to ensure backend data is downloaded first.
   Realm.asyncOpen(configuration: user.configuration(partitionValue: partitionValue)) { (result) in
       switch result {
       case .failure(let error):
           print("Failed to open realm: \(error.localizedDescription)")
           // Handle error...
       case .success(let realm):
           // realm successfully opened
       }
   }

.. seealso::

   :ref:`Sync Data <ios-sync-data>`

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its :ref:`objects <ios-realm-objects>` in a :ref:`write transaction <ios-realm-database-writes>` block.

To create a new Task, instantiate the Task class and add it to the {+realm+} in a write block:

.. code-block:: swift

   let task = QsTask(partition: partitionValue, name: "Do laundry")
   try! realm.write {
       realm.add(task)
   }

You can retrieve a live :ref:`collection <ios-client-collections>` of all tasks in the {+realm+}:

.. code-block:: swift

   // Get all tasks in the realm
   let tasks = realm.objects(QsTask.self)

You can also filter that collection using a :ref:`filter <ios-client-query-engine>`:

.. code-block:: swift

   let tasksInProgress = tasks.filter("status = %@", "InProgress")
   print("A list of all tasks in progress: \(tasksInProgress)")

To modify a task, update its properties in a write transaction block:

.. code-block:: swift

   let taskToUpdate = tasks[0]
   // All modifications to a realm must happen in a write block.
   try! realm.write {
       taskToUpdate.status = "InProgress"
   }

Finally, you can delete a task:

.. code-block:: swift

   let taskToDelete = tasks[0]
   // All modifications to a realm must happen in a write block.
   try! realm.write {
       // Delete the QsTask.
       realm.delete(taskToDelete)
   }

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes <ios-client-notifications>`
with the ``observe`` method.

.. note::

   Be sure to retain the notification token returned by ``observe`` as long as you want to continue observing. When you are done observing, invalidate the token to free the resources.

.. code-block:: swift

   // Retain notificationToken as long as you want to observe
   let notificationToken = tasks.observe { (changes) in
       switch changes {
       case .initial: break
           // Results are now populated and can be accessed without blocking the UI
       case .update(_, let deletions, let insertions, let modifications):
           // Query results have changed.
           print("Deleted indices: ", deletions)
           print("Inserted indices: ", insertions)
           print("Modified modifications: ", modifications)
       case .error(let error):
           // An error occurred while opening the Realm file on the background worker thread
           fatalError("\(error)")
       }
   }

   // Later, when done observing
   notificationToken.invalidate()


Log Out
-------

Once logged in, you can log out:

.. code-block:: swift

   app.currentUser?.logOut() { (error) in
       // Logged out or error occurred
   }

Complete Example
----------------

Run the complete example by replacing the app ID with your {+app+} ID and
calling ``runExample()``.

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.complete-quick-start.swift
   :language: swift

Output
~~~~~~
Running the above code should output something like the following:

.. literalinclude:: /examples/QuickStarts/CompleteSwiftOutput
