.. _ios-test-and-debug:

========================
Test and Debug - iOS SDK
========================

Testing
-------

.. _ios-test-using-a-default-realm:

Test Using a Default Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~

The easiest way to use and test Realm apps is to use the default Realm. 
To avoid overriding application data or leaking state between tests, 
set the default Realm to a new file for each test.

.. literalinclude:: /examples/generated/code/start/TestingAndDebugging.codeblock.test-base-case.swift
     :language: swift

Injecting Realm Instances
~~~~~~~~~~~~~~~~~~~~~~~~~

Another way to test Realm-related code is to have all the methods you’d 
like to test accept a Realm instance as an argument. This enables you to 
pass in different Realms when running the app and when testing it. 

For example, suppose your app has a method to GET a user profile from a 
JSON API. You want to test that the local profile is properly created:

.. literalinclude:: /examples/generated/code/start/TestingAndDebugging.codeblock.test-inject-realm.swift
     :language: swift

Test Targets
~~~~~~~~~~~~

Don't link the Realm framework directly to your test target. This can 
cause your tests to fail with an exception message "Object type 'YourObject' 
is not managed by the Realm." Unlinking Realm from your test target 
should resolve this issue.

Compile your model class files in your application or framework targets; 
don't add them to your unit test targets. Otherwise, those classes are 
duplicated when testing, which can lead to difficult-to-debug issues.

Expose all the code that you need for testing to your unit test 
targets. Use the ``public`` access modifier or ``@testable``.

Since you’re using Realm as a dynamic framework, you’ll need to make 
sure your unit test target can find Realm. Add the parent path to 
``RealmSwift.framework`` to your unit test’s “Framework Search Paths”.

Debugging
---------

Debug Using Realm Studio
~~~~~~~~~~~~~~~~~~~~~~~~

Realm Studio enables you to open and edit local {+realms+}. It supports 
Mac, Windows and Linux.

LLDB
~~~~

Debugging apps using {+client-db-short+}'s Swift API must be done through 
the LLDB console.

Although the LLDB script allows inspecting the contents of your Realm 
variables in Xcode’s UI, this doesn’t yet work for Swift. Those 
variables will show incorrect data. Instead, use LLDB’s ``po``
command to inspect the contents of data stored in a Realm.

.. _ios-resolve-build-issues:

Resolve Build Issues
--------------------

Some developers experience build issues after installing {+backend+} via 
CocoaPods or Carthage. Common causes of these issues include:

- Installation issues:

  - Initial install failed
  - Using an unsupported version of the dependency manager

- Build tool issues:

  - Build tools have stale caches
  - Updating build tool versions

- Making changes to your project setup, such as:

  - Adding a new target 
  - Sharing dependencies across targets

A fix that often clears these issues is to delete derived data 
and clean the Xcode build folder.

.. tabs::

   .. tab:: CocoaPods
      :tabid: cocoapods

      .. include:: /includes/steps/troubleshoot-cocoapods-install.rst

   .. tab:: Carthage
      :tabid: carthage

      .. include:: /includes/steps/troubleshoot-carthage-install.rst