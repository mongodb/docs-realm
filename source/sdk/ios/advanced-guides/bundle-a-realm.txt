.. _ios-bundle-a-realm:

===========================================
Bundle a Realm File with Your App - iOS SDK
===========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You might want to seed your app with some initial data that is available
to users on first launch. To do so, you can bundle a :ref:`Realm file
<ios-realm-file>` with your app:

1. Create a new project with the exact same data models as your production app. Open a {+realm+} and add the data you wish to bundle. Since Realm files are cross-platform, you can do this in a macOS app.
#. Make a :ref:`compacted <ios-client-compact-a-realm>` copy of the file. This reduces the Realm file size, which makes your app lighter to download. See :swift-sdk:`Realm().writeCopyToPath(_:encryptionKey:)`.
#. Drag the compacted copy of your Realm file to your production app's Xcode Project Navigator.
#. Go to your app target's :guilabel:`Build Phases` tab in Xcode. Add the Realm file to the :guilabel:`Copy Bundle Resources` build phase.
#. At this point, your app can access the bundled Realm file. Find its path with :apple:`NSBundle.main.path(forResource:ofType) <documentation/foundation/bundle/1410989-path>`.

You can open the {+realm+} at the bundle path with ``readOnly = true``
on the :swift-sdk:`Realm.Configuration
<Structs/Realm/Configuration.html>`.

If your app is to modify the bundled {+realm+}, copy the bundled file to
your app's Documents folder with
:apple:`NSFileManager.default.copyItem(at:to:)
<documentation/foundation/filemanager/1412957-copyitem>`.

.. tip::

   Refer to the :github:`migration sample app
   <realm/realm-cocoa/tree/master/examples/ios/swift/Migration>` to see how
   to use a bundled Realm file.
