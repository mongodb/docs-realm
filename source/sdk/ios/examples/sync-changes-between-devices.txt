.. _ios-sync-changes-between-devices:

======================================
Sync Changes Between Devices - iOS SDK
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-open-a-synced-realm:

Open a Synced Realm
-------------------

The typical flow for opening a synced {+realm+} for the first time involves:

1. Authenticating the user
#. Creating a :swift-sdk:`sync configuration <Extensions/User.html#/s:So7RLMUserC10RealmSwiftE13configuration14partitionValueAC0B0V13ConfigurationVx_tAC4BSONRzlF>`
#. Opening the user's synced {+realm+} with the configuration.

At authentication, we cache user credentials in a ``sync_metadata.realm`` 
file on device.

When you open a synced {+realm+} after authenticating, you can bypass the 
login flow and go directly to opening the synced {+realm+}, using the same 
sync configuration you already created.

With cached credentials, you can:

- Open a synced {+realm+} immediately with the data that is on the device.
  You can use this method offline or online.
- Open a synced {+realm+} after syncing changes with your {+app+}. You can
  only use this method if the user is online.

Open A Synced Realm Offline
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can work with synced {+realms+} offline if the user credentials are
cached and you use {+backend-short+} initializers to open the {+realms+}.
If your app requires that a user always have the most up-to-date data, 
you'll use ``asyncOpen`` to open the {+realm+}, but that requires a user
to have a network connection.

Synced Realms vs Local Realms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Synced {+realms+} differ from local {+client-database+} in a few ways:

- Synced {+realms+} attempt to sync changes with your backend {+app+},
  whereas local {+realms+} do not.
- Synced {+realms+} can be accessed by authenticated users, while local 
  {+realms+} do not require any concept of users or authentication.
- Some methods of opening synced {+realms+} require users to be online, 
  while local {+realms+} can be used entirely offline.

You can copy data from a :ref:`local {+client-database+} <ios-open-a-local-realm>` 
to a synced {+realm+}, but you cannot sync a local {+client-database+}. You
must initialize a synced {+realm+} with a :swift-sdk:`sync configuration <Extensions/User.html#/s:So7RLMUserC10RealmSwiftE13configuration14partitionValueAC0B0V13ConfigurationVx_tAC4BSONRzlF>`. 

Open a Synced Realm for the First Time
--------------------------------------

Authenticate a User
~~~~~~~~~~~~~~~~~~~

The first time a user opens a {+realm+}, you'll need to authenticate the user. 
Upon this initial login, we cache login credentials. On subsequent opens, you 
can check for a logged-in user, and then open new {+realms+}. You don't need to
complete the login flow while you have a logged-in user. 

Depending on your business logic, you may also require the user to download 
data from {+backend+} before opening a synced {+realm+} on device.

Log In and Open a Synced Realm with Data on the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      The first time you log in and open a synced {+realm+}, you'll log in the
      user, and pass the  user's :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` 
      object with the desired :ref:`partition value <partition-value>` to
      :swift-sdk:`Realm.asyncOpen(configuration:)
      <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`:

      This opens a synced {+realm+} on the device with data that is present
      on the device. The {+realm+} will attempt to sync with your {+app+} in
      the background to check for changes on the server, or upload changes 
      that the user has made.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.login-and-init-synced-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      The first time you log in and open a synced {+realm+}, you'll log in the
      user, and pass the user's :objc-sdk:`RLMSyncConfiguration 
      <Classes/RLMRealmConfiguration.html#/c:objc(cs)RLMRealmConfiguration(py)syncConfiguration>` 
      object with the desired :objc-sdk:`partitionValue 
      <Classes/RLMSyncConfiguration.html#/c:objc(cs)RLMSyncConfiguration(py)partitionValue>` 
      to :objc-sdk:`+[RLMRealm realmWithConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)realmWithConfiguration:error:>`.

      This opens a synced {+realm+} on the device with data that is present
      on the device. The {+realm+} will attempt to sync with your {+app+} in
      the background to check for changes on the server, or upload changes 
      that the user has made.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.init-synced-realm.m
         :language: swift

Log In and Download Changes Before Opening a Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      If you want to download data from your backend {+app+} before the user 
      can work with the synced {+realm+}, you'll log in the user, and pass the 
      user's :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` 
      object with the desired :ref:`partition value <partition-value>` to
      :swift-sdk:`Realm.asyncOpen(configuration:)
      <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`:

      When this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
      downloads the entire remote {+realm+} before opening the file on device. 
      If the synced {+realm+} is already present on the device, ``asyncOpen`` 
      downloads only the latest changes since the {+realm+} last synced with 
      the {+app+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.login-asyncopen-synced-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To open a synced {+realm+} asynchronously, pass the logged-in user's
      :objc-sdk:`RLMRealmConfiguration
      <Classes/RLMRealmConfiguration.html>` object with the desired
      :ref:`partition value <partition-value>` to :objc-sdk:`+[RLMRealm
      asyncOpenWithConfiguration:callbackQueue:callback]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)asyncOpenWithConfiguration:callbackQueue:callback:>`:

      If this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
      downloads the entire remote {+realm+} before opening the file on device. 
      If a {+realm+} is already present on the device, ``asyncOpen`` downloads 
      only the latest changes since the {+realm+} last synced with the {+app+}.
      
      A common pattern is to use ``asyncOpen`` during a login 
      flow, but use ``init`` to open a {+realm+} on subsequent opens.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.asyncopen-synced-realm.m
         :language: objectivec

Open a Synced Realm with Cached Credentials
-------------------------------------------

After you have authenticated a user and created a sync configuration to 
open a {+realm+}, you can open the same {+realm+} again using the sync 
configuration with cached credentials. You can use two different methods to 
open the synced {+realm+}, depending on your needs:

- :ref:`Open a synced {+realm+} with data that is on the device 
  <ios-open-synced-realm-with-data-on-device>` immediately. This works regardless 
  of network status, and enables the user to start working with the {+realm+} 
  without waiting for changes to download from the server. However, data that 
  is on the device may be stale. Additionally, this may result in behavior that 
  seems unexpected or surprising to the user. Data may appear "suddenly" as 
  it syncs in the background after the user has already begun working with the 
  {+realm+}. You'll need to account for this in your UI logic.
- :ref:`Open a synced {+realm+} after syncing changes <ios-open-synced-realm-after-sync>`. 
  This requires the user to have a network connection, so you should 
  :ref:`check the network connection <ios-check-network-connection>` before 
  attempting to open the {+realm+} from the server. This method of opening the 
  {+realm+} ensures that the user always has the most up-to-date data from the 
  server. The cost of using this method is an upfront pause while loading, and 
  being unable to open the {+realm+} offline.

.. _ios-open-synced-realm-with-data-on-device:

Open a Synced Realm with Data on the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use initializers to open the {+realm+} immediately, using the data
that is on the device. If you want to open a synced {+realm+} offline, use 
this method. You must have a cached, logged-in user.

.. example::

   Consider the example of a note-taking app. You might decide it's most 
   important for your user to be able to quickly jot down a note. The user 
   shouldn't have to wait while downloading changes that a family member made 
   to a shared note. In this case, opening a {+realm+} with ``init`` gets the 
   user to the UI right away, or while the user is offline. When the user has
   a network connection, changes will sync in the background.

   In contrast, you might want a store inventory app to always check the server 
   for changes before working with a {+realm+}. If you use stale data from the
   last time the {+realm+} was open on the device, the app data could reflect 
   incorrect counts, inaccurate pricing data, or other out-of-date data issues. 
   In that case, you'd want the app to download changes before letting the user
   work with the data.

.. note::

   A synced {+realm+} is not interchangeable with a local {+client-database+}.
   If you want to sync a local {+client-database+}, you'll need to :ref:`copy the
   content from the local {+realm+} to a synced {+realm+} <copy-local-data-to-synced-realm>`. 
   A local {+realm+} lives only on the device and never attempts to sync with 
   the server. A synced {+realm+} contains additional {+sync-short+}-related 
   metadata, and consistently and persistently attempts to connect and sync 
   data with the server.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To open a synced {+realm+} with data on the device, pass the 
      logged-in user's :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` 
      object with the desired :ref:`partition value <partition-value>` to
      :swift-sdk:`Realm() <Structs/Realm.html>` initializers. This opens 
      the {+realm+} immediately, before downloading changesets from the server.
      This works if the device is offline, but may lead to temporary data
      inconsistencies while your app downloads any new remote data. The 
      {+realm+} will update from the server in the background.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm-offline.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can open the realm synchronously with the
      :objc-sdk:`+[RLMRealm realmWithConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)realmWithConfiguration:error:>`
      initializers. This opens the {+realm+} immediately, before downloading 
      changesets from the server. This works if the device is offline, but 
      may lead to temporary data inconsistencies while your app downloads 
      any new remote data. The {+realm+} will update from the server in the 
      background.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm-synchronously.m
         :language: objectivec

.. _ios-open-synced-realm-after-sync:

Open a Synced Realm After Downloading Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
In some apps, such as games, you might want the user to always have current data. 
Use ``asyncOpen`` to sync the {+realm+} with the {+app+} before opening it.

.. example::

   Say a user plays a game on both an iPad and an iPhone. The user progresses 
   three levels on the iPad. Later, the user opens the game on an iPhone. In this 
   case, ``asyncOpen`` is a better way to open the {+realm+}. Loading with stale 
   data would get the user into the game faster, but the user's data would be 
   three levels out of sync.

   In contrast, if you had an app that allowed the user to record and save their
   favorite recipes, you might want to give them the option to create a new 
   recipe without waiting to download updates, or even if they're offline. If 
   you opened a synced realm with data on the device, the user could enter a 
   new recipe, which would sync with the {+app+} when they next had a network 
   connection.

A common pattern is to open a {+realm+} with ``asyncOpen`` in the login flow, 
and then use ``init`` for subsequent opens. If you want users to only interact 
with the most up-to-date version of your data, you can exclusively use 
``asyncOpen``. This incurs the cost of additional loading time and prevents 
users from opening a realm while offline.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To open a synced {+realm+} only after it has downloaded changes from your 
      {+app+}, verify that the user has :ref:`a network connection <ios-check-network-connection>`, 
      and then pass the logged-in user's :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` 
      object with the desired :ref:`partition value <partition-value>` to
      :swift-sdk:`Realm.asyncOpen(configuration:)
      <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`:

      If this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
      downloads the entire remote {+realm+} before opening the file on device. 
      If a {+realm+} is already present on the device, ``asyncOpen`` downloads 
      only the latest changes since the {+realm+} last synced with the {+app+}.
      
      You might use ``asyncOpen`` exclusively to open {+realms+} when you need
      to ensure that the user always has the latest data from the server.
      However, if the user is currently offline, the user won't be able to
      work with the {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.use-async-open-with-cached-credentials.swift
         :language: swift

   .. tab::
         :tabid: objective-c

         To open a synced {+realm+} asynchronously, pass the logged-in user's
         :objc-sdk:`RLMRealmConfiguration
         <Classes/RLMRealmConfiguration.html>` object with the desired
         :ref:`partition value <partition-value>` to :objc-sdk:`+[RLMRealm
         asyncOpenWithConfiguration:callbackQueue:callback]
         <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)asyncOpenWithConfiguration:callbackQueue:callback:>`:

         If this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
         downloads the entire remote {+realm+} before opening the file on device. 
         If a {+realm+} is already present on the device, ``asyncOpen`` downloads 
         only the latest changes since the {+realm+} last synced with the {+app+}.
         
         A common pattern is to use ``asyncOpen`` during a login 
         flow, but use ``init`` to open a {+realm+} on subsequent opens.

         .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm.m
            :language: objectivec

.. _ios-open-synced-realm-swiftui:

Open a Synced Realm with SwiftUI
--------------------------------

.. versionadded:: 10.12.0

SwiftUI apps can use RealmSwift property wrappers to open {+realms+} and 
populate views. These property wrappers provide a syntax that integrates 
with SwiftUI to let developers declare whether their clients should download 
changesets before opening {+realm+}s or open {+realm+}s with data on the 
devices.

Apps that require up-to-date information from the server, such as game apps 
with live leaderboards that the user can play on multiple devices, should 
:ref:`use @AsyncOpen to open a {+realm+}<swiftui-async-open-synced-realm>`. 
This only works if the user has a network connection when opening the {+realm+}, 
but ensures the user is never using the app with stale data.

Apps where it's not a problem for the user to work with potentially stale 
data, such as note-taking apps where users should be able to work with data 
on the device, should :ref:`use @AutoOpen to open the {+realm+}
<swiftui-auto-open-synced-realm>`. Like ``@AsyncOpen``, this attempts to 
download updates before opening the {+realm+}. However, if a network connection 
is not available, this method instead opens a {+realm+} with data on the 
device. This property wrapper enables developers to design offline-first 
capabilities into their apps.

.. _swiftui-async-open-synced-realm:

AsyncOpen
~~~~~~~~~

To download updates from your {+app+} before opening a {+realm+}, use the 
:swift-sdk:`@AsyncOpen <Structs/AsyncOpen.html>` property wrapper. This requires
the user to have a network connection.

.. code-block:: swift

   @AsyncOpen(appId: "app_id", partitionValue: <partition_value>) var asyncOpen

This SwiftUI property wrapper initiates ``Realm.asyncOpen()`` for the current 
user. The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. 

.. example::

   This example illustrates one way you might use ``@AsyncOpen`` to 
   open a {+realm+} in a view. First, check for a user, or log them in.
   Then, attempt to open the {+realm+}, switching on the ``AsyncOpenState``
   to display an appropriate view. When the {+realm+} opens successfully,
   inject it as an environment value to populate the view.

   .. code-block:: swift

      struct AsyncOpenView: View {

         // @AutoOpen attempts to connect to the server and download remote changes 
         // before the realm opens, which might take a moment.
         // We can use an empty string as the partitionValue here because we're 
         // injecting the user.id as an environment value from the LoginView.
         @AsyncOpen(appId: YOUR_REALM_APP_ID_HERE, partitionValue: "", timeout: 4000) var asyncOpen

         var body: some View {
            // Switch on the AsyncOpenState enum to update the view
            // based on AsyncOpen progress.
            switch asyncOpen {
            // Starting the Realm.asyncOpen process. 
            // Show a progress view.
            case .connecting:
               ProgressView()
            // Waiting for a user to be logged in before executing Realm.asyncOpen
            case .waitingForUser:
               ProgressView("Waiting for user to log in...")
            // The realm has been opened and is ready for use. 
            // Show the content view.
            case .open(let realm):
               ListView()
                  .environment(\.realm, realm)
            // The realm is currently being downloaded from the server.
            // Show a progress view.
            case .progress(let progress):
               ProgressView(progress)
            // Opening the Realm failed.
            // Show an error view.
            case .error(_):
               ErrorView()
            }
         }
      }

.. _swiftui-auto-open-synced-realm:

AutoOpen
~~~~~~~~

To open a synced {+realm+} regardless of whether the user has a network 
connection, use the :swift-sdk:`@AutoOpen <Structs/AutoOpen.html>` property 
wrapper. 

.. code-block:: swift

   @AutoOpen(appId: "app_id", partitionValue: <partition_value>) var autoOpen

This SwiftUI property wrapper attempts to initiate a ``Realm.asyncOpen()`` 
for the current user. If there is no internet connection, this property wrapper
instead returns an opened realm for the given ``appId`` and ``partitionValue``.

The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view.

.. example::

   This example illustrates one way you might use ``@AutoOpen`` to 
   open a {+realm+} in a view. First, check for a user, or log them in.
   Then, attempt to open the {+realm+}, switching on the ``AsyncOpenState``
   to display an appropriate view. When the {+realm+} opens successfully,
   inject it as an environment value to populate the view.

   .. code-block:: swift

      struct AutoOpenView: View {

         // @AutoOpen attempts to connect to the server and download remote changes 
         // before the realm opens, which might take a moment. However, if there is
         // no network connection, AutoOpen will open a realm on the device.
         // We can use an empty string as the partitionValue here because we're 
         // injecting the user.id as an environment value from the LoginView.
         @AutoOpen(appId: YOUR_REALM_APP_ID_HERE, partitionValue: "", timeout: 4000) var autoOpen

         var body: some View {
            // Switch on the AsyncOpenState enum to update the view
            // based on AutoOpen progress.
            switch autoOpen {
            // Starting the Realm.asyncOpen process. 
            // Show a progress view.
            case .connecting:
               ProgressView()
            // Waiting for a user to be logged in before executing Realm.asyncOpen
            case .waitingForUser:
               ProgressView("Waiting for user to log in...")
            // The realm has been opened and is ready for use. 
            // Show the content view.
            case .open(let realm):
               ListView()
                  .environment(\.realm, realm)
            // The realm is currently being downloaded from the server.
            // Show a progress view.
            case .progress(let progress):
               ProgressView(progress)
            // Opening the Realm failed.
            // Show an error view.
            case .error(_):
               ErrorView()
            }
         }
      }

.. _ios-swiftui-pass-environment-values:

Pass Environment Values
~~~~~~~~~~~~~~~~~~~~~~~

You can inject the ``.partitionValue`` environment value into the view where 
you are performing the ``@AsyncOpen`` or ``@AutoOpen`` to populate the 
``partitionValue``:

.. code-block:: swift

   AsyncOpenView()
      .environment(\.partitionValue, user.id)

You can inject the opened {+realm+} into your content view as an environment 
value. The property wrapper uses this {+realm+} to populate the view:

.. code-block:: swift

   ListView()
      .environment(\.realm, realm)

.. _ios-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

If you want your app to update data in the background (while the app is
minimized), iOS requires you to implement :apple:`Background App Refresh
<documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/updating_your_app_with_background_app_refresh>`.
Enabling Background App Refresh minimizes the time it takes for the user
to see the most recent data; without Background App Refresh, {+service+}
updates the data when the user launches the app, potentially resulting
in noticeable lag.

To use the {+realm+} while the device is locked, you must adjust the
file protection settings. See
:ref:`use-realm-when-the-device-is-locked`.

.. _ios-suspend-or-resume-a-sync-session:

Suspend or Resume a Sync Session
--------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can suspend or resume a sync session using the
      :swift-sdk:`SyncSession <Extensions/SyncSession.html>` instance of
      a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can suspend or resume a sync session using the
      :objc-sdk:`RLMSyncSession <Classes/RLMSyncSession.html>` instance
      of a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.m
         :language: objectivec


.. _ios-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can add a progress notification using the synced {+realm+}'s
      SyncSession instance's
      :swift-sdk:`addProgressNotification(for:mode:block:)
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE23addProgressNotification3for4mode5blockSo011RLMProgressG5TokenCSgAbCE0F9DirectionO_AbCE0F4ModeOyAbCE0F0VctF>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can add a progress notification using the synced {+realm+}'s
      RLMSyncSession instance's
      :objc-sdk:`[--addProgressNotificationForDirection:mode:block:]
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(im)addProgressNotificationForDirection:mode:block:>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.m
         :language: objectivec


.. _ios-check-network-connection:

Check the Network Connection
----------------------------

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't
   need to check the current network connection state. That said, the
   ``connectionState`` property is available if your app calls for some
   indication of connection state.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      To check the connection state, you can read the synced {+realm+}'s
      SyncSession instance's :swift-sdk:`connectionState
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE15ConnectionStatea>`
      property directly. 

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO or even Combine.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To check the connection state, you can read the synced {+realm+}'s
      RLMSyncSession instance's :objc-sdk:`connectionState
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(py)connectionState>`
      property directly.

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO. The following example
      demonstrates how to implement an observer class:

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection-setup.m
         :language: objectivec

      You can then attach an observer instance to the RLMSyncSession
      object. Be sure to remove the observer when finished.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.m
         :language: objectivec

.. _ios-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses {+sync+}, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Set an error handler on the :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` singleton. Set an error
      handler on the SyncManager singleton. When an error occurs, the iOS SDK
      calls the error handler with the error object and the :swift-sdk:`SyncSession
      <Structs/Realm.html#/s:10RealmSwift0A0V11syncSessionSo07RLMSyncD0CSgvp>` that the
      error occurred on.
      
      .. note::
   
         Realm's :swift-sdk:`SyncError <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>` conforms to :apple:`Swift's Error protocol <documentation/swift/error>`

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Set an error handler on the :objc-sdk:`RLMSyncManager
      <objc/latest/Classes/RLMSyncManager.html>` singleton. When an error
      occurs, the iOS SDK calls the error handler with the error object and the
      :objc-sdk:`RLMSyncSession <objc/latest/Classes/RLMSyncSession.html>` that
      the error occurred on.

      .. note::
   
         Realm represents sync errors through :objc-sdk:`NSError <Categories/NSError%28RLMSync%29.html>` objects whose domain is
         :objc-sdk:`RLMSyncErrorDomain <Constants.html#/c:@RLMSyncErrorDomain>`. To learn more about the error codes, check out
         the definitions of :objc-sdk:`RLMSyncError <Enums/RLMSyncError.html>` and :objc-sdk:`RLMSyncAuthError <Enums/RLMSyncAuthError.html>`.

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.m
         :language: objectivec


.. _ios-delete-a-client-realm-file:

Delete a Client Realm File
--------------------------

In some cases, you may want to completely delete a realm file from disk.

Realm avoids copying data into memory except when absolutely required.
As a result, all objects managed by a realm have references to the file
on disk. Before you can safely delete the file, you must ensure the
deallocation of these objects:

- All objects read from or added to the realm
- All List and Results objects
- All ThreadSafeReference objects
- The realm itself

In practice, there are two safe times to delete the realm file:

1. On application startup before ever opening the realm.
#. After only having opened the realm within an explicit ``autorelease`` pool, which ensures deallocation of all of objects within it.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the
      :swift-sdk:`Realm.deleteFiles(for:)
      <Structs/Realm.html#/s:10RealmSwift0A0V11deleteFiles3forSbAC13ConfigurationV_tKFZ>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the :objc-sdk:`+[RLMRealm
      deleteFilesForConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)deleteFilesForConfiguration:error:>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.m
         :language: objectivec

.. tip::

   To perform a **client reset**, see :ref:`ios-client-resets`.

.. _ios-set-the-client-log-level:

Set the Client Log Level
------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can set the {+sync+} client log level on the
      :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` instance on your
      :swift-sdk:`App <Extensions/App.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can set the {+sync+} client log level on the
      :objc-sdk:`RLMSyncManager <Classes/RLMSyncManager.html>` instance
      on your :objc-sdk:`RLMApp <Classes/RLMApp.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.m
         :language: objectivec

.. tip::

   See :objc-sdk:`RLMSyncLogLevel <Enums/RLMSyncLogLevel.html>` for a
   description of each available log level. Note that more logging can
   negatively affect performance.

.. include:: /includes/tip-sync-log-levels.rst
