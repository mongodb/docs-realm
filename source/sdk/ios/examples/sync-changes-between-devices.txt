.. _ios-sync-changes-between-devices:

======================================
Sync Changes Between Devices - iOS SDK
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-open-a-synced-realm:

Overview
--------

The typical flow for opening a synced {+realm+} involves:

1. :ref:`Authenticating the user <ios-authenticate-users>`
#. Creating a :swift-sdk:`sync configuration <Extensions/User.html#/s:So7RLMUserC10RealmSwiftE13configuration14partitionValueAC0B0V13ConfigurationVx_tAC4BSONRzlF>`
#. Opening the user's synced {+realm+} with the configuration.

At authentication, we cache user credentials in a ``sync_metadata.realm`` 
file on device.

When you open a synced {+realm+} after authenticating, you can bypass the 
login flow and go directly to opening the synced {+realm+}, using the same 
sync configuration you already created.

With cached credentials, you can:

- Open a synced {+realm+} immediately with the data that is on the device.
  You can use this method offline or online.
- Open a synced {+realm+} after downloading changes from your {+app+}. 
  This requires the user to have an active internet connection.

Synced Realms vs Local Realms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Synced {+realms+} differ from local {+client-database+} in a few ways:

- Synced {+realms+} attempt to sync changes with your backend {+app+},
  whereas local {+realms+} do not.
- Synced {+realms+} can be accessed by authenticated users, while local 
  {+realms+} do not require any concept of users or authentication.
- With synced {+realms+}, you can :ref:`specify the download behavior 
  <ios-specify-download-behavior>` to download updates before opening a 
  {+realm+}. However, this requires users to be online. Local {+realms+} - 
  with no sync capability - can always be used offline.

You can copy data from a :ref:`local {+client-database+} <ios-open-a-local-realm>` 
to a synced {+realm+}, but you cannot sync a local {+client-database+}. You
must initialize a synced {+realm+} with a :swift-sdk:`sync configuration <Extensions/User.html#/s:So7RLMUserC10RealmSwiftE13configuration14partitionValueAC0B0V13ConfigurationVx_tAC4BSONRzlF>`.

.. _ios-login-and-open-realm:

Open a Synced Realm
-------------------

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. versionchanged:: 10.15.0

      .. seealso::
         
         This example uses async/await introduced in Swift 5.5 for iOS 15. If you're
         using an older version of Swift or need to support older platforms, see:
         :ref:`Legacy Realm Sync Open Methods <ios-realm-open-legacy>`. 

      Pass a logged-in user's :swift-sdk:`configuration <Structs/Realm/Configuration.html>` 
      object with the desired :ref:`partition value <partition-value>` to 
      :swift-sdk:`{+realm+} initializers 
      <Structs/Realm.html#/s:10RealmSwift0A0V13configuration5queueA2C13ConfigurationV_So012OS_dispatch_D0CSgtKcfc>`.

      You can optionally :ref:`specify whether a {+realm+} should download 
      changes before opening <ios-specify-download-behavior>`. If you do not
      specify download behavior, this opens a {+realm+} with data that is on
      the device, and attempts to sync changes in the background.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      The first time you log in and open a synced {+realm+}, you'll log in the
      user, and pass the user's :objc-sdk:`RLMSyncConfiguration 
      <Classes/RLMRealmConfiguration.html#/c:objc(cs)RLMRealmConfiguration(py)syncConfiguration>` 
      object with the desired :objc-sdk:`partitionValue 
      <Classes/RLMSyncConfiguration.html#/c:objc(cs)RLMSyncConfiguration(py)partitionValue>` 
      to :objc-sdk:`+[RLMRealm realmWithConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)realmWithConfiguration:error:>`.

      This opens a synced {+realm+} on the device. The {+realm+} 
      attempts to sync with your {+app+} in the background to check for changes 
      on the server, or upload changes that the user has made.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.init-synced-realm.m
         :language: swift

.. _ios-specify-download-behavior:

Download Changes Before Open
----------------------------

.. versionadded:: 10.15.0

When you open a synced {+realm+} with the Swift SDK, you can pass the 
``downloadBeforeOpen`` parameter to specify whether to download the 
changeset from your {+app+} before opening the {+realm+}. This parameter 
accepts a case from the ``OpenBehavior`` enum:

- ``never``: Immediately open the {+realm+} on the device. Download changes 
  in the background when the user has internet, but don't block opening
  the {+realm+}.
- ``always``: Check for changes every time you open the {+realm+}.
  Requires the user to have an active internet connection.
- ``once``: Download data before opening a {+realm+} for the first time, but
  open it without downloading changes on subsequent opens. This lets you 
  populate a {+realm+} with initial data, but enables offline-first 
  functionality on subsequent opens.

.. include:: /examples/generated/code/start/Sync.codeblock.specify-download-behavior.swift.code-block.rst

.. _ios-open-synced-realm-swiftui:

Open a Synced Realm with SwiftUI
--------------------------------

.. versionadded:: 10.12.0

SwiftUI apps can use RealmSwift property wrappers to open {+realms+} and 
populate views. These property wrappers provide a syntax that integrates 
with SwiftUI to let developers declare whether their clients should download 
changesets before opening {+realm+}s or open {+realm+}s with data on the 
devices.

Apps that require up-to-date information from the server, such as game apps 
with live leaderboards that the user can play on multiple devices, should 
:ref:`use @AsyncOpen to open a {+realm+}<swiftui-async-open-synced-realm>`. 
This only works if the user has a network connection when opening the {+realm+}, 
but ensures the user is never using the app with stale data.

Apps where it's not a problem for the user to work with potentially stale 
data, such as note-taking apps where users should be able to work with data 
on the device, should :ref:`use @AutoOpen to open the {+realm+}
<swiftui-auto-open-synced-realm>`. Like ``@AsyncOpen``, this attempts to 
download updates before opening the {+realm+}. However, if a network connection 
is not available, this method instead opens a {+realm+} with data on the 
device. This property wrapper enables developers to design offline-first 
capabilities into their apps.

.. _swiftui-async-open-synced-realm:

AsyncOpen
~~~~~~~~~

To download updates from your {+app+} before opening a {+realm+}, use the 
:swift-sdk:`@AsyncOpen <Structs/AsyncOpen.html>` property wrapper. This requires
the user to have a network connection.

.. code-block:: swift

   @AsyncOpen(appId: "app_id", partitionValue: <partition_value>) var asyncOpen

This SwiftUI property wrapper initiates ``Realm.asyncOpen()`` for the current 
user. The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. 

.. example::

   This example illustrates one way you might use ``@AsyncOpen`` to 
   open a {+realm+} in a view. First, check for a user, or log them in.
   Then, attempt to open the {+realm+}, switching on the ``AsyncOpenState``
   to display an appropriate view. When the {+realm+} opens successfully,
   inject it as an environment value to populate the view.

   .. code-block:: swift

      struct AsyncOpenView: View {

         // @AutoOpen attempts to connect to the server and download remote changes 
         // before the realm opens, which might take a moment.
         // We can use an empty string as the partitionValue here because we're 
         // injecting the user.id as an environment value from the LoginView.
         @AsyncOpen(appId: YOUR_REALM_APP_ID_HERE, partitionValue: "", timeout: 4000) var asyncOpen

         var body: some View {
            // Switch on the AsyncOpenState enum to update the view
            // based on AsyncOpen progress.
            switch asyncOpen {
            // Starting the Realm.asyncOpen process. 
            // Show a progress view.
            case .connecting:
               ProgressView()
            // Waiting for a user to be logged in before executing Realm.asyncOpen
            case .waitingForUser:
               ProgressView("Waiting for user to log in...")
            // The realm has been opened and is ready for use. 
            // Show the content view.
            case .open(let realm):
               ListView()
                  .environment(\.realm, realm)
            // The realm is currently being downloaded from the server.
            // Show a progress view.
            case .progress(let progress):
               ProgressView(progress)
            // Opening the Realm failed.
            // Show an error view.
            case .error(_):
               ErrorView()
            }
         }
      }

.. _swiftui-auto-open-synced-realm:

AutoOpen
~~~~~~~~

To open a synced {+realm+} regardless of whether the user has a network 
connection, use the :swift-sdk:`@AutoOpen <Structs/AutoOpen.html>` property 
wrapper. 

.. code-block:: swift

   @AutoOpen(appId: "app_id", partitionValue: <partition_value>) var autoOpen

This SwiftUI property wrapper attempts to initiate a ``Realm.asyncOpen()`` 
for the current user. If there is no internet connection, this property wrapper
instead returns an opened realm for the given ``appId`` and ``partitionValue``.

The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view.

.. example::

   This example illustrates one way you might use ``@AutoOpen`` to 
   open a {+realm+} in a view. First, check for a user, or log them in.
   Then, attempt to open the {+realm+}, switching on the ``AsyncOpenState``
   to display an appropriate view. When the {+realm+} opens successfully,
   inject it as an environment value to populate the view.

   .. code-block:: swift

      struct AutoOpenView: View {

         // @AutoOpen attempts to connect to the server and download remote changes 
         // before the realm opens, which might take a moment. However, if there is
         // no network connection, AutoOpen will open a realm on the device.
         // We can use an empty string as the partitionValue here because we're 
         // injecting the user.id as an environment value from the LoginView.
         @AutoOpen(appId: YOUR_REALM_APP_ID_HERE, partitionValue: "", timeout: 4000) var autoOpen

         var body: some View {
            // Switch on the AsyncOpenState enum to update the view
            // based on AutoOpen progress.
            switch autoOpen {
            // Starting the Realm.asyncOpen process. 
            // Show a progress view.
            case .connecting:
               ProgressView()
            // Waiting for a user to be logged in before executing Realm.asyncOpen
            case .waitingForUser:
               ProgressView("Waiting for user to log in...")
            // The realm has been opened and is ready for use. 
            // Show the content view.
            case .open(let realm):
               ListView()
                  .environment(\.realm, realm)
            // The realm is currently being downloaded from the server.
            // Show a progress view.
            case .progress(let progress):
               ProgressView(progress)
            // Opening the Realm failed.
            // Show an error view.
            case .error(_):
               ErrorView()
            }
         }
      }

.. _ios-swiftui-pass-environment-values:

Pass Environment Values
~~~~~~~~~~~~~~~~~~~~~~~

You can inject the ``.partitionValue`` environment value into the view where 
you are performing the ``@AsyncOpen`` or ``@AutoOpen`` to populate the 
``partitionValue``:

.. code-block:: swift

   AsyncOpenView()
      .environment(\.partitionValue, user.id)

You can inject the opened {+realm+} into your content view as an environment 
value. The property wrapper uses this {+realm+} to populate the view:

.. code-block:: swift

   ListView()
      .environment(\.realm, realm)

.. _ios-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

If you want your app to update data in the background (while the app is
minimized), iOS requires you to implement :apple:`Background App Refresh
<documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/updating_your_app_with_background_app_refresh>`.
Enabling Background App Refresh minimizes the time it takes for the user
to see the most recent data; without Background App Refresh, {+service+}
updates the data when the user launches the app, potentially resulting
in noticeable lag.

To use the {+realm+} while the device is locked, you must adjust the
file protection settings. See
:ref:`use-realm-when-the-device-is-locked`.

.. _ios-suspend-or-resume-a-sync-session:

Suspend or Resume a Sync Session
--------------------------------

Opening a synced {+realm+} starts a :swift-sdk:`SyncSession <Extensions/SyncSession.html>`
for that {+realm+}. You can suspend and resume the sync session on the {+realm+}.
Pausing a sync session only suspends that {+realm+}'s sync session. If you have
more than one open {+realm+}, suspend does not affect the sync sessions for 
other {+realms+}.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can suspend or resume a sync session using the
      :swift-sdk:`SyncSession <Extensions/SyncSession.html>` instance of
      a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can suspend or resume a sync session using the
      :objc-sdk:`RLMSyncSession <Classes/RLMSyncSession.html>` instance
      of a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.m
         :language: objectivec

.. |pause_func_name| replace:: ``.suspend()``
.. include:: /includes/note-details-about-pause.rst

.. _ios-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can add a progress notification using the synced {+realm+}'s
      SyncSession instance's
      :swift-sdk:`addProgressNotification(for:mode:block:)
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE23addProgressNotification3for4mode5blockSo011RLMProgressG5TokenCSgAbCE0F9DirectionO_AbCE0F4ModeOyAbCE0F0VctF>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can add a progress notification using the synced {+realm+}'s
      RLMSyncSession instance's
      :objc-sdk:`[--addProgressNotificationForDirection:mode:block:]
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(im)addProgressNotificationForDirection:mode:block:>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.m
         :language: objectivec


.. _ios-check-network-connection:

Check the Network Connection
----------------------------

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't
   need to check the current network connection state. That said, the
   ``connectionState`` property is available if your app calls for some
   indication of connection state.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      To check the connection state, you can read the synced {+realm+}'s
      SyncSession instance's :swift-sdk:`connectionState
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE15ConnectionStatea>`
      property directly. 

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO or even Combine.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To check the connection state, you can read the synced {+realm+}'s
      RLMSyncSession instance's :objc-sdk:`connectionState
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(py)connectionState>`
      property directly.

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO. The following example
      demonstrates how to implement an observer class:

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection-setup.m
         :language: objectivec

      You can then attach an observer instance to the RLMSyncSession
      object. Be sure to remove the observer when finished.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.m
         :language: objectivec

.. _ios-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses {+sync+}, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Set an error handler on the :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` singleton. Set an error
      handler on the SyncManager singleton. When an error occurs, the iOS SDK
      calls the error handler with the error object and the :swift-sdk:`SyncSession
      <Structs/Realm.html#/s:10RealmSwift0A0V11syncSessionSo07RLMSyncD0CSgvp>` that the
      error occurred on.
      
      .. note::
   
         Realm's :swift-sdk:`SyncError <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>` conforms to :apple:`Swift's Error protocol <documentation/swift/error>`

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Set an error handler on the :objc-sdk:`RLMSyncManager
      <objc/latest/Classes/RLMSyncManager.html>` singleton. When an error
      occurs, the iOS SDK calls the error handler with the error object and the
      :objc-sdk:`RLMSyncSession <objc/latest/Classes/RLMSyncSession.html>` that
      the error occurred on.

      .. note::
   
         Realm represents sync errors through :objc-sdk:`NSError <Categories/NSError%28RLMSync%29.html>` objects whose domain is
         :objc-sdk:`RLMSyncErrorDomain <Constants.html#/c:@RLMSyncErrorDomain>`. To learn more about the error codes, check out
         the definitions of :objc-sdk:`RLMSyncError <Enums/RLMSyncError.html>` and :objc-sdk:`RLMSyncAuthError <Enums/RLMSyncAuthError.html>`.

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.m
         :language: objectivec


.. _ios-delete-a-client-realm-file:

Delete a Client Realm File
--------------------------

In some cases, you may want to completely delete a realm file from disk.

Realm avoids copying data into memory except when absolutely required.
As a result, all objects managed by a realm have references to the file
on disk. Before you can safely delete the file, you must ensure the
deallocation of these objects:

- All objects read from or added to the realm
- All List and Results objects
- All ThreadSafeReference objects
- The realm itself

In practice, there are two safe times to delete the realm file:

1. On application startup before ever opening the realm.
#. After only having opened the realm within an explicit ``autorelease`` pool, which ensures deallocation of all of objects within it.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the
      :swift-sdk:`Realm.deleteFiles(for:)
      <Structs/Realm.html#/s:10RealmSwift0A0V11deleteFiles3forSbAC13ConfigurationV_tKFZ>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the :objc-sdk:`+[RLMRealm
      deleteFilesForConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)deleteFilesForConfiguration:error:>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.m
         :language: objectivec

.. tip::

   To perform a **client reset**, see :ref:`ios-client-resets`.

.. _ios-set-the-client-log-level:

Set the Client Log Level
------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can set the {+sync+} client log level on the
      :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` instance on your
      :swift-sdk:`App <Extensions/App.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can set the {+sync+} client log level on the
      :objc-sdk:`RLMSyncManager <Classes/RLMSyncManager.html>` instance
      on your :objc-sdk:`RLMApp <Classes/RLMApp.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.m
         :language: objectivec

.. tip::

   See :objc-sdk:`RLMSyncLogLevel <Enums/RLMSyncLogLevel.html>` for a
   description of each available log level. Note that more logging can
   negatively affect performance.

.. include:: /includes/tip-sync-log-levels.rst
