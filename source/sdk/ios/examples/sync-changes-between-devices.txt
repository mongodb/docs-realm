.. _ios-sync-changes-between-devices:

======================================
Sync Changes Between Devices - iOS SDK
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-open-a-synced-realm:

Open a Synced Realm
-------------------

When you use {+sync+}, you can open a {+realm+} in two ways: 

- Open the {+realm+} file that is on the device synchronously, using whatever
  data currently exists in the file. Updates will sync in the background, but
  the user can begin viewing and working with the data right away.
- Asynchronously download an up-to-date {+realm+} from the server. Your app 
  might display a loading or other UI element while the {+realm+} downloads. 
  The user can't view or work with the data until download completes.

For best practices and common patterns around which method to use, see: 
:ref:`Decide How to Open the Realm <init-vs-async-open>`.

.. important::

   {+sync+} does not currently support watchOS.

Open a Realm Synchronously
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      You can open the realm synchronously with the
      :swift-sdk:`Realm() <Structs/Realm.html>` initializers. This opens 
      the {+realm+} immediately, before downloading changesets from the server.
      This works if the device is offline, but may lead to temporary data
      inconsistencies while your app downloads any new remote data. The 
      {+realm+} will update from the server in the background.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm-synchronously.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can open the realm synchronously with the
      :objc-sdk:`+[RLMRealm realmWithConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)realmWithConfiguration:error:>`
      initializers. This opens the {+realm+} immediately, before downloading 
      changesets from the server. This works if the device is offline, but 
      may lead to temporary data inconsistencies while your app downloads 
      any new remote data. The {+realm+} will update from the server in the 
      background.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm-synchronously.m
         :language: objectivec

Log In and Download a Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To open a synced {+realm+} asynchronously, pass the logged-in user's
      :swift-sdk:`Configuration <Structs/Realm/Configuration.html>` object
      with the desired :ref:`partition <partitioning>` value to
      :swift-sdk:`Realm.asyncOpen(configuration:)
      <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`:

      If this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
      downloads the entire remote {+realm+} before opening the file on device. 
      If a {+realm+} is already present on the device, ``asyncOpen`` downloads 
      only the latest changes since the {+realm+} last synced with the {+app+}.
      
      A common pattern is to use ``asyncOpen`` during a login flow, but use 
      ``init`` to open a {+realm+} on subsequent opens.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To open a synced {+realm+} asynchronously, pass the logged-in user's
      :objc-sdk:`RLMRealmConfiguration
      <Classes/RLMRealmConfiguration.html>` object with the desired
      :ref:`partition <partitioning>` value to :objc-sdk:`+[RLMRealm
      asyncOpenWithConfiguration:callbackQueue:callback]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)asyncOpenWithConfiguration:callbackQueue:callback:>`:

      If this is the first time opening the {+realm+} on the device, ``asyncOpen`` 
      downloads the entire remote {+realm+} before opening the file on device. 
      If a {+realm+} is already present on the device, ``asyncOpen`` downloads 
      only the latest changes since the {+realm+} last synced with the {+app+}.
      
      A common pattern is to use ``asyncOpen`` during a login 
      flow, but use ``init`` to open a {+realm+} on subsequent opens.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.open-synced-realm.m
         :language: objectivec

.. _init-vs-async-open:

Decide How to Open the Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When choosing between ``init`` and ``asyncOpen`` to open the {+realm+}, 
consider these factors:
 
- When you use ``asyncOpen``, the app attempts to download an up-to-date 
  {+realm+} before opening it. The user must wait to access the data and 
  interact with the app. After this download completes, the user has the 
  most current version of the data.

- When you open a {+realm+} with ``init``, the file opens immediately. 
  The app contains stale data - whatever was available the last time the 
  file was open. The user can access that data and interact with the app 
  right away, while updated data syncs in the background.

Which method to choose depends on how important it is for your app to have 
the most current version of data. 

Consider the example of a note-taking app. You might decide it's most 
important for your user to be able to quickly jot down a note. The user 
shouldn't have to wait while downloading changes that a family member made 
to a shared note. In this case, opening a {+realm+} with ``init`` gets the 
user to the UI right away.

In a game, though, it might be most important for a user to have current 
data. Say a user plays the game on both an iPad and an iPhone. The user 
progresses three levels on the iPad. Later, the user opens the game on an 
iPhone. In this case, ``asyncOpen`` is a better way to open the {+realm+}. 
Loading with stale data might get the user into the game faster, but three 
levels behind.

A common pattern is to open a {+realm+} with ``asyncOpen`` in the login flow, 
and then use ``init`` for subsequent opens. If you want users to only interact 
with the most up-to-date version of your data, you can exclusively use 
``asyncOpen``. This incurs the cost of additional loading time and prevents 
users from opening a realm while offline.

.. tip::

   When you use ``asyncOpen``, you should first :ref:`check for a network connection 
   <ios-check-network-connection>`. If the app is offline, ``asyncOpen``
   leaves your app waiting forever.


.. _ios-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

If you want your app to update data in the background (while the app is
minimized), iOS requires you to implement :apple:`Background App Refresh
<documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/updating_your_app_with_background_app_refresh>`.
Enabling Background App Refresh minimizes the time it takes for the user
to see the most recent data; without Background App Refresh, {+service+}
updates the data when the user launches the app, potentially resulting
in noticeable lag.

To use the {+realm+} while the device is locked, you must adjust the
file protection settings. See
:ref:`use-realm-when-the-device-is-locked`.

.. _ios-suspend-or-resume-a-sync-session:

Suspend or Resume a Sync Session
--------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can suspend or resume a sync session using the
      :swift-sdk:`SyncSession <Extensions/SyncSession.html>` instance of
      a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can suspend or resume a sync session using the
      :objc-sdk:`RLMSyncSession <Classes/RLMSyncSession.html>` instance
      of a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.m
         :language: objectivec


.. _ios-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can add a progress notification using the synced {+realm+}'s
      SyncSession instance's
      :swift-sdk:`addProgressNotification(for:mode:block:)
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE23addProgressNotification3for4mode5blockSo011RLMProgressG5TokenCSgAbCE0F9DirectionO_AbCE0F4ModeOyAbCE0F0VctF>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can add a progress notification using the synced {+realm+}'s
      RLMSyncSession instance's
      :objc-sdk:`[--addProgressNotificationForDirection:mode:block:]
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(im)addProgressNotificationForDirection:mode:block:>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.m
         :language: objectivec


.. _ios-check-network-connection:

Check the Network Connection
----------------------------

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't
   need to check the current network connection state. That said, the
   ``connectionState`` property is available if your app calls for some
   indication of connection state.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      To check the connection state, you can read the synced {+realm+}'s
      SyncSession instance's :swift-sdk:`connectionState
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE15ConnectionStatea>`
      property directly. 

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO or even Combine.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To check the connection state, you can read the synced {+realm+}'s
      RLMSyncSession instance's :objc-sdk:`connectionState
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(py)connectionState>`
      property directly.

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO. The following example
      demonstrates how to implement an observer class:

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection-setup.m
         :language: objectivec

      You can then attach an observer instance to the RLMSyncSession
      object. Be sure to remove the observer when finished.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.m
         :language: objectivec

.. _ios-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses {+sync+}, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Set an error handler on the :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` singleton. Set an error
      handler on the SyncManager singleton. When an error occurs, the iOS SDK
      calls the error handler with the error object and the :swift-sdk:`SyncSession
      <Structs/Realm.html#/s:10RealmSwift0A0V11syncSessionSo07RLMSyncD0CSgvp>` that the
      error occurred on.
      
      .. note::
   
         Realm's :swift-sdk:`SyncError <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>` conforms to :apple:`Swift's Error protocol <documentation/swift/error>`

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Set an error handler on the :objc-sdk:`RLMSyncManager
      <objc/latest/Classes/RLMSyncManager.html>` singleton. When an error
      occurs, the iOS SDK calls the error handler with the error object and the
      :objc-sdk:`RLMSyncSession <objc/latest/Classes/RLMSyncSession.html>` that
      the error occurred on.

      .. note::
   
         Realm represents sync errors through :objc-sdk:`NSError <Categories/NSError%28RLMSync%29.html>` objects whose domain is
         :objc-sdk:`RLMSyncErrorDomain <Constants.html#/c:@RLMSyncErrorDomain>`. To learn more about the error codes, check out
         the definitions of :objc-sdk:`RLMSyncError <Enums/RLMSyncError.html>` and :objc-sdk:`RLMSyncAuthError <Enums/RLMSyncAuthError.html>`.

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.m
         :language: objectivec


.. _ios-delete-a-client-realm-file:

Delete a Client Realm File
--------------------------

In some cases, you may want to completely delete a realm file from disk.

Realm avoids copying data into memory except when absolutely required.
As a result, all objects managed by a realm have references to the file
on disk. Before you can safely delete the file, you must ensure the
deallocation of these objects:

- All objects read from or added to the realm
- All List and Results objects
- All ThreadSafeReference objects
- The realm itself

In practice, there are two safe times to delete the realm file:

1. On application startup before ever opening the realm.
#. After only having opened the realm within an explicit ``autorelease`` pool, which ensures deallocation of all of objects within it.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the
      :swift-sdk:`Realm.deleteFiles(for:)
      <Structs/Realm.html#/s:10RealmSwift0A0V11deleteFiles3forSbAC13ConfigurationV_tKFZ>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the :objc-sdk:`+[RLMRealm
      deleteFilesForConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)deleteFilesForConfiguration:error:>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.m
         :language: objectivec

.. tip::

   To perform a **client reset**, see :ref:`ios-client-resets`.

.. _ios-set-the-client-log-level:

Set the Client Log Level
------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can set the {+sync+} client log level on the
      :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` instance on your
      :swift-sdk:`App <Extensions/App.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can set the {+sync+} client log level on the
      :objc-sdk:`RLMSyncManager <Classes/RLMSyncManager.html>` instance
      on your :objc-sdk:`RLMApp <Classes/RLMApp.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.m
         :language: objectivec

.. tip::

   See :objc-sdk:`RLMSyncLogLevel <Enums/RLMSyncLogLevel.html>` for a
   description of each available log level. Note that more logging can
   negatively affect performance.

.. include:: /includes/tip-sync-log-levels.rst
