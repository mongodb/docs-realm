.. _node-relationships-and-embedded-objects:

==============================================
Relationships & Embedded Objects - Node.js SDK
==============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-to-one-relationship:

To-One Relationship
-------------------

A **to-one** relationship means that an object is related to no more than 
one other object in an :ref:`object schema <node-object-schemas>`. 
To define a to-one relationship, specify the property type as the related
Realm object type.


.. example::

   An application could use the following object schemas to indicate
   that a Person may own a single Dog:
   
 
   .. literalinclude:: /examples/Relationships/ToOne/ToOne.js
      :language: javascript
      :emphasize-lines: 6

.. _node-to-many-relationship:

To-Many Relationship
--------------------

A **to-many** relationship means that an object is related in a specific
way to multiple objects. 
To define a to-many relationship, specify a property where the type is a list
or array of the related Realm object type in its
:ref:`object schema <node-object-schemas>`.


.. example::
   
   An application could use the following object schemas to indicate
   that a Person may own multiple Dogs:
   
   .. literalinclude:: /examples/Relationships/ToMany/ToMany.js
      :language: javascript
      :emphasize-lines: 6

.. _node-inverse-relationship:

Inverse Relationship
--------------------

An inverse relationship links an object back to any other objects that refer
to it in a defined to-one or to-many relationship.
Relationship definitions are unidirectional by default.
You must explicitly define a property in the object's model as an inverse relationship.

For example, the to-many relationship "User has many Tasks" does not automatically
create the inverse relationship "Task belongs to User".
If you don't specify the inverse relationship in the object model,
you need to run a separate query to look up the user assigned to a task.

To define an inverse relationship, define a ``linkingObjects`` property in your
object model. ``linkingObjects`` specifies the object type and
property name of the relationship that it inverts.

You cannot manually set the value of an inverse relationship property.
Realm Database automatically updates implicit relationships whenever 
you add or remove a related object.

.. example::
   
   An application could use the following object schemas to indicate: 
   
   #. A User may be assigned many Tasks. 
   #. Each Task should automatically keep track of which User it's assigned to.
   
   The User object's tasks property is defined as a to-many relationship with Task objects.
   It contains all of a given user's assigned tasks. 
     
   The Task object's assignee property inverts this relationship.
   Assignee automatically updates to refer back to any User object that contains
   the Task in its tasks property.
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.js
           :language: javascript
           :emphasize-lines: 8, 19-23
     
     .. tab::
         :tabid: typescript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.ts
           :language: javascript
           :emphasize-lines: 5, 14, 23, 32-36

.. _node-inverse-relationship-dynamically:

Dynamically Obtain an Inversely Linked Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can dynamically retrieve an object with an inverse relationship without
defining a ``linkingObjects`` type in its schema. Remove the
``linkingObjects`` type from your schema, so your schemas look like a standard
**to-many** relationship. When you need to retrieve the linked object, call the
:js-sdk:`Realm.Object.linkingObjects() <Realm.Object.html#linkingObjects>`
query.

.. example::
   
   In the following continuation from the inverse relationship example, we have removed the
   ``assignee`` field with type 'linkingObjects' from the Task schema. An application developer
   creates several users and task objects, and the application pushes the newly created tasks into a 
   user's task field. 
   
   To find the user who owns a specific task object, the developer calls the
   ``task.linkingObjects()`` method and passes the "User" class name and "tasks" field as parameters. 

   .. tabs-realm-languages::
      
      .. tab::
          :tabid: javascript
           
          .. literalinclude:: /examples/generated/node/relationships-and-embedded-objects.snippet.obtain-inverse-relationship-dynamically.js
            :language: javascript
      
      .. tab::
          :tabid: typescript
           
          .. literalinclude:: /examples/generated/node/relationships-and-embedded-objects.snippet.obtain-inverse-relationship-dynamically.ts
            :language: javascript
          
.. _node-embedded-objects:

Embedded Objects
----------------

An embedded object is a special type of :ref:`Realm object <node-object-schemas>`
that models complex data. 
They also map more naturally to the :manual:`MongoDB document model </core/data-modeling-introduction/>`.
Embedded objects are similar to :ref:`relationships <node-client-relationships>`,
but provide additional constraints.

Realm treats each embedded object as nested data inside of a parent object.
An embedded object inherits the lifecycle of its parent object.
It cannot exist as an independent Realm object.
This means that embedded objects cannot have a primary key.
Realm also automatically deletes embedded objects if their parent object is deleted.


.. tip:: Embedded object types are reusable and composable

   You can use the same embedded object type in multiple parent object types.
   You can also embed objects inside of other embedded objects.
   You can even recursively reference an embedded object type as
   an optional property in its own definition.

Realm Object Models
~~~~~~~~~~~~~~~~~~~

To specify that a Realm object model defines an embedded object, set ``embedded``
to ``true``. Reference an embedded object type from parent object types 
as you would define a relationship:

.. code-block:: javascript
   :emphasize-lines: 3, 18, 28
   
   const AddressSchema = {
     name: "Address",
     embedded: true, // default: false
     properties: {
       street: "string?",
       city: "string?",
       country: "string?",
       postalCode: "string?",
     },
   };
   
   const ContactSchema = {
     name: "Contact",
     primaryKey: "_id",
     properties: {
       _id: "objectId",
       name: "string",
       address: "Address", // Embed a single object
     },
   };
   
   const BusinessSchema = {
     name: "Business",
     primaryKey: "_id",
     properties: {
       _id: "objectId",
       name: "string",
       addresses: { type: "list", objectType: "Address" }, // Embed an array of objects
     },
   };

JSON Schema
~~~~~~~~~~~

.. include:: /includes/embedded-object-json-schema.rst
