.. _node-data-types-counters:

======================
Counters - Node.js SDK
======================

.. meta:: 
  :description: Learn how to implement and update counters in the Atlas Device SDK for Node.js.
  :keywords: code example

.. facet::
  :name: programming_language
  :values: javascript/typescript

.. facet::
  :name: genre
  :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 12.10.0

Atlas Device SDK for Node.js offers a :js-sdk: `Counter <classes/Realm.Types.Counter.html>`
class you can use as a logical counter when working with Synchronized Realms. Traditionally,
you would store a counter value and manually read, increment, set it. However, multiple clients
attempting to update the counter could result in an inaccurate underlying value across clients.
Consider the following scenario:

- A Realm object has a ``count`` property that stores an ``int``. The value is currently set
  to ``0``.
- Devices A and B both read the ``count`` value as ``0``.
- To increment the count, both devices add ``1`` to the read value and set the ``count`` to
  this new value.
- The underlying value of the ``count`` is now ``1``, though it should be ``2`` to reflect
  both devices' increments.

The ``Counter`` class makes it possible to sync these updates so the ``counter`` converges to
the same underlying value across all clients.

The SDK's :js-sdk:`counter <classes/Realm.Types.Counter.html>` is a presentation data type,
with an underlying type of ``int``. This means no migration is necessary when changing an
``int`` type to a ``counter``.

Counters cannot be used as:

- Mixed values
- Primary keys
- Elements in a collection

Define a Counter Property
-------------------------

To use the ``Counter`` class, declare a property in your :js-sdk: `Realm Object <classes/Realm.Object.html>`as type ``Counter``. 

You can optionally declare this property as nullable by making it optional and passing both 
``Counter`` and ``null`` as types. With a nullable counter, you can set the counter property
within your Realm Object to ``null`` as needed.

The ``Counter`` field is initialized by using either:

- Object notation

  - ``{ type: "int", presentation: "counter" }``
  - ``{ type: "int", presentation: "counter", optional: true }``

- Shorthand

  - ``"counter"``
  - ``"counter?"``

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. literalinclude:: /examples/generated/node/data-types.test.snippet.declare-counter-schema.ts 
          :language: typescript
    
    .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/data-types.test.snippet.declare-counter-schema.js
          :language: javascript

Create and Update a Counter
---------------------------

To initialize a counter, use the ``realm.create()`` method and pass the desired :js-sdk:
`Realm Object Schema <>`and initial values for the properties.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. literalinclude:: /examples/generated/node/data-types.test.snippet.initialize-counter.ts 
          :language: typescript
    
    .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/data-types.test.snippet.initialize-counter.js
          :language: javascript

You can then use the following methods to modify the counter value:

- ``increment()`` and ``decrement()`` update the underlying value by a specified number.
- ``set()`` reassigns the counter to a specified value.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. literalinclude:: /examples/generated/node/data-types.test.snippet.update-counter.ts 
          :language: typescript
    
    .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/data-types.test.snippet.update-counter.js
          :language: javascript

.. warning:: Counter Resets

   Use caution when using ``set()``, as it overwrites any prior calls to ``increment()`` and
   ``decrement()``. Depending on the order of operations, this can result in the counter
   converging on a different value. To avoid inaccurate counter values across clients, we
   recommend not mixing ``set()`` with ``increment()`` and ``decrement()``.

To update a nullable counter (either *to* or *from* a ``null`` value), you must use
``realm.create()`` with an :js-sdk:`UpdateMode <enums/Realm.UpdateMode.html#Modified>`
specified. Rather than updating the underlying counter value, this sets the counter
property either to null or to a new counter.

``UpdateMode`` updates any existing Counter object with a matching primary key.

- ``UpdateMode.All`` updates all properties provided.
- ``UpdateMode.Modified`` updates only modified properties.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. literalinclude:: /examples/generated/node/data-types.test.snippet.null-updating.ts 
          :language: typescript
    
    .. tab::
      :tabid: javascript

      .. literalinclude::  /examples/generated/node/data-types.test.snippet.null-updating.js
          :language: javascript

Query Counter Values
--------------------

You can query counter properties like other property types. However, to query by the 
underlying counter value, you must use ``counter.value`` as a placeholder value. In the
following example, we want to find all objects with a counter value greater than or equal to
that of the specified counter.

.. tabs-realm-languages::

    .. tab::
      :tabid: typescript
    
      .. literalinclude:: /examples/generated/node/data-types.test.snippet.filtering-with-counter.ts 
          :language: typescript
    
    .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/data-types.test.snippet.filtering-with-counter.js
          :language: javascript

For more information on querying with the SDK, refer to :ref:`realm-query-language`. 
