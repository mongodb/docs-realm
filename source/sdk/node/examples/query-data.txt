.. _node-client-query-engine:
.. _node-query-data:

========================
Query Data - Node.js SDK
========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

To filter data in your Realms, construct queries with Realm Query Language.
For more information about syntax, usage and limitations,
refer to the :ref:`Realm Query Language reference <realm-query-language>`.

Examples on This Page
---------------------

The examples in this page use a simple data set for a
task list app. The two Realm object types are ``Project``
and ``Task``. A ``Task`` has a name, assignee's name, and
completed flag. There is also an arbitrary number for
priority (higher is more important) and a count of
minutes spent working on it. A ``Project`` has zero or more
``Tasks``.

See the schema for these two classes, ``Project`` and
``Task``:

.. literalinclude:: /examples/Schemas/ProjectAndTask.js
  :language: javascript

Construct a Query
-----------------

To filter data, pass a query made with Realm Query Language to
:js-sdk:`Realm.Results.filtered() <Realm.Results.html#filtered>`

.. literalinclude:: /examples/generated/realm-query-language/realm-query-language.snippet.simple-query.js
   :language: js
   :emphasize-lines: 3

Operators
---------

There are several types of operators available to filter a
:ref:`Realm collection <node-results-collections>`.
Filters work by **evaluating** an operator expression for
every object in the collection being
filtered. If the expression resolves to ``true``, Realm
Database includes the object in the results collection.

An **expression** consists of one of the following:

- The name of a property of the object currently being evaluated.
- An operator and up to two argument expression(s).
- A literal string, number, or date.

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The most straightforward operation in a search is to compare
values. Realm Query Language has standard comparison operators like ``==``,
``>``, ``>=``, ``in``, ``<``, ``<=``, and ``!=``.

For complete documentation on comparison operators,
refer to the :ref:`Realm Query Language comparison operator reference
<rql-comparison-operators>`.


The following example uses the query engine's comparison operators to:

- Find high priority tasks by comparing the value of the ``priority``
  property value with a threshold number, above which priority can be considered high.
- Find just-started or short-running tasks by seeing if the ``progressMinutes``
  property falls within a certain range.
- Find unassigned tasks by finding tasks where the ``assignee`` property
  is equal to ``null``.
- Find tasks assigned to specific teammates Ali or Jamie by seeing if
  the ``assignee`` property is in a list of names.

.. literalinclude:: /examples/Query/Comparison.js
  :language: javascript

Logical Operators
~~~~~~~~~~~~~~~~~

Create compound predicates using logical operators. Realm Query Language
has standard logical operators like ``AND``, ``OR``, and ``NOT``.

For complete documentation on logical operators,
refer to the :ref:`Realm Query Language logical operator reference
<rql-logical-operators>`.

The following example uses Realm Query Language's logical operators to find
all of Ali's completed tasks. We find all tasks
where the ``assignee`` property value is equal to 'Ali' AND
the ``isComplete`` property value is ``true``.

.. literalinclude:: /examples/Query/Logical.js
  :language: javascript

String Operators
~~~~~~~~~~~~~~~~

You can compare string values using string operators like ``==``, ``beginsWith``,
``contains``, and ``endsWith``. You can also use the ``LIKE`` operator
to search with regex-like wildcards.

For complete documentation on string operators,
refer to the :ref:`Realm Query Language string operator reference
<rql-string-operators>`.

The following example uses Realm Query Language's string operators to find
projects with a name starting with the letter 'e' and
projects with names that contain 'ie'.

.. literalinclude:: /examples/Query/String.js
  :language: javascript

Aggregate Operators
~~~~~~~~~~~~~~~~~~~

Traverse a :ref:`collection <node-results-collections>` and reduce it
to a single value with an aggregate operator.

For complete documentation on aggregate operators,
refer to the :ref:`Realm Query Language aggregate operator reference
<rql-aggregate-operators>`.


The following examples uses aggregate operators to show different facets of
the data:

- ``@avg`` to show projects with average tasks priority above 5.
- ``@sum`` to show long running projects.

.. literalinclude:: /examples/Query/Accumulator.js
  :language: javascript


Collection Operators
~~~~~~~~~~~~~~~~~~~~

A **collection operator** uses rules to determine whether
to pass each input collection object to the output
collection by applying a given predicate to every element of
a given list property of the object.

For complete documentation on collection operators,
refer to the :ref:`Realm Query Language collection operator reference
<rql-collection-operators>`.

The following examples uses Realm Query Language's collection operators to find:

- ``ALL`` for projects with no complete tasks.
- ``ANY`` for projects with any top priority tasks.

.. literalinclude:: /examples/Query/Set.js
  :language: javascript


Summary
-------

- Use :js-sdk:`Realm.Results.filtered <Realm.Results.html#filtered>` to filter
  data in your realm using Realm Query Language.
- For a detailed explanation of Realm Query Language, refer to the
  :ref:`Realm Query Language reference <rql>`.
- There are several categories of **operators** available to filter results:
  - comparison
  - logical
  - string
  - aggregate
  - set

