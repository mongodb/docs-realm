.. _node-client-resets:

===============================
Reset a Client Realm - Node SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionchanged:: TODO: add notes about release specific

A **client reset error** is a scenario where a client realm cannot sync
data with the Atlas App Services backend. Clients in this state may continue to
run and save data locally but cannot send or receive sync changesets
until they perform a client reset.

You can handle client resets in your application using one of the
available **client reset modes**:

- TODO: document 2 new modes

- :ref:`Discard Unsynced Changes <node-discard-unsynced-changes>`:
  Restores the realm to a syncable state by discarding changes made
  since the last sync.

- :ref:`Manually Recover Unsynced Changes <node-manually-recover-unsynced-changes>`:
  Downloads a new copy of the realm, and moves the unsyncable realm
  to a backup. Migrate unsynced data from the backup copy of the
  realm to the new syncable copy.

To learn about the causes of and modes for handling client
resets, check out Device Sync :ref:`Client Resets in the App Services documentation <client-resets>`.

.. _node-automatic-vs-manual-client-reset:

Automatic vs. Manual Client Reset
---------------------------------

The Realm SDKs provide client reset modes
that automatically handle most client reset errors.

Automatic client reset modes restore your local realm file to a syncable state without
closing the realm or missing notifications.
The following client reset modes support automatic client resets:

- TODO: list all JS modes that support automatic

The differences between these modes are based on how they handle
changes on the device that have not yet synced to the backend.
Only ``"manual"`` mode does not perform an automatic client reset.

Choose ``JS_TODO.recoverUnsyncedChanges`` to handle most client reset
scenarios automatically. This attempts to recover unsynced changes when a
client reset occurs.

In some cases, you may want or need to :ref:`set a manual client reset handler
<node-manually-recover-unsynced-changes>`. You may want to do this if your app
requires specific client reset logic that can't be handled automatically.

.. _node-handle-schema-changes:

TODO: refactor section. this pulled pretty directly from swift. kinda confused what to do here. 

Handle Schema Changes
---------------------

:ref:`Client Recovery <enable-or-disable-recovery-mode>` is a feature that is
enabled by default when you :ref:`configure Device Sync <enable-sync>`. When
Client Recovery is enabled, Realm Database can automatically manage the
client reset process in most cases. When you make schema changes:

- The client can :ref:`recover unsynced changes <node-recover-unsynced-changes>`
  when there are no schema changes, or non-breaking schema changes.
- When you make breaking schema changes, the automatic client reset modes fall
  back to a manual error handler. You can set a :ref:`manual client
  reset error handler <node-client-reset-manual-fallback>` for this case.
  Automatic client recovery cannot occur when your app makes breaking
  schema changes.

For information on breaking vs. non-breaking schema changes, see
:ref:`breaking-change-quick-reference`.

Client Reset Modes
------------------

TODO: new mode 1
~~~~~~~~~~~~~~~~

TODO

TODO: new mode 2
~~~~~~~~~~~~~~~~

TODO

.. _node-discard-unsynced-changes:

Discard Unsynced Changes Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.11.0

The **discard unsynced changes** client reset strategy helps you perform
a client reset with minimal code and minimal disruption to your application
workflow. This strategy restores your local realm to a syncable state without
closing the realm or missing notifications.

This strategy comes with a downside: it permanently deletes all
local unsynced changes made since the last successful sync of the realm.
Do not use the "discard unsynced changes" strategy if your application
cannot lose data already written to the client realm file but not yet
synced to the backend.

The "discard unsynced changes" strategy can handle every kind of client
reset error *except* for client resets triggered by
:ref:`breaking schema changes <destructive-changes-synced-schema>`.
If your application experiences a breaking schema change, this strategy
falls back to a mode that mimics the "manually recover unsynced changes"
strategy.

To handle client resets with the "discard unsynced changes" strategy, 
pass a :js-sdk:`ClientResetConfiguration <Realm.App.Sync.html#~ClientResetConfiguration>`
to the ``clientReset`` field of your
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`. 
Include these properties in the ClientResetConfiguration: 

- ``mode``: Set to ``"discardLocal"``.
- ``clientResetBefore()``: Optional. Callback function invoked before the SDK executes this strategy,
  when the SDK receives a client reset error from the backend. 
  Provides a copy of the realm. 
- ``clientResetAfter()``: Optional. Callback function invoked after the SDK successfully
  executes this strategy. Provides instances of the realm 
  before and after the client reset.

The following example implements this strategy:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes.js
   :language: javascript


TODO: refactor this into the "Manual Client Reset Fallback" section

.. _node-discard-unsynced-changes-after-breaking-schema-changes:

Discard Unsynced Changes after Breaking Schema Changes
``````````````````````````````````````````````````````

.. include:: /includes/destructive-schema-change-app-update.rst

If your application experiences a breaking schema change, the "discard
unsynced changes" strategy cannot handle the resulting client reset
automatically. Instead, you must provide a manual client reset
implementation in the SyncConfiguration ``error()`` callback. The following
example demonstrates how you can manually handle this error case by
discarding all unsynced changes:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes-after-destructive-schema-changes.js
   :language: javascript

.. _node-manually-recover-unsynced-changes:

Manually Recovery Mode
~~~~~~~~~~~~~~~~~~~~~~

Manual recovery requires significant amounts of code, schema concessions,
and custom conflict resolution logic. To learn more about the **manually
recover unsynced changes** client reset strategy, see the
:ref:`Advanced Guide to Manual Client Reset Data Recovery
<node-advanced-manual-client-reset-data-recovery>`.


.. _node-manual-client-reset-fallback:

Manual Client Reset Fallback
----------------------------

TODO
