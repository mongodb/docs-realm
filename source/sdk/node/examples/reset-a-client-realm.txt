.. _node-client-resets:

==================================
Reset a Client Realm - Node.js SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionchanged:: TODO: add notes about release specific

A **client reset error** is a scenario where a client realm cannot sync
data with the Atlas App Services backend. Clients in this state may continue to
run and save data locally but cannot send or receive sync changesets
until they perform a client reset.

To learn about the causes of and modes for handling client
resets, check out Device Sync :ref:`Client Resets in the App Services documentation <client-resets>`.

.. _node-automatic-vs-manual-client-reset:

Client Reset Modes
------------------

You can handle client resets in your application using one of the
available **client reset modes**:

- :ref:`Recover Unsynced Changes mode <node-recover-unsynced-changes>`:
  When you choose this mode, the client attempts to recover unsynced changes.
  Choose this mode when you do not want to fall through to discard unsynced changes.
- :ref:`Recover or Discard Unsynced Changes mode <node-recover-discard-unsynced-changes>`:
  The client first attempts to recover changes that have not yet synced.
  If the client cannot recover unsynced  data, it falls through to
  discard unsynced changes but continues to automatically perform the client reset.
  Choose this mode when you want to enable automatic client
  recovery to fall back to discard unsynced changes.
- :ref:`Discard Unsynced Changes mode <node-discard-unsynced-changes>`:
  Restores the realm to a syncable state by discarding changes made
  since the last sync.
- :ref:`Manual Recovery mode <node-manually-recover-unsynced-changes>`:
  Downloads a new copy of the realm, and moves the unsyncable realm
  to a backup. Migrate unsynced data from the backup copy of the
  realm to the new syncable copy.

Automatic vs. Manual Client Reset
---------------------------------

The Realm SDKs provide client reset modes
that automatically handle most client reset errors.

Automatic client reset modes restore your local realm file to a syncable state without
closing the realm or missing notifications.
The following client reset modes support automatic client resets:

- Recover Unsynced Changes mode
- Recover or Discard Unsynced Changes mode
- Discard Unsynced Changes mode

The differences between these modes are based on how they handle
changes on the device that have not yet synced to the backend.
Only Manual Recovery mode does not perform an automatic client reset.

Choose Recover Unsynced Changes mode to handle most client reset
scenarios automatically. This attempts to recover unsynced changes when a
client reset occurs.

If your app requires specific client reset logic that can't be handled automatically,
you may want or need to :ref:`add a manual client reset handler <node-manually-recover-unsynced-changes>`
to the automatic client reset mode.

.. _node-client-reset-recovery:

Client Reset with Recovery
--------------------------

.. versionadded:: 10.23.0

Client Recovery is a feature that is enabled by default when you configure Device Sync.
When Client Recovery is enabled, Realm Database automatically manages the
client reset process in most cases. When you make schema changes the client
can recover unsynced changes when there are no schema changes, or non-breaking schema changes.

To use Client Recovery, you must use Recover Unsynced Changes or
Recover or Discard Unsynced Changes client reset mode.

.. include:: /includes/client-recovery-rules.rst

For more information about configuring Client Recovery, refer to
:ref:`Client Recovery <enable-or-disable-recovery-mode>` in the App Services documentation.

Client Recovery cannot occur when your app makes breaking schema changes.
A breaking change is a change that you can make in your server-side
schema that requires additional action to handle.
In this scenario, client reset with fall back to a manual error handler.
In the manual error handler, you can add a :ref:`manual client reset fallback <node-manual-client-reset-fallback>`.

For information on breaking vs. non-breaking schema changes, refer to
:ref:`breaking-change-quick-reference` in the App Services documentation.

.. _node-recover-unsynced-changes:

Recover Unsynced Changes Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you choose **Recover Unsynced Changes** mode,
the client attempts to recover unsynced changes with Client Recovery.
Choose this mode when you do not want to fall through to discard unsynced changes.

To handle client resets with the Discard Unsynced Changes mode,
pass a :js-sdk:`ClientResetConfiguration <Realm.App.Sync.html#~ClientResetConfiguration>`
to the ``clientReset`` field of your
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.
Include these properties in the ``ClientResetConfiguration``:

- ``mode``: Set to ``"recoverUnsyncedChanges"``.
- ``clientResetBefore()``: Optional. Callback function invoked before the SDK executes this mode,
  when the SDK receives a client reset error from the backend.
  Provides a copy of the realm.
- ``clientResetAfter()``: Optional. Callback function invoked after the SDK successfully
  executes this mode. Provides instances of the realm before and after the client reset.
- ``onFallback()``: Optional. Callback function which the SDK invokes
  only if the automatic recovery fails. For more information, refer to the
  :ref:`Manual Client Reset Fallback section <node-manual-client-reset-fallback>`.

The following example implements Recover Unsynced Changes mode:

TODO: literalinclude

.. _node-recover-discard-unsynced-changes:

Recover or Discard Unsynced Changes Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In **Recover or Discard Unsynced Changes** mode,
the client first attempts to recover changes that have not yet synced.
If the client cannot recover unsynced  data, it falls through to
discard unsynced changes but continues to automatically perform the client reset.
Choose this mode when you want to enable automatic client
recovery to fall back to discard unsynced changes.

To handle client resets with the Discard Unsynced Changes mode,
pass a :js-sdk:`ClientResetConfiguration <Realm.App.Sync.html#~ClientResetConfiguration>`
to the ``clientReset`` field of your
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.
Include these properties in the ``ClientResetConfiguration``:

- ``mode``: Set to ``"recoverOrDiscardUnsyncedChanges"``.
- ``clientResetBefore()``: Optional. Callback function invoked before the SDK executes this mode,
  when the SDK receives a client reset error from the backend.
  Provides a copy of the realm.
- ``clientResetAfter()``: Optional. Callback function invoked after the SDK successfully
  executes this mode. Provides instances of the realm before and after the client reset.
- ``onFallback()``: Optional. Callback function which the SDK invokes
  only if both the automatic recovery and and discarding changes fails.
  For more information, refer to the :ref:`Manual Client Reset Fallback section
  <node-manual-client-reset-fallback>`.

The following example implements Recover Unsynced Changes mode:

TODO: literalinclude

.. _node-manual-client-reset-fallback:

Manual Client Reset Fallback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO: refine copy here

If the client reset with recovery operation cannot complete automatically,
like when there are breaking schema changes, the client reset process falls through
to a manual error handler. This may occur in either of the client reset with recovery modes,
Recover Unsynced Changes and Recover or Discard Unsynced Changes.

You must provide a manual client reset implementation
in the ``SyncConfiguration.onFallback()`` callback.
The following example demonstrates how you can manually handle this error case by
discarding all unsynced changes:

TODO: literalinclude

.. _node-discard-unsynced-changes:

Discard Unsynced Changes Mode
-----------------------------

.. versionadded:: 10.11.0

.. versionchanged:: 10.23.0 Mode renamed from "discardLocal" to "discardUnsyncedChanges". Both currently work, but in a future version, "discardLocal" will be removed.

**Discard Unsynced Changes** mode  permanently deletes all
local unsynced changes made since the last successful sync.
You might use this mode when your app requires client recovery logic that is not
consistent with the :ref:`automatic Client Recovery <node-client-reset-recovery>`,
or when you don't want to recover unsynced data.

Do not use discard unsynced changes mode if your application cannot lose local
data that has not yet synced to the backend.

To handle client resets with the Discard Unsynced Changes mode,
pass a :js-sdk:`ClientResetConfiguration <Realm.App.Sync.html#~ClientResetConfiguration>`
to the ``clientReset`` field of your
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.
Include these properties in the ``ClientResetConfiguration``:

- ``mode``: Set to ``"discardLocal"``.
- ``clientResetBefore()``: Optional. Callback function invoked before the SDK executes this mode,
  when the SDK receives a client reset error from the backend.
  Provides a copy of the realm.
- ``clientResetAfter()``: Optional. Callback function invoked after the SDK successfully
  executes this mode. Provides instances of the realm
  before and after the client reset.

The following example implements Discard Unsynced Changes mode:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes.js
   :language: javascript

.. _node-discard-unsynced-changes-after-breaking-schema-changes:

Discard Unsynced Changes after Breaking Schema Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/destructive-schema-change-app-update.rst

If your application experiences a breaking schema change, the "discard
unsynced changes" strategy cannot handle the resulting client reset
automatically. Instead, you must provide a manual client reset
implementation in the SyncConfiguration ``error()`` callback. The following
example demonstrates how you can manually handle this error case by
discarding all unsynced changes:

.. literalinclude:: /examples/generated/node/client-reset.snippet.discard-unsynced-changes-after-destructive-schema-changes.js
   :language: javascript

.. note:: Discard with Recovery

   If you'd like to attempt to recover unsynced changes, but but discard
   any changes that cannot be recovered, refer to the
   :ref:`Recover or Discard Unsynced Changes Mode section <node-recover-discard-unsynced-changes>`.

.. _node-manually-recover-unsynced-changes:

Manual Recovery Mode
~~~~~~~~~~~~~~~~~~~~

Manual recovery requires significant amounts of code, schema concessions,
and custom conflict resolution logic. To learn more about the **manually
recover unsynced changes** client reset mode, see the
:ref:`Advanced Guide to Manual Client Reset Data Recovery
<node-advanced-manual-client-reset-data-recovery>`.
