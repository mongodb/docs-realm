.. _node-access-a-linked-mongodb-cluster:
.. _node-mongodb-data-access:
.. _node-mongodb-remote-access:

===============================
Access a Linked MongoDB Cluster
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. note:: Example Dataset

   The examples on this page use a MongoDB collection that describes inventory
   in a chain of plant stores. For more information on the collection schema and
   document contents, see :ref:`Example Data <node-mongodb-example-dataset>`.

.. _node-mongodb-connect:

Connect to a Linked Cluster
---------------------------

To access a linked cluster from your client application, pass the cluster name
to :js-sdk:`User.mongoClient() <Realm.User.html#mongoClient>`. This returns a
MongoDB service interface that you can use to access databases and collections
in the cluster.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.plants-collection-handle.js
         :language: javascript
   
   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.plants-collection-handle.ts
         :language: typescript

Read Operations
---------------

.. _node-find-a-single-document:
.. _node-mongodb-findOne:

Find a Single Document
~~~~~~~~~~~~~~~~~~~~~~

To find a single document, pass a query filter that matches the document to
:js-sdk:`collection.findOne() <Realm.MongoDBCollection.html#findOne>`. If you do
not pass a query filter, ``findOne()`` matches the first document it finds in
the collection.

The following snippet finds the document that describes "venus flytrap" plants in the
:ref:`collection of documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-a-single-document-result.ts
         :language: typescript
         :copyable: false

.. _node-find-multiple-documents:
.. _node-mongodb-findMany:

Find Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~

To find multiple documents, pass a query filter that matches the documents to
:js-sdk:`collection.find() <Realm.MongoDBCollection.html#find>`. If you do not
pass a query filter, ``find()`` matches all documents in the collection.

The following snippet finds all documents that describe perennial plants in the
:ref:`collection of documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.find-multiple-documents-result.ts
         :language: typescript
         :copyable: false

.. _node-count-documents:
.. _node-mongodb-count:

Count Documents
~~~~~~~~~~~~~~~

To count documents, pass a query filter that matches the documents to
:js-sdk:`collection.count() <Realm.MongoDBCollection.html#count>`. If you do not
pass a query filter, ``count()`` counts all documents in the collection.

The following snippet counts the number of documents in a :ref:`collection of
documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.count-documents-in-the-collection-result.ts
         :language: typescript
         :copyable: false

Write Operations
----------------

.. _node-insert-a-single-document:
.. _node-mongodb-insertOne:

Insert a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

To insert a single document, pass it to :js-sdk:`collection.insertOne()
<Realm.MongoDBCollection.html#insertOne>`.

The following snippet inserts a single document describing a "lily of the
valley" plant into a :ref:`collection of documents that describe plants for sale
in a group of stores <node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-a-single-document-result.ts
         :language: typescript
         :copyable: false

.. _node-insert-multiple-documents:
.. _node-mongodb-insertMany:

Insert Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To insert multiple documents at the same time, pass them as an array to
:js-sdk:`collection.insertMany() <Realm.MongoDBCollection.html#insertMany>`.

The following snippet inserts three documents describing plants into a
:ref:`collection of documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.insert-multiple-documents-result.ts
         :language: typescript
         :copyable: false

.. _node-update-a-single-document:
.. _node-mongodb-updateOne:

Update a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

To update a single document, pass a query filter that matches the document and
an update document to :js-sdk:`collection.updateOne()
<Realm.MongoDBCollection.html#updateOne>`.

The following snippet updates a single document in a :ref:`collection of
documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`. This operation queries for a document where the
``name`` field contains the value "petunia" and changes the value of the first
matched document's ``sunlight`` field to "partial":

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-a-single-document-result.ts
         :language: typescript
         :copyable: false

.. _node-update-multiple-documents:
.. _node-mongodb-updateMany:

Update Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To update multiple documents simultaneously, pass a query filter that matches
the documents and an update description to :js-sdk:`collection.updateMany()
<Realm.MongoDBCollection.html#updateMany>`.

The following snippet updates multiple documents in a :ref:`collection of
documents that describe plants for sale in a group of stores
<node-mongodb-example-dataset>`. This operation queries for documents where the
``_partition`` field contains the value "Store 47" and changes the value of the
``_partition`` field of each matching document to "Store 51":

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.update-multiple-documents-result.ts
         :language: typescript
         :copyable: false

.. _node-upsert-documents:
.. _node-mongodb-upsert:

Upsert Documents
~~~~~~~~~~~~~~~~

To upsert a document, set the ``upsert`` option to ``true`` in your update
operation. If the operation's query filter does not match any document in the
collection, an upsert automatically inserts a single new document into the
collection that matches the provided query document with the update applied to
it.

The following snippet updates a document in a :ref:`collection of documents that
describe plants for sale in a group of stores <node-mongodb-example-dataset>`
with an upsert operation. The query doesn't match any existing documents, so
MongoDB automatically creates a new one.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.upsert-documents-result.ts
         :language: typescript
         :copyable: false

.. _node-delete-a-single-document:
.. _node-mongodb-deleteOne:

Delete a Single Document
~~~~~~~~~~~~~~~~~~~~~~~~

To delete a single document from a collection, pass a query filter that matches
the document to :js-sdk:`collection.deleteOne()
<Realm.MongoDBCollection.html#deleteOne>`. If you do not pass a query filter or
if the query filter matches multiple documents, then the operation deletes the
first document it finds.

The following snippet deletes one document in a :ref:`collection of documents
that describe plants for sale in a group of stores
<android-mongodb-example-dataset>`. This operation queries for a document where
the ``color`` field has a value of "green" and deletes the first document that
matches the query:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-a-single-document-result.ts
         :language: typescript
         :copyable: false

.. _node-delete-multiple-documents:
.. _node-mongodb-deleteMany:

Delete Multiple Documents
~~~~~~~~~~~~~~~~~~~~~~~~~

To delete multiple document from a collection, pass a query filter that matches
the documents to :js-sdk:`collection.deleteMany()
<Realm.MongoDBCollection.html#deleteMany>`. If you do not pass a query filter,
``deleteMany()`` deletes all documents in the collection.

The following snippet deletes all documents for plants that are in "Store 51" in
a :ref:`collection of documents that describe plants for sale in a group of
stores <node-mongodb-example-dataset>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.delete-multiple-documents-result.ts
         :language: typescript
         :copyable: false

Real-time Change Notifications
------------------------------

You can call :js-sdk:`collection.watch() <Realm.MongoDBCollection.html#watch>`
to subscribe to real-time change notifications that MongoDB emits whenever a
document in the collection is added, modified, or deleted. Each notification
specifies a document that changed, how it changed, and the full document after
the operation that caused the event.

.. note::

   ``collection.watch()`` returns an :mdn:`async generator
   <Web/JavaScript/Reference/Statements/for-await...of#Iterating_over_async_generators>`
   that allows you to asynchronously pull :manual:`change events
   </reference/change-events/>` for operations as they occur.

.. _node-watch-for-all-changes-in-a-collection:
.. _node-mongodb-watch-a-collection:

Watch for All Changes in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for all changes in a collection, call :js-sdk:`collection.watch()
<Realm.MongoDBCollection.html#watch>` with no arguments:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection.ts
         :language: typescript

.. _node-watch-for-specific-changes-in-a-collection:
.. _node-mongodb-watch-a-collection-with-filter:

Watch for Specific Changes in a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To watch for specific changes in a collection, pass a query filter that matches
:manual:`change event </reference/change-events/>` fields to
:js-sdk:`collection.watch() <Realm.MongoDBCollection.html#watch>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection-with-filter.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.watch-a-collection-with-filter.ts
         :language: typescript

Aggregation Operations
----------------------

Aggregation operations run all documents in a collection through a series of
stages called an :manual:`aggregation pipeline </core/aggregation-pipeline>`.
Aggregation allows you to filter and transform documents, collect summary data
about groups of related documents, and other complex data operations.

.. _node-aggregate-documents-in-a-collection:
.. _node-mongodb-aggregate:

Run an Aggregation Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To execute an aggregation pipeline, pass an array of aggregation stages to
:js-sdk:`collection.aggregate() <Realm.MongoDBCollection.html#aggregate>`.
Aggregation operations return the result set of the last stage in the pipeline.

The following snippet groups all documents in the ``plants`` collection by their
``type`` value and aggregates a count of the number of each type:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection.js
         :language: javascript

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection.ts
         :language: typescript

Running this snippet produces output resembling the following:

.. tabs-realm-languages::
   :hidden: true
   
   .. tab::
      :tabid: javascript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection-result.js
         :language: javascript
         :copyable: false

   .. tab::
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.aggregate-documents-in-a-collection-result.ts
         :language: typescript
         :copyable: false

.. include:: /includes/aggregation-stages.rst

.. _node-mongodb-example-dataset:

Example Data
------------

.. include:: /includes/mongodb-data-access-example-plant-documents.rst

Documents in the ``plants`` collection use the following schema:

.. tabs::
   
   .. tab:: JSON Schema
      :tabid: json-schema
      
      .. code-block:: json
         
         {
           "title": "Plant",
           "bsonType": "object",
           "required": ["_id", "_partition", "name"],
           "properties": {
             "_id": { "bsonType": "objectId" },
             "_partition": { "bsonType": "string" },
             "name": { "bsonType": "string" },
             "sunlight": { "bsonType": "string" },
             "color": { "bsonType": "string" },
             "type": { "bsonType": "string" }
           }
         }
   
   .. tab:: TypeScript
      :tabid: typescript
      
      .. literalinclude:: /examples/generated/code/start/mongodb.codeblock.plant-document-type.ts
         :language: typescript
