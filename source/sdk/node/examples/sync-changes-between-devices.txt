.. _node-sync-changes-between-devices:

==========================================
Sync Changes Between Devices - Node.js SDK
==========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-sync-changes-prereq:

Prerequisites
-------------

Before you can access a synced realm from the client, you must:

1. :ref:`Enable sync <enable-sync>` in the App Services UI.

#. :ref:`Initialize the app <node-quick-start-init-app>`

#. :ref:`Authenticate a user <node-quick-start-authenticate>` in
   your client project.

#. :ref:`Open a Flexible Synced Realm <node-flexible-sync-open-realm>`
   or :ref:`Open a Partition-Based Synced Realm <node-partition-sync-open-realm>`

.. note:: Sync method in the examples on this page

   The examples on this page use **Partition-Based Sync** with the 
   :ref:`firehose partition strategy <partition-strategy-firehose>`. 
   This means that data is synced to the clients of all users with the same static partition value. 
   
   In the examples on this page, the static partition value is ``MyPartitionValue``. 
   All realms with the partition ``MyPartitionValue`` 
   have access to any document with a matching partition value.
   The realm's :js-sdk:`Configuration <Realm.html#~Configuration>` object includes
   a :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` with
   ``partitionValue: "MyPartitionValue"``.

   .. code-block:: javascript
      :caption: Configuration
      :emphasize-lines: 5
   
      const config = {
      schema: [DogSchema], // predefined schema
      sync: {
         user: app.currentUser,
         partitionValue: "MyPartitionValue",
         ...rest of SyncConfiguration
      },
      };
   
   For more information on how to configure Partition-Based Sync, 
   refer to the :ref:`Partition Strategies documentation <partition-strategy>`. 


.. _node-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

You may want to sync changes in the background to display partial data to the
user while the synced realm downloads data from the server, preventing the
user experience from being blocked. We recommend syncing changes in the
background for applications in which the user's device may go offline. To sync
changes in the background, open a synced realm synchronously.

Create a :js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` object and set its
``type`` to ``"openImmediately"``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-create-OpenRealmBehaviorObject.js
      :language: javascript

Create a :js-sdk:`Configuration <Realm.html#~Configuration>` object, which must
include the ``sync`` property defining a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>` object. Set this
``OpenRealmBehaviorConfiguration`` object as the value for
the ``newRealmFileBehavior`` and ``existingRealmFileBehavior`` fields of the
``SyncConfiguration``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-create-config.js
      :language: javascript

Finally,  call :js-sdk:`Realm.open() <Realm.html#.open>`
to open a synced realm. This will create a sync session and begin
downloading any existing data from the server in the background.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-open-realm.js
      :language: javascript

.. _node-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------

Opening a synced realm starts a :js-sdk:`sync session <Realm.App.Sync.Session.html>`.
You can pause and resume the sync session on the realm. Pausing a sync 
session only pauses that realm's sync session. If you have more than one 
open realm, pause does not affect the sync sessions for other realms.

To pause synchronization, use the :js-sdk:`syncSession.pause()
<Realm.App.Sync.Session.html#~pause>` method. To resume synchronization, use the
:js-sdk:`syncSession.resume() <Realm.App.Sync.Session.html#~resume>` method.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-pause-or-resume-sync-session.js
   :language: javascript

When to Pause a Sync Session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/when-to-pause-sync.rst

.. _node-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

To check the upload and download progress for a sync session, add a progress
notification using the :js-sdk:`syncSession.addProgressNotification() <Realm.App.Sync.Session.html#.addProgressNotification>` method.

The ``syncSession.addProgressNotification()`` method takes in the following three parameters:

- A ``direction`` parameter. 
  Set to ``"upload"`` to register notifications for uploading data. 
  Set to ``"download"`` to register notifications for downloading data.
- A ``mode`` parameter. Set to ``"reportIndefinitely"`` 
  for the notifications to continue until the callback is unregistered using
  :js-sdk:`syncSession.removeProgressNotification() <Realm.App.Sync.Session.html#.removeProgressNotification>`.
  Set to ``"forCurrentlyOutstandingWork"`` for the notifications to continue
  until only the currently transferable bytes are synced.
- A callback function parameter that has the arguments ``transferred`` and ``transferable``.
  ``transferred`` is the current number of bytes already transferred.
  ``transferable`` is the total number of bytes already transferred
  plus the number of bytes pending transfer.

.. include:: /includes/flex-sync-unsupported-progress-notifications.rst

.. example::

   In the following example, an application developer registers a callback on the ``syncSession`` to
   listen for upload events indefinitely. The developer writes to the realm and
   then unregisters the ``syncSession`` notification callback. 

   .. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-check-upload-and-download-progress.js
      :language: javascript


.. _node-check-network-connection:

Check the Network Connection
----------------------------

To check the current state of the connection to the server, call the
:js-sdk:`syncSession.connectionState()
<Realm.App.Sync.Session.html#.connectionState>` method.

.. tip:: 

   Realm's *offline-first* design means that you generally don't need to
   check the current network connection state. That said, the
   ``syncSession.connectionState()`` method is available if your app needs to
   gets the current state of the connection to the server.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-check-network-connection.js
   :language: javascript

.. _node-set-the-client-log-level:

Set the Client Log Level
------------------------

You can set the realm Sync client :js-sdk:`log level
<Realm.App.Sync.html#~LogLevel>` by calling
:js-sdk:`Realm.App.Sync.setLogLevel() <Realm.App.Sync.html#.setLogLevel>` with
your :js-sdk:`Realm.App <Realm.App.html>`.

.. example::

   In the following example, an application developer sets the sync client
   log level to ``"debug"``.

   .. literalinclude:: /examples/SyncChanges/set-log-level.js
      :language: javascript

.. include:: /includes/tip-sync-log-levels.rst

.. _node-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------

Enable :wikipedia:`session multiplexing <Session_multiplexing>` to consolidate
multiple sync sessions of a Realm app. 
Only use session multiplexing if you see errors about reaching the file descriptor limit,
and you know you are using many sync sessions.

To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing()
<Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`. 

.. example::
   
   .. literalinclude:: /examples/SyncChanges/enable-session-multiplexing.js
      :language: javascript

.. _node-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses Device Sync, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

Set an error handler by registering an error callback as part of the :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>`.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-handle-sync-errors.js
   :language: javascript

.. include:: /includes/sync-errors-in-app-services.rst

.. _node-perform-a-client-reset:

Perform a Client Reset
----------------------

You can customize behavior in the event of a :ref:`client reset
<node-client-resets>` error with a custom error handler function:

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-perform-a-client-reset.js
   :language: javascript

.. tip::

   To see how to recover unsynced local changes in a client reset, check out
   this :github:`example on GitHub
   <mongodb/realm-practice/blob/main/node/index.js#L49>`.
