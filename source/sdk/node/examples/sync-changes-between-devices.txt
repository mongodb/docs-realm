.. _node-sync-changes-between-devices:

============================
Sync Changes Between Devices
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-open-a-synced-realm:

Open a Synced Realm
-------------------
To open a synced {+realm+}, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.


.. example::

   In the following example, a synced {+realm+} is opened with a :doc:`schema
   </node/examples/define-a-realm-object-model>` value of a predefined
   ``TaskSchema`` ``SyncConfiguration`` object that uses the currently logged in
   user  and a partition value of "MyPartition".
   
   .. code-block:: javascript

      const config = {
         schema: [TaskSchema],
         sync: {
            user: app.currentUser,
            partitionValue: "myPartition",
         }
      };
      
      const realm = await Realm.open(config);


.. _node-sync-changes-in-the-background:

Delete the Realm file for the given configuration.

Reset a Client Realm File
-------------------------
To delete a {+realm+} file for a given :js-sdk:`configuration
<Realm.html#~Configuration>`, call call :js-sdk:`Realm.deleteFile(config)
<Realm.html#.deleteFile>`.

.. example::

   In the following example, a {+realm+} with a predefined config is deleted. To
   determine if the {+realm+} has been deleted, :js-sdk:`Realm.exists(config)
   <Realm.html#.exists>` is called. Finally, a {+realm+} is opened with the same config. 
   
   .. code-block:: javascript

      Realm.deleteFile(config); // delete a Realm file for a predefined config object
      console.log(`Does the realm exist: ${Realm.exists(syncConfig)}`); // check if the Realm exists
      const realm = await Realm.open(config); // open a Realm

.. _node-set-the-client-log-level:

Set the Client Log Level
------------------------
You can set the {+realm+} Sync client log level by calling :js-sdk:`Realm.App.Sync.setLogLevel() <Realm.App.Sync.html#.setLogLevel` with your :js-sdk:`Realm.App <Realm.App.html>`.

.. example::

   In the following example, the sync client :js-sdk:`log level
   <Realm.App.Sync.html#~LogLevel>` is set to ``"debug"``.
   
   .. code-block:: javascript

      Realm.App.Sync.setLogLevel(app, "debug");

.. _node-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------
To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing() <Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`. 

.. warning::

   Only use session multiplexing if you're seeing errors about reaching the file descriptor limit
   and you know you are using many sync sessions.

.. example::
   
   .. code-block:: javascript

      Realm.App.Sync.enableSessionMultiplexing(app)
