.. _node-sync-changes-between-devices:

==========================================
Sync Changes Between Devices - Node.js SDK
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-open-a-synced-realm:

Open a Synced Realm
-------------------
To open a synced {+realm+}, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object.


.. example::

   In the following example, a synced {+realm+} is opened with a :doc:`schema
   </sdk/node/examples/define-a-realm-object-model>` value of a predefined
   ``TaskSchema`` ``SyncConfiguration`` object that uses the currently logged in
   user  and a partition value of "MyPartition".

   .. literalinclude:: /examples/SyncChanges/open-a-synced-realm.js
      :language: javascript

.. _node-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------
You can pause synchronization using the :js-sdk:`syncSession.pause()
<Realm.App.Sync.Session.html#~pause>` method. To resume synchronization, use the
:js-sdk:`syncSession.resume() <Realm.App.Sync.Session.html#~resume>` method

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-pause-or-resume-sync-session.js
   :language: javascript

.. _node-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------
To check the upload and download progress for a sync session, add a progress
notification using the :js-sdk:`syncSession.addProgressNotification() <Realm.App.Sync.Session.html#.addProgressNotification>` method.

The ``syncSession.addProgressNotification()`` method takes in the following three parameters:

- A ``direction`` parameter that can be set to ``"upload"`` or ``"download"`` to register notifications for either event.
- A ``mode`` parameter that can be set to ``"reportIndefinitely"`` (for the notifications to continue until the callback is unregistered using the :js-sdk:`syncSession.removeProgressNotification() <Realm.App.Sync.Session.html#.removeProgressNotification>` method), or ``"forCurrentlyOutstandingWork"`` (for the notifications to continue until only the currently transferable bytes are synced).
- A callback parameter with the arguments ``transferred`` and ``transferable``, representing the current number of bytes already transferred and the number of transferable bytes (the number of bytes already transferred plus the number of bytes pending transfer), respectively.

.. example::

   In the following example, an application developer registers a callback on the ``syncSession`` to
   listen for upload events indefinitely. The developer writes to the realm and
   then unregisters the ``syncSession`` notification callback. 

   .. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-check-upload-and-download-progress.js
      :language: javascript


.. _node-check-network-connection:

Check the Network Connection
----------------------------
To check the current state of the connection to the server, call the
:js-sdk:`syncSession.connectionState()
<Realm.App.Sync.Session.html#.connectionState>` method.

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't need to
   check the current network connection state. That said, the
   ``syncSession.connectionState()`` method is available if your app needs to
   gets the current state of the connection to the server.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-check-network-connection.js
   :language: javascript

.. _node-set-the-client-log-level:

Set the Client Log Level
------------------------
You can set the {+realm+} Sync client :js-sdk:`log level
<Realm.App.Sync.html#~LogLevel>` by calling
:js-sdk:`Realm.App.Sync.setLogLevel() <Realm.App.Sync.html#.setLogLevel>` with
your :js-sdk:`Realm.App <Realm.App.html>`.

.. example::

   In the following example, an application developer sets the sync client
   log level to ``"debug"``.

   .. literalinclude:: /examples/SyncChanges/set-log-level.js
      :language: javascript
   
.. _node-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------
To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing() <Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`. 

.. warning::

   Only use session multiplexing if you see errors about reaching the file descriptor limit,
   and you know you are using many sync sessions.

.. example::
   
   .. literalinclude:: /examples/SyncChanges/enable-session-multiplexing.js
      :language: javascript


Perform a Client Reset
----------------------

You can customize behavior in the event of a :ref:`client reset
<node-client-resets>` error with a custom error handler function:

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-perform-a-client-reset.js
   :language: javascript
