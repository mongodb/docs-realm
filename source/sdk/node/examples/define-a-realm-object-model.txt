.. _node-define-a-realm-object-schema:

============================
Define a Realm Object Schema
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-object-properties:

Object Properties
-----------------

Every {+service-short+} object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<node-object-schema>` that defines the properties and relationships of those
objects. Your {+service-short+} object must contain a ``name`` field and a
``properties`` field. 

.. _node-define-a-property-type:

Define a Property Type
~~~~~~~~~~~~~~~~~~~~~~
To define a property type, create a key-value pair representing the name and
data type of the property under the {+service-short+} object's ``properties`` field.

.. example::
   
   The following schema defines a DogSchema with the key-value pairs ``name:string`` and ``age:int``. 

   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Schemas/DefineAProperty.js
           :language: javascript
           :emphasize-lines: 4, 5

.. _node-specify-an-optional-property:

Specify an Optional Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To mark a property as optional, append a question mark ``?`` to its value.


.. example::
   
   The following schema defines a DogSchema with the optional property ``breed``
   of type ``string``.

   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Schemas/OptionalProperty.js
           :language: javascript
           :emphasize-lines: 4


.. _node-define-a-default-property-value:

Define a Default Property Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To define a default value, set the value of the property to an object with a
``type`` field and a ``default`` field.

.. example::
   
   The following schema defines a Car with a default value of 0 for its ``miles`` property:

   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Schemas/DefaultValues.js
           :language: javascript
           :emphasize-lines: 6


.. _node-define-a-to-one-relationship-property:

Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship maps one property to a single instance of
another object type.

.. example::

   The following ``PersonSchema`` indicates that a person may or may not own a
   single Dog by including it in its ``dog`` property: 
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Relationships/ToOne/ToOne.js
           :language: javascript
           :emphasize-lines: 6

.. _node-define-a-to-many-relationship-property:

Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A **to-many** relationship maps one property to zero or more instances
of another object type.

.. example::
   
   An application could use the following object schemas to indicate
   that a Person may own multiple Dogs by including them in its ``dog``
   property:
   
   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. literalinclude:: /examples/Relationships/ToMany/ToMany.js
            :language: javascript
            :emphasize-lines: 6


.. _node-define-an-inverse-relationship-property:

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
An **inverse relationship** property is an automatic backlink
relationship. {+client-database+} automatically updates implicit
relationships whenever an object is added or removed in a corresponding
to-many list. You cannot manually set the value of an inverse
relationship property.

.. example::
   
   An application could use the following object schemas to indicate that a User
   may be assigned many Tasks and that each Task should automatically keep track
   of which User it's assigned to.
   
   - The User object's ``tasks`` property is defined as a to-many relationship
     with Task objects and contains all of a given user's assigned tasks.
     
   - The Task object's ``assignee`` property inverts the relationship and
     automatically updates to refer back to any User object that contains the
     Task in its ``tasks`` property.
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.js
           :language: javascript
           :emphasize-lines: 8, 19-23
     
     .. tab::
         :tabid: typescript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.ts
           :language: javascript
           :emphasize-lines: 5, 14, 23, 32-36

.. _node-define-an-embedded-object-property:

Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To define a Realm object model with an embedded object (nested {+service-short+}
object), set ``embedded`` to ``true``. You can reference an embedded object type
from parent object types in the same way you define a relationship.

.. example::
   
   An application requires two parent schemas, ``ContactSchema`` and
   ``BusinessSchema``. The application requires a child schema ``AddressSchema``
   that is embedded. A ``Business`` object can embed a list of ``Address``
   objects, whereas a ``Contact`` object can only embed a single ``Address``
   object.

   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. literalinclude:: /examples/Schemas/Embedded.js
            :language: javascript
            :emphasize-lines: 3, 18, 28
   
.. _node-property-annotations:

Property Annotations
--------------------

.. _node-specify-a-primary-key:

Specify a Primary Key
~~~~~~~~~~~~~~~~~~~~~
Primary keys enforce uniqueness among objects in a realm. 

You can efficiently find and update objects by primary key.

As long as a realm manages an object, that object's primary key value is
immutable.

.. example::
   
   A developer creates a ``TaskSchema`` and defines a ``_id`` property as its primary key.
   
   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. literalinclude:: /examples/Schemas/PrimaryKey.js
            :language: javascript
            :emphasize-lines: 9

.. _node-index-a-property:

Index a Property
~~~~~~~~~~~~~~~~
Indexes make queries using equality and IN operators faster in exchange
for slightly slower writes. Indexes take up more space in the realm
file. Itâ€™s best to only add indexes when optimizing the read performance
for specific situations.

.. note::

   Primary keys are always indexed.

Realm supports indexing for string, integer, boolean, ``Date``, and
``ObjectId`` properties.

 To enable an index on a given property, set ``indexed:true`` in the property's
 key-value pair.

.. example::
   
   A developer creates a ``BookSchema`` and enables an index on a ``name`` property.
   
   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. literalinclude:: /examples/Schemas/Indexed.js
            :language: javascript
            :emphasize-lines: 9

.. _node-remap-a-property:

Remap a Property
~~~~~~~~~~~~~~~~
To use a different property name in your code than is stored in Realm Database, use
the ``mapTo`` property. 

.. example::
   
   A developer opens a realm using a ``DogSchema`` with an alias of
   ``firstName`` for its ``first_name`` field.
   
   .. tabs-realm-languages::
   
      .. tab::
         :tabid: javascript
   
         .. literalinclude:: /examples/Schemas/Mapped.js
            :language: javascript
            :emphasize-lines: 5
