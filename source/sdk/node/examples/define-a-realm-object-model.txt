.. _node-define-a-realm-object-schema:

==========================================
Define a Realm Object Schema - Node.js SDK
==========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-define-a-new-object-type:

Define a New Object Type
------------------------

To define a Realm object type, create a schema object that specifies the type's
``name`` and ``properties``. The type name must be unique among object types in
a realm. For details on how to define specific properties, see :ref:`Define
Object Properties <node-define-a-property>`.

.. code-block:: javascript
   
   const Car = {
     name: "Car",
     properties: {
       make: "string",
       model: "string",
       miles: "int",
     }
   }

.. note::
   
   You can :ref:`open a realm <node-open-a-local-realm>` using the Realm
   Object you have defined.
   
   .. literalinclude:: /examples/generated/node/open-and-close-a-local-realm.snippet.open-local-realm-with-car-schema.js
     :language: javascript

.. _node-define-objects-with-js-classes:

Define Realm Object Types with JavaScript Classes
-------------------------------------------------

You can define Realm object types with JavaScript classes. To use a class as an
object type, define the object schema on the static property ``schema``. 

.. literalinclude:: /examples/generated/node/define-a-realm-object-schema.snippet.define-a-realm-object-schema-define-js-classes.js
     :language: javascript
   
Pass the class itself to the schema property of the :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object when opening a realm. You can then :doc:`read and write data
</sdk/node/examples/read-and-write-data>` normally.

.. literalinclude:: /examples/generated/node/define-a-realm-object-schema.snippet.define-a-realm-object-schema-js-classes-open-and-access-properties.js
     :language: javascript

.. _node-supported-property-types:

Supported Property Types
------------------------

Every property in a Realm object has a strongly defined data type. A
property's type can be a primitive data type or an object type defined in the
same realm. The type also specifies whether the property contains a single
value or a list of values.

Realm Database supports the following primitive data types:

- ``bool`` for boolean values
- ``int`` and ``double``, which map to JavaScript ``number`` values
- ``Decimal128`` for high precision numbers
- ``string``
- ``date``, which maps to :mdn:`Date <Web/JavaScript/Reference/Global_Objects/Date>`
- ``data``, which maps to :mdn:`ArrayBuffer <Web/JavaScript/Reference/Global_Objects/ArrayBuffer>`
- ``objectId``, which maps to :manual:`ObjectId </reference/method/ObjectId/>`

To specify that a field contains a list of a primitive value type, append ``[]``
to the type name.

.. _node-define-a-property:

Define Object Properties
------------------------

To define a property for an object type, create a key-value pair representing
the name and data type of the property under the ``properties`` field.

.. example::
   
   The following schema defines a ``Dog`` type that has two properties: a string
   ``name`` and an integer ``age``.
   
   .. literalinclude:: /examples/Schemas/DefineAProperty.js
      :language: javascript
      :emphasize-lines: 4, 5

.. _node-specify-an-optional-property:
.. _node-optional-properties:

Specify an Optional Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To mark a property as optional, append a question mark ``?`` to its type.

.. example::
   
   The following schema defines a DogSchema with the optional property ``breed``
   of type ``string``.
   
   .. literalinclude:: /examples/Schemas/OptionalProperty.js
      :language: javascript
      :emphasize-lines: 4

.. _node-specify-a-primary-key:
.. _node-primary-keys:

Specify a Primary Key
~~~~~~~~~~~~~~~~~~~~~

To specify a property as an object type's primary key, set the schema's
``primaryKey`` field to the property name.

.. note::
   
   A **primary key** is a property that uniquely identifies an
   object. Realm Database automatically :ref:`indexes <node-indexes>`
   primary key properties, which allows you to efficiently read and modify
   objects based on their primary key.
   
   If an object type has a primary key, then all objects of that type must
   include the primary key property with a value that is unique among objects of
   the same type in a realm. An object type may have at most one primary
   key. You cannot change the primary key property for an object type after any
   object of that type is added to a realm and you cannot modify an object's
   primary key value.

.. example::
   
   The following ``Task`` object schema specifies the ``_id`` property as its
   primary key.
      
   .. literalinclude:: /examples/Schemas/PrimaryKey.js
      :language: javascript
      :emphasize-lines: 9

.. _node-index-a-property:
.. _node-indexes:

Index a Property
~~~~~~~~~~~~~~~~

Realm supports indexing for string, integer, boolean, ``Date``, ``UUID``, and ``ObjectId``
properties. To define an index for a given property, set ``indexed`` to
``true``.

.. note::

   An **index** significantly increases the speed of certain read operations at
   the cost of slightly slower write times and additional storage and memory
   overhead. Realm Database stores indexes on disk, which makes your realm files
   larger. Each index entry is a minimum of 12 bytes. The ordering of the index
   entries supports efficient equality matches and range-based query operations. 
   
   It's best to only add indexes when optimizing the read performance for
   specific situations.

.. example::
   
   The following ``Book`` object schema defines an index on the ``name``
   property.
    
   .. literalinclude:: /examples/Schemas/Indexed.js
      :language: javascript
      :emphasize-lines: 4

.. _node-define-a-default-property-value:
.. _node-default-values:

Define a Default Property Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a default value, set the value of the property to an object with a
``type`` field and a ``default`` field.

.. example::
   
   The following ``Car`` object schema specifies a default value of ``0`` for
   the ``miles`` property:
 
   .. literalinclude:: /examples/Schemas/DefaultValues.js
      :language: javascript
      :emphasize-lines: 6

.. _node-remap-a-property:

Remap a Property
~~~~~~~~~~~~~~~~

To use a different property name in your code than is stored in
Realm Database, set ``mapTo`` to the name of the property as it appears in
your code.

.. example::
   
   A developer opens a realm using the following ``Dog`` object schema.
   Realm Database stores each dog's first name with the snake case
   ``first_name`` property. The schema maps the property to ``firstName`` for
   objects used in JavaScript code.
   
   .. literalinclude:: /examples/Schemas/Mapped.js
      :language: javascript
      :emphasize-lines: 5


.. _node-define-relationship-properties:

Define Relationship Properties
------------------------------

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _node-define-a-to-one-relationship-property:

Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship maps one property to a single instance of
another object type. For example, you can model a person having at most
one companion dog as a to-one relationship.

To define a to-one relationship property, specify the related object type name
as the property type.

.. include:: /includes/note-to-one-relationships-must-be-optional.rst

.. example::

   The following ``Person`` object schema specifies that a person may or may not
   own a single ``Dog``. If they do own a ``Dog``, Realm links to it via the
   ``dog`` property:
   
   .. literalinclude:: /examples/Relationships/ToOne/ToOne.js
      :language: javascript
      :emphasize-lines: 6

.. _node-define-a-to-many-relationship-property:

Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. For example, you can model a person having any
number of companion dogs as a to-many relationship.

To define a to-many relationship property, specify the related object type name
as a list.

.. example::
   
   An application could use the following object schemas to indicate
   that a Person may own multiple Dogs by including them in its ``dog``
   property:
   
   .. literalinclude:: /examples/Relationships/ToMany/ToMany.js
      :language: javascript
      :emphasize-lines: 6


.. _node-define-an-inverse-relationship-property:

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **inverse relationship** property is an automatic backlink relationship.
Realm Database automatically updates implicit relationships whenever an
object is added or removed in a corresponding to-many list. You cannot manually
set the value of an inverse relationship property.

To define an inverse relationship property, set the property type to
``linkingObjects`` and specify the object type and property name that define the
relationship to invert.

.. example::
   
   An application could use the following object schemas to indicate that a User
   may be assigned many Tasks and that each Task should automatically keep track
   of which User it's assigned to.
   
   - The User object's ``tasks`` property is defined as a to-many relationship
     with Task objects and contains all of a given user's assigned tasks.
     
   - The Task object's ``assignee`` property inverts the relationship and
     automatically updates to refer back to any User object that contains the
     Task in its ``tasks`` property.
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.js
            :language: javascript
            :emphasize-lines: 8, 19-23
     
     .. tab::
         :tabid: typescript
          
         .. literalinclude:: /examples/Relationships/Inverse/Inverse.ts
            :language: javascript
            :emphasize-lines: 5, 14, 23, 32-36

.. _node-define-an-embedded-object-property:

Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a Realm object model with an embedded object (nested Realm
object), set ``embedded`` to ``true``.

.. note::
   
   An **embedded object** exists as nested data inside of a single, specific
   parent object. It inherits the lifecycle of its parent object and cannot
   exist as an independent Realm object. Realm automatically deletes embedded
   objects if their parent object is deleted or when overwritten by a new
   embedded object instance.
   
   You can reference an embedded object type from parent object types in the
   same way as a relationship.

.. example::
   
   An application requires two parent schemas, ``ContactSchema`` and
   ``BusinessSchema``. The application requires a child schema ``AddressSchema``
   that is embedded. A ``Business`` object can embed a list of ``Address``
   objects, whereas a ``Contact`` object can only embed a single ``Address``
   object.
   
   .. literalinclude:: /examples/Schemas/Embedded.js
      :language: javascript
      :emphasize-lines: 3, 18, 28

.. _node-define-an-asymmetric-object:

Define an Asymmetric Object
---------------------------

If you are using Flexible Sync and need to sync a collection unidirectionally
from your device to your Atlas database, you can set the ``asymmetric`` property
on your object schema.

.. example::
   
   In the following example of a retail app, the client requires large amounts of
   invoice data to be recorded rapidly by store employees. The client specifies
   that invoice data does not need to be read after employees have recorded it. To
   satisfy this requirement, the application developer defines an invoice
   collection with its ``asymmetric`` property set to ``true``. 
   
   .. literalinclude::  /examples/generated/node/asymmetric-sync.snippet.asymmetric-sync.js
      :language: javascript
      :emphasize-lines: 4

.. note:: Attempting to Read Asymmetric Sync Objects

   Asymmetric Sync objects cannot be read. If you attempt to query an Asymmetric Sync object, you
   will get the following error: "Error: You cannot query an asymmetric class.".

To learn more about Asymmetric Sync, read :ref:`Optimize Sync with Asymmetric Sync <optimize-asymmetric-sync>`.
