.. _node-modify-an-object-schema:

=======================
Modify an Object Schema
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-add-a-property:

Add a Property
--------------

To add a property to an schema, add the new property to the object's class and
set a ``schemaVersion`` of the :js-sdk:`Realm's configuration object <Realm.html#~Configuration>`.

.. _node-delete-a-property:

Delete a Property
-----------------

To delete a property from a schema, remove the property from the object's class
and set a ``schemaVersion`` of the :js-sdk:`Realm's configuration object
<Realm.html#~Configuration>`. Deleting a property will not impact existing
objects. 

.. _node-rename-a-property:

Rename a Property
-----------------

To rename a property of the schema, rename the property of the object's class.
Then, set a ``schemaVersion`` and a ``migration`` callback function of the
:js-sdk:`Realm's configuration Object <Realm.html#~Configuration>`. 

.. note::

   Synchronized Realms only support additive changes, to ensure that older
   clients can continue to sync with newer clients. This means that synchronized
   realms do not support renaming a property of the schema.

.. example::
   
   A {+realm+} using schema version ``1`` has a ``Person`` object type. The
   original schema had a ``firstName`` and ``lastName`` field. The developer
   later decides that the ``Person`` class should use a combined ``fullName``
   field and removes the separate ``firstName`` and ``lastName`` fields.
   
   To migrate the {+realm+} to conform to the updated ``Person`` schema, the
   developer sets the {+realm+}'s :ref:`schema version <node-schema-version>` to
   ``2`` and defines a migration function to set the value of ``fullName`` based
   on the existing ``firstName`` and ``lastName`` properties.

   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Migrations/LocalMigration/LocalMigration.js
           :language: javascript
           :emphasize-lines: 3, 14

<replace me with existing use case>

Modify a Property Type
----------------------
To modify a property's type, set the property type of the field that you wish to
modify to the new data type. Then, set a ``schemaVersion``, and a ``migration``
callback function of the :js-sdk:`Realm's configuration Object
<Realm.html#~Configuration>`. 

.. note::

   Synchronized Realms only support additive changes, to ensure that older
   clients can continue to sync with newer clients. This means that synchronized
   realms do not support modifying the type of a property of a schema. 


.. example::
   
   A {+realm+} using schema version ``1`` has a ``Dog`` object type. The
   original schema had a ``_id`` with a property type of ``Object ID``. The
   developer later decides that the ``Dog`` class's ``_id`` field should be of
   type ``string``, and updates the schema.

   To migrate the {+realm+} to conform to the updated ``Dog`` schema, the
   developer sets the {+realm+}'s :ref:`schema version <node-schema-version>` to
   ``2`` and defines a migration function to convert the ``Object ID`` type to a
   ``string`` type.

   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
 
         .. literalinclude:: /examples/Migrations/LocalMigration/LocalMigration-modify-property-type.js
           :language: javascript
           :emphasize-lines: 3, 12 