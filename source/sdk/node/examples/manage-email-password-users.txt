.. _node-manage-email-password-users:

===========================
Manage Email/Password Users
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-register-new-user:

Register a New User Account
---------------------------

To register a new email/password user, pass the user's email address and desired
password to :js-sdk:`EmailPasswordAuth.registerUser()
<Realm.Auth.EmailPasswordAuth.html#registerUser>`. The email address must not be
associated with another email/password user and the password must be between 6
and 128 characters.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         
         const email = "someone@example.com";
         const password = "Pa55w0rd";
         await app.emailPasswordAuth.registerUser(email, password);
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         const email = "someone@example.com";
         const password = "Pa55w0rd";
         await app.emailPasswordAuth.registerUser(email, password);

.. note:: Confirm New Users

   You must :ref:`confirm a new user's email address
   <node-email-password-confirm-user>` before they can log in to your app.

.. _node-confirm-user:

Confirm a New User's Email Address
----------------------------------

New users must confirm that they own their email address before they can log in
to your app unless the provider is configured to :ref:`automatically confirm new
users <auth-automatically-confirm-users>`.

.. _node-send-confirmation-email:

Send a Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~

If the provider is configured to :ref:`send a confirmation email
<auth-send-a-confirmation-email>`, {+service+} automatically sends a
confirmation email when a user registers. The email contains a link to the
configured :guilabel:`Email Confirmation URL` with a token that is valid for 30
minutes after the email is sent. If a user did not receive the initial email or
didn't click the confirmation link in time, you can use the SDK to send a new
confirmation email to the user.

To send a new confirmation email to a user, pass their email address to
:js-sdk:`EmailPasswordAuth.resendConfirmationEmail()
<Realm.Auth.EmailPasswordAuth.html#resendConfirmationEmail>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         const email = "someone@example.com"; // The user's email address
         await app.emailPasswordAuth.resendConfirmation(email);
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         const email = "someone@example.com"; // The user's email address
         await app.emailPasswordAuth.resendConfirmation(email);

.. _node-complete-confirmation:

Complete a User Confirmation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need a valid ``token`` and ``tokenId`` for a registered user in order to
confirm them and allow them to log in. These values are available in different
places depending on the provider configuration:

- If the provider is set to :ref:`send a confirmation email
  <auth-send-a-confirmation-email>`, the ``token`` and ``tokenId`` values are
  included as query parameters in the :guilabel:`Email Confirmation URL`.

- If the provider is set to :ref:`run a confirmation function
  <auth-run-a-confirmation-function>`, the ``token`` and ``tokenId`` values are
  passed to the function as arguments.

To confirm a registered user, pass a valid ``token`` and ``tokenId`` to
:js-sdk:`EmailPasswordAuth.confirmUser()
<Realm.Auth.EmailPasswordAuth.html#confirmUser>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript

      .. code-block:: javascript
         
         await app.emailPasswordAuth.confirmUser(token, tokenId);
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         await app.emailPasswordAuth.confirmUser(token, tokenId);

.. _node-reset-password:

Reset a User's Password
-----------------------

.. _node-send-password-reset-email:

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

To :ref:`send a password reset email <auth-send-a-password-reset-email>` (if the
provider is configured to do so), call
:js-sdk:`EmailPasswordAuth.sendResetPasswordEmail()
<Realm.Auth.EmailPasswordAuth.html#sendResetPasswordEmail>`. The email contains
a link to the configured :guilabel:`Password Reset URL`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // The user's email address
         const email = "joe.jasper@example.com"
         await app.emailPasswordAuth.sendResetPasswordEmail(email);
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // The user's email address
         const email = "joe.jasper@example.com"
         await app.emailPasswordAuth.sendResetPasswordEmail(email);

.. _node-call-password-reset-function:

Call a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To :ref:`run a password reset function <auth-run-a-password-reset-function>` (if
the provider is configured to do so), pass the user's email address, new
password, and any additional function arguments to
:js-sdk:`EmailPasswordAuth.callResetPasswordFunction()
<Realm.Auth.EmailPasswordAuth.html#callResetPasswordFunction>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         // The user's email address
         const email = "joe.jasper@example.com";
         // The new password to use
         const password = "newPassw0rd";
         // Additional arguments for the reset function
         const args = [];

         await app.emailPasswordAuth.callResetPasswordFunction(email, password, args);
   
   .. tab::
      :tabid: typescript
      
      .. code-block:: typescript
         
         // The user's email address
         const email = "joe.jasper@example.com";
         // The new password to use
         const password = "newPassw0rd";
         // Additional arguments for the reset function
         const args = [];
         
         await app.emailPasswordAuth.callResetPasswordFunction(email, password, args);

.. _node-complete-password-reset:

Complete a Password Reset
~~~~~~~~~~~~~~~~~~~~~~~~~

Once a user requests a password reset, either by :ref:`sending a password reset
email <node-send-password-reset-email>` or :ref:`calling a password reset
function <node-call-password-reset-function>`, Realm generates a pair of unique
``token`` and ``tokenId`` values that they can use to complete the password
reset within 30 minutes of the initial request.

To complete the password reset, pass the ``token``, ``tokenId``, and new
password to :js-sdk:`EmailPasswordAuth.resetPassword()
<Realm.Auth.EmailPasswordAuth.html#resetPassword>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
         
         await app.emailPasswordAuth.resetPassword(token, tokenId, "newPassw0rd");
   
   .. tab::
      :tabid: typescript

      .. code-block:: typescript
         
         await app.emailPasswordAuth.resetPassword(token, tokenId, "newPassw0rd");
