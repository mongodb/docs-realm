.. _node-flexible-sync:

===========================
Flexible Sync - Node.js SDK
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

To use Flexible Sync in an Node.js client:

- Configure Flexible Sync on the backend [LINK TO BACKEND CONFIG PAGE WHEN COMPLETE]
- :ref:`Initialize the app <node-quick-start-init-app>`
- :ref:`Authenticate a user <node-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <node-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <node-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

Subscribe to Queryable Fields
-----------------------------

When you configure Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
``subscriptions`` API to manage a set of subscriptions to specific queries on 
queryable fields.

You can:

- Get a list of all subscriptions
- Check subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions of a type

Data matching the subscription, where the user has the appropriate 
permissions, syncs between devices and the backend application.

.. example::

  In the following example, several queries are created to subscribe to:

  - A filtered list of completed tasks, that have taken over 120 progressMinutes
  - A filtered list of completed tasks

  Notice that queries that you subscribe to using Flexible Sync are
  syntactically the same as :ref:`querying a {+realm+} <node-read-operations>`
  and that the queries below will create an overlapping result set.
  
  .. literalinclude:: /examples/generated/node/flexible-sync.codeblock.create-queries-to-subscribe-to.js
    :language: javascript

.. example::

  Suppose you are writing a real-time collaborative app. To
  give the sense that your app is buzzing with collaborative
  activity, you want to have an indicator that lights up when
  any change is made. In that case, a realm notification
  handler would be a great way to drive the code that controls
  the indicator.

  .. literalinclude:: /examples/generated/dotnet/WorkWithRealm.codeblock.notifications.cs
     :language: csharp
     :emphasize-lines: 2

  .. literalinclude:: /examples/generated/node/flexible-sync.codeblock.create-queries-to-subscribe-to.js
     :language: csharp
     :emphasize-lines: 2


Add a Subscription
~~~~~~~~~~~~~~~~~~

Get Subscriptions and Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Update Subscriptions
~~~~~~~~~~~~~~~~~~~~

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
