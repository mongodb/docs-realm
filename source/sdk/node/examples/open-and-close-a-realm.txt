.. _node-open-close-realm:

===================================
Open & Close a Realm - Node.js SDK
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-open-a-local-realm:

Open a Local Realm
------------------

.. include:: /includes/js-open-a-local-realm.rst

.. _node-open-an-in-memory-realm:

.. include:: /includes/js-open-an-in-memory-realm.rst

_.. _node-open-a-synced-realm:

Open a Synced Realm
-------------------

You can open a Synced {+realm+} with a Flexible Sync or Partition-Based Sync. If
you have not yet decided or are unsure which to use, read the :ref:`Choose Your
Sync Mode <sync-modes>` page.


.. _node-flexible-sync-open-realm:

Open a Flexible Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To open a {+realm+} using Flexible Sync, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object. 
In the SyncConfiguration, you must include include a ``user`` and ``flexible:true``.

.. literalinclude:: /examples/generated/node/flexible-sync.codeblock.open-flexible-sync-realm.js
   :language: javascript

.. important:: Flexible Sync Requires a Subscription

   You can't use a Flexible Sync realm until you add at least one subscription.
   To learn how to add subscriptions, see: :ref:`<node-sync-add-subscription>`.

.. _node-partition-sync-open-realm:

Open a Partition-Based Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/node-open-a-synced-realm.rst

The following example shows how to open a synced {+realm+} with a predefined
``CarSchema`` :doc:`schema </sdk/node/examples/define-a-realm-object-model>`, 
the currently logged in user, and a partition value of "myPartition".

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.codeblock.open-synced-realm-online-with-car-schema.js
   :language: javascript


.. _node-open-synced-realm-offline:

Open a Synced Realm While Offline
---------------------------------

.. include:: /includes/offline-login.rst

When your Realm application authenticates a user, it caches the user's 
credentials. You can check for existing user credentials to bypass the 
login flow and access the cached user. Use this to open a {+realm+} offline. 

.. note:: Initial login requires a network connection

   When a user signs up for your app, or logs in for the first time with an 
   existing account on a client, the client must have a network connection.
   Checking for cached user credentials lets you open a realm offline, but
   only if the user has previously logged in while online.

The ``newRealmFileBehavior`` and ``existingRealmFileBehavior`` fields in your
``SyncConfiguration`` allow you to specify :js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>`  

The :js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` allows you to specify
options for background synchronization. Set the ``newRealmFileBehavior`` and
``existingRealmFileBehavior`` fields in your ``SyncConfiguration`` to an
``OpenRealmBehaviorConfiguration`` object to open a {+realm+} using those
options in a new or existing file. 

.. _node-open-immediately-with-background-sync:

Open Immediately with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the user's device is not connected to the internet or you're uncertain of
it's connection status, connect to the {+realm+} immediately to sync data from
the server in the background. 

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.codeblock.open-synced-realm-with-background-sync.js
      :language: javascript

.. _node-open-after-timeout-with-background-sync:

Open After Timeout with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to sync data but you're in an environment where it's uncertain if
the user has an Internet connection, you can specify a ``timeOut`` that
automatically opens the {+realm+} after a timeout period elapses or when the
{+realm+} has completely downloaded, whichever comes first. 

If the {+realm+} doesn't finish downloading before the timeout, the initial
realm sync continues in the background. 

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.codeblock.open-synced-realm-config.js
  :language: javascript

.. _node-open-existing-realm-different-configuration:
.. _node-copy-data-and-open-new-realm:

Copy Data and Open a New Realm
------------------------------

.. versionadded:: 10.14.0

To copy data from an existing {+realm+} to a new realm with different
configuration options, you can use the :js-sdk:`Realm.writeCopyTo() <Realm.html#writeCopyTo>` method.

In the new realm's configuration, you *must* specify the ``path``. 

If you write the copied realm to a realm file that already exists, the data is written object by object.
The copy operation replaces objects if there already exists objects for given primary keys.
The schemas of the realm you copy and the realm you are writing to must be 
compatible for the copy operation to succeed.
Only objects in the schemas of both configurations are copied over.

The configuration change can include modifications to :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`: 

- Local realm to synced realm
- Synced Realm to local realm

The configuration change can also include changes to ``encryptionKey`` 
property of the ``Configuration``: 

- Encrypted realm to unencrypted realm
- Unencrypted realm to encrypted realm

.. example:: Convert Local Realm to Synced Realm

   .. literalinclude:: /examples/generated/node/open-and-close-a-realm.codeblock.open-local-as-synced.js
      :language: javascript
      :emphasize-lines: 15-16

You can also combine changes to configuration. For example, you can open a
local encrypted realm as a synced unencrypted realm or a unencrypted synced realm
as an encrypted synced realm.

.. example:: Convert Synced Encrypted to Local Unencrypted Realm

   .. literalinclude:: /examples/generated/node/open-and-close-a-realm.codeblock.sync-encrypted-to-local-unencrypted.js
      :language: javascript
      :emphasize-lines: 19-20

.. seealso:: 

   - :ref:`Open a Flexible Synced Realm - Node.js SDK <node-flexible-sync-open-realm>`
   - :ref:`Open a Partition-Based Synced Realm - Node.js SDK <node-encrypt-a-realm>`
   - :ref:`Encrypt a Realm - Node.js SDK <node-partition-sync-open-realm>`

.. _node-close-a-realm:

Close a Realm
-------------

.. include:: /includes/js-close-a-realm.rst
