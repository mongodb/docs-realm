.. _node-open-close-realm:

===================================
Open & Close a Realm - Node.js SDK
===================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-open-a-local-realm:

Open a Local Realm
------------------

To open a local (non-synced) {+realm+}, pass a :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object to :js-sdk:`Realm.open()
<Realm.html#.open>`.

.. note:: Accessing the Default Realm Path

   If the ``path`` property is not specified in your ``Configuration`` object,
   the default path is used. You can access and change the default Realm path
   using the ``Realm.defaultPath`` global property.

.. literalinclude:: /examples/generated/node/open-and-close-a-local-realm.codeblock.open-local-realm-with-car-schema.js
  :language: javascript
  :emphasize-lines: 2

.. TODO(Ben): i don't think there's any real reason to use this asked in Slack
.. https://mongodb.slack.com/archives/CL9JSLTGE/p1633469713208900 

In the above example, the code shows how to open the {+realm+} *asynchronously*
by calling ``realm.open()``. You can also open a realm synchronously by passing
a ``Configuration object`` to a new instance of the :js-sdk:`Realm
<Realm.html>` object. Both ``new Realm()`` and ``Realm.open()`` have the the same 
behavior for local-only {+realm+}s.

.. literalinclude:: /examples/generated/node/open-and-close-a-local-realm.codeblock.open-local-realm-synchronously.js
  :language: javascript
  :emphasize-lines: 2

.. _node-open-a-synced-realm:

Open a Synced Realm
-------------------

If you're opening a synced {+realm+}, the method you should use depends on whether 
or not the user's device is connected to the internet. Learn how to handle different
connection states in the :ref:`Open a Synced Realm While Online <node-open-a-synced-realm-while-online>` 
and :ref:`Open a Synced Realm While Offline <node-open-a-synced-realm-while-offline>` 
sections below.

.. note::

   The first time a user logs on to your {+realm+} app, you should open the {+realm+} 
   *asynchronously* using the methods described in the below 
   :ref:`Open a Synced Realm While Online <node-open-a-synced-realm-while-online>`
   to sync data from the server to the device. After that initial connection, you 
   can open a realm *synchronously* to ensure the app works in an offline state. 

.. _node-open-a-synced-realm-while-online:

Open a Synced Realm While Online
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. TODO(Ben): explore refactoring this section to not be w the include
.. and instead have the sync-changes-between-devices page refer to this one. 
.. i think that's the cleanest solution 

.. include:: /includes/node-open-a-synced-realm.rst

.. _node-open-a-synced-realm-while-offline:

Open a Synced Realm While Offline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a user's device is not connected to the internet, there are a variety of ways 
to connect to the local {+realm+}. 

If you're certain that the device doesn't have internet access, connect to the 
local {+realm+} immediately using the ``new Realm()`` method, as described in the
:ref:`Open a Local Realm <node-open-a-local-realm>` section above. 

If you're uncertain if the device is connected to the internet, set how the 
device should behave if it's unable to synchronize in a time period. Configure this 
timeout behavior in the :js-sdk:`Configuration <Realm.html#~Configuration>`
object passed to ``Realm.open()``. In the ``sync`` property, add ``newRealmFileBehavior``
and ``existingRealmFileBehavior`` properties with a :js-sdk:`OpenRealmBehaviorConfiguration <Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>`
object set to have a ``timeOut`` value and ``timeOutBehavior: 'openLocalRealm'``.

You can further direct the control flow based on if the device is online by using 
the :js-sdk:`syncSession methods<Realm.App.Sync.Session.html>` 
on your Realm object. 

.. TODO(Ben): move example to separate file w tests and bluehawk snippet gen 
.. TODO(Ben): edit the example intro text 

.. example::
  
  In the following example, a synced {+realm+} is opened with a 
  a ``Configuration`` object that uses a predefined
  ``TaskSchema`` :doc:`schema </sdk/node/examples/define-a-realm-object-model>`, 
  the currently logged in user, a partition value of "MyPartition", and a 
  :js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` with 
  ``existingRealmFileBehavior`` and ``newRealmFileBehavior`` set to allow the user 
  to work with a local {+realm+} if the device is offline. 

  The example also includes using ``syncSession`` to regulate the control flow.  

  .. code-block:: javascript
    // open Realm in offline-friendly manner
    const config = {
      schema: [TaskSchema],
      sync: {
          user: user,
          partitionValue: "myPartition",
          existingRealmFileBehavior: {
              type: "openImmediately",
              timeOut: 1000,
              timeOutBehavior: "openLocalRealm"
          },
          newRealmFileBehavior: {
              type: "openImmediately",
              timeOut: 1000,
              timeOutBehavior: "openLocalRealm"
          }
      },
    }

    const realm = await Realm.open(config)

    const syncSession = realm.syncSession;
    const connectionState = syncSession.isConnected(); //`false` if offline

.. _node-close-a-realm:

Close a Realm
-------------

It is important to remember to call the ``close()`` method when done with a
{+realm+} instance to avoid memory leaks.

.. literalinclude:: /examples/generated/node/open-and-close-a-local-realm.codeblock.close-local-realm.js
  :language: javascript

.. .. _node-local-realm-configuration:

.. Local Realm Configuration
.. -------------------------

.. .. _node-provide-a-subset-of-classes-to-a-realm:

.. Provide a Subset of Classes to a Realm
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
