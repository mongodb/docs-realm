.. _node-realm-objects:
.. _node-realm-object-model:

=============
Realm Objects
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm objects are object-oriented data structures that you use to represent data
in a :ref:`realm <node-realms>`. A Realm object is fundamentally similar to a
common JavaScript object but it also brings along a few additional features.

The Node.js SDK memory maps Realm objects directly to JavaScript objects, so
there's no need for an :wikipedia:`ORM <Object-relational_mapping>` or some
other library that wraps data access. Instead you can work with Realm objects as
you would any other object. This memory mapping is the basis for Realm's
efficient :ref:`live queries <node-live-queries>` and :ref:`write transactions
<node-write-transactions>`.

.. _node-object-types:
.. _node-object-schemas:

Object Types & Schemas
----------------------

Every Realm object conforms to a specific object type. An object type is
essentially a class that defines the properties and :ref:`relationships
<node-client-relationships>` for objects of that type using a pre-defined
schema. {+service-short+} guarantees that all objects in a {+realm+} conform to
the schema for their object type and validates objects whenever they're created,
modified, or deleted.

Property Types & Annotations
----------------------------

Every property in a {+service-short+} object has a strongly defined data type. A
property's type can be a primitive data type or an object type defined in the
same {+realm+}. The type also specifies whether the property contains a single
value or a list of values.

{+client-database+} supports the following primitive data types:

- ``bool`` for boolean values
- ``int`` and ``double``, which map to JavaScript ``number`` values
- ``Decimal128`` for high precision numbers
- ``string``
- ``date``, which maps to :mdn:`Date <Web/JavaScript/Reference/Global_Objects/Date>`
- ``data``, which maps to :mdn:`ArrayBuffer <Web/JavaScript/Reference/Global_Objects/ArrayBuffer>`
- ``objectId``, which maps to :manual:`ObjectId </reference/method/ObjectId/>`

To specify that a field contains a list of a primitive value type, append ``[]``
to the type name.

.. example::
   
   The following schema defines a ``Student`` object type with a string name and
   a list of integer grades:
   
   .. code-block:: javascript
      
      const studentSchema = {
        name: "Student",
        properties: {
          name: "string",
          grades: "int[]"
        }
      }

.. _node-optional-properties:

Optional Properties
~~~~~~~~~~~~~~~~~~~

An optional property, designated by a question mark (``?``) at the end of its
type name, may contain a ``null`` value or be entirely omitted from an object.
By default, all properties are required unless explicitly marked as optional.

.. example::
   
   The following schema defines an optional string property, ``breed``:
   
   .. literalinclude:: /examples/Schemas/DogSchema.js
      :language: javascript
      :emphasize-lines: 6

.. _node-default-values:

Default Values
~~~~~~~~~~~~~~

Realm can assign a default value to new objects that do not specify a value for
a property.

.. example::
   
   The following schema defines a Car with a default value of 0 for
   its ``miles`` property:
   
   .. code-block:: javascript
      :emphasize-lines: 6
      
      const CarSchema = {
        name: "Car",
        properties: {
          make:  "string",
          model: "string",
          miles: { type: "int", default: 0 },
        }
      };

.. _node-primary-keys:

Primary Keys
~~~~~~~~~~~~

A **primary key** is a string or integer property that uniquely identifies an
object. You may optionally define a primary key for an object type as part of
the :ref:`object schema <node-object-schema>`. {+client-database+} automatically
:ref:`indexes <node-indexes>` primary key properties, which allows you to
efficiently read and modify objects based on their primary key.

If an object type has a primary key, then all objects of that type must include
the primary key property with a value that is unique among objects of the same
type in a {+realm+}. You cannot change the primary key property for an object
type after any object of that type is added to a {+realm+}.

.. _node-indexes:

Indexes
~~~~~~~

An **index** significantly increases the speed of certain read operations at the
cost of additional overhead for write operations. Indexes are particularly
useful for equality comparison, such as querying for an object based on the
value of a property.

To define an index for a given property, set ``indexed`` to ``true``.

.. example::
   
   The following schema defines an index on the ``name`` property:
   
   .. code-block:: javascript
      :emphasize-lines: 4
      
      const BookSchema = {
      name: "Book",
        properties: {
          name: { type: "string", indexed: true },
          price: "int"
        }
      };
