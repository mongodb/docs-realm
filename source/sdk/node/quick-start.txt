.. _node-client-quick-start-local:
.. _node-client-quick-start:

=========================
Quick Start - Node.js SDK
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get Realm Database
integrated into your app.

.. _node-quickstart-local-import-realm:

Import Realm
------------
At the top of your source files where you want to use Realm, add
the following line to import the SDK.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.import-realm.js
  :language: javascript

.. _node-quickstart-local-define-an-object-model:

Define Your Object Model
------------------------
Your application's :ref:`object model <node-object-schemas>` defines the data
that you can store within Realm Database. 

To define a Realm object type, create a schema object that specifies the type's
``name`` and ``properties``. The type name must be unique among object types in
a realm. For details on how to define specific properties, see :ref:`Define
Object Properties <node-define-a-property>`.

The following code shows how to define an object model for a ``Task`` object. In this example:
  
- The ``primaryKey`` is the ``_id`` of type ``int`` (Another common type used for primary keys is :js-sdk:`ObjectId <Realm.Object.html#objectId>`).
- The ``name`` field is required. The
- The ``status`` is optional, denoted by the question mark immediately after the data type.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.define-an-object-model.js
  :language: javascript

.. _node-quickstart-local-open-a-realm:

Open a Realm
------------
To open a realm, pass a :js-sdk:`Realm.Configuration
<Realm.html#~Configuration>` object to either :js-sdk:`Realm.open()
<Realm.html#.open>` or :js-sdk:`new Realm() <Realm.html>`.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.open-a-realm.js
  :language: javascript

.. _node-quickstart-local-create-realm-objects:

Create Realm Objects
--------------------

Once you have opened a realm, you can create :ref:`objects
<node-object-types>` in it. All writes must occur within a :ref:`Write
transaction <node-write-transactions>`.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.create-realm-objects.js
  :language: javascript

.. _node-quickstart-local-find-sort-and-filter-objects:

Find, Sort, and Filter Objects
------------------------------

The following code demonstrates how to:

- Query for all instances of the "Task" object type.
- Filter the query to retrieve only the tasks that are "Open".
- Sort the tasks by the name in an ascending order.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.find-sort-and-filter-objects.js
  :language: javascript

.. _node-quickstart-local-modify-an-object:

Modify an Object
----------------
As with writes, any changes to a Realm object must occur within a 
:ref:`Write transaction <node-write-transactions>` block. 
To modify an object, you update the object properties:

In the following example, an application developer updates ``task1`` from the
:ref:`Create Realm Objects <node-quickstart-local-create-realm-objects>`
example above. The developer begins progress on the "go grocery shopping
task" and sets ``task1`` to "InProgress".

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.modify-an-object.js
  :language: javascript

.. _node-quickstart-local-delete-an-object:

Delete an Object
----------------
You can delete an object by calling the :js-sdk:`realm.delete()
<Realm.html#delete>` method within a write transaction block:

In the following example, an application developer deletes ``task1`` from the
:ref:`Create Realm Objects <node-quickstart-local-create-realm-objects>`
example above. 

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.delete-an-object.js
  :language: javascript

.. _node-quickstart-local-watch-a-collection:

Watch a Collection
------------------
You can :ref:`watch a realm, collection, or object for changes
<node-change-notifications>` by registering event handlers with the
:js-sdk:`Realm.addListener() <Realm.html#addListener>`
:js-sdk:`Object.addListener() <Realm.Object.html#addListener>`
:js-sdk:`Collection.addListener() <Realm.Collection.html#addListener>`
methods.

In the following example, an application developer watches for changes to the
``Task`` collection.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.watch-a-collection.js
  :language: javascript

.. _node-quickstart-local-close-a-realm:

Close a Realm
-------------
Call the :js-sdk:`realm.close() <Realm.html#close>` method when done with a realm instance to avoid memory leaks.

.. literalinclude:: /examples/generated/node/quickstart-local.snippet.close-a-realm.js
  :language: javascript

Add Device Sync (Optional)
--------------------------

This section illustrates how to authenticate with an Anonymous User and open a
Flexible Sync realm to sync data between devices.

Prerequisites
~~~~~~~~~~~~~

- :ref:`An App Services App <create-a-realm-app>`
- :ref:`Anonymous authentication <anonymous-authentication>` enabled in the App Services UI
- :ref:`Flexible Sync <enable-flexible-sync>` enabled with :ref:`Development Mode <development-mode>`
  on and an ``owner_id`` field in the :guilabel:`Queryable Fields` section

.. _node-quick-start-init-app:

Initialize the App
~~~~~~~~~~~~~~~~~~

To use App Services features, such as authentication and sync, you must first access
your App Services App using your App ID. You can :ref:`find your App ID in
the App Services UI <find-your-app-id>`.

.. code-block:: javascript

   import Realm from "realm";

   const appId = "<yourAppId>"; // Set App ID here.
   const appConfig = {
     id: appId,
     timeout: 10000
   };
   const app = new Realm.App(appConfig);

.. _node-quick-start-authenticate:

Authenticate a User
~~~~~~~~~~~~~~~~~~~

To authenticate and log in a user, call :js-sdk:`App.logIn()
<Realm.App.html#logIn>`. When :ref:`anonymous authentication
<anonymous-authentication>` is enabled, users can immediately log into your app
without providing any identifying information:

.. code-block:: javascript
   :emphasize-lines: 8,9

   import Realm from "realm";

   const appId = "<yourAppId>"; // Set App ID here.
   const appConfig = {
     id: appId,
     timeout: 10000
   };

   async function anonymousLogin() {
     let user;
     try {
       const app = new Realm.App(appConfig); // pass in the appConfig variable that you created earlier

       const credentials = Realm.Credentials.anonymous(); // create an anonymous credential
       user = await app.logIn(credentials);
       return user;

     } catch (error) {
         throw `Error logging in anonymously: ${JSON.stringify(error,null,2)}`;
     }
   }

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

After you have initialized your App, authenticated a user, and
defined your object model, you can create a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>`:

If you have opened a local realm following the :ref:`Open a Realm
<node-quickstart-local-open-a-realm>` section above, replace the
``RealmConfiguration`` with the ``SyncConfiguration`` described below.

Pass the authenticated user and the ``Item`` class to the ``SyncConfiguration``
function to create a :ref:`Flexible Sync Configuration
<node-flexible-sync>`.

You need at least one subscription before you can read from or write to the
realm. Use ``Configuration.syncinitialSubscriptions`` to define the initial subscription set when
the Realm file is first opened. Pass the query you wish to subscribe to and a
name for the subscription to the :js-sdk:`add()
<Realm.App.Sync.MutableSubscriptionSet.html#add>` method on the
``MutableSubscriptionSet``.

.. code-block:: javascript
   :emphasize-lines: 8,9

   const config = {
     sync: {
       user: app.currentUser,
       flexible: true,
       initialSubscriptions: {
         update: (subs, realm) => {
           subs.add(
             realm.objects("Item").filtered("ownerId == $0", app.currentUser.id)
           );
         },
       },
     },
   };
   const realm = await Realm.open(config);

The syntax to :ref:`read <node-read-operations>`, :ref:`write <node-write-operations>`, 
and :ref:`watch for changes <node-react-to-changes>` on a
synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.
