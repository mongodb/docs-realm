.. _node-client-resets:

===========================
Client Resets - Node SDK
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

When using :doc:`{+sync+} </sync>`, a **client
reset** is a serious error recovery task that your client
app must perform in the following situation:

- The given synced {+realm+} on the server was restored from a backup.

- The client app made changes to that {+realm+} since the backup was made,
  but did not sync those changes back to the server before the server
  was restored.

In other words, the client app must carry out a client reset
on a given synced {+realm+} if the server is restored to a
version older than the version on the client.

.. warning::

   A client reset erases all local data and downloads a new copy of the
   data stored in MongoDB Atlas. Performing a client reset loses all local
   changes made since the client last successfully synced.

Example
-------
Define an error handler function in your :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>` object. 

Initiate a client reset if the ``error.name`` is ``"ClientReset"``. Call
:js-sdk:`Realm.App.Sync.initiateClientReset()
<Realm.App.Sync.html#.initiateClientReset>` with the {+realm+} ``App`` and the
``realm path``.

The error object also contains the location of the backup copy of the Realm file
once the client reset process is carried out via the ``error.config.path``. You
can optionally move this backup file, using the :nodejs:`fs.renameSync
</api/fs.html#fs_fs_renamesync_oldpath_newpath>` method, to a known location for
a restore.

Discard the reference to the realm instance by setting the realm to ``null``.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.codeblock.sync-changes-between-devices-perform-a-client-reset.js
   :language: javascript

