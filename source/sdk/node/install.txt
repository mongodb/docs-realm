.. _node-install:

=========================
Install Realm for Node.js
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The Realm Node.js SDK enables development of applications using the
JavaScript and `TypeScript <https://www.typescriptlang.org/>`__ languages.
Realm on Node.js is best suited for writing server-side applications. Your
Node.js application could be one component in a wider stack that also includes
iOS and Android apps.

The Realm Node.js SDK is not suitable for front-end application
development.

- Due to limitations of the browser environment, it is not possible to build a
  browser-based web app with this SDK. For front-end web applications, use the
  Realm :ref:`Web SDK <web-intro>`.

- For cross-platform mobile app development, use the Realm :doc:`React Native SDK </sdk/react-native/install>`.

Prerequisites
-------------

Before getting started, ensure your environment meets the
following prerequisites:

- `Node.js <https://nodejs.org/en/>`__ version 12.x or later (including Node.js version 14) 
- Linux, macOS 10.8 (or later), or Windows 8 (or later)

Installation
------------

Follow these steps to create a Node.js project and add the
Realm Node.js SDK to it.

.. procedure::

   .. step:: Create a Node.js Project


      Create your Node.js project by creating a new directory
      for your project and running ``npm init`` in that
      directory. In the example below, replace ``MyRealmApp``
      with your desired project name. Answer all of the prompts
      to fill out the details of your project.

      .. code-block:: bash

         mkdir MyRealmApp && cd MyRealmApp && npm init


   .. step:: Install Realm with NPM


      In your Node.js project directory, use the following command
      to add Realm to your project:

      .. code-block:: bash

         npm install realm
      
. _node-typescript-support:

TypeScript Support (Optional)
-----------------------------

You can declare a Realm Object Model using TypeScript property types
declarations on classes. The Realm JS SDK will derive the schema at runtime from
the types declared in your TS source files. This allows you to use TypeScript
syntax without needing to explicitly define a schema.

To do so, follow the steps below to install and configure:

-  the :npm:`Realm Babel Plugin <package/@realm/babel-plugin>`
-  the :npm:`@babel/plugin-proposal-decorators <package/@babel/plugin-proposal-decorators>`

Although we recommend installing and configuring
``@babel/plugin-proposal-decorators`` as detailed below, it is only required if
you intend to use :ref:`decorators <node-ts-decorators>` in your
classes. 

.. procedure::

   .. step:: Enable TypeScript


      TypeScript is a superset of JavaScript that adds static
      type checking and other features intended to make
      application-scale development more robust. If you'd like
      to use TypeScript, follow the TypeScript team's official
      `Node Starter guide
      <https://github.com/Microsoft/TypeScript-Node-Starter#typescript--node>`__.
      Realm supports TypeScript natively and integrates easily
      into a TypeScript project.

   .. step:: Install the Realm Babel Plugin and Babel Plugin Proposal Decorators Package
      
      Run the following command to add them to your `dev dependencies
      <https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file>`_:

      .. code-block:: shell
         
         npm install --save-dev @realm/babel-plugin @babel/plugin-proposal-decorators

   .. step:: Add the Plugins to Your Babel Config

      Add the following to your ``babel.config.js`` file to apply the `plugins <https://babeljs.io/docs/en/plugins>`_

      .. code-block:: javascript

         const presets = [ ... ];
         module.exports = { 
            presets,
            plugins: [
               '@realm/babel-plugin',
               ['@babel/plugin-proposal-decorators', { legacy: true }],  // Optional, unless you're using decorators
            ],
         };
   .. step:: Enable Decorators in your TS Config File (Optional)

      Enable experimental decorators in your `tsconfig.json <https://www.typescriptlang.org/docs/handbook/tsconfig-json.html>`_ within your ``compilerOptions``:

      .. code-block:: json

         {
            "compilerOptions": {
               "experimentalDecorators": true
            },
         }

IoT Installation
----------------

To create a Node.js project and add the Realm Node.js SDK on an
Internet of Things (IoT) platform such as the Raspberry Pi 2, 3, or 4
running Raspberry Pi OS (formerly Raspbian), follow the steps below:

.. procedure::

   .. step:: Install a C++ Compiler


      The Realm IoT SDK is not distributed as a binary, so you must build
      it from source. To do this, you'll need a working C++ compiler. To
      install such a compiler on your IoT device, run the following command:

      .. code-block:: bash

         sudo apt install build-essential g++ libssl-dev


   .. step:: Create a Node.js Project


      Create your Node.js project by creating a new directory
      for your project and running ``npm init`` in that
      directory. In the example below, replace ``MyRealmApp``
      with your desired project name. Answer all of the prompts
      to fill out the details of your project.

      .. code-block:: bash

         mkdir MyRealmApp && cd MyRealmApp && npm init


   .. step:: Install Realm with NPM


      In your Node.js project directory, use the following command
      to add Realm to your project:

      .. code-block:: bash

         npm install realm


   .. step:: Enable TypeScript (optional)


      TypeScript is a superset of JavaScript that adds static
      type checking and other features intended to make
      application-scale development more robust. If you'd like
      to use TypeScript, follow the TypeScript team's official
      `Node Starter guide
      <https://github.com/Microsoft/TypeScript-Node-Starter#typescript--node>`__.
      Realm supports TypeScript natively and integrates easily
      into a TypeScript project.

Import Realm
------------

Add the following line to the top of your source files where
you want to use Realm:

.. tabs-realm-languages::

   .. tab::
      :tabid: javascript

      .. code-block:: javascript

         const Realm = require("realm");

   .. tab::
      :tabid: typescript

      .. code-block:: typescript

         import Realm from "realm";
