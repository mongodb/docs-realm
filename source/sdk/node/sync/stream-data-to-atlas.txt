.. _node-stream-data-to-atlas:

==================================
Stream Data to Atlas - Node.js SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/data-ingest-overview.rst

Sync Data Unidirectionally from a Client Application
----------------------------------------------------

.. procedure::

   .. step:: Define an Asymmetric Object

      Asymmetric objects sync data unidirectionally. Define an asymmetric object
      by setting ``asymmetric`` to ``true`` in your :js-sdk:`object model 
      <Realm.html#~ObjectSchema>`:

      .. literalinclude::  /examples/generated/node/asymmetric-sync.snippet.asymmetric-sync.js
         :language: javascript
         :emphasize-lines: 4

      For more information on how to define an asymmetric object, see: 
      :ref:`Define an Asymmetric Object <node-define-an-asymmetric-object>`.

   .. step:: Connect and Authenticate with an App Services App

      To stream data from the client to your backend App, you must 
      :ref:`connect to an App Services backend 
      <node-connect-to-mongodb-realm-backend-app>` and
      :ref:`authenticate a user <node-authenticate-users>`.

      .. literalinclude:: /examples/generated/node/authenticate.snippet.anonymous-login.js
         :language: javascript

      Data Ingest is a feature of Flexible Sync, so the App you connect 
      to must use :ref:`Flexible Sync <flexible-sync>`.

   .. step:: Open a Realm

      After you have an authenticated user, you can open a synced realm
      using a Flexible Sync :js-sdk:`configuration object <Realm.html#~Configuration>`.

      .. literalinclude:: /examples/generated/node/flexible-sync.snippet.open-flexible-sync-realm.js
         :language: javascript

      Unlike bi-directional Sync, Data Ingest does not use a 
      :ref:`Flexible Sync subscription <node-flexible-sync>`.
         
      You cannot query an asymmetric object or write it to a local
      realm, so asymmetric objects are incompatible with bi-directional
      Flexible Sync, Partition-Based Sync, or local Realm use.

   .. step:: Create Asymmetric Objects

      Once you have an open Realm, you can create an asymmetric object inside
      a write transaction using :js-sdk:`Realm.create() <Realm.html#create>`.
      When creating an asymmetric object, ``Realm.create()`` returns
      ``undefined`` rather than the object itself.

      .. literalinclude::  /examples/generated/node/asymmetric-sync.snippet.write-asymmetric-object.js
         :language: javascript
      
      You cannot read these objects. Once created, they sync to the App 
      Services backend and the linked Atlas database.
