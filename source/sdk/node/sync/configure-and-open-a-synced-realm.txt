.. _node-open-a-synced-realm:
.. _node-sync-changes-between-devices:

======================================
Configure a Synced Realm - Node.js SDK
======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-synced-realm:

Synced Realms
-------------

You can configure a realm to automatically synchronize data between many devices
that each have their own local copy of the data. Synced realms use a different
configuration than local-only realms and require an Atlas App Services backend to handle
the synchronization process.

Applications can always create, modify, and delete synced realm objects locally,
even when offline. Whenever a network connection is available, the Realm SDK
opens a connection to an application server and syncs changes to and from other
clients. The :ref:`Atlas Device Sync protocol <sync-protocol>` and server-side
operational transforms guarantee that all fully synced instances of a realm see
exactly the same data, even if some changes occurred offline and/or were
received out of order.

.. tip:: Learn How to Configure and Use Sync
   
   For more information on synced realms, including directions on how to set up
   sync in a Realm app, see :ref:`Atlas Device Sync Overview <sync>`.

.. _node-sync-changes-prereq:

Prerequisites
-------------

Before you configure a realm with Flexible Sync in a Node.js application:

#. :ref:`Enable Flexible Sync on the backend <enable-flexible-sync>`.
   You must configure Flexible Sync in the backend before you can use it with your
   client application.
#. :ref:`Initialize the App client <node-connect-to-mongodb-realm-backend-app>`.
#. :ref:`Authenticate a user <node-authenticate-users>` in your client project.

Open a Synced Realm
-------------------

You can open a Synced realm with a Flexible Sync or Partition-Based Sync. If
you have not yet decided or are unsure which to use, read the :ref:`Choose Your
Sync Mode <sync-modes>` page.

By default, Realm syncs all data from the server before returning.
If you want to sync data in the background, read the :ref:`Open a Synced Realm
While Offline <node-open-synced-realm-offline>` section.

.. _node-flexible-sync-open-realm:

Open a Flexible Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To open a realm using Flexible Sync, call :js-sdk:`Realm.open() <Realm.html#.open>`. 
Pass in a :js-sdk:`Configuration <Realm.html#~Configuration>`
object, which must include the ``sync`` property defining a 
:js-sdk:`SyncConfiguration <Realm.App.Sync.html#~SyncConfiguration>` object. 
In the SyncConfiguration, you must include include a ``user`` and ``flexible:true``.

.. literalinclude:: /examples/generated/node/flexible-sync.snippet.open-flexible-sync-realm.js
   :language: javascript

.. important:: Flexible Sync Requires a Subscription

   You can't use a Flexible Sync realm until you add at least one subscription.
   To learn how to add subscriptions, see: :ref:`<node-sync-add-subscription>`.

.. _node-partition-sync-open-realm:

Open a Partition-Based Synced Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/node-open-a-synced-realm.rst

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-synced-realm-online-with-car-schema.js
   :language: javascript

.. _node-open-synced-realm-offline:

Open a Synced Realm While Offline
---------------------------------

.. include:: /includes/offline-login.rst

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.use-cached-user-to-login.js
   :language: javascript

The following subsections show how to use background synchronization to access a
realm while offline. To do this, use the cached user and an
:js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` object. 

Within your Sync Configuration, set the optional ``newRealmFileBehavior`` and
``existingRealmFileBehavior`` fields to your ``OpenRealmBehaviorConfiguration`` object
to enable background synchronization. 

.. important:: Offline Login is Supported for Both Flexible and Partition-Based Sync Configurations

   You can open a realm immediately with background sync or after a timeout
   elapses using either Flexible and Partition-Based Sync.

.. _node-open-immediately-with-background-sync:

Open Immediately with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the user's device is not connected to the internet or you're uncertain of
it's connection status, set the realm behavior's type to ``openImmediately``. This 
syncs data from the server in the background. 

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-synced-realm-with-background-sync.js
      :language: javascript

.. _node-open-after-timeout-with-background-sync:

Open After Timeout with Background Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to sync data but you're in an environment where it's uncertain if
the user has an Internet connection, specify a ``timeOut``. This
automatically opens the realm when either: 

- the timeout period elapses.
- the realm has completely downloaded.

If the realm doesn't finish downloading before the timeout, the initial
realm sync continues in the background. 

.. literalinclude:: /examples/generated/node/open-and-close-a-realm.snippet.open-synced-realm-config.js
  :language: javascript

.. _node-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

You may want to sync changes in the background to display partial data to the
user while the synced realm downloads data from the server, preventing the
user experience from being blocked. We recommend syncing changes in the
background for applications in which the user's device may go offline. To sync
changes in the background, open a synced realm synchronously.

Create a :js-sdk:`OpenRealmBehaviorConfiguration
<Realm.App.Sync.html#~OpenRealmBehaviorConfiguration>` object and set its
``type`` to ``"openImmediately"``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-create-OpenRealmBehaviorObject.js
      :language: javascript

Create a :js-sdk:`Configuration <Realm.html#~Configuration>` object, which must
include the ``sync`` property defining a :js-sdk:`SyncConfiguration
<Realm.App.Sync.html#~SyncConfiguration>` object. Set this
``OpenRealmBehaviorConfiguration`` object as the value for
the ``newRealmFileBehavior`` and ``existingRealmFileBehavior`` fields of the
``SyncConfiguration``. 

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-create-config.js
      :language: javascript

Finally,  call :js-sdk:`Realm.open() <Realm.html#.open>`
to open a synced realm. This will create a sync session and begin
downloading any existing data from the server in the background.

.. literalinclude:: /examples/generated/node/sync-changes-between-devices.snippet.sync-changes-between-devices-sync-changes-in-the-background-open-realm.js
      :language: javascript
