.. _node-manage-sync-session:

============================================
Manage a Sync Session - Node.js SDK
============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you use Atlas Device Sync, the Node.js SDK syncs data with Atlas
in the background using a sync session. A sync session starts whenever
you open a synced realm.

Prerequisites
-------------

Before you can manage a sync session, you must perform the following:

#. :ref:`Open a synced realm <node-open-a-synced-realm>`
#. :ref:`Add a sync subscription
   <node-sync-subscribe-to-queryable-fields>`

.. _node-access-sync-session:

Access Sync Session
-------------------

After opening a synced realm, you can access its sync session with the
:js-sdk:`Realm.syncSession <Realm.html#syncSession>` property.

.. code-block:: javascript

  const realm = await Realm.open(config);
  const syncSession = realm.syncSession;

.. _node-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------

Opening a synced realm starts a :js-sdk:`sync session <Realm.App.Sync.Session.html>`.
You can pause and resume the sync session on the realm. Pausing a sync 
session only pauses that realm's sync session. If you have more than one 
open realm, pause does not affect the sync sessions for other realms.

To pause synchronization, use the :js-sdk:`syncSession.pause()
<Realm.App.Sync.Session.html#~pause>` method. To resume synchronization, use the
:js-sdk:`syncSession.resume() <Realm.App.Sync.Session.html#~resume>` method.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/device-sync.snippet.pause-sync-session.ts
        :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/device-sync.snippet.pause-sync-session.js
        :language: javascript

When to Pause a Sync Session
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/when-to-pause-sync.rst

.. _node-check-network-connection:

Check the Network Connection
----------------------------

To check the current state of the connection to the server, call the
:js-sdk:`syncSession.connectionState()
<Realm.App.Sync.Session.html#.connectionState>` method.

Realm's *offline-first* design means that you generally don't need to
check the current network connection state. That said, the
``syncSession.connectionState()`` method is available if your app needs to
gets the current state of the connection to the server.

.. tabs-realm-languages::

   .. tab::
      :tabid: typescript

      .. literalinclude:: /examples/generated/node/device-sync.snippet.check-network-connection.ts
        :language: typescript

   .. tab::
      :tabid: javascript

      .. literalinclude:: /examples/generated/node/device-sync.snippet.check-network-connection.js
        :language: javascript

.. _node-multiplex-sync-sessions:

Multiplex Sync Sessions
-----------------------

Enable :wikipedia:`session multiplexing <Session_multiplexing>` to consolidate
multiple sync sessions of a Realm app. 
Only use session multiplexing if you see errors about reaching the file descriptor limit,
and you know you are using many sync sessions.

To enable session multiplexing, call :js-sdk:`Realm.App.Sync.enableSessionMultiplexing()
<Realm.App.Sync.html#.enableSessionMultiplexing>` with your :js-sdk:`Realm.App <Realm.App.html>`. 

.. example::
   
   .. literalinclude:: /examples/SyncChanges/enable-session-multiplexing.js
      :language: javascript
