.. _sdks-crud-read:

============
Read Objects
============

.. meta:: 
   :description: Read objects from the database by object type. Query by property to filter results.
   :keywords: Realm, C++ SDK, Flutter SDK, Kotlin SDK, Java SDK, .NET SDK, Node.js SDK, Swift SDK, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: cpp, csharp, dart, java, javascript/typescript, kotlin, objective-c, swift

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tabs-selector:: drivers

This page describes how to query and read objects from the a database 
with Atlas Device SDK. You can read the data that you have
:ref:`written <sdks-write-transactions>` to the database by finding,
filtering, and sorting objects.

A read from the database generally consists of the following steps:

- Get all objects of a certain type from the database instance.
- Optionally, filter the results.
- Optionally, sort the results.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/cpp/crud/read-intro-description.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/crud/read-intro-description.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/crud/read-intro-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/crud/read-intro-description.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/java/crud/read-intro-description.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/crud/read-intro-js-ts-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/crud/read-intro-description.rst

   .. tab::
      :tabid: objectivec

      .. include:: /includes/api-details/objectivec/crud/read-intro-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/crud/read-intro-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/crud/read-intro-js-ts-description.rst

The syntax for read operations is the same for synced and non-synced databases.

.. _sdks-read-characteristics:

Read Characteristics
--------------------

Design your app's data access patterns around these read characteristics to
read data as efficiently as possible.

.. _sdks-results-are-not-copies:

Results Are Not Copies
~~~~~~~~~~~~~~~~~~~~~~

Unless you are working with frozen objects, results to a query are not copies
of your data. Modifying the results of a query modifies the data on disk
directly. This memory mapping also means that results are **live**: that is,
they always reflect the current state on disk.

For more details about live versus frozen objects, refer to
:ref:`sdks-live-and-frozen-objects`.

.. _sdks-results-are-lazy:

Results Are Lazy
~~~~~~~~~~~~~~~~

The SDK only runs a query when you actually request the results of that query.
This lazy evaluation enables you to write highly performant code for handling
large data sets and complex queries. You can chain several filter operations
without requiring extra work to process the intermediate state.

.. _sdks-references-retained:

References Are Retained
~~~~~~~~~~~~~~~~~~~~~~~

Atlas Device SDK automatically retains all of an object's :ref:`relationships
<sdks-relationships>` as direct references. This enables you to traverse your
graph of relationships directly through the results of a query.

A **direct reference**, or pointer, allows you to access a related object's
properties directly through the reference.

Other databases typically copy objects from database storage into application
memory when you need to work with them directly. Because application objects
contain direct references, you are left with a choice: copy the object
referred to by each direct reference out of the database in case it's needed,
or copy the foreign key for each object and query for the object with that key
if it's accessed. If you choose to copy referenced objects into application
memory, you can use up a lot of resources for objects that are never accessed.
If you copy only the foreign key, referenced object lookups can cause your
application to slow down.

The SDK bypasses all of this using zero-copy live objects. Database object
accessors point directly into database storage using memory mapping, so there
is no distinction between the objects in the database and the results of your
query in application memory. Because of this, you can traverse direct
references across an entire database from any query result.

.. _sdks-limiting-results:

Limiting Query Results
~~~~~~~~~~~~~~~~~~~~~~

As a result of lazy evaluation, you do not need any special mechanism to
limit query results with the SDK. For example, if your query matches thousands
of objects, but you only want to load the first ten, access only the first ten
elements of the results collection. None of the remaining objects are loaded
into memory.

.. _sdks-pagination:

Pagination
~~~~~~~~~~

With lazy evaluation, pagination is very direct. Consider a query that matches
thousands of objects in your realm. Your app displays one hundred objects per
page. To advance to any page, access the elements of the results collection
starting at the index that corresponds to the target page.

.. _sdks-read-database-objects:

Read Database Objects
---------------------

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/cpp/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/crud/read-database-objects-procedure.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/java/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/crud/read-database-objects-js-ts-procedure.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: objectivec

      .. include:: /includes/api-details/objectivec/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/crud/read-database-objects-procedure.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/crud/read-database-objects-js-ts-procedure.rst

.. _sdks-read-filter-by-property:

Filter by Property
------------------


.. _sdks-find-object-by-primary-key:

Find an Object by Primary Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _sdks-read-results:

SDK Results Collections
-----------------------

Placeholder. Add some concept information about results being a special SDK
auto-updating collection type for read operations (except in Kotlin, where it's
frozen).

.. _sdks-query-engines:

Filter Data
-----------

Placeholder. Add some concept information about the SDK having query engines,
and the one you use varying depending on the SDK you're using. i.e.:

- RQL (C++ (subset only), C#, Dart, JS, Kotlin, TS, maybe also Java/Java Kotlin?)
- LINQ (C#)
- Swift SDK (Swift & Objective-C Type-Safe queries and NS Predicate queries)
- Java (Java & Kotlin, Fluent Interface)

Read Relationship Properties
----------------------------

.. _sdks-query-inverse-relationships:

Query Inverse Relationships
~~~~~~~~~~~~~~~~~~~~~~~~~~~
