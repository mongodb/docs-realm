.. _cpp-manage-users:

=======================================
Manage Email/Password Users - C++ SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When you enable the :ref:`email/password provider <email-password-authentication>` 
in your Atlas App Services App, you can handle user authentication from client code
by registering a new user account.

.. _cpp-register-email-password-user:

Register a New User
-------------------

.. literalinclude:: /examples/generated/cpp/authentication.snippet.register-user.cpp
   :language: cpp

Confirm Registration With an Email
----------------------------------

You can use Atlas App Services to :ref:`send a confirmation email <auth-run-a-confirmation-function>` 
to newly-registered user's email addresses. After confirmation, you can log
the user in.

.. _cpp-authenticate-user:

Log a Registered User in or out
-------------------------------

Users must be registered before you can log them in or out.

To log a user in:

.. literalinclude:: /examples/generated/cpp/authentication.snippet.log-user-in.cpp
   :language: cpp

To log a user out:

.. literalinclude:: /examples/generated/cpp/authentication.snippet.log-user-out.cpp
   :language: cpp

Handle Password Resets With an Atlas Function
---------------------------------------------

To reset a user password, you can :ref:`run a password reset function 
<auth-run-a-password-reset-function>`. To do so, you need to properly configure
your Atlas App Services App.

1. In the Atlas UI, go to your App
#. Select :guilabel:`Authentication`, then select the :guilabel:`Authentication Providers` tab
#. In the :guilabel:`Email/Password` row, press the :guilabel:`EDIT` button
#. Under :guilabel:`User Confirmation`, select :guilabel:`Run a confirmation function`
#. Select your confirmation function or create a new function, then press :guilabel:`Save`

Now, you can use the custom password reset function you created in your client code.
