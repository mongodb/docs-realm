.. _cpp-supported-property-types:

=================================
Supported Types - C++ SDK Preview
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Realm C++ SDK Preview currently supports these property types.

Optionals use the class template 
`std::optional <https://en.cppreference.com/w/cpp/utility/optional>`__.

Property Cheat Sheet
--------------------

You can use the following types to define your object model
properties.

.. include:: /includes/map-to-bson-type.rst

.. tabs::

   .. tab:: Current
      :tabid: current

      .. versionadded:: v0.3.0-preview Adds realm::decimal128

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40

         * - Type
           - Required
           - Optional
         * - Bool
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-bool.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-bool.cpp
                :language: cpp
                :copyable: false
         * - Int64
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-int.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-int.cpp
                :language: cpp
                :copyable: false
         * - Double
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-double.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-double.cpp
                :language: cpp
                :copyable: false
         * - String
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-string.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-string.cpp
                :language: cpp
                :copyable: false
         * - Enum
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-enum.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-enum.cpp
                :language: cpp
                :copyable: false
         * - Binary Data
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-binary-data.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-binary-data.cpp
                :language: cpp
                :copyable: false
         * - Date
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-date.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-date.cpp
                :language: cpp
                :copyable: false
         * - Decimal128
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-decimal128.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-decimal128.cpp
                :language: cpp
                :copyable: false
         * - UUID
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-uuid.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-uuid.cpp
                :language: cpp
                :copyable: false
         * - Object ID
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-object-id.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-optional-object-id.cpp
                :language: cpp
                :copyable: false
         * - Mixed Data Type
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-mixed-type.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - Map
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-map-type.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - List
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-required-list.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - User-defined Object
           - N/A
           - .. code-block:: cpp
                :copyable: false

                MyClass* opt_obj_name;
         * - User-defined Embedded Object
           - N/A
           - .. code-block:: cpp
                :copyable: false

                MyEmbeddedClass* opt_embedded_object_name;

      .. include:: /includes/tip-cpp-beta-experimental-features.rst

   .. tab:: Deprecated
      :tabid: deprecated

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40

         * - Type
           - Required
           - Optional
         * - Bool
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-bool.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-bool.cpp
                :language: cpp
                :copyable: false
         * - Int64
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-int.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-int.cpp
                :language: cpp
                :copyable: false
         * - Double
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-double.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-double.cpp
                :language: cpp
                :copyable: false
         * - String
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-string.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-string.cpp
                :language: cpp
                :copyable: false
         * - Enum
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-enum.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-enum.cpp
                :language: cpp
                :copyable: false
         * - Binary Data
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-binary-data.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-binary-data.cpp
                :language: cpp
                :copyable: false
         * - Date
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-date.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-date.cpp
                :language: cpp
                :copyable: false
         * - UUID
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-uuid.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-uuid.cpp
                :language: cpp
                :copyable: false
         * - Object ID
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-object-id.cpp
                :language: cpp
                :copyable: false
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.optional-object-id.cpp
                :language: cpp
                :copyable: false
         * - Mixed Data Type
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-mixed-type.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - Map
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-map-type.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - List
           - .. literalinclude:: /examples/generated/cpp/supported-types.snippet.required-list.cpp
                :language: cpp
                :copyable: false
           - N/A
         * - User-defined Object
           - N/A
           - .. code-block:: cpp
                :copyable: false

                realm::persisted<std::optional<MyClass>> opt_obj_name;
         * - User-defined Embedded Object
           - N/A
           - .. code-block:: cpp
                :copyable: false

                realm::persisted<std::optional<MyEmbeddedClass>> opt_embedded_object_name;

Supported Type Implementation Details
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Some of the supported types above are aliases for:

- ``mixed``: A union-like object that can represent a value any of the 
  supported types. It is implemented using the class template 
  `std::variant <https://en.cppreference.com/w/cpp/utility/variant>`__.
  This implementation means that a ``mixed`` property holds a value of 
  one of its alternative types, or in the case of error - no value.
- For dates, use the `chrono library 
  <https://en.cppreference.com/w/cpp/chrono>`__
  to store a ``time_point`` relative to the ``system_clock``: 
  ``<std::chrono::time_point<std::chrono::system_clock>>``

.. _cpp-map:

Map/Dictionary
--------------

The :cpp-sdk:`Map <classrealm_1_1persisted__map__base.html>` is an 
associative array that contains key-value pairs with unique keys.

You can declare a Map as a property of an object:

.. tabs::

   .. tab:: Current
      :tabid: current

      .. literalinclude:: /examples/generated/cpp/supported-types.snippet.beta-dog-map-model.cpp
         :language: cpp

      .. include:: /includes/tip-cpp-beta-experimental-features.rst

   .. tab:: Deprecated
      :tabid: deprecated

      .. literalinclude:: /examples/generated/cpp/define-object-model.snippet.dog-map-model.cpp
         :language: cpp

String is the only supported type for a map key, but map values can be:

- Required versions of any of the SDK's supported data types
- Optional user-defined object links
- Optional embedded objects

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/cpp/crud.snippet.percent-encode-disallowed-characters.cpp
   :language: cpp

.. _cpp-collection-types:

Collection Types
----------------

Realm has several types to represent groups of objects,
which we call **collections**. A collection is an object that contains
zero or more instances of one :ref:`Realm type
<cpp-realm-objects>`. Realm collections are **homogenous**:
all objects in a collection are of the same type.

You can filter and sort any collection using Realm's
:ref:`query engine <cpp-client-query-engine>`. Collections are
:ref:`live <cpp-live-object>`, so they always reflect the current state
of the realm instance on the current thread. You can also
listen for changes in the collection by subscribing to :ref:`collection
notifications <cpp-register-a-collection-change-listener>`.

.. _cpp-results-collections:

Results
~~~~~~~

The C++ SDK :cpp-sdk:`Results <structrealm_1_1experimental_1_1results.html>` 
collection is a type representing objects retrieved from queries. A 
``Results`` collection represents the lazily-evaluated results of a 
query operation. Results are immutable: you cannot add or remove elements 
to or from the results collection. Results have an associated query that 
determines their contents.

For more information, refer to :ref:`the Read documentation <cpp-crud-read>`.

Collections as Properties
~~~~~~~~~~~~~~~~~~~~~~~~~

The C++ SDK also offers several collection types you can use as properties 
in your data model:

#. :cpp-sdk:`List 
   <structrealm_1_1internal_1_1bridge_1_1list.html>`, a type representing 
   :ref:`to-many relationships <cpp-list-collections>` in models.
#. :cpp-sdk:`linking_objects 
   <structrealm_1_1experimental_1_1linking__objects.html>`, a type 
   representing :ref:`inverse relationships 
   <cpp-define-an-inverse-relationship-property>` in models.
#. :ref:`Map <cpp-map>`, a type representing an associative array of key-value 
   pairs with unique keys.

.. _cpp-live-collections:

Collections are Live
~~~~~~~~~~~~~~~~~~~~

Like :ref:`live objects <cpp-live-object>`, Realm collections
are usually **live**:

- Live results collections always reflect the current results of the associated query.
- Live lists always reflect the current state of the relationship on the realm instance.

The one case when a collection is **not** live is when the collection is 
unmanaged. For example, a List property of a Realm object that has not 
been added to a realm yet or that has been moved from a realm is not live.

Combined with :ref:`collection notifications
<cpp-register-a-collection-change-listener>`, live collections enable
clean, reactive code. For example, suppose your view displays the
results of a query. You can keep a reference to the results collection
in your view code, then read the results collection as needed without
having to refresh it or validate that it is up-to-date.

.. important:: Results indexes may change

   Since results update themselves automatically, do not
   store the positional index of an object in the collection
   or the count of objects in a collection. The stored index
   or count value could be outdated by the time you use
   it.
