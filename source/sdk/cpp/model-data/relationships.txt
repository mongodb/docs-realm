.. _cpp-relationships:

===============================
Relationships - C++ SDK (Alpha)
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Key Concept: Relationships
--------------------------

Realm doesn't use bridge tables or explicit joins to define 
relationships as you would in a relational database. Realm
handles relationships through embedded objects or reference properties to 
other Realm objects. You read from and write to these 
properties directly. This makes querying relationships as performant as 
querying against any other property.

Realm supports **to-one**, **to-many**, and **inverse**
relationships. However, the C++ SDK Alpha does not yet support inverse 
relationships. Realm also provides a special type of object, called an
:ref:`embedded object <cpp-embedded-object>`, that is conceptually 
similar to a relationship but provides additional constraints.

.. _cpp-to-one-relationship:

To-One Relationship
~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object relates to one other object. 
You define a to-one relationship for an object type in its object 
model. Specify a property where the type is the related Realm 
object type. For example, a dog might have a to-one relationship with 
a favorite toy.

.. _cpp-to-many-relationship:
.. _cpp-list-collections:

To-Many Relationship
~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship means that an object relates to more than one 
other object. In Realm, a to-many relationship is a list of 
references to other objects. For example, a person might have many dogs.

Realm represents a to-many relationship between two Realm
types as a list. Lists are mutable: within a write transaction, you can 
add and remove elements to and from a list. Lists are not associated with 
a query and are declared as a property of the object model.

.. _cpp-inverse-relationship:

Inverse Relationship
~~~~~~~~~~~~~~~~~~~~

Relationship definitions in Realm are unidirectional. An 
**inverse relationship** links an object back to an object that refers 
to it. The C++ SDK Alpha does not yet support inverse relationships.

.. _cpp-declare-relationship-properties:

Declare Relationship Properties
-------------------------------

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. _cpp-define-a-to-one-relationship-property:

Define a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship maps one property to a single instance of
another object type. For example, you can model a dog having at most one 
favorite toy as a to-one relationship.

Setting a relationship field to null removes the connection between objects. 
Realm does not delete the referenced object, though, unless it is 
:ref:`an embedded object <cpp-embedded-object>`.

.. include:: /includes/note-to-one-relationships-must-be-optional.rst

.. literalinclude:: /examples/generated/cpp/define-object-model.snippet.to-one-relationship.cpp
   :language: cpp
   :emphasize-lines: 15

.. _cpp-define-a-to-many-relationship-property:

Define a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. For example, you can model a company having any
number of employees as a to-many relationship.

.. literalinclude:: /examples/generated/cpp/define-object-model.snippet.to-many-relationship.cpp
   :language: cpp
   :emphasize-lines: 7
