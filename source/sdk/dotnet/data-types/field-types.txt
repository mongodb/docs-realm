.. _dotnet-field-types:
.. _dotnet-supported-data-types:

======================
Field Types - .NET SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The .NET SDK supports three categories of data types:

- :ref:`.NET types <dotnet-dotnettypes>`
- :ref:`MongoDB.Bson types <dotnet-bsontypes>`
- :ref:`Realm-Specific types <dotnet-realmtypes>`

.. _dotnet-dotnettypes:

.NET Types
----------
{+client-database+} supports the following .NET data types and their 
nullable counterparts:

- ``bool``
- ``byte``
- ``short``
- ``int``
- ``long``
- ``float``
- ``double``
- ``decimal``
- ``char``
- ``string``
- ``byte[]``
- ``DateTimeOffset``
- ``Guid``
- ``IList<T>``, where T is any of the supported data types 
  (see :ref:`Lists <dotnet-property-lists>`)

.. note::

   The ``byte``, ``char``, ``short``, ``int``, and ``long`` types  are all stored 
   as 64 bit integer values within {+client-database+}. 

.. _dotnet-bsontypes:

MongoDB.Bson Types
------------------

- ``ObjectId`` 
- ``Decimal128``

Guid and ObjectId Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. versionadded:: 10.2.0-beta.1

``MongoDB.Bson.ObjectId`` is a MongoDB-specific 12-byte unique value, while the 
built-in .NET type ``Guid`` is a 16-byte universally-unique value. Both types are 
:ref:`indexable <dotnet-index-field>`, and either can be used as a 
:ref:`Primary Key <dotnet-primary-key>`.

.. _dotnet-decimal128:

Using Decimal Values
~~~~~~~~~~~~~~~~~~~~

Realm supports 128-bit decimal values with the ``Decimal128`` Bson type. When 
defining a decimal type, you can use the ``Decimal128`` Bson type or the .NET 
``decimal`` type, even though it is only a 96-bit decimal. The SDK automatically 
converts between the two, although you risk losing precision or range. The 
following example shows how to use both the ``Decimal128`` Bson type and the .NET 
``decimal`` type:

.. literalinclude:: /examples/generated/dotnet/DecimalFun.codeblock.decimal128.cs
   :language: csharp

.. _dotnet-realmtypes:

Realm-Specific Types
--------------------
Any class that implements ``RealmObject`` or ``EmbeddedObject`` can contain a 
``RealmObject`` subclass and/or an :ref:`Embedded Objects <dotnet-property-embedded>` 
subclass. In addition, {+client-database+} supports the following custom types:

- :doc:`Collections </sdk/dotnet/data-types/collections>`
- :doc:`Dictionaries </sdk/dotnet/data-types/dictionaries>`
- :doc:`Sets </sdk/dotnet/data-types/sets>`
- :doc:`RealmInteger </sdk/dotnet/data-types/realm-integer>`
- :doc:`RealmValue </sdk/dotnet/data-types/realm-value>`

