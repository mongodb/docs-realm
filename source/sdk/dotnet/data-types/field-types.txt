.. _dotnet-field-types:
.. _dotnet-supported-data-types:

======================
Field Types - .NET SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+client-database+} supports the following property data types and their nullable counterparts:

- ``bool``
- ``byte``
- ``short``
- ``int``
- ``long``
- ``float``
- ``double``
- ``decimal``
- ``char``
- ``string``
- ``byte[]``
- ``DateTimeOffset``
- ``Decimal128`` from ``MongoDB.Bson``
- ``ObjectId`` from ``MongoDB.Bson``
- A ``RealmObject`` subclass 
- An ``EmbeddedObject`` subclass (see :ref:`Embedded Objects <dotnet-property-embedded>`)
- ``IList<T>`` where T is any of the previous data types (see :ref:`Lists <dotnet-property-lists>`)

The ``byte``, ``char``, ``short``, ``int``, and ``long`` types  are all stored as 64 bit integer values
within {+client-database+}. 

If you choose to provide custom constructors, you must declare a public constructor with no arguments.

.. _dotnet-decimal128:

Using Decimal Values
--------------------
Realm supports 128-bit decimal values with the ``Decimal128`` Bson type. When 
defining a decimal type, you can use the ``Decimal128`` Bson type or the .NET 
``decimal`` type, even though it is only a 96-bit decimal. The SDK automatically 
converts between the two, although you risk losing precision or range. The 
following example shows how to use both the ``Decimal128`` Bson type and the .NET 
``decimal`` type:

.. literalinclude:: /examples/generated/dotnet/DecimalFun.codeblock.decimal128.cs
   :language: csharp
