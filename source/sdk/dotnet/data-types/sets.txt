.. _dotnet-client-sets:

======================
Sets (Beta) - .NET SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.2.0-beta.1

.. include:: /includes/note-beta-feature.rst

Overview
--------

A {+service-short+} set, like the C# 
`HashSet<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0>`_, 
is an implementation of   
`ICollection<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=net-5.0>`_ 
and
`IEnumerable<> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-5.0>`_. 
It supports values of any 
:ref:`{+service-short+} type <dotnet-objects>` except :ref:`collections <dotnet-client-collections>`. 
To define a set, use a getter-only ``ISet<TValue>`` property, where ``TValue`` 
is any of the supported types.

Deleting an object from the database will remove it from any sets 
in which it existed. Therefore, a set of objects will never contain null objects.
However, sets of primitive types can contain null values. If you do not 
want to allow null values in a set, then either use non-nullable types in 
the set declaration (for example, use ``ISet<double>`` instead of 
``ISet<double?>``), or add the 
:ref:`[Required]<dotnet-required-optional-property>` attribute if the set  
contains nullable reference types, such as ``string`` or ``byte[]``.

.. important:: Not Supported with Sync

   Local-only {+client-database+}s support collections of nullable (optional) values, 
   but ``Sync`` does not.

Set Types
---------
The following code shows examples of set types:

.. literalinclude:: /examples/generated/dotnet/DataTypes.codeblock.sets.cs
   :language: csharp

Usage Example
-------------
The following code shows how to create, write to, and read from Sets.

.. note::

   You cannot use Linq to query against a {+service-short+} Set. Instead, 
   use a string query.

.. literalinclude:: /examples/generated/dotnet/DataTypes.codeblock.query-sets.cs
   :language: csharp


Data Binding
------------
Like other Realm collections, ``ISet`` implements ``INotifyCollectionChanged``, 
so you can use it in data-binding scenarios (for example, when 
:ref:`watching for changes <dotnet-react-to-changes>`). 
