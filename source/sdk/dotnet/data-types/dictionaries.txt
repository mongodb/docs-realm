.. _dotnet-client-dictionaries:

==============================
Dictionaries (Beta) - .NET SDK
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.2.0-beta.1

.. include:: /includes/note-beta-feature.rst

Overview
--------
A {+service-short+} dictionary is an implementation of   
`IDictionary <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=net-5.0>`_ 
that has keys of type ``String`` and supports values of any 
:ref:`{+service-short+} type <dotnet-objects>` except 
:ref:`collections <dotnet-client-collections>`. 
To define a dictionary, use 
a getter-only ``IDictionary<string, TValue>`` property, where ``TValue`` is any 
of the supported types.

Dictionary Types
----------------

A dictionary of objects can contain null objects. Likewise, dictionaries 
of primitive types can also contain null values. If you do not 
want to allow null values in a dictionary, then either use non-nullable types in 
the dictionary declaration (for example, use ``IDictionary<string, double>`` 
instead of ``IDictionary<string, double?>``), or add the 
:ref:`[Required]<dotnet-required-optional-property>` attribute if the dictionary  
contains nullable reference types, such as ``string`` or ``byte[]``.

.. important:: Not Supported with Sync

   Local-only {+client-database+}s support collections of nullable (optional) values, 
   but ``Sync`` does not.

The following code shows examples of dictionary types:

.. literalinclude:: /examples/generated/dotnet/DataTypes.codeblock.dictionaries.cs
   :language: csharp

Usage Example
-------------
The following code shows how to create, write to, and read from Dictionaries.

.. note::

   You cannot use Linq to query against a {+service-short+} Dictionary. Instead, 
   use a string query.

.. literalinclude:: /examples/generated/dotnet/DataTypes.codeblock.query-dictionaries.cs
   :language: csharp


Data Binding
------------
Like other Realm collections, ``IDictionary`` implements ``INotifyCollectionChanged``, 
so you can use it in data-binding scenarios (for example, when 
:ref:`watching for changes <dotnet-react-to-changes>`). 

