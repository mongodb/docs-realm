.. _dotnet-client-collections:

======================
Collections - .NET SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
One of the fundamental building blocks when working with any 
database is the **collection**. A {+service-short+} collection implements 
`IList<T> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-5.0>`_,
and contains zero or more instances of a 
:ref:`{+service-short+} type <dotnet-objects>`. Like a C# ``List``, 
a {+service-short+} collection is homogenous (all objects in a collection are of 
the same type.)

You can filter and sort any collection using {+client-database+}'s
:ref:`query engine <dotnet-client-query-engine>`. Collections are
:ref:`live <dotnet-live-object>`, so they always reflect the
current state of the :term:`{+realm+} instance` on the current
thread. You can also listen for changes in the collection by subscribing
to :ref:`collection notifications <dotnet-collection-notifications>`.

{+client-database+} has two kinds of collections: **Lists** and **Results**.

.. _dotnet-property-lists:

Lists
-----

Realm objects can contain lists of any supported data type. 
You create a collection by defining a getter-only property of type
`IList<T> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-5.0>`_,
where ``T`` can be any data type (except other collections).

Deleting an object from the database will remove it from any lists 
where it existed. Therefore, a list of objects will never contain null objects.
However, lists of primitive types can contain null values. If you do not 
want to allow null values in a list, then either use non-nullable types in 
the list declaration (for example, use ``IList<double>`` instead of 
``IList<double?>``), or add the 
:ref:`[Required]<dotnet-required-optional-property>` attribute if the list  
contains nullable reference types, such as ``string`` or ``byte[]``.

.. important:: Not Supported with Sync

   Local-only {+client-database+}s support collections of nullable (optional) values, 
   but ``Sync`` does not.
   

A **list** collection represents a :ref:`to-many
relationship <dotnet-to-many-relationship>` between two {+service-short+}
types. Lists are mutable: within a write transaction, you
can add and remove elements on a list. 

Querying Lists
~~~~~~~~~~~~~~

You cannot use Linq to query against a {+service-short+} Dictionary. Instead, 
use a string query:

.. literalinclude:: /examples/generated/dotnet/DataTypes.codeblock.query-lists.cs
   :language: csharp:


Results Collections
-------------------

A **results** collection represents the lazily-evaluated
results of a query operation. Unlike a List, results are immutable: you
cannot add or remove elements on the results collection.
This is because the contents of a results collection are determined by a 
query against the database.

.. _dotnet-lazy-evaluated-results:

Results are Lazily Evaluated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} only runs a query when you actually request the
results of that query, e.g. by accessing elements of the
results collection. This lazy evaluation enables you to
write elegant, highly performant code for handling large
data sets and complex queries.


Working wth Collections
-----------------------

.. _dotnet-live-collections:

Collections are Live
~~~~~~~~~~~~~~~~~~~~

Like :ref:`live objects <dotnet-live-object>`, {+service-short+} collections
are *usually* live:

- Live **results collections** always reflect the current results of the associated query.
- Live **lists** always reflect the current state of the relationship on the {+realm+} instance.

There are two cases, however, when a collection is **not** live:

- The collection is unmanaged: a List property of a {+service-short+} object 
  that has not been added to a {+realm+} yet or that has been copied from a 
  {+realm+}.
- The collection is :ref:`frozen <dotnet-frozen-objects>`.

Combined with :ref:`collection notifications
<dotnet-collection-notifications>`, live collections enable clean,
reactive code. For example, suppose your view displays the
results of a query. You can keep a reference to the results
collection in your view class, then read the results
collection as needed without having to refresh it or
validate that it is up-to-date.

.. important:: Indexes may change

   Since results update themselves automatically, do not
   store the positional index of an object in the collection
   or the count of objects in a collection. The stored index
   or count value could be outdated by the time you use
   it.


.. _dotnet-limiting-results:

Limiting Query Results
~~~~~~~~~~~~~~~~~~~~~~

As a result of lazy evaluation, you do not need any special
mechanism to limit query results with {+client-database+}. For example, if
your query matches thousands of objects, but you only want
to load the first ten, simply access only the first ten
elements of the results collection.

.. _dotnet-pagination:

Pagination
~~~~~~~~~~

Thanks to lazy evaluation, the common task of pagination
becomes quite simple. For example, suppose you have a
results collection associated with a query that matches
thousands of objects in your {+realm+}. You display one hundred
objects per page. To advance to any page, simply access the
elements of the results collection starting at the index
that corresponds to the target page.

.. _dotnet-list-vs-results:

Summary
-------

- A {+service-short+} **collection** is a homogenous container of zero
  or more instances of one
  :ref:`{+service-short+} type <dotnet-objects>`.

- Collections are :ref:`live <dotnet-live-object>` and therefore are auto-updating, 
  unless you have :ref:`frozen <dotnet-frozen-objects>` them or they are not 
  part of a {+realm+}.

- Lazy evaluation of results collections means there is no need to
  design a special query to get limited or paginated results. Perform
  the query and read from the results collection as needed.

- There are two main kinds of collection: **lists** and **results**.
  Lists define the :ref:`to-many relationships <dotnet-to-many-relationship>`
  of your {+service-short+} types, while results represent the
  lazily-loaded output of a :ref:`read operation <dotnet-realm-database-reads>`.
