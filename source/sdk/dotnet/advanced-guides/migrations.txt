.. _dotnet-client-migrations:
.. _dotnet-synced-migration:
.. _dotnet-migrations:

=====================
Migrations - .NET SDK
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

A **migration** transforms an existing {+realm+} and its objects from its
current :ref:`{+backend-schema+} version <dotnet-schema-version>` to a newer one.
Application data models typically change over time to accommodate new
requirements and features. Migrations give you the flexibility to
automatically update your existing application data whenever a client
application upgrades to a newer version.

A **local migration** is a migration for a {+realm+} that does
not automatically :doc:`{+sync-short+} </sync>` with
another {+realm+}. Local migrations have access to the existing
{+backend-schema+}, version, and objects and define logic that
incrementally updates the {+realm+} to its new schema version.
To perform a local migration you must specify a new schema
version that is higher than the current version and provide
a migration function when you open the out-of-date {+realm+}.

{+service+} automatically migrates certain changes, such as new and deleted
properties, but does not automatically set values for new properties
unless the updated object schema specifies a default value. You can
define additional logic in the migration that dynamically calculates a
new property's value. Migrations do not allow you to directly rename a
property. Instead, it treats a renamed property as a new property that
you must set to the value of the old property before {+service+} automatically
deletes it.

{+service+} handles migrations using the following framework:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Change Type
     - Description

   * - **Schema Version**
     - {+service+} ignores any :ref:`schema version <dotnet-schema-version>`
       set by the client application.

   * - **Migration Function**
     - {+service+} throws an error if the {+realm+} configuration
       includes a :ref:`local migration <dotnet-local-migration>` function.

   * - **Additions**
     - {+service+} automatically applies additive changes, such as a new
       class or class property.

   * - **Deletions**
     - {+service+} does not delete removed fields from the database, but
       ignores them in future read operations. {+service+} includes
       deleted properties in new objects with a default value that
       depends on whether or not the property was required:

       - {+service+} sets the value of optional deleted properties to
         ``null``.
       
       - {+service+} sets the value of required deleted properties to the
         empty value of the property type (e.g. ``0`` for numeric
         fields, ``""`` for string properties, etc.).

   * - **Modifications**
     - {+service+} prevents modifications to an existing property other
       than delete operations. Modifications that synced {+realms+} do not
       support include:
       
       - Changing a propertyâ€™s type but keeping the same name.
       - Changing an object type's :ref:`primary key <dotnet-primary-key>`.
       - Changing a property from optional to required (or vice-versa).

Summary
-------

- A **migration** transforms an existing {+realm+} and its objects from
  its current schema version to a later one.

- {+service+} allows you to specify migration functions for
  **local migrations**, i.e. migrations where the {+realm+} is not
  :doc:`synced </sync>` with {+backend+}.

- {+service+} automatically handles **synced migration**, i.e. migrations
  where the {+realm+} is synced. {+service+} does not allow migration
  functions for such migrations.
