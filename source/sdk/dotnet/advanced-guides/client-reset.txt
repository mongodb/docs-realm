.. _dotnet-client-resets:
.. _dotnet-client-reset:

========================
Client Resets - .NET SDK
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When using :ref:`Device Sync <sync>`, it is possible that your client app will 
need to handle a **client reset**. While not a common event, you need to perform 
a client reset when Sync is terminated on the server. For example, when a developer 
deploys a change that includes a destructive schema change. To fix this, you must 
stop Sync, modify the schema, and then re-enable Sync. This process causes the 
server to send a client reset message to the clients.

By default, the SDK handles client reset messages automatically, but only on app 
startup. Until the app is restarted, users will receive no new data from the server,
and any changes on the device are lost when the app is restarted and the 
reset happens.

.. warning::

   A client reset erases all local data and downloads a new copy of the
   data stored in MongoDB Atlas. Performing a client reset loses all local
   changes made since the client last successfully synced.

The .NET SDK provides the option to specify a client 
reset strategy in your :dotnet-sdk:`PartitionSyncConfiguration 
<reference/Realms.Sync.PartitionSyncConfiguration.html>` and 
:dotnet-sdk:`FlexibleSyncConfiguration 
<reference/Realms.Sync.FlexibleSyncConfiguration.html>`. The 
:dotnet-sdk:`ClientResetHandler <reference/Realms.Sync.SyncConfigurationBase.html#Realms_Sync_SyncConfigurationBase_ClientResetHandler>` property can be set to either the 
:dotnet-sdk:`DiscardLocalResetHandler <reference/Realms.Sync.ErrorHandling.DiscardLocalResetHandler.html>` method (for ``PartitionSyncConfiguration``), 
or the :dotnet-sdk:`ManualRecoveryHandler <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html>` method for either configuration 
type. If you do not specify a ``ClientResetHandler``, the default is 
``ManualRecoveryHandler``.  

Using the DiscardLocalResetHandler
----------------------------------
When you specify a ``DiscardLocalResetHandler`` on a 
``PartitionSyncConfiguration`` object, the SDK automatically performs 
a client reset with minimal code and minimal disruption to your application 
workflow. This client reset mode restores your local realm file to a syncable 
state without closing the realm and while maintaining notifications.

Be aware that this strategy *permanently deletes* all local unsynced changes 
made since the last successful sync. For a better user experience, consider using 
the :dotnet-sdk:`OnBeforeReset <reference/Realms.Sync.ErrorHandling.DiscardLocalResetHandler.html#Realms_Sync_ErrorHandling_DiscardLocalResetHandler_OnBeforeReset>` 
and :dotnet-sdk:`OnAfterReset <reference/Realms.Sync.ErrorHandling.DiscardLocalResetHandler.html#Realms_Sync_ErrorHandling_DiscardLocalResetHandler_OnAfterReset>` 
callback methods. Within the ``OnBeforeReset`` callback method, notify the user 
that a reset is about to happen, and then in the ``OnAfterReset`` callback method, 
notify the user when the reset is complete.

If the client reset operation cannot complete when using the 
``DiscardLocalResetHandler`` method -- as in the case of a destructive schema 
change -- the client reset process reverts to manual 
mode. You specify the method for handling a manual reset with the 
:dotnet-sdk:`ManualResetFallback <reference/Realms.Sync.ErrorHandling.DiscardLocalResetHandler.html#Realms_Sync_ErrorHandling_DiscardLocalResetHandler_ManualResetFallback>` 
callback method.

.. example::

   The following example shows how you might configure the ``OnBeforeReset``, 
   ``OnAfterReset``, and ``ManualResetFallback`` callbacks.

   .. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.DiscardLocalResetHandler.cs
      :language: csharp


Using the ManualRecoveryHandler
-------------------------------

To handle manual client resets, set the 
:dotnet-sdk:`ClientResetHandler <reference/Realms.Sync.SyncConfigurationBase.html#Realms_Sync_SyncConfigurationBase_ClientResetHandler>` 
property of the ``FlexibleSyncConfiguration`` object to a 
:dotnet-sdk:`ManualRecoveryHandler(ClientResetException) <reference/Realms.Sync.ErrorHandling.ManualRecoveryHandler.html#Realms_Sync_ErrorHandling_ManualRecoveryHandler__ctor_Realms_Sync_ErrorHandling_ClientResetHandlerBase_ClientResetCallback_>` 
method. Be sure to use the overload of the ``ManualRecoveryHandler`` that takes a 
:dotnet-sdk:`ClientResetException <reference/Realms.Sync.Exceptions.ClientResetException.html>` 
parameter.

Within the ``ManualRecoveryHandler``, dispose the existing realm, and then call the 
:dotnet-sdk:`InitiateClientReset() <reference/Realms.Sync.Exceptions.ClientResetException.html#Realms_Sync_Exceptions_ClientResetException_InitiateClientReset>` 
method.

.. example::

   The following example demonstrates this:

   .. literalinclude:: /examples/generated/dotnet/ClientResetExamples.snippet.ManualClientReset.cs
      :language: csharp
