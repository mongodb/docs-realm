.. _dotnet-client-resets:
.. _dotnet-client-reset:

========================
Client Resets - .NET SDK
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When using :doc:`{+sync+} </sync>`, it is possible that your client app will 
need to handle a **client reset**. While not a common event, it can be caused 
when Sync was terminated on the server. For example, a developer deploys a 
change that includes a destructive schema change. To fix this, you must stop 
Sync, modify the schema, and then re-enable Sync. This process causes the 
server to send a client reset message to the clients.

By default, the SDK handles client reset messages automatically, but only on app 
startup. Until the app is restarted, users will not receive any new data from the 
server, and any changes they make will be lost when the app is restarted and the 
reset happens.

.. warning::

   A client reset erases all local data and downloads a new copy of the
   data stored in MongoDB Atlas. Performing a client reset loses all local
   changes made since the client last successfully synced.

.. versionadded:: 10.11.1

Starting in version 10.11.1, the .NET SDK provides the option to specify a client 
reset strategy in your :dotnet-sdk:`FlexibleSyncConfiguration 
<reference/Realms.Sync.FlexibleSyncConfiguration.html>`. The 
:dotnet-sdk:`ClientResetHandler<TBD>` property can be set to either the 
:dotnet-sdk:`DiscardLocalResetHandler<TBD>` method or the 
:dotnet-sdk:`ManualRecoveryHandler<TBD>` method. If you do not specify a 
``ClientResetHandler``, the default is ``ManualRecoveryHandler``.  

Using the DiscardLocalResetHandler
----------------------------------
When you specify a ``DiscardLocalResetHandler``, Realm 
automatically performs a client reset with minimal code and minimal disruption 
to your application workflow. This client reset mode restores your local 
realm file to a syncable state without closing the realm and while maintaining  
notifications.

Be aware that this strategy *permanently deletes* all local unsynced changes 
made since the last successful sync. To ensure local changes are incorporated,
specify the :dotnet-sdk:`OnBeforeReset<TBD>` and
:dotnet-sdk:`OnAfterReset<TBD>` callback methods. Within the ``OnBeforeReset`` 
callback method, you can copy the existing data to a temporary realm, and then 
manually merge the data into the reset realm in the ``OnAfterReset`` callback 
method.

If the client reset operation cannot complete when using the 
``DiscardLocalResetHandler`` method, the client reset process reverts to manual 
mode. You specify the method for handling a manual reset with the 
:dotnet-sdk:`ManualResetFallback <TBD>` callback method.

.. example::

   The following example shows how you might configure the ``OnBeforeReset``, 
   ``OnAfterReset``, and ``ManualResetFallback`` callbacks.

   .. literalinclude:: /examples/generated/dotnet/ClientResetExamples.codeblock.DiscardLocalResetHandler.cs
      :language: csharp


Using the ManualRecoveryHandler
-------------------------------

To handle manual client resets, set the :dotnet-sdk:`OnSessionError <TBD>` callback
of the ``FlexibleSyncConfiguration`` object. The callback takes two parameters:
a :dotnet-sdk:`Session <reference/Realms.Sync.Session>` object and a 
:dotnet-sdk:`SessionException <reference/Realms.Sync.Exceptions.SessionException.html>`
object. 

Within the handler, cast the SessionException to a 
:dotnet-sdk:`ClientResetException <reference/Realms.Sync.Exceptions.ClientResetException.html>`,
dispose the existing realm, and call the 
:dotnet-sdk:`InitiateClientReset() <reference/Realms.Sync.Exceptions.ClientResetException.html#Realms_Sync_Exceptions_ClientResetException_InitiateClientReset>` 
method.

.. example::

   The following example demonstrates this:

   .. literalinclude:: /examples/generated/dotnet/ClientResetExamples.codeblock.ManualClientReset.cs
      :language: csharp
