.. _dotnet-client-quick-start-local:

======================
Quick Start - .NET SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
This page contains information to get Realm Database integrated into your .NET 
app. 

.. important::

   If you will be using :ref:`Sync <sync>` and other backend features of 
   {+service-short+} in your app, see :ref:`<dotnet-client-quick-start>`.

Import Realm
------------

In the shared code project of your solution, go to :guilabel:`Manage NuGet
Packages`. In the NuGet Package Manager, switch to the Browse tab and then
search for **Realm**. Select the latest version of the Realm package, and then 
click :guilabel:`Add Package`. 

.. figure:: /images/add-realm-via-nuget.png
   :alt: Adding Realm via Nuget

At the top of each C# file that uses Realm, add the following ``using``
statement:

.. code-block:: csharp

   using Realms;


Define Your Object Model
------------------------
Your application's :ref:`object model <dotnet-objects>` defines 
the data that you can store within {+client-database+}. You define an object 
model by creating a C# class that inherits from the ``RealmObject`` class.

The following code shows how to define an object model for a ``Guitar`` object. In 
this example, we have marked the ``Id`` field as the Primary Key, and marked the 
``Make`` and ``Model`` properties as "Required". Note that the ``Id`` is of type 
``ObjectId`` in this case, and a new Id is generated when an instance of the 
class is created.

.. literalinclude:: /examples/generated/dotnet/Guitar.codeblock.guitar-object.cs
   :language: csharp

Open a Realm
------------

To open your app's ``realm``, you call either 
:dotnet-sdk:`Realm.GetInstance() <reference/Realms.Realm.html#Realms_Realm_GetInstance_System_String_>` or
:dotnet-sdk:`Realm.GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>`.
Which method you use depends entirely on if and how you are using `asynchronous 
patterns <https://docs.microsoft.com/en-us/dotnet/csharp/async>`_ in your app. 
The following code shows how to use ``GetInstance()``:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.get-instance.cs
   :language: csharp


Create Realm Objects
--------------------

Once you have opened a {+realm+}, you can create :ref:`objects <dotnet-objects>` 
in it. All writes must occur within a 
:ref:`Write transaction <dotnet-realm-database-writes>` block.

The following code shows how to create a new ``Guitar`` object. In it, we 
instantiate the ``Guitar`` class and then add the new guitar to the {+realm+} 
within a ``realm.Write`` block:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.write.cs
   :language: csharp

Find, Sort, and Filter Objects
------------------------------
The following code demonstrates how to:

- retrieve a live :ref:`collection <dotnet-client-collections>` of all ``Guitar`` 
  objects in the {+realm+},

- filter the collection by using the 
  `Linq <https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/>`_ 
  syntax,

- sort the collection, and

- find a specific item in the collection by Id:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.read-filter-sort.cs
   :language: csharp

Modify an Object
----------------
As with writes, any changes to a Realm object must occur within a 
:ref:`Write transaction <dotnet-realm-database-writes>` block. 
To modify an object, you update the object properties:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.update.cs
   :language: csharp

Delete an Object
----------------
You can delete an object by calling the ``Remove()`` method 
within a write transaction block:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.delete.cs
   :language: csharp

Watch a Collection
------------------
If you want your app to respond to changes as they occur in a collection, you 
can call 
:dotnet-sdk:`SubscribeForNotifications() <reference/Realms.IRealmCollection-1.html#Realms_IRealmCollection_1_SubscribeForNotifications_Realms_NotificationCallbackDelegate__0__>` 
on the collection, as shown in the following code:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.collection-notifications.cs
   :language: csharp
