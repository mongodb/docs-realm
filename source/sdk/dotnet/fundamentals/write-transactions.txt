.. _dotnet-write-transactions:
.. _dotnet-transactions:

=============================
Write Transactions - .NET SDK
=============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In addition to reading objects, you can **create**, **update** , and **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them "writes", and all writes to {+service-short+} 
must be within a **transaction**.

A transaction is a list of read and write operations that
{+service-short+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

**All writes must happen in a transaction.**

A {+realm+} allows only one open transaction at a time. {+service-short+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+service-short+} either
**commits** it or **cancels** it:

- When {+service-short+} **commits** a transaction, {+service-short+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+service-short+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+service-short+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _dotnet-open-a-transaction:

Initiate a Transaction
~~~~~~~~~~~~~~~~~~~~~~

The .NET SDK provides a simple API you can use for most writes.  The 
:dotnet-sdk:`Write() <reference/Realms.Realm.html#Realms_Realm_Write__1_System_Func___0__>` 
method wraps all commands into a single transaction and then commits the 
transaction. 

The ``Write()`` method is shorthand for using the 
:dotnet-sdk:`BeginWrite() <reference/Realms.Realm.html#Realms_Realm_BeginWrite>` and
:dotnet-sdk:`Transaction.Commit() <reference/Realms.Transaction.html#Realms_Transaction_Commit>`
methods. In most cases, using ``Write()`` will meet your needs, but if you need 
finer control over the transaction, use ``BeginWrite()`` with one of the 
``Transaction`` methods (:dotnet-sdk:`Commit() <reference/Realms.Transaction.html#Realms_Transaction_Commit>`,
:dotnet-sdk:`Dispose() <reference/Realms.Transaction.html#Realms_Transaction_Dispose>`, or 
:dotnet-sdk:`Rollback() <reference/Realms.Transaction.html#Realms_Transaction_Rollback>`). 
The following code shows how to use both approaches:

.. literalinclude:: /examples/generated/dotnet/Writes.codeblock.create.cs
   :language: csharp

.. literalinclude:: /examples/generated/dotnet/Writes.codeblock.create-long-hand.cs
   :language: csharp

.. _dotnet-acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

{+service-short+} guarantees that transactions are :term:`ACID`
compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

