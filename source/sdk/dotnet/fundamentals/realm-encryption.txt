.. _dotnet-realm-encryption:

=====================
Encryption - .NET SDK
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can encrypt your {+realm+}s to ensure that the data stored to disk can't be 
read outside of your application. You encrypt the {+realm+} database file on 
disk with AES-256 + SHA-2 by supplying a 64-byte encryption key when 
:ref:`opening the {+realm+} <dotnet-open-a-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. {+service-short+}
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. note::

   The same encryption key must be supplied every time you obtain a Realm instance.
   If you don't provide a key, or specify the wrong key, for an encrypted 
   Realm, you will get a 
   :dotnet-sdk:`RealmFileAccessErrorException <reference/Realms.Exceptions.RealmFileAccessErrorException.html>` 
   when you call ``GetInstance``.

.. note::

   There is a small performance hit (typically less than 10% slower) when using 
   encrypted Realms.

Multiple User Encryption
------------------------
If you need unique keys for each user of your application, you can use an Oauth 
provider (such as Xamarin.Auth), or use one of the 
:ref:`Realm Authentication providers <users-and-authentication>`, and an 
:ref:`Authentication Trigger<authentication-triggers>` 
to create a 64-bit key and store that key in :ref:`a user object <user-objects>`.

Encryption and Realm Sync
-------------------------

You can encrypt a :ref:`synced realm <dotnet-sync-data>`, too. {+service+} only
encrypts the data on the device, and stores the data unencrypted in your
{+atlas+} :term:`data source`. The transfer between client server is fully
encrypted.
