.. _dotnet-realm-encryption:

=====================
Encryption - .NET SDK
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can encrypt your realms to ensure that the data stored to disk can't be 
read outside of your application. You encrypt the realm database file on 
disk with AES-256 + SHA-2 by supplying a 64-byte encryption key when 
:ref:`opening the realm <dotnet-open-a-realm>`.

.. important::

   For details and code examples for implementing Realm encryption, 
   see :ref:`Encrypt a Realm <dotnet-encrypt-a-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. Realm
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. note::

   There is a small performance hit (typically less than 10% slower) when using 
   encrypted Realms.

Storing & Reusing Keys
----------------------

You must pass the same encryption key when opening the encrypted realm
again. Apps should securely store the encryption key, typically in the target
platform's secure key/value pair storage. You can use :xamarin:`Xamarin Secure
Storage <essentials/secure-storage>` to simplify the access to underlying
storage. Ultimately, it is the developer's responsibility to ensure that
attackers cannot easily extract the key.

Encryption and Atlas Device Sync
--------------------------------

You can encrypt a :ref:`synced realm <dotnet-sync-data>`, too. Realm only
encrypts the data on the device, and stores the data unencrypted in your
Atlas data source. The transfer between client server is fully
encrypted.

If you need unique keys for each user of your application, you can use an OAuth 
provider (such as Xamarin.Auth), or use one of the 
:ref:`Realm Authentication providers <users-and-authentication>` and an 
:ref:`Authentication Trigger<authentication-triggers>` 
to create a 64-bit key and store that key in :ref:`a user object <user-objects>`.
