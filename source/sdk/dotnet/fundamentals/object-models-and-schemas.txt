.. _dotnet-object-models-and-schemas:
.. _dotnet-realm-objects:
.. _dotnet-objects:

==================================
Object Models & Schemas - .NET SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service+} applications model data as objects composed of property-value pairs
that each contain one or more primitive data types or other {+service-short+}
objects. :term:`{+service-short+} objects <Realm object>` are essentially the same
as regular objects, but they inherit from 
:dotnet-sdk:`RealmObject <reference/Realms.RealmObject.html>` or 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>` and include
additional features like
:ref:`real-time updating data views <dotnet-live-object>` and reactive
:ref:`change event handlers <dotnet-client-notifications>`.

Every {+service-short+} object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<dotnet-object-schema>` that defines the properties and relationships of those
objects. In C#, you define object schemas by using the native class implementation.

When {+service-short+} is initialized, it discovers the {+service-short+} objects 
defined in all assemblies that have been loaded.

.. note:: 

   .NET does not load an assembly until you reference a class in it, so if you 
   define your object models in one assembly and instantiate {+service-short+} 
   in another, be sure to call a method in the assembly that contains the object 
   models *before* initialization. Otherwise, {+service-short+} will not discover 
   the objects when it first loads. 

Example
-------

.. example::

   The following code block shows an object schema that describes a Dog.
   Every Dog object must include a ``Name`` and may
   optionally include the dog's ``Age``, ``Breed`` and a list of people that 
   represents the dog's ``Owners``. 

   .. literalinclude:: /examples/generated/dotnet/Examples.codeblock.dog_class.cs
      :language: csharp

.. note::
   
   To define a collection of objects within an object, use an ``IList<T>`` with 
   only a getter. You do not need to initialize it in the constructor, as {+realm+} 
   will generate a collection instance the first time the property is accessed. 

.. _dotnet-object-schema:

Object Schema
-------------

An **object schema** is a configuration object that defines the properties and 
relationships of a {+service-short+} object. {+service-short+} client 
applications define object schemas with the native class implementation in their 
respective language using the :term:`{+frontend-schema+}`.

Object schemas specify constraints on object properties such as the data
type of each property and whether or not a property is required. Schemas can 
also define :ref:`relationships <dotnet-client-relationships>` between object 
types in a {+realm+}.

Every {+app+} has a :ref:`{+backend-schema+} <dotnet-realm-schema>`
composed of a list of object schemas for each type of object that the
{+realms+} in that application may contain. {+service+} guarantees that all 
objects in a {+realm+} conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _dotnet-property-embedded:

Embedded Objects
~~~~~~~~~~~~~~~~

{+client-database+} provides the ability to nest objects within other
objects. This has several advantages:

- If using {+sync+}, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-model-design/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the {+realm+}, so unused objects
  don't accumulate in your {+realm+} file, taking up valuable space on
  user's mobile devices.

.. seealso::

   :ref:`Usage Examples: Define an Embedded Object Property <dotnet-define-an-embedded-object-property>`

.. _dotnet-attributes:

Attributes
----------

.. _dotnet-primary-key:

Primary Key
~~~~~~~~~~~

A **primary key** is a property that uniquely identifies an object. You can
create a primary key with any of the following types (or their nullable counterparts):

- ``ObjectId``
- ``string``
- ``char``
- ``byte``
- ``short``
- ``int``
- ``long``

You may define a primary key on a **single 
property** for an 
object type as part of the :ref:`object schema <dotnet-object-schema>`.
{+client-database+} automatically indexes primary key properties, which
allows you to efficiently read and modify objects based on their primary
key. 

If an object type has a primary key, then all objects of that type must
include the primary key property with a value that is unique among
objects of the same type in a {+realm+}.

.. seealso::

   - :ref:`Usage Examples: Define a Primary Key <dotnet-primary-key-example>`
   - :ref:`Usage Examples: Find a Specific Object by Primary Key <dotnet-find-a-specific-object-by-primary-key>`
   
.. _dotnet-index-property:

Indexes
~~~~~~~

**Indexes** support the efficient execution of queries in
{+client-database+}. Without indexes, {+client-database+} must perform a
*collection scan*, i.e. scan every document in a collection, to select
those documents that match a query. If an appropriate index exists for a
query, {+client-database+} can use the index to limit the number of
documents that it must inspect.

Indexes are special data structures that store a small portion of a
{+realm+}'s data in an easy to traverse form. The index stores the value
of a specific property ordered by the value of the property. The ordering of
the index entries supports efficient equality matches and range-based
query operations.

Adding an index to a property makes write operations slightly slower, but makes
certain queries faster. Indexes require space in your {+realm+} file, so
adding an index to a property will increase disk space consumed by your
{+realm+} file.

You can index properties with the following types:

- ``bool``
- ``byte``
- ``short``
- ``int``
- ``long``
- ``DateTimeOffset``
- ``char``
- ``string``
- ``ObjectId``

.. seealso::

   :ref:`Usage Examples: Index a Property <dotnet-index-property-example>`

Summary
-------

- {+service-short+} objects are of a **type** defined as you would any other
  class.

- {+service-short+} objects are **live**: they always reflect the latest version
  on disk and update automatically when the underlying object changes.

- A {+service-short+} object type may have a **primary key** property to uniquely
  identify each instance of the object type.

- The {+service-short+} object's **schema** defines the properties of the object and
  which properties are optional, which properties have a default value,
  and which properties are indexed.
