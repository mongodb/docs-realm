.. _dotnet-object-models-and-schemas:
.. _dotnet-realm-objects:
.. _dotnet-objects:

==================================
Object Models & Schemas - .NET SDK
==================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm applications model data as objects composed of property-value pairs
that each contain one or more primitive data types or other Realm
objects. Realm objects are essentially the same
as regular objects, but they inherit from 
:dotnet-sdk:`RealmObject <reference/Realms.RealmObject.html>` or 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>` and include
additional features like
:ref:`real-time updating data views <dotnet-live-object>` and reactive
:ref:`change event handlers <dotnet-client-notifications>`.

Every Realm object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<dotnet-object-schema>` that defines the properties and relationships of those
objects.

In C#, you typically define object schemas by using the C# class declarations. 
When Realm is initialized, it discovers the 
Realm objects defined in all assemblies that have been loaded and 
generates schemas accordingly. This is the simplest approach to defining a 
schema, and is generally the least error-prone. However, this approach includes 
all loaded Realm objects, and there may be cases where you only want 
to use :ref:`a subset of classes <dotnet-omit-classes-from-schema>`, or to 
customize Realm object schemas. To do this, you can  
:ref:`programmatically define a schema <dotnet-manual-schema>`.

.. note:: 

   .NET does not load an assembly until you reference a class in it, so if you 
   define your object models in one assembly and instantiate Realm 
   in another, be sure to call a method in the assembly that contains the object 
   models *before* initialization. Otherwise, Realm will not discover 
   the objects when it first loads. 

Example
-------

.. example::

   The following code block shows an object schema that describes a Dog.
   Every Dog object must include a ``Name`` and may
   optionally include the dog's ``Age``, ``Breed`` and a list of people that 
   represents the dog's ``Owners``. 

   .. literalinclude:: /examples/generated/dotnet/ObjectModelsAndSchemas.snippet.dog_class.cs
      :language: csharp

.. note::
   
   To define a collection of objects within an object, use an ``IList<T>`` with 
   only a getter. You do not need to initialize it in the constructor, as realm 
   will generate a collection instance the first time the property is accessed. 

.. _dotnet-object-schema:

Object Schema
-------------

An **object schema** is a configuration object that defines the properties and 
relationships of a Realm object. Realm client 
applications define object schemas with the native class implementation in their 
respective language using the Object Schema.

Object schemas specify constraints on object properties such as the data
type of each property and whether or not a property is required. Schemas can 
also define :ref:`relationships <dotnet-client-relationships>` between object 
types in a realm.

Every App has a :ref:`App Services Schema <dotnet-realm-schema>`
composed of a list of object schemas for each type of object that the
realms in that application may contain. Realm guarantees that all 
objects in a realm conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _dotnet-property-embedded:

Embedded Objects
~~~~~~~~~~~~~~~~

Realm Database provides the ability to nest objects within other
objects. This has several advantages:

- If using Device Sync, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-model-design/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the realm, so unused objects
  don't accumulate in your realm file, taking up valuable space on
  user's mobile devices.

.. seealso::

   :ref:`Usage Examples: Define an Embedded Object Property <dotnet-define-an-embedded-object-property>`

.. _dotnet-attributes:

Attributes
----------

.. _dotnet-primary-key:

Primary Key
~~~~~~~~~~~

A **primary key** is a property that uniquely identifies an object. You can
create a primary key with any of the following types (or their nullable counterparts):

- ``ObjectId``
- ``UUID``
- ``string``
- ``char``
- ``byte``
- ``short``
- ``int``
- ``long``

You may define a primary key on a **single property** for an 
object type as part of the :ref:`object schema <dotnet-object-schema>`.
Realm Database automatically indexes primary key properties, which
allows you to efficiently read and modify objects based on their primary
key. 

If an object type has a primary key, then all objects of that type must
include the primary key property with a value that is unique among
objects of the same type in a realm.

.. seealso::

   - :ref:`Usage Examples: Define a Primary Key <dotnet-primary-key-example>`
   - :ref:`Usage Examples: Find a Specific Object by Primary Key <dotnet-find-a-specific-object-by-primary-key>`
   
.. _dotnet-index-property:

Indexes
~~~~~~~

**Indexes** support the efficient execution of queries in
Realm Database. Without indexes, Realm Database must perform a
*collection scan*, i.e. scan every document in a collection, to select
those documents that match a query. If an appropriate index exists for a
query, Realm Database can use the index to limit the number of
documents that it must inspect.

Indexes are special data structures that store a small portion of a
realm's data in an easy to traverse form. The index stores the value
of a specific property ordered by the value of the property. The ordering of
the index entries supports efficient equality matches and range-based
query operations.

Adding an index to a property makes write operations slightly slower, but makes
certain queries faster. Indexes require space in your realm file, so
adding an index to a property will increase disk space consumed by your
realm file.

You can index properties with the following types:

- ``bool``
- ``byte``
- ``short``
- ``int``
- ``long``
- ``DateTimeOffset``
- ``char``
- ``string``
- ``ObjectId``
- ``UUID``

.. seealso::

   :ref:`Usage Examples: Index a Property <dotnet-index-property-example>`


Data Binding and MVVM
---------------------
When building a Xamarin app using the 
`MVVM <https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/xaml-basics/data-bindings-to-mvvm>`_ 
pattern, you often want proper data binding *in both directions* between the 
View and ViewModel: if a property value changes in the UI, the ViewModel should 
be notified, and vice-versa. ViewModels typically implement 
the `INotifyPropertyChange <https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged?view=net-5.0>`_ 
interface to ensure this. 

However, when you bind UI elements to a :dotnet-sdk:`RealmObject <reference/Realms.RealmObject.html>`, 
this notification happens automatically, thus greatly simplifying your ViewModel code. 

You can also bind a UI element to a realm :ref:`Live Query <dotnet-live-queries>`. 
For example, if you bind a 
`ListView <https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.listview?view=xamarin-forms>`_ 
to a live query, then the list will update automatically when the results of the 
query change; you do not need to implement the ``INotifyPropertyChange`` 
interface.

For example, if you bind a ListView to a query that returns all Product 
objects, the list of available products updates automatically 
when a product is added, changed, or removed from the realm:

.. code-block:: csharp
   :copyable: false

   // Somewhere in your ViewModel
   AllProducts = realm.All<Products>();


.. code-block:: xaml
   :copyable: false
   
   <!-- Somewhere in your View -->
   <ListView ItemsSource="{Binding AllProducts}">


Summary
-------

- Realm objects are of a **type** defined as you would any other
  class.

- Realm objects are **live**: they always reflect the latest version
  on disk and update automatically when the underlying object changes.

- A Realm object type may have a **primary key** property to uniquely
  identify each instance of the object type.

- The Realm object's **schema** defines the properties of the object and
  which properties are optional, which properties have a default value,
  and which properties are indexed.

- Using realm objects and queries in a MVVM architecture simplifies data 
  binding.
