.. _dotnet-filter-data:

===============================
Filter and Sort Data - .NET SDK
===============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _dotnet-filter-queries-based-on-object-properties:
.. _dotnet-filter-results:

Filter Queries Based on Object Properties
-----------------------------------------

A **filter** selects a subset of results based on the
value(s) of one or more object properties. Realm Database provides a
full-featured query engine you can use to define filters.
For more reference information on querying a realm,
refer to :ref:`Query Engine <dotnet-client-query-engine>`.

The most common use case is to find objects where a certain property matches
a certain value. Additionally, you can compare strings, aggregate over
collections of numbers, and use logical operators to build
up complex queries.

.. example::

   In the following example, we use the query
   engine's comparison operators to:

   - Find high priority tasks by comparing the value of the ``priority`` property value with a threshold number, above which priority can be considered high.
   - Find just-started or short-running tasks by seeing if the ``progressMinutes`` property falls within a certain range.
   - Find unassigned tasks by finding tasks where the ``assignee`` property is equal to null.
   - Find tasks assigned to specific teammates Ali or Jamie by seeing if the ``assignee`` property is in a list of names.

   .. literalinclude:: /examples/Query/Comparison.cs
      :language: csharp

.. _dotnet-sort-query-results:
.. _dotnet-sort-results:

Sort Query Results
------------------

A **sort** operation allows you to configure the order in
which Realm Database returns queried objects. You can sort based on
one or more properties of the objects in the results
collection.

Realm Database only guarantees a consistent order of results when the
results are sorted.

.. example::

   The following code sorts the projects by name in reverse
   alphabetical order (i.e. "descending" order).

   .. literalinclude:: /examples/CRUD/Sort.cs
      :language: csharp
