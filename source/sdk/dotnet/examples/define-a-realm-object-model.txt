.. _dotnet-define-a-realm-object-schema:

=======================================
Define a Realm Object Schema - .NET SDK
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

An **object schema** is a configuration object that defines the properties and 
relationships of a {+service-short+} object. {+service-short+} client 
applications define object schemas with the native class implementation in their 
respective language using the :term:`{+frontend-schema+}`.

Object schemas specify constraints on object properties such as the data
type of each property and whether or not a property is required. Schemas can 
also define :ref:`relationships <dotnet-client-relationships>` between object 
types in a {+realm+}.

Every {+app+} has a :ref:`{+backend-schema+} <dotnet-realm-schema>`
composed of a list of object schemas for each type of object that the
{+realms+} in that application may contain. {+service+} guarantees that all 
objects in a {+realm+} conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _dotnet-define-a-relationship-property:
.. _dotnet-property-relationships:

Define a Relationship Property
------------------------------

{+client-database+} supports several kinds of object relationships.

.. seealso::

   :ref:`Fundamentals: Relationships <dotnet-client-relationships>`

.. _dotnet-field-relationships-many-to-one:
.. _dotnet-property-relationships-many-to-one:

Many-to-One
~~~~~~~~~~~

To set up a many-to-one or one-to-one relationship, create a property  in your application
whose type inherits ``RealmObject`` or ``EmbeddedObject``:


.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.rel-to-one.cs
   :language: csharp

Each ``Dog`` references zero or one ``Person`` instances. Nothing prevents
multiple ``Dog`` instances from referencing the same ``Person`` as an owner;
the distinction between a many-to-one and a one-to-one relationship is
up to your application.

Setting a relationship property to null removes the connection between
objects, but {+client-database+} does not delete the referenced object
unless that object is :ref:`embedded <dotnet-property-embedded>`.

.. _dotnet-field-relationships-many-to-many:
.. _dotnet-property-relationships-many-to-many:

Many-to-Many
~~~~~~~~~~~~

You can create a relationship between one object and any number of objects
using a property of type ``IList<T>``\ in your application, where ``T`` is a subclass of
``RealmObject`` or ``EmbeddedObject``:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.rel-to-many.cs
   :language: csharp

.. _dotnet-property-relationships-inverse:
.. _dotnet-inverse-relationships:

Inverse Relationships
~~~~~~~~~~~~~~~~~~~~~

By default, {+client-database+} relationships are unidirectional. You
can follow a link from one class to a referenced class, but not in the
opposite direction. You can provide a link in the opposite direction
with the :dotnet-sdk:`[Backlink] <reference/Realms.BacklinkAttribute.html>` attribute:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.inverse.cs
   :language: csharp

Since relationships are many-to-one or many-to-many, following inverse
relationships can result in zero, one, or many objects.

Like any other ``RealmResults`` set, you can
:ref:`query <dotnet-client-query-engine>` an inverse relationship.

.. _dotnet-define-an-embedded-object-property:
.. _dotnet-field-relationships-embedded:

Define an Embedded Object Property
----------------------------------

{+client-database+} provides the ability to nest objects within other
objects. This has several advantages:

- If using {+sync+}, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-model-design/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the {+realm+}, so unused objects
  don't accumulate in your {+realm+} file, taking up valuable space on
  user's mobile devices.

To embed an object, extend 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>`
for the class that you'd like to nest within another class:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.embedded.cs
   :language: csharp

Then, any time you reference that class from another class,
{+client-database+} will embed the referenced class within the enclosing
class.

.. seealso::

   :ref:`Data Types: Embedded Objects <dotnet-embedded-objects>`


.. _dotnet-customer-setter:

Custom Setters
--------------
Realm will not store a property with a custom setter. To use a custom setter, 
store the property value in a private property and then 
map that value to a public property with the custom setter. Realm will store the 
private property, while you modify its value via the public property.
In the following code, the private ``email`` property is stored in the {+realm+}, 
but the public ``Email`` property, which provides validation, is not persisted:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.custom-setter.cs
   :language: csharp

.. _dotnet-property-annotations:

Property Annotations
--------------------

Use annotations to customize your Realm object models.

.. _dotnet-primary-key-example:

Primary Key
~~~~~~~~~~~

.. note::
   
   Once you assign a property as a primary key, you cannot change it.
   
   The following example demonstrates how to designate a primary key in an object schema:
   
   .. literalinclude:: /examples/generated/dotnet/Objects.codeblock.primary-key.cs
      :language: csharp

.. seealso::

   :ref:`Fundamentals: Primary Key <dotnet-primary-key>`

.. _dotnet-required-field:
.. _dotnet-optional-field:
.. _dotnet-required-optional-property:

Required and Optional Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In C#, value types are implicitly non-nullable, but can be made optional by appending 
`?  <https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types>`__.
Reference types, such as ``string`` and ``byte[]``, are implicitly nullable and can be
made required by annotating them with the ``[Required]`` attribute. Properties of types
that inherit from ``RealmObject`` or ``EmbeddedObject`` are special and can always be
null. Applying ``[Required]`` on such a property will result in a compilation error.

You can use the ``[Required]`` attribute as seen in the following example:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.required.cs
   :language: csharp

.. _dotnet-default-field-values:

Default Field Values
~~~~~~~~~~~~~~~~~~~~

You can use the built-in language features to assign a default value to a property. 
In C#, you can assign a default value in the property declaration. 

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.default.cs
   :language: csharp

.. note:: Default Values and Nullability

   While default values ensure that a newly created object cannot contain
   a value of ``null`` (unless you specify a default value of ``null``),
   they do not impact the nullability of a property. To make a property
   non-nullable, see :ref:`Required Properties <dotnet-required-optional-property>`.

.. _dotnet-index-property-example:
.. _dotnet-index-field:

Index a Property
~~~~~~~~~~~~~~~~

To index a property, use the :dotnet-sdk:`[Indexed] <reference/Realms.IndexedAttribute.html>`
attribute:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.index.cs
   :language: csharp

.. seealso::

   :ref:`Fundamentals: Indexes <dotnet-index-property>`

.. _dotnet-ignore-a-property:
.. _dotnet-ignore-property:

Ignore a Property
~~~~~~~~~~~~~~~~~

If you don't want to save a property in your model to a {+realm+}, you can
ignore that property. A property is ignored by default if it is not autoimplemented or 
does not have a setter.

Ignore a property from a {+service-short+} object model with the
:dotnet-sdk:`[Ignored] <reference/Realms.IgnoredAttribute.html>` attribute:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.ignore.cs
   :language: csharp
.. _dotnet-rename-property:

Rename a Property
~~~~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent properties internally. In some cases you might want to change
this behavior:

- To make it easier to work across platforms, since naming conventions differ.
- To change a property name in .NET without forcing a migration.

Choosing an internal name that differs from the name used in model classes
has the following implications:

- Migrations must use the internal name when creating classes and properties.
- Schema errors reported will use the internal name.

Use the :dotnet-sdk:`[MapTo] <reference/Realms.MapToAttribute.html>`
attribute to rename a property:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.rename.cs
   :language: csharp

.. _dotnet-rename-object:

Rename a Class
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent classes internally. In some cases you might want to change
this behavior:

- To support multiple model classes with the same simple name in different namespaces.
- To make it easier to work across platforms, since naming conventions differ.
- To use a class name that is longer than the 57 character limit enforced by {+client-database+}.
- To change a class name in .NET without forcing a migration.

Use the :dotnet-sdk:`[MapTo] <reference/Realms.MapToAttribute.html>`
attribute to rename a class:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.rename-class.cs
   :language: csharp

.. _dotnet-omit-classes-from-schema:
.. _dotnet-provide-subset-classes-schema:

Omit Classes from your Realm Schema
-----------------------------------

By default, your application's {+service-short+} Schema includes all
classes that inherit from ``RealmObject`` or ``EmbeddedObject``. If you only want to include a
a subset of these classes in your {+service-short+}
Schema, you can update your configuration to include the specific classes you want:

.. literalinclude:: /examples/generated/dotnet/Objects.codeblock.subset.cs
   :language: csharp
