.. _dotnet-sync-changes-between-devices:

=======================================
Sync Changes Between Devices - .NET SDK
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------

Before you can access a synced {+realm+} from the client, you must:

- :ref:`Enable sync <enable-sync>` in the {+ui+}.

- :ref:`Authenticate a user <dotnet-quick-start-authenticate>` in
  your client project.

.. _dotnet-open-a-synced-realm:

Open a Synced Realm
-------------------

.. include:: /includes/dotnet-open-synced-realm.rst

The :ref:`partition value <partitioning>` specifies which subset of your data to sync.
This is typically a user ID, project ID, store ID, or some other category identifier in
your app that has particular relevance to the current user. 

.. seealso:: 

   :ref:`Partition Atlas Data into Realms <partitioning>`

.. _dotnet-sync-data:

Sync Data
---------

The syntax to :ref:`read <dotnet-realm-database-reads>` and :ref:`write
<dotnet-realm-database-writes>` on a synced {+realm+} is identical to the syntax 
for non-synced {+realms+}. While you work with local data, a background thread 
efficiently integrates, uploads, and downloads changesets.

.. important:: When Using Sync, Avoid Writes on the Main Thread
   
   The fact that {+service-short+} performs sync integrations on a background thread means
   that if you write to your {+realm+} on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`never to write on the main thread
   when using {+sync+} <dotnet-threading-three-rules>`.

The following code creates a new ``Task`` object and writes it to the {+realm+}:

.. literalinclude:: /examples/generated/dotnet/Examples.codeblock.create.cs
   :language: csharp

.. seealso:: 
   
   :ref:`Threading <dotnet-client-threading>`

.. TODO: OTHER SECTIONS
.. _dotnet-sync-changes-in-the-background:

.. Sync Changes in the Background
.. ------------------------------

.. _dotnet-pause-or-resume-a-sync-session:

.. Pause or Resume a Sync Session
.. ------------------------------

.. _dotnet-check-network-connection:

.. Check the Current Network Connection
.. ------------------------------------

.. _dotnet-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------
To check the upload and download progress for a sync session, add a progress
notification using the :dotnet-sdk:`session.GetProgressObservable() <Realms.Sync.Session.html#Realms_Sync_Session_GetProgressObservable_Realms_Sync_ProgressDirection_Realms_Sync_ProgressMode_>` method.

The ``session.GetProgressObservable`` method takes in the following two parameters:

- A ``ProgressDirection`` parameter that can be set to ``ProgressDirection.Upload`` or ``ProgressDirection.Download`` to register notifications for either event.
- A ``ProgressMode`` parameter that can be set to ``ProgressMode.ReportIndefinitely`` for the notifications to continue until the callback is unregistered using the :js-sdk:`syncSession.removeProgressNotification() <Realm.App.Sync.Session.html#.removeProgressNotification>` method), or ``"ProgressMode.ForCurrentlyOutstandingWork"`` (for the notifications to continue until only the currently transferable bytes are synced).

.. example::
   In the following example, an application developer registers a progress observable on the ``session`` to
   listen for upload events indefinitely. When this callback is triggered, the console prints
   the number of transferred bytes and the number of transferrable bytes. Then the developer divides
   them to calculate the progress percentage of the upload.

   .. literalinclude:: /examples/generated/dotnet/ProgressNotifications.codeblock.upload-download-progress-notification.cs
      :language: dotnet

Once the notification token is no longer needed, dispose of it using ``token.Dispose()``.

.. _dotnet-handle-sync-errors:

Handle Sync Errors
------------------

{+sync+} represents errors via :dotnet-sdk:`SessionExceptions <api/reference/Realms.Sync.Exceptions.SessionException.html>`. In
addition to the standard exception properties, you have access to an :dotnet-sdk:`ErrorCode <api/reference/Realms.Sync.Exceptions.ErrorCode.html>`
that contains information about the type of the error and allows you to have
strongly typed handling logic.

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.codeblock.handle-errors.cs
   :language: csharp


.. _dotnet-reset-a-client-realm-file:

.. Reset a Client Realm File
.. -------------------------


.. _dotnet-set-the-client-log-level:

Set the Client Log Level
------------------------
To control which messages are logged by the sync client logger, set the :dotnet-sdk:`LogLevel <reference/Realms.Sync.LogLevel.html>` property of the :dotnet-sdk:`AppConfiguration <reference/Realms.Sync.AppConfiguration.html>` object:

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.codeblock.set-log-level.cs
   :language: csharp
