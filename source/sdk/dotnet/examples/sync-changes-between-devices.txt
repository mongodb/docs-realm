.. _dotnet-sync-changes-between-devices:

=======================================
Sync Changes Between Devices - .NET SDK
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------

Before you can access a synced {+realm+} from the client, you must:

- :ref:`Enable sync <enable-sync>` in the {+ui+}.

- :ref:`Authenticate a user <dotnet-quick-start-authenticate>` in
  your client project.

- :ref:`Open a Synced Realm <dotnet-open-a-synced-realm>`

.. _dotnet-sync-data:

Sync Data
---------

The syntax to :ref:`read <dotnet-realm-database-reads>` and :ref:`write
<dotnet-realm-database-writes>` on a synced {+realm+} is identical to the syntax 
for non-synced {+realms+}. While you work with local data, a background thread 
efficiently integrates, uploads, and downloads changesets.

.. important:: When Using Sync, Avoid Writes on the Main Thread
   
   The fact that {+service-short+} performs sync integrations on a background thread means
   that if you write to your {+realm+} on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`never to write on the main thread
   when using {+sync+} <dotnet-threading-three-rules>`.

The following code creates a new ``Task`` object and writes it to the {+realm+}:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.codeblock.create.cs
   :language: csharp

.. seealso:: 
   
   :ref:`Threading <dotnet-client-threading>`

.. _dotnet-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------
Opening a synced {+realm+} starts a {+sync-short+} 
:dotnet-sdk:`Session <reference/Realms.Sync.Session.html>`. To pause synchronization 
for a specific session, you can call the 
:dotnet-sdk:`Stop() <reference/Realms.Sync.Session.html#Realms_Sync_Session_Stop>` 
method on the session.

When you then call the 
:dotnet-sdk:`Start() <reference/Realms.Sync.Session.html#Realms_Sync_Session_Start>`  
method on the paused session, the {+sync-short+} session resumes. 

.. note:: Each session is independent

   You must manually call the ``Stop()`` and ``Start()`` methods for each  
   {+realm+} whose {+sync-short+} session you want to pause and restart. The 
   sync state of one session has no impact on other open sessions. 

The following code block demonstrates calling the ``Stop()`` and ``Start()`` 
methods: 

.. literalinclude:: /examples/generated/dotnet/DataSyncExamples.codeblock.pause-synced-realm.cs
   :language: csharp

.. _dotnet-check-sync-progress:

Monitor Sync Progress and Status
--------------------------------
You may want to know the status of {+sync-short+} operations in your app. For 
example, you might want specific code to run only after all of the data is 
synced with {+backend+}. You might also want to provide users with the 
status of {+sync-short+} operations. 

You can set up your {+sync-short+} session to wait for changes to be uploaded 
or downloaded. You can also configure your {+sync-short+} session to
notify when the {+sync-short+} connection status changes.

.. _dotnet-check-sync-progress-wait-for-upload-or-download:

Wait for Changes to be Uploaded or Downloaded
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To asynchronously wait for your changes to be completed, get the sync session 
from the :dotnet-sdk:`Realms.Sync.SyncSession
<reference/Realms.Realm.html#Realms_Realm_SyncSession>`
property, and then call the :dotnet-sdk:`session.WaitForUploadAsync()
<reference/Realms.Sync.Session.html#Realms_Sync_Session_WaitForUploadAsync>` or 
:dotnet-sdk:`session.WaitForDownloadAsync()
<reference/Realms.Sync.Session.html#Realms_Sync_Session_WaitForDownloadAsync>` 
methods. For example:

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.codeblock.wait-for-changes-to-download-async-progress-notification.cs
   :language: csharp

.. _dotnet-sync-status-change:

Monitor {+sync-short+} Progress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To monitor {+sync-short+} progress, get the 
sync session from the :dotnet-sdk:`Realms.Sync.SyncSession 
<reference/Realms.Realm.html#Realms_Realm_SyncSession>` property, then add a 
progress notification by calling the 
:dotnet-sdk:`session.GetProgressObservable() <reference/Realms.Sync.Session.html#Realms_Sync_Session_GetProgressObservable_Realms_Sync_ProgressDirection_Realms_Sync_ProgressMode_>` 
method.

The ``session.GetProgressObservable`` method takes in the following two parameters:

- A :dotnet-sdk:`ProgressDirection 
  <latest/reference/Realms.Sync.Session.html#Realms_Sync_Session_GetProgressObservable_Realms_Sync_ProgressDirection_Realms_Sync_ProgressMode_>` 
  parameter that can be set to ``Upload`` or ``Download``.
  
- A :dotnet-sdk:`ProgressMode <reference/Realms.Sync.ProgressMode.html>` parameter 
  that can be set to ``ReportIndefinitely``
  for the notifications to continue until the callback is unregistered, or 
  ``ForCurrentlyOutstandingWork`` for the notifications to continue until only 
  the currently transferable bytes are synced.

When you `Subscribe <https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe?view=net-6.0#system-iobservable-1-subscribe(system-iobserver((-0)))>`_ 
to the notifications, you receive a 
:dotnet-sdk:`SyncProgress <reference/Realms.Sync.SyncProgress.html>` 
object that provides the total number of transferrable bytes and the remaining 
bytes to be transferred.

.. note:: 
   
   The number of transferred and transferable bytes are only estimates. 
   The {+sync-short+} changesets are compressed with 
   `gzip <https://www.gnu.org/software/gzip/>`_ before transmitting, so 
   the actual size of transmitted bytes will be smaller than the reported number  
   of both transferable and transferred bytes.

.. example::
   In the following example, we subscribe to a progress 
   observable on the ``session`` to listen for upload events indefinitely. When 
   this callback is triggered, it prints the number of transferred 
   bytes and the number of transferable bytes to the console.

   .. literalinclude:: /examples/generated/dotnet/ProgressNotifications.codeblock.upload-download-progress-notification.cs
      :language: csharp

   Once you no longer wish to receive notifications, unregister the token by using 
   ``token.Dispose()``

.. note:: 
   
   {+service-short+} optimizes download speeds by combining multiple changesets
   into a single download message, up to 16 MB. Since the progress callback is
   only invoked once before and after a download message is processed, this
   means that you'll likely see ``transferredBytes`` change in increments of roughly
   16 MB rather than continuously as the message is being downloaded.

Get Connection State Changes
----------------------------
To get the connection state of a :dotnet-sdk:`SyncSession
<reference/Realms.Realm.html#Realms_Realm_SyncSession>`, set an event handler
on the :dotnet-sdk:`PropertyChanged <reference/Realms.Sync.Session.html#Realms_Sync_Session_PropertyChanged>`
event. The event handler is a standard
`.NET PropertyChangedEventHandler delegate
<https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertychangedeventhandler?view=net-6.0>`_
that takes in a ``sender`` object and
`PropertyChangedEventArgs <https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertychangedeventargs?view=net-6.0>`_
object. 
In the event handler, cast the sender to a ``Session`` object and check if 
the event argument's ``PropertyName`` property is ``Session.ConnectionState``. 
You can then get the
:dotnet-sdk:`ConnectionState <reference/Realms.Sync.Session.html#Realms_Sync_Session_ConnectionState>`
value, which will be one of the following:

- Connecting
- Connected
- Disconnected

The following code demonstrates setting the event handler, casting the session
object, and checking the Sync status:

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.codeblock.connection-state.cs
   :language: csharp


.. _dotnet-handle-sync-errors:

Handle Sync Errors
------------------

{+sync+} represents errors via :dotnet-sdk:`SessionExceptions <reference/Realms.Sync.Exceptions.SessionException.html>`. In
addition to the standard exception properties, you have access to an :dotnet-sdk:`ErrorCode <reference/Realms.Sync.Exceptions.ErrorCode.html>`
that contains information about the type of the error and allows you to have
strongly typed handling logic.

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.codeblock.handle-errors.cs
   :language: csharp

.. note:: Additional Exception Information

   For security reasons, {+service-short+} may send only a minimal amount of 
   information about an exception, but the server-side logs will contain more 
   details. In these cases, the 
   `HelpLink <https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink?view=net-6.0#system-exception-helplink>`_ 
   property on the exception contains a link to the associated log entry.

.. _dotnet-reset-a-client-realm-file:

.. Reset a Client Realm File
.. -------------------------


.. _dotnet-set-the-client-log-level:

Set the Client Log Level
------------------------
To control which messages are logged by the client logger, use
:dotnet-sdk:`LogLevel <reference/Realms.Logging.LogLevel.html>`:

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.codeblock.set-log-level.cs
   :language: csharp

.. include:: /includes/tip-sync-log-levels.rst


.. _dotnet-customize-logging-function:

Customize the Logging Function
------------------------------
To set a custom logger function, set :dotnet-sdk:`Logger.Default <reference/Realms.Logging.Logger.html>` to a custom Logger function. 

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.codeblock.customize-logging-function.cs
   :language: csharp
