.. _dotnet-open-close-local-realm:
.. _dotnet-open-a-realm:

=====================================
Open & Close a Local Realm - .NET SDK
=====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _dotnet-open-a-local-realm:

Open a Local Realm
------------------

When opening a local (non-synced) {+realm+}, pass a 
:dotnet-sdk:`RealmConfiguration <reference/Realms.RealmConfiguration.html#Realms_RealmConfiguration__ctor_System_String_>` 
object to either ``GetInstanceAsync()`` or ``GetInstance()``. The following example 
creates a ``RealmConfiguration`` object with a local file path, sets the 
``IsReadOnly`` property to ``true``, and then opens a local {+realm+}  with that 
configuration information:

.. literalinclude:: /examples/generated/dotnet/Examples.codeblock.local-realm.cs
   :language: csharp

In-Memory Realms
----------------
With an 
:dotnet-sdk:`InMemoryConfiguration <reference/Realms.InMemoryConfiguration.html>` 
object, you can create a {+realm+} that runs entirely in memory (that is, without 
the data written to disk.) The following example shows how to do this: 

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.in-memory.cs
   :language: csharp

In-memory {+realm+}s might still use disk space if memory is running low, but all 
files created by an in-memory {+realm+} will be deleted when the {+realm+} is 
closed. When creating an in-memory {+realm+}, the identifier must be unique to all 
{+realm+}s, including both in-memory and persisted {+realm+}s. 

.. important::

   When an in-memory {+realm+} is disposed or garbage-collected, the data is lost. 
   To keep an in-memory {+realm+} “alive” throughout your app’s execution, be sure 
   to hold a reference to {+realm+}. 

Scoping the Realm
-----------------

The {+realm+} instance implements ``IDisposable`` to ensure native resources are 
freed up. You should dispose of a realm object immediately after use, especially 
on background threads. The simplest way to do this is by declaring the realm 
object with a ``using`` statement, or wrapping the code that interacts with a 
{+realm+} in a ``using (...)`` statement:

.. literalinclude:: /examples/generated/dotnet/Examples.codeblock.scope.cs
   :language: csharp

If you require a {+realm+} object to be shared outside of a single method, be sure 
to manage its state by calling the
:dotnet-sdk:`Dispose() <reference/Realms.Realm.html#Realms_Realm_Dispose>` method:

.. literalinclude:: /examples/generated/dotnet/Examples.codeblock.dispose.cs
   :language: csharp

.. note::
   
   As a general rule, you should dispose of the realm only on background threads,  
   because disposing of a {+realm+} invalidates all objects associated with that 
   instance. If you are data binding the {+realm+} objects on the main thread, 
   for example, you should not call ``Dispose()``. 

.. _dotnet-provide-a-subset-of-classes-to-a-realm:

Class Subsets
-------------

By default, all ``RealmObject`` classes are stored in a {+realm+}. In some 
scenarios, you may want to limit the classes that get stored, which you can do 
with the 
:dotnet-sdk:`ObjectClasses <reference/Realms.RealmConfigurationBase.html#Realms_RealmConfigurationBase_ObjectClasses>` 
property of the ``RealmConfiguration`` object. The following code demonstrates 
how you specify two classes you want stored in the {+realm+}:

.. literalinclude:: /examples/generated/dotnet/Program.codeblock.subset.cs
   :language: csharp


.. TODO: other sections:

.. _dotnet-local-realm-configuration:

.. Local Realm Configuration
.. -------------------------

.. _dotnet-realm-modules:

.. Realm Modules
.. -------------
