.. _dotnet-flexible-sync:

========================
Flexible Sync - .NET SDK
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

To use Flexible Sync in a .NET client:

- Configure Flexible Sync on the backend [LINK TO BACKEND CONFIG PAGE WHEN COMPLETE]
- :ref:`Initialize the app <dotnet-quick-start-init-app>`
- :ref:`Authenticate a user <dotnet-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <dotnet-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <dotnet-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

.. include:: /includes/note-flexible-sync-prerequisite.rst

.. note:: Realm .NET SDK Version Requirement

   In addition to the requirements above, you must use :github:`Realm .NET version
   10.9.0 <realm/realm-js/releases>` or greater in order to use Flexible Sync
   in your Node.js client application.

.. _dotnet-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When configuring Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
``subscriptions`` API to manage a set of subscriptions to specific queries on 
queryable fields.

You can:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update a subscription with a new query
- Remove individual subscriptions or all subscriptions of a type

When data matches the subscription and has appropriate permissions, it syncs
between devices and the backend application.

A Realm subscription in .NET has:

- A created and updated date 
- A name
- An object type
- A query

You can specify a string name for your subscription. If you do not give your
subscription a name, it uses the value of the query as a string name.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.


Get Subscriptions
~~~~~~~~~~~~~~~~~
When using a flexible synced realm, you can access a ``SubscriptionSet``, a collection of subscriptions, through the
``Realm.Subscriptions`` property.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.get-subscriptions.cs
   :language: csharp

You can use this snapshot to add queries to this list of subscriptions and
update existing subscriptions, as shown in the examples below.

Add a Query to the List Of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Within a Flexible Sync ``transaction`` you can add queries to your list of subscriptions.

Queries must be added to the list of existing subscriptions within a
``transaction``. Create a transaction by passing a callback function ``update()`` on
the ``subscriptions`` snapshot. Within the callback function, call the ``add()``
method on the mutable subscription instance to add a query to the subscription.

The ``mutableSubscriptionsInstance.add()`` method takes a ``query``, and a
subscription options object. The subscription options include:

- a ``name`` string field
- a ``throwOnUpdate`` boolean field.

If ``throwOnUpdate`` is false or not defined, adding a subscription with an
existing name will replace the existing query with the new query. However, if
you set ``throwOnUpdate`` to true, adding a subscription with an existing name
but a different query throws an exception.

You can add a single query, or multiple queries within a ``subscription.update``
transaction. In the example below, we subscribe to the queries we created
earlier. 

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.update-subscriptions.cs
   :language: csharp

Check the Status of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The subscription state shows if the server has acknowledged the subscription and
the device has downloaded the data has locally.

You can use subscription state to:

- Trigger error handling
- Show if the transaction is pending or has completed
- Find out when a subscription set is superseded, and you should obtain a
  new instance of the subscription set to write a subscription change

To the status of subscriptions, log the value of the subscription's ``state``.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.wait-for-synchronization.cs
   :language: csharp


Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can update a named subscription with a new query. To update a subscriptions
query, pass the new query and a subscription option with the name of the
subscription that you want to update to the
``mutableSubscriptionsInstance.add()`` method. Like adding a new subscription,
you must update a subscription within a transaction by calling
``subscriptions.update()`` method.

In the following example, long running tasks are re-defined to be any tasks that
have taken more than 180 minutes. 

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.update-a-subscription.cs
   :language: csharp

.. note::

   Attempting to update a subscription that has the
   ``SubscriptionOptions.throwOnUpdate`` field set to true, throw an exception.

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions of a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.


Remove a Subscription by Query
``````````````````````````````
You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the ``remove()`` method on the mutable
subscriptions instance within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-subscription-by-query.cs
   :language: csharp


Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on
the subscriptions set. Within the transaction, pass the name to the
``removeByName()`` method on the mutable subscriptions instance.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-subscription-by-name.cs
   :language: csharp


Remove All Subscriptions of an Object Type
``````````````````````````````````````````
To remove all subscriptions of a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the ``removeByObjectType()`` method on the mutable subscriptions instance.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-all-subscriptions-of-object-type.cs
   :language: csharp


Remove All Subscriptions
````````````````````````
To remove all subscriptions from the subscriptions set, execute a transaction on
the subscriptions set. Call the ``removeAll()`` method
on the mutable subscriptions instance within the transaction

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-all-subscriptions.cs
   :language: csharp