.. _dotnet-flexible-sync:

========================
Flexible Sync - .NET SDK
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Overview
--------

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

To use Flexible Sync in a .NET application:

- :ref:`Configure Flexible Sync on the backend <enable-flexible-sync>`.
- :ref:`Initialize the app <dotnet-quick-start-init-app>`
- :ref:`Authenticate a user <dotnet-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <dotnet-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <dotnet-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

.. include:: /includes/note-flexible-sync-prerequisite.rst

.. note:: Realm .NET SDK Version Requirement

   In addition to the requirements above, you must use :github:`Realm .NET version
   10.9.0 <realm/realm-dotnet/releases>` or greater in order to use Flexible Sync
   in your .NET client application.

.. _dotnet-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When configuring Flexible Sync on the backend, you specify which fields your
client application can query. In the client application, use the
:dotnet-sdk:`subscriptions <reference/Realms.Sync.Subscription.html>` API to
manage a set of subscriptions to specific queries on queryable fields.

You can:

- Get a list of all subscriptions
- Add subscriptions
- Check subscription state
- Update a subscription with a new query
- Remove individual subscriptions or all subscriptions of a type

When the data matches the subscription, and the authenticated user has the
appropriate permissions, {+service-short+} syncs the backend data with the client app.

You can specify a string name for your subscription. If you do not give your
subscription a name, the name is set to null.

When you create a subscription, Realm looks for data matching a query on a
specific object type. In your Flexible Sync subscriptions, you can have
subscriptions on several different object types or several queries on the same
object type.


Get Subscriptions
~~~~~~~~~~~~~~~~~
When using a flexible synced realm, you can access a
:dotnet-sdk:`SubscriptionSet <reference/Realms.Sync.SubscriptionSet.html>`, a
collection of subscriptions, through the :dotnet-sdk:`Realm.Subscriptions
<reference/Realms.Realm.html#Realms_Realm_Subscriptions>` property.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.get-subscriptions.cs
   :language: csharp

You can use this subscriptions set to add queries to this list of subscriptions and
update existing subscriptions, as shown in the examples below.

Add a Query to the Set Of Subscriptions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Within a Flexible Sync ``transaction`` you can add queries to your list of
subscriptions.

Queries must be added to the list of existing subscriptions within a
``transaction``. Create a transaction by calling
:dotnet-sdk:`SubscriptionSet.Update
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_Update_System_Action_>`.
Within the callback function, call the ``Add()`` method on the
``SubscriptionSet`` to add a query to the subscription.

The :dotnet-sdk:`SubscriptionSet.Add()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_Add__1_System_Linq_IQueryable___0__Realms_Sync_SubscriptionOptions_>`
method takes a ``query``, and a subscription options object. The subscription
options include:

- a ``Name`` string field
- a ``UpdateExisting`` boolean field.

If ``UpdateExisting`` is true, adding a subscription with an
existing name will replace the existing query with the new query. However, if
you set ``UpdateExisting`` to false, adding a subscription with an existing name
but a different query throws an exception. ``UpdateExisting`` defaults to false.

You can add a single query, or batch multiple queries within a ``SubscriptionSet.Update``
transaction. In the example below, we subscribe to three queries.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.update-subscriptions.cs
   :language: csharp

Wait for Subscription Changes to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Writing an update to the subscription set locally is only one part 
of changing a subscription. After the local subscription change, the realm 
synchronizes with the server to resolve any updates to the data due to 
the subscription change. This could mean adding or removing data from the 
synced realm. 

Use the :dotnet-sdk:`SubscriptionSet.WaitForSynchronizationAsync()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_WaitForSynchronizationAsync>`
method to wait for the server to acknowledge this set of subscriptions.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.wait-for-synchronization.cs
   :language: csharp


Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can update a named subscription with a new query. To update a subscriptions
query, pass the new query and a subscription option with the name of the
subscription that you want to update to the
``SubscriptionSet.Add()`` method. Like adding a new subscription,
you must update a subscription within a transaction by calling
``SubscriptionSet.Update()`` method.

In the following example, long running tasks are re-defined to be any tasks that
have taken more than 130 minutes. 

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.update-a-subscription.cs
   :language: csharp

.. note::

   Attempting to update a subscription that has the
   ``SubscriptionOptions.UpdateExisting`` field set to false will throw an exception.

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~
To remove subscriptions from the subscription set, you can:

- Remove a single subscription with the given query
- Remove a single subscription with the given name 
- Remove all subscriptions of a specific type
- Remove all subscriptions

When you remove a subscription query, the server also removes synced data from
the client device.


Remove a Subscription by Query
``````````````````````````````
You can remove a specific subscription by query by executing a transaction on
the subscriptions set. Pass the query to the :dotnet-sdk:`Remove()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_Remove__1_System_Linq_IQueryable___0__System_Boolean_>`
method on the ``SubscriptionSet`` within a transaction.

In the following example, the subscription to tasks with an owner named 'Ben' is
removed from the subscriptions set.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-subscription-by-query.cs
   :language: csharp


Remove a Subscription by Name
`````````````````````````````
To remove a specific subscription by name, execute a transaction on the
subscriptions set. Within the transaction, pass the name to the
:dotnet-sdk:`Remove()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_Remove_System_String_>`
method on the ``SubscriptionSet`` within a transaction.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-subscription-by-name.cs
   :language: csharp


Remove All Subscriptions of an Object Type
``````````````````````````````````````````
To remove all subscriptions of a specific object type, execute a transaction on
the subscriptions set. Within the transaction, pass the object type as a string
to the :dotnet-sdk:`RemoveAll()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_RemoveAll__1_System_Boolean_>`
method on the ``SubscriptionSet`` within a transaction.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-all-subscriptions-of-object-type.cs
   :language: csharp


Remove All Subscriptions
````````````````````````
To remove all unnamed subscriptions from the subscriptions set, execute a
transaction on the subscriptions set and call the :dotnet-sdk:`RemoveAll()
<reference/Realms.Sync.SubscriptionSet.html#Realms_Sync_SubscriptionSet_RemoveAll_System_Boolean_>`
method on the ``SubscriptionSet`` within a transaction. If you also want to
remove the named subscriptions, pass ``true`` to the ``RemoveAll()`` method.

.. literalinclude:: /examples/generated/dotnet-flexible-sync/FlexibleSyncExamples.codeblock.remove-all-subscriptions.cs
   :language: csharp