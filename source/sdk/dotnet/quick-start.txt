.. _dotnet-client-quick-start:

======================
Quick Start - .NET SDK
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This Quick Start demonstrates how to use Realm with the Realm .NET SDK. 
It then demonstrates adding Device Sync with Atlas App Services to your app. 
Before you begin, ensure you have :ref:`Installed the .NET SDK <dotnet-install>`.

Install Realm
-------------

.. include:: /includes/dotnet-install-realm.rst

Import Realm
------------

Add the following line to the top of your source files to use Realm:

.. code-block:: csharp

   using Realms;


Define Your Object Model
------------------------

Your application's :ref:`object model <dotnet-objects>` defines 
the data that you can store within Realm and synchronize
to and from App Services.

.. include:: /includes/dotnet-implement-interface.rst

The following code shows how to define an object model for an ``Item`` object. In 
this example, we have marked the ``Id`` field as the Primary Key and marked   
the ``Status`` property as optional. We've also chosen to use the ``MapTo`` 
attribute; properties will be stored in lower case on the server, but can use 
.NET-friendly casing on our property names when using Device Sync.

.. literalinclude:: /examples/generated/dotnet/Task.snippet.item-model.cs
   :language: csharp

.. _dotnet-quick-start-authenticate:

Open a Local Realm
------------------

In a local-only realm, you open a realm with either the 
:dotnet-sdk:`Realm.GetInstance() <reference/Realms.Realm.html#Realms_Realm_GetInstance_System_String_>` or
:dotnet-sdk:`Realm.GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>` 
method. Which method you use depends entirely on if and how you are using `asynchronous 
patterns <https://docs.microsoft.com/en-us/dotnet/csharp/async>`_ in your app. 
The following code shows how to use ``GetInstance()``:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.get-instance.cs
   :language: csharp

For more information, see: :ref:`Open a Realm <dotnet-open-a-realm>`.

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a realm, you can create :ref:`objects <dotnet-objects>` 
in it. All writes must occur within a 
:ref:`Write transaction <dotnet-realm-database-writes>` block.

The following pages cover each of these topics in more detail:

- :ref:`Create <dotnet-write-operations>`
- :ref:`Update <dotnet-update-data>`
- :ref:`Delete <dotnet-delete-data>`

 
Finding, Filtering, and Sorting Documents
-----------------------------------------

You search for documents with the Realm query engine, using either LINQ or 
the Realm Query Language. For details on querying, filtering, and sorting 
documents, see :ref:`<dotnet-filter-data>`.

Watch for Changes
-----------------

As document collections change, it is often important to make updates to the data 
on a client app. You can :ref:`watch a realm, collection, or object for changes
<dotnet-react-to-changes>` with the 
:dotnet-sdk:`SubscribeForNotifications() <reference/Realms.IRealmCollection-1.html#Realms_IRealmCollection_1_SubscribeForNotifications_Realms_NotificationCallbackDelegate__0__>` 
method.

.. _quick-start-sync:

Add Device Sync (Optional)
--------------------------

If you want to sync Realm data across devices, you can configure Atlas 
App Services and enable :ref:`Device Sync <dotnet-sync>`. Once you do that, 
you then add sync to your client code. 

For information on creating a Sync-enabled App Services app, see the 
:ref:`.NET Tutorial <dotnet-tutorial>`.

For information on implementing Sync in your client code, see 
:ref:`Add Device Sync to an App <dotnet-add-sync-to-app>`.
