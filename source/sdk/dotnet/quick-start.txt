.. _dotnet-client-quick-start:

======================
Quick Start - .NET SDK
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This Quick Start demonstrates how to use Realm with the Realm .NET SDK. 
It then demonstrates adding Device Sync with Atlas App Services to your app. 
Before you begin, ensure you have :ref:`Installed the .NET SDK <dotnet-install>`.

Install Realm
-------------

.. include:: /includes/dotnet-install-realm.rst

Import Realm
------------

Add the following line to the top of your source files to use Realm:

.. code-block:: csharp

   using Realms;


Define Your Object Model
------------------------

Your application's :ref:`object model <dotnet-objects>` defines 
the data that you can store within Realm and synchronize
to and from App Services.

.. include:: /includes/dotnet-implement-interface.rst

The following code shows how to define an object model for a ``Item`` object. In 
this example, we have marked the ``Id`` field as the Primary Key, marked the 
``Name`` and ``Status`` properties as "required", and are using the ``MapTo`` 
attribute so we can use .NET-friendly casing on our property names when using 
Device Sync.

.. literalinclude:: /examples/generated/dotnet/Task.snippet.task-object-model.cs
   :language: csharp

.. _dotnet-quick-start-authenticate:

Open a Local Realm
------------------

In a local-only realm, you open a realm with either the 
:dotnet-sdk:`Realm.GetInstance() <reference/Realms.Realm.html#Realms_Realm_GetInstance_System_String_>` or
:dotnet-sdk:`Realm.GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>` 
method. Which method you use depends entirely on if and how you are using `asynchronous 
patterns <https://docs.microsoft.com/en-us/dotnet/csharp/async>`_ in your app. 
The following code shows how to use ``GetInstance()``:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.get-instance.cs
   :language: csharp

For more information, see: :ref:`Open a Realm <dotnet-open-a-realm>`.

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a realm, you can create :ref:`objects <dotnet-objects>` 
in it. All writes must occur within a 
:ref:`Write transaction <dotnet-realm-database-writes>` block.

The following code shows how to create a new ``Guitar`` object. In it, we
instantiate the ``Guitar`` class and then add the new guitar to the realm
within a :dotnet-sdk:`Write() <reference/Realms.Realm.html#Realms_Realm_Write__1_System_Func___0__>` 
block:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.write.cs
   :language: csharp

You can retrieve a live :ref:`collection <dotnet-client-collections>` of all 
``Guitar`` objects in the realm:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.read-all.cs
   :language: csharp

You can filter the collection by using the 
`LINQ <https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/>`_ 
syntax:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.read-filter.cs
   :language: csharp

To modify a realm object, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.update.cs
   :language: csharp

Finally, you can delete a todo:

.. literalinclude:: /examples/generated/dotnet/Program.snippet.delete.cs
   :language: csharp

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<dotnet-react-to-changes>` with the 
:dotnet-sdk:`SubscribeForNotifications() <reference/Realms.IRealmCollection-1.html#Realms_IRealmCollection_1_SubscribeForNotifications_Realms_NotificationCallbackDelegate__0__>` 
method.

Be sure to retain the notification token returned by ``SubscribeForNotifications`` 
as long as you want to continue watching for changes. When you are done, 
call the :dotnet-sdk:`Dispose() <reference/Realms.Realm.html#Realms_Realm_Dispose>` method:

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.subscribe.cs
   :language: csharp

.. _quick-start-sync:

Add Device Sync (Optional)
--------------------------

If you want to sync Realm data across devices, you can set up an Atlas 
App Services App and enable Device Sync. For more information on what 
you can do with App Services, see: :ref:`<dotnet-application-services>`.

Prerequisites
~~~~~~~~~~~~~

Before you can sync Realm data, you must:

- :ref:`Create an App Services App <create-a-realm-app>`
- Enable and configure one or more :ref:`authentication providers <authentication-providers>`
- :ref:`Enable Flexible Sync <enable-flexible-sync>` with  
  :ref:`Development Mode <development-mode>` toggled to ``On`` and an 
  unique field in the :guilabel:`Queryable Fields` section.

In the following code, we have enabled anonymous authentication and are using 
the ``ownerId`` as the unique field in the Flexible Sync configuration.

.. _dotnet-quick-start-init-app:

Initialize the App
~~~~~~~~~~~~~~~~~~ 

.. include:: /includes/access-app-id.rst

You then initialize your app: 

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.initialize-realm.cs
   :language: csharp

Use Object Models with Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~
When using :ref:`Sync <quick-start-sync>`, you can define your object models 
directly in code only if you enabled Sync with 
:ref:`Development Mode <development-mode>` in the App Services UI.

.. include:: /includes/note-get-schema-ui-dev-mode-disabled.rst


Authenticate a User
~~~~~~~~~~~~~~~~~~~

In this quick start, we are using :ref:`anonymous authentication <anonymous-authentication>`
to log in users without requiring them to provide any identifying information.
After authenticating the user, you can open a realm for that user.

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.anon-login.cs
   :language: csharp

You should also provide a way for the user to log out. The following code shows 
how to do this by calling ``LogOutAsync()``:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.logout.cs
   :language: csharp

The Realm .NET SDK provides many additional ways to authenticate, register, and 
link users. For other authentication providers, see: :ref:`<dotnet-authenticate>`

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

Once you have :ref:`enabled Device Sync <enable-sync>` and authenticated a user, 
you can open a synced :ref:`realm <dotnet-realms>`. Use a ``FlexibleSyncConfiguration`` 
object to control the specifics of how your application synchronizes data with
App Services. You then add a :ref:`Flexible Sync subscription <dotnet-flexible-sync>` 
that determines what data the user can query.

.. literalinclude:: /examples/generated/dotnet/FlexibleSyncExamples.snippet.bootstrap-a-subscription.cs
   :language: csharp

The syntax to read, write, and watch for notifications on a
synced realm is identical to the syntax for non-synced realms above. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets. 
