.. _dotnet-data-binding:

=======================
Data Binding - .NET SDK
=======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

In Xamarin and MAUI applications, data binding enables UI updates when an 
underlying object or collection changes, and vice versa.

Realm objects and collections are :ref:`live <dotnet-live-object>` and update 
automatically to reflect data changes. This is because 
Realm objects implement 
`INotifyPropertyChanged <https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged>`__ 
and Realm collections implement 
`INotifyCollectionChanged <https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged>`__. 
When you bind live collections and objects to your UI, both the UI and live 
objects and collections update at the same time.

.. note:: Compiled Bindings

	The Realm SDK does not support `Compiled Bindings 
	<https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/compiled-bindings>`__.


Data Binding Examples
---------------------
The following code snippets show both the C# and XAML for three typical 
data-binding use cases. They all use the following Realm objects:

.. literalinclude:: /examples/generated/dotnet/Models.snippet.binding-classes.cs
   :language: csharp

.. note:: Avoid Using ToList()

   Because Realm collections are live, you should not call ``ToList()`` when 
   obtaining a collection of Realm objects. Doing so forces loading the 
   collection from memory, so the resulting collection is no longer a live 
   object.

Binding to a Single Realm Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In the following example, we create a public property of type ``Employee``. 
Elsewhere in our class, we query our realm for the ``Employee`` with an 
"EmployeeId" of "123":

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-one-cs.cs
   :language: csharp

In our XAML, we bind the Employee's ``Name`` property to a ``Label`` control's 
``Text`` property:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-one-xaml.xaml
   :language: xml

Binding to a Realm Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are two types of collections we can bind to. First, we can bind to a 
collection of Realm objects. In this code example, we create a public 
``IEnumerable`` of the ``Employee`` Realm object and then populate that 
collection with all of the objects in the Employees collection:

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-list-cs.cs
   :language: csharp

In the associated XAML file, we bind a ``ListView`` to the Employees 
``IEnumerable`` to show a list of all Employees. In this case, we're listing 
each employee's "EmployeeId" value:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-list-xaml.xaml
   :language: xml

We can also bind to a *collection property* of a Realm object. In this example, 
we bind to the ``Items`` property of a specific ``Employee``. The ``Items`` 
property on the ``Employee`` class is of type ``IList<Item>``.

.. literalinclude:: /examples/generated/dotnet/MainPage.xaml.snippet.bind-embedded-cs.cs
   :language: csharp

.. note::

	Note that we are calling the :dotnet-sdk:`AsRealmQueryable()
	<reference/Realms.CollectionExtensions.html#Realms_CollectionExtensions_AsRealmQueryable__1_System_Collections_Generic_IList___0__>`
  	method. This is required because we are filtering the collection. If we want  
	to list all of the Items in the ``Items`` collection, we do not need to call 
	``AsRealmQueryable()``.

The XAML implementation is similar to the example above:

.. literalinclude:: /examples/generated/dotnet/MainPage.snippet.bind-embedded-xaml.xaml
   :language: xml
