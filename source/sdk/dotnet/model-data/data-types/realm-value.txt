.. _realmvalue:

=====================
RealmValue - .NET SDK
=====================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionchanged:: 12.2.0

   ``RealmValue`` can hold lists and dictionaries of mixed data.

The ``RealmValue`` data type is a mixed data type, and can represent any
other valid Realm data type except an embedded object or a set. You can create collections
(lists, sets, and dictionaries) of type ``RealmValue``:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.realmValues.cs
   :language: csharp

.. note::

   You cannot create a nullable ``RealmValue``. However, if you want a
   ``RealmValue`` property to contain a null value, you can
   use the special ``RealmValue.Null`` property.

The following code demonstrates creating a ``RealmValue`` property in a class
that inherits from ``IRealmObject`` and then setting and getting the value of
that property:

.. literalinclude:: /examples/generated/dotnet/DataTypesSectionExamples.snippet.realmvalue.cs
   :language: csharp

.. _dotnet-nested-collections-realm-value:

Nested Collections of RealmValue
--------------------------------

.. versionadded:: 12.22.0

Starting with .NET SDK v12.22.0, a ``RealmValue`` data type can
hold collections (a list or dictionary, but *not* a set) of ``RealmValue`` elements.

These collections of mixed data can be nested and can contain other
collections. They can also be
:ref:`listened to for changes <dotnet-collection-notifications>` like a
normal collection.

You can leverage these nested collections to define unstructured
or variable data in your data model. For more information, refer to
:ref:`<dotnet-model-unstructured-data>`.

To create nested collections of mixed data in your app, define the mixed type
property in your data model the same way you would any other ``RealmValue`` type.
Then, you can set the property as a list or dictionary.
