.. _dotnet-data-ingest:

=====================================
Unidirectional Data Ingest - .NET SDK
=====================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 10.17.0

.. include:: /includes/data-ingest-overview.rst

.. important::

   You cannot query, modify, or delete Asymmetric objects from a client app. 
   Because AsymmetricObject can not be modified by the client, the compiler 
   will not let you add a subscription to an AsymmetricObject.


The .NET SDK allows you to work with Asymmetric objects and standard Realm objects 
within the same realm. 

Sync Data Unidirectionally from a Client Application
----------------------------------------------------

Before you set up Data Ingest, you need to understand the following rules:

- The C# objects that you will sync with Atlas must derive from the 
  :dotnet-sdk:`AsymmetricObject <reference/Realms.AsymmetricObject.html>` class.

- An object that derives from ``AsymmetricObject`` can contain 
  :dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>` types, 
  but not ``RealmObject`` types or other ``AsymmetricObject`` types.

- ``RealmObject`` and ``EmbeddedObject`` types cannot contain ``AsymmetricObject``
  types as properties. 

- Unidirectional Sync requires :ref:`Flexible Sync <dotnet-flexible-sync>`.

The process for syncing data asymmetrically is the same as 
standard :ref:`bi-directional sync <dotnet-client-quick-start>`, as long as the 
rules above are followed. The following code shows creating an Asymmetric object 
and syncing it with the backend. It also shows to queries that generate errors. 

.. literalinclude:: /examples/generated/dotnet/Asymmetrics.snippet.asymmetry.cs
   :language: csharp





