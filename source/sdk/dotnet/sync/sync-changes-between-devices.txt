.. _dotnet-sync-changes-between-devices:

=======================================
Sync Changes Between Devices - .NET SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------
 
Before you can access a synced realm from the client, you must:

- :ref:`Enable sync <enable-sync>` in the App Services UI.

- :ref:`Authenticate a user <dotnet-quick-start-authenticate>` in
  your client project.

- :ref:`Open a Synced Realm <dotnet-open-a-synced-realm>`

.. _dotnet-sync-data:

Sync Data
---------

The syntax to :ref:`read <dotnet-realm-database-reads>` and :ref:`write
<dotnet-realm-database-writes>` on a synced realm is identical to the syntax 
for non-synced realms. While you work with local data, a background thread 
efficiently integrates, uploads, and downloads changesets.

.. important:: When Using Sync, Avoid Writes on the Main Thread
   
   The fact that Realm performs sync integrations on a background thread means
   that if you write to your realm on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`never to write on the main thread
   when using Device Sync <dotnet-threading-three-rules>`.

The following code creates a new ``Task`` object and writes it to the realm:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.create.cs
   :language: csharp

.. seealso:: 
   
   :ref:`Threading <dotnet-client-threading>`

.. _dotnet-pause-or-resume-a-sync-session:

Pause or Resume a Sync Session
------------------------------
Opening a synced realm starts a Sync 
:dotnet-sdk:`Session <reference/Realms.Sync.Session.html>`. To pause synchronization 
for a specific session, you can call the 
:dotnet-sdk:`Stop() <reference/Realms.Sync.Session.html#Realms_Sync_Session_Stop>` 
method on the session.

When you then call the 
:dotnet-sdk:`Start() <reference/Realms.Sync.Session.html#Realms_Sync_Session_Start>`  
method on the paused session, the Sync session resumes. 

.. note:: Each session is independent

   You must manually call the ``Stop()`` and ``Start()`` methods for each  
   realm whose Sync session you want to pause and restart. The 
   sync state of one session has no impact on other open sessions. 

The following code block demonstrates calling the ``Stop()`` and ``Start()`` 
methods: 

.. literalinclude:: /examples/generated/dotnet/DataSyncExamples.snippet.pause-synced-realm.cs
   :language: csharp

.. note:: Sync Progress

   To learn more about monitoring Sync upload and download progress, refer to
   :ref:`<dotnet-check-sync-progress>`.


Get Connection State Changes
----------------------------
To get the connection state of a :dotnet-sdk:`SyncSession
<reference/Realms.Realm.html#Realms_Realm_SyncSession>`, set an event handler
on the :dotnet-sdk:`PropertyChanged <reference/Realms.Sync.Session.html#Realms_Sync_Session_PropertyChanged>`
event. The event handler is a standard
`.NET PropertyChangedEventHandler delegate
<https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertychangedeventhandler?view=net-6.0>`_
that takes in a ``sender`` object and
`PropertyChangedEventArgs <https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertychangedeventargs?view=net-6.0>`_
object. 
In the event handler, cast the sender to a ``Session`` object and check if 
the event argument's ``PropertyName`` property is ``Session.ConnectionState``. 
You can then get the
:dotnet-sdk:`ConnectionState <reference/Realms.Sync.Session.html#Realms_Sync_Session_ConnectionState>`
value, which will be one of the following:

- Connecting
- Connected
- Disconnected

The following code demonstrates setting the event handler, casting the session
object, and checking the Sync status:

.. literalinclude:: /examples/generated/dotnet/ProgressNotifications.snippet.connection-state.cs
   :language: csharp


.. _dotnet-handle-sync-errors:

Handle Sync Errors
------------------

Device Sync represents errors via :dotnet-sdk:`SessionExceptions <reference/Realms.Sync.Exceptions.SessionException.html>`. In
addition to the standard exception properties, you have access to an :dotnet-sdk:`ErrorCode <reference/Realms.Sync.Exceptions.ErrorCode.html>`
that contains information about the type of the error and allows you to have
strongly typed handling logic.

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.snippet.handle-errors.cs
   :language: csharp

.. note:: Additional Exception Information

   For security reasons, App Services may send only a minimal amount of 
   information about an exception, but the server-side logs will contain more 
   details. In these cases, the 
   `HelpLink <https://docs.microsoft.com/en-us/dotnet/api/system.exception.helplink?view=net-6.0#system-exception-helplink>`_ 
   property on the exception contains a link to the associated log entry.


.. _dotnet-cancel-sync:

Cancel a Sync Session
---------------------
If you need to cancel an async sync session, you can use a 
`CancellationToken <https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=net-7.0>`__ 
with the 
:dotnet-sdk:`Realm.GetInstanceAsync() <reference/Realms.Realm.html#Realms_Realm_GetInstanceAsync_Realms_RealmConfigurationBase_System_Threading_CancellationToken_>` 
method. For example, you can create a cancellation token with a time limit on it. 
If sync takes longer than the specified time, the session is cancelled. The following 
code example shows calling ``GetInstanceAsync`` with a token that expires after 
2 minutes. If the token expires, an `OperationCanceledException <https://learn.microsoft.com/en-us/dotnet/api/system.operationcanceledexception?view=net-6.0>`__ 
is thrown and we call 
:dotnet-sdk:`Realm.GetInstance() <reference/Realms.Realm.html#Realms_Realm_GetInstance_System_String_>`
instead. This prevents the UI from being blocked while the 
sync occurs.

.. literalinclude:: /examples/generated/dotnet/ErrorHandler.snippet.cancel-token.cs
   :language: csharp

.. note::

   To wait for sync to complete, use the 
   :dotnet-sdk:`session.WaitForUploadAsync() <reference/Realms.Sync.Session.html#Realms_Sync_Session_WaitForUploadAsync>` and 
   :dotnet-sdk:`session.WaitForDownloadAsync()<reference/Realms.Sync.Session.html#Realms_Sync_Session_WaitForDownloadAsync>` 
   methods. 
   For more information, see :ref:`<dotnet-check-sync-progress-wait-for-upload-or-download>`.

