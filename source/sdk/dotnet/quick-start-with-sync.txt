.. _dotnet-client-quick-start:

================================
Quick Start with Sync - .NET SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get Realm Database
integrated into your .NET app. Before you begin, ensure you have:

- :ref:`Created an App <create-a-realm-app>`
- :ref:`Enabled Device Sync <enable-sync>`

.. note::

   See :ref:`Supported Platforms <dotnet_supported-platforms>` for the list of 
   platforms that Realm supports.

Import Realm
------------

In the shared code project of your solution, go to :guilabel:`Manage NuGet
Packages`. In the NuGet Package Manager, switch to the Browse tab and then
search for **Realm**. Select the latest version of the Realm package, and then 
click :guilabel:`Add Package`.

At the top of each C# file that uses Realm, add the following ``using``
statement:

.. code-block:: csharp

   using Realms;
   using Realms.Sync;

.. _dotnet-quick-start-init-app:

Initialize the App
------------------

To use Atlas App Services features such as authentication and sync, you must
access your App using your App ID. You can find your App ID in the
App Services UI. With that, you can initialize the realm app, as shown in the following 
code:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.initialize-realm.cs
   :language: csharp

Define Your Object Model
------------------------

Your application's :ref:`object model <dotnet-objects>` defines 
the data that you can store within Realm Database and synchronize
to and from App Services.

If have not :ref:`enabled Device Sync <enable-sync>` or you enabled
Sync with Development Mode in the App Services UI, you can
define your object model directly in code.

.. include:: /includes/note-get-schema-ui-dev-mode-disabled.rst


The following code shows how to define an object model for a ``Task`` object. In 
this example, we have marked the ``Id`` field as the Primary Key, marked the 
``Name`` and ``Status`` properties as "required", and are using the ``MapTo`` 
attribute so we can use .NET-friendly casing on our property names.

.. literalinclude:: /examples/generated/dotnet/Task.snippet.task-object-model.cs
   :language: csharp

.. _dotnet-quick-start-authenticate:

Authenticate a User
-------------------

After you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
App Services UI, users can immediately log into your app without providing any identifying
information:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.anon-login.cs
   :language: csharp

You should also provide a way for the user to log out. The following code shows 
how to do this by calling ``LogOutAsync()``:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.logout.cs
   :language: csharp

.. seealso::
   
   :ref:`Authenticate a User <dotnet-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled Device Sync <enable-sync>` and authenticated a user, 
you can open a synced :ref:`realm <dotnet-realms>`. Use the ``PartitionSyncConfiguration``
to control the specifics of how your application synchronizes data with
App Services, which might include the :ref:`partition <sync-partitions>` name,
whether to wait for an initial batch of data to sync, and more.

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.config.cs
   :language: csharp

.. seealso::

   :ref:`Sync Data <dotnet-sync-data>`

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a realm, you can modify the 
:ref:`objects <dotnet-objects>` in it. All changes to the data 
(creates, writes, and updates) must occur within a 
:ref:`Write transaction <dotnet-realm-database-writes>` block.

The following code shows how to create a new ``Task``. You instantiate the 
``Task`` class and then add the new Task to the realm in a write block:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.create.cs
   :language: csharp

The following code demonstrates how to retrieve a live 
:ref:`collection <dotnet-client-collections>` of all ``Task`` objects in the 
realm:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.read-all.cs
   :language: csharp

You can also filter that collection using Linq. This example returns all Tasks 
that have a status of  "Open":

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.read-some.cs
   :language: csharp

To modify a task, you update its properties in a write transaction block:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.modify.cs
   :language: csharp

Finally, you can delete a task by calling the ``Remove()`` method:

.. literalinclude:: /examples/generated/dotnet/QuickStartExamples.snippet.delete.cs
   :language: csharp
