.. _unity-tutorial:

==============================
Create a Unity Game with Realm
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this tutorial, you will create a Unity project that uses Unity's `Platformer
Microgame <https://learn.unity.com/project/2d-platformer-template>`_  and Realm.

The project is made up of two parts:

- The Platformer Microgame: A working microgame provided by Unity that does not store any data in a database.
- The Realm Tutorial repository: A repository we've created to simplify the creation of the User Interface and storing of data in Realm.

In :ref:`Part 1 <unity-tutorial-local>` of this tutorial, you will set up the
platformer microgame, clone and import the Realm tutorial
repository, and then add functionality to manage players and a list of game statistics
in Realm Database.

Once you've completed the local version of the app, you can enhance your
application in :ref:`Part 2 <unity-tutorial-sync>` Device Sync to:

- Register users with email and password.
- Sign users into accounts with email and password and sign out later.
- Create a synced global leaderboard of top user scores.

Part 1 should take around 30 minutes to complete. The optional part 2 should take an additional 30 minutes.

.. note:: 
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   you can check out the following documentation:

   - :ref:`Realm .NET Quick Start <dotnet-client-quick-start-local>`
   - :ref:`Realm .NET Quick Start with Sync <dotnet-client-quick-start>`
   - :ref:`Integrate Realm with Unity <dotnet-unity>`

.. _unity-tutorial-local:

Part 1: Set up the Game
-----------------------

.. important:: Prerequisites
   
   The prerequisites below list the latest versions of the necessary downloads at the time of writing this documentation:

   - Unity `2020.3.12f1 (2020 LTS) <https://unity3d.com/get-unity/download/archive>`_.
   - Unity Hub `version 2.4.5 <https://unity3d.com/hub/whats-new>`_ or higher.
   - An installed text editor, such as `Visual Studio <https://docs.microsoft.com/en-us/visualstudio/>`_.

.. include:: /includes/steps/tutorial-unity-local.rst

.. _unity-tutorial-sync:

Part 2: Add Sync to the Game (Optional)
---------------------------------------

.. important:: Prerequisites

   - Completed :ref:`Part 1 <unity-tutorial-local>`.
   - A :ref:`App Services  application <create-a-realm-app>` with :ref:`Email/Password authentication enabled <email-password-authentication>`.

.. tip::

   To view a complete synced version of the app:

   1. Navigate to the root directory of the Realm Tutorial repository:

      .. code-block:: shell

         cd realm-tutorial-unity

   #. Check out the ``sync`` branch:

      .. code-block:: shell

         git checkout sync

   #. In Constants.cs, replace ``<your-realm-app-ID-here>`` with
      your Realm app ID, which you can
      :ref:`find in the App Services UI <find-your-app-id>`.

   #. Run the game by clicking the "Play" button at the top of the Unity UI to
      enter `Play mode <https://docs.unity3d.com/Manual/GameView.html>`_.


.. include:: /includes/steps/tutorial-unity-sync.rst

What's Next?
------------

- Read our :ref:`.NET SDK <dotnet-intro>` documentation.
- Read additional information about :ref:`using realm in your Unity project <unity-integration-guide-using-realm-in-project>`. 
- To learn more about other functionality of Realm, such as  :ref:`serverless functions <functions>` and :ref:`database triggers <triggers>`, try out the :ref:`App Services Backend tutorial <backend-tutorial>`.
- Find developer-oriented blog posts and integration tutorials on the `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
