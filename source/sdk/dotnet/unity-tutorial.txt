.. _unity-tutorial:

==============================
Create a Unity Game with Realm
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this tutorial, you will create a Unity project that uses Unity's `Platformer
Microgame <https://learn.unity.com/project/2d-platformer-template>`_  and Realm.

The project is made up of two parts:

- The Platformer Microgame: A working microgame provided by Unity that does not store any data in a database.
- The Realm Tutorial repository: A repository we've created to simplify the creation of the User Interface and storing of data in Realm.

In :ref:`Part 1 <unity-tutorial-local>` of this tutorial, you will set up the
platformer microgame, clone and import the Realm tutorial
repository, and then add functionality to manage players and a list of game statistics
in Realm Database.

Once you've completed the local version of the app, you can enhance your
application in :ref:`Part 2 <unity-tutorial-sync>` Device Sync to:

- Register users with email and password.
- Sign users into accounts with email and password and sign out later.
- Create a synced global leaderboard of top user scores.

Part 1 should take around 30 minutes to complete. The optional part 2 should take an additional 30 minutes.

.. note:: 
   
   If you prefer to explore on your own rather than follow a guided tutorial,
   you can check out the following documentation:

   - :ref:`Realm .NET Quick Start <dotnet-client-quick-start-local>`
   - :ref:`Realm .NET Quick Start with Sync <dotnet-client-quick-start>`
   - :ref:`Integrate Realm with Unity <dotnet-unity>`

.. _unity-tutorial-local:

Part 1: Set up the Game
-----------------------

.. important:: Prerequisites
   
   The prerequisites below list the latest versions of the necessary downloads at the time of writing this documentation:

   - Unity `2020.3.12f1 (2020 LTS) <https://unity3d.com/get-unity/download/archive>`_.
   - Unity Hub `version 2.4.5 <https://unity3d.com/hub/whats-new>`_ or higher.
   - An installed text editor, such as `Visual Studio <https://docs.microsoft.com/en-us/visualstudio/>`_.

.. procedure::

   .. step:: Download and Import Unity's Platformer Microgame

      Unity Hub comes pre-installed with templates, such as the Platformer
      Microgame, to help users learn to develop games for Unity. You'll start by
      loading the Platformer Microgame template. In later steps, you will import and
      add Realm functionality to the game.

      Click the :guilabel:`Learn` tab on the left side of Unity Hub to view the list of template projects.
      Scroll to the :guilabel:`Platformer Microgame` and click it.

      .. figure:: /images/unity-scroll-to-platformer-microgame.png
         :width: 750px
         :alt: Unity Scroll to Platformer Microgame

      On the Modal that appears, click the :guilabel:`Download Project` button to download the
      project. When the download is complete, click :guilabel:`Open Project` to open the project in Unity.

      .. figure:: /images/unity-download-platformer-microgame.png
         :width: 500px
         :alt: Download Project - Platformer Microgame

      When you open the Platformer Microgame template, Unity prompts you with the
      option to :guilabel:`Load Scene` or :guilabel:`Load Tutorials`.

      If you are new to developing with Unity, click :guilabel:`Load Tutorials` to
      learn Unity editor basics, interacting with
      `Game Objects <https://docs.unity3d.com/ScriptReference/GameObject.html>`_, and more.
      Once you feel comfortable working with the Unity Editor, you can continue to
      the next step. Alternatively, if you are already comfortable working with the
      Unity editor, click :guilabel:`Load Scene` and continue to the next step in
      this tutorial.

      Once the scene is loaded, click the play button on the top of the
      screen to enter `play mode <https://docs.unity3d.com/Manual/GameView.html>`_
      and play the game.

      .. figure:: /images/unity-view-game-in-play-mode.png
         :width: 500px
         :alt: View Game in Play Mode

      .. tip:: Playing the Game

         Try the game to get a feel of what your users will experience. Use the arrow keys for ``Player`` movement and the spacebar
         to jump. Navigate through a series of platforms and defeat the "red slime" enemies by hopping on them, making them disappear.
         Collect the yellow "tokens" by touching them. Get to the end of the level to win the game.

      In later steps, you will use Realm Database to record:

      - how many enemies the ``Player`` defeated per playthrough
      - how many tokens were collected
      - a score that is calculated based on the statistics for the current playthrough and how quickly you completed the playthrough

      Unity stores the game's files in a temporary directory when you load a
      template project from the :guilabel:`Learn` tab. To save them to a local folder on your
      machine, click the :guilabel:`X` button at the top of the screen to close Unity. A modal
      opens and prompts if you want to keep this project. Select the :guilabel:`Keep` button and
      pick a folder to save your new project in.

      .. figure:: /images/unity-tutorial-keep-project.png
         :width: 350px
         :alt: Keep Project

      Navigate to the Unity Hub menu to reopen your game. Select the :guilabel:`Add`
      button in the menu and click your project folder to add your new locally saved
      project to your list of projects on Unity Hub.

      .. figure:: /images/unity-tutorial-add-project.png
         :width: 350px
         :alt: Add Project


   .. step:: Update Your Project Manifest

      Unity uses the `project manifest
      <https://docs.unity3d.com/Manual/upm-manifestPrj.html>`_ to determine packages
      to install into your project. You'll need to update your project's manifest
      file to install Realm Database, and the Unity UI ToolKit and UI Builder packages to
      develop user interfaces to interact with and display data stored in realm.

      Open your project's manifest file by navigating to your project on Unity Hub
      and expanding the dropdown menu on the right-hand side of your project name.
      Click the :guilabel:`Reveal in Finder` option if you're on a Mac or the
      :guilabel:`Show in Explorer` option if you're on a Windows machine. Open your
      project's ``/Packages/manifest.json`` file in a text editor.

      .. figure:: /images/unity-tutorial-reveal-in-finder.png
         :width: 500px
         :alt: Reveal in Finder

      Update your project's manifest file to include the following dependencies and scoped registries:

      .. code-block:: json

         {
           "dependencies": {
             // ...
             "io.realm.unity": "10.5.0",
             "com.unity.ui": "1.0.0-preview.17",
             "com.unity.ui.builder": "1.0.0-preview.17"
           },
           "scopedRegistries": [
             {
               "name": "NPM",
               "url": "https://registry.npmjs.org/",
               "scopes": [
                 "io.realm.unity"
               ]
             }
           ]
         }

      .. warning:: UI ToolKit and UI Builder are Preview Packages

         UI ToolKit and UI Builder are `preview packages
         <https://docs.unity3d.com/Manual/pack-preview.html>`_ that are in
         development by the Unity engineering team. While they provide a simple API
         to develop user interfaces for a tutorial, they should not be used in
         production yet.

      .. warning:: The type or namespace 'UIDocument' could not be found

         If you are experiencing the compilation error: "The type or namespace
         'UIDocument could not be found", this is a bug in the UI Toolkit
         package. As a workaround, create an `Assembly Definition Reference
         <https://docs.unity3d.com/Manual/class-AssemblyDefinitionReferenceImporter.html>`_.
         Click :guilabel:`Assets` at the top of the screen. Then select :guilabel:`Create` in the
         dropdown that appears. Finally, select :guilabel:`Assembly Definition Reference`.
         This will cause Unity to recompile without the error.


   .. step:: Download the Realm Tutorial Repository

      Now that you have installed Realm, UI Builder, and UI Toolkit, you can begin
      recording data into Realm and building a user interface that can read and
      interact with that data.

      We've already put together a repository with most of the code you'll need
      to accomplish that. You can clone or download the Realm Tutorial repository directly from
      :github:`GitHub <mongodb-university/realm-tutorial-unity>`:

      .. tabs::

         .. tab:: Clone with Git CLI
            :tabid: shell

            To download the Realm Tutorial repository using the `git
            <https://git-scm.com/book/en/v2/Getting-Started-The-Command-Line>`_ CLI,
            open your terminal and execute the following code:

            .. code-block:: shell

               cd <your-unity-microplatformer-game-path>/Assets/Scripts
               git clone --branch start https://github.com/mongodb-university/realm-tutorial-unity.git

            .. tip::

               The ``start`` branch is an incomplete version of the Realm Tutorial repository that you will
               complete in this tutorial. To view a complete local-only (non-sync) version of the scripts:

               1. Navigate to the root directory of the client application repository:

                  .. code-block:: shell

                     cd realm-tutorial-unity

               #. Check out the ``local`` branch:

                  .. code-block:: shell

                     git checkout local

         .. tab:: Download as ZIP
            :tabid: zip

            To download the Realm Tutorial repository as a zip:

            1. Navigate to :github:`https://github.com/mongodb-university/realm-tutorial-unity <mongodb-university/realm-tutorial-unity>` in your browser.
            #. Click the green :guilabel:`Code` dropdown and select the :guilabel:`Download ZIP` option.
            #. Once the download completes, extract and move the repository into your ``<your-unity-microplatformer-game-path>/Assets/Scripts`` folder.

            .. figure:: /images/unity-tutorial-download-repo-as-zip.png
               :width: 500px
               :alt: Reveal in Finder


   .. step:: Explore the Realm Tutorial Repository


      In your text editor of choice, such as `Visual Studio
      <https://docs.microsoft.com/en-us/visualstudio/>`_,  you can see the script
      files you will need to add to the game. The relevant files are as follows:

      .. cssclass:: config-table
      .. list-table::
         :header-rows: 1
         :widths: 40 60

         * - File
           - Purpose

         * - UI Toolkit/Leaderboard.uxml
           - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file; defines
             the structure of the Leaderboard user interface.

         * - RealmScripts/LeaderboardManager.cs
           - :ref:`Query Realm <dotnet-read-from-realm>` and display the top ``Stat`` objects.

         * - UI Toolkit/ScoreCard.uxml
           - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file; defines
             the structure of the Scorecard user interface.

         * - RealmScripts/ScoreCardManager.cs
           - :ref:`Listen for changes <dotnet-react-to-changes>` to the current playthrough ``Stat`` and update the Scorecard UI.

         * - UI Toolkit/Authentication.uxml
           - `UXML <https://docs.unity3d.com/Manual/UIE-UXML.html>`_ file; defines
             the structure of the Authentication Screen user interface.

         * - RealmScripts/AuthenticationManager.cs
           - Interacts with the TextField's of AuthenticationScreen.uxml to
             implement user login. In part 2, you'll add :ref:`user authentication
             <dotnet-login-email-password>` with the App Services
             :ref:`Email/Password <email-password-authentication>` provider.

         * - RealmScripts/RealmController.cs
           - Open a realm, :ref:`query Realm <dotnet-read-from-realm>` the realm
             for an existing ``Player`` or create a new one and a new ``Stat`` for the current
             playthrough. Perform :ref:`write transactions <dotnet-write-transactions>` on the realm
             objects.

         * - RealmScripts/PlayerModel.cs
           - Defines the ``Player`` :ref:`Object Schema <dotnet-object-models-and-schemas>`.

         * - RealmScripts/StatModel.cs
           - Defines the playthrough ``Stat`` :ref:`Object Schema <dotnet-object-models-and-schemas>`.

         * - RealmScripts/Constants.cs (Part 2)
           - Part 2: Declare the App Services :ref:`App ID <find-your-project-or-app-id>` for the Device Sync portion of the tutorial.


   .. step:: Explore the Schemas

      In the ``realm-tutorial-unity`` project that you have cloned, navigate to the
      ``PlayerModel.cs`` and ``StatModel.cs`` files in a text editor. These C#
      classes define the schemas for the objects we store in our realms.

      Note the following about the schemas:

      - A ``Stat`` is a realm object representing the statistics of a
        playthrough of the game. For instance, in one playthrough of the game, a
        ``Player`` may have defeated 10 enemies, collected 15 tokens, and had a
        score of 210. Each ``Stat`` has a ``statOwner`` that is a ``Player`` object.

      - A ``Player`` is a realm object representing the user's logged-in
        character. Each ``Player`` has a collection (IList) of ``Stat`` objects.

      - A ``Player`` has a string property, ``_id``, that defines the ``Player`` objects' unique partition.


   .. step:: Create a RealmController Game Object

      The ``RealmController.cs`` file is a script that contains boilerplate code for
      this tutorial, such as a ``Start()`` method that automatically generates
      Leaderboard, Authentication, and ScoreCard UI objects and attaches
      the ``AuthenticationManager.cs``, ``LeaderboardManager.cs``, and
      ``ScoreCardManager.cs`` scripts to their respective UI ``Game Objects``. In later
      steps, you will add functionality to the ``RealmController`` script to perform
      the following:

      - Open a realm.
      - Set a logged-in ``Player``.
      - Interact with the ``Player`` and ``Stat`` models.
      - Create, read, update, and delete the current playthrough ``Stat`` object.

      Before you begin updating the code in the ``RealmController.cs`` file, you'll
      need to create a new ``Game Object`` for it.

      Create an empty ``Game Object`` by right-clicking the hierarchy window and
      selecting :guilabel:`Create Empty`. Name the object ``RealmController``.

      .. figure:: /images/unity-tutorial-create-empty-game-object.png
         :width: 500px
         :alt: Create empty game object

      Next, open the `inspector window <https://docs.unity3d.com/Manual/UsingTheInspector.html>`_
      by clicking the new :guilabel:`RealmController` object.

      .. note:: Inspector Window Not Opening Automatically

         If your inspector window does not open after clicking the ``Game Object``,
         click :guilabel:`Window` > :guilabel:`General` > :guilabel:`Inspector`.
         Then click the ``Game Object`` again to open its inspector window.

      Next, `attach <https://docs.unity3d.com/Manual/UnityAnalyticsAttachSDK.html>`_
      the ``RealmController.cs`` script to the ``RealmController`` object. Click the
      :guilabel:`Add Component` button, and select the :guilabel:`Scripts` option in the dropdown.

      .. figure:: /images/unity-tutorial-attach-script.png
         :width: 500px
         :alt: Attach a script

      Finally, select the ``RealmController.cs`` script to attach it to the
      ``RealmController`` object.

      .. figure:: /images/unity-tutorial-attach-realmcontroller-script.png
         :width: 500px
         :alt: Attach a script

      Click the play button on the top of the screen to enter `play mode
      <https://docs.unity3d.com/Manual/GameView.html>`_ and play the game. You
      should see something like the following:

      .. figure:: /images/unity-tutorial-play-mode-1.png
         :width: 500px
         :alt: Enter Play Mode - Start Login Screen

      Notice, when you type a username and click :guilabel:`Login & Start Game`, Unity
      navigates you to the platformer game, but the username field on the right-hand
      side of the game screen is a static username rather than the one you inputted.
      You'll add functionality to replace the static username value with a dynamic
      user input later.

      .. figure:: /images/unity-tutorial-playmode-2.png
         :width: 500px
         :alt: Enter Play Mode - Initial Platformer Screen


   .. step:: Open a Realm

      Open the ``RealmController.cs`` file with a text editor, where we'll implement a
      function to open a realm. To open a realm instance that you will use
      throughout the ``RealmController`` class, add the following code to the
      ``GetRealm()`` method:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.get-realm-fn.cs
         :language: csharp


   .. step:: Set a Logged In User

      In the ``RealmController.cs`` file, you will need to implement a function to set
      the logged-in user. The ``AuthenticationManager.cs`` file calls this function
      when a user clicks the :guilabel:`Login & Start` button.

      The ``RealmController.SetLoggedInUser()`` method takes a string, ``userInput``.
      You will create code to do the following in this method:

      - Query the realm to determine if a ``Player`` object already exists for the
        given ``userInput``.
      - Create an if-else block that creates a new ``Player`` and a new ``Stat`` realm
        object if the ``Player`` does not exist, and uses the existing ``Player`` and
        creates a new ``Stat`` object if the ``Player`` does exist.

      Add the following code to your ``RealmController.SetLoggedInUser()`` method:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.realm-controller-set-logged-in-user.cs
         :language: csharp

      After the above code is executed, the ``RealmController.SetLoggedInUser()``
      function calls ``startGame()`` to begin the timer. The timer increments the
      RealmController's ``runTime`` variable, and we use the ``runTime`` variable to
      calculate bonus points in the ``playerWon()`` method when the game has
      completed.


   .. step:: Update the Stats and Watch for Changes

      You've set the current Scorecard to the initial playthrough statistics for the
      current playthrough of the game, but collecting tokens or defeating
      enemies will not impact the current ``Stat`` object yet. To implement that, you'll edit the
      ``CollectToken()`` and ``DefeatEnemy()`` methods in the ``RealmController``.


      Add the following code to the ``RealmController.CollectToken()`` method to
      perform a :doc:`write transaction
      </sdk/dotnet/fundamentals/write-transactions>` and update the variable
      ``currentStat`` that you created in the last step:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.collect-token-fn.cs
         :language: csharp

      Call the ``CollectToken()`` method when the ``Player`` collides with the token
      instance. This occurs in the platformer microgame file:

      ``/Assets/Scripts/Mechanics/TokenInstance.cs``.
      In the ``TokenInstance.cs`` file, the ``OnPlayerEnter()`` occurs when a ``Player``
      has collided with the token instance. Add the following code to
      ``OnPlayerEnter()`` after ``collected = true``.

      .. code-block:: csharp

         RealmController.CollectToken();

      Add the following code to the ``RealmController.DefeatEnemy()`` method to
      perform a :doc:`write transaction
      </sdk/dotnet/fundamentals/write-transactions>` and update the variable
      ``currentStat`` that you created in the last step:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.defeat-enemy-fn.cs
         :language: csharp

      Navigate to the ``/Assets/Scripts/Gameplay/EnemyDeath.cs`` file and call
      ``RealmController.DefeatEnemy()`` at the beginning of the ``Execute()`` method.

      .. code-block:: csharp

         RealmController.DefeatEnemy();

      Finally, create a listener that :ref:`reacts to changes <dotnet-react-to-changes>` to the current
      playthrough's ``Stat`` and updates the Scorecard in the UI. In the`
      ``ScoreCardManager.cs`` file, you can add a change listener to the current
      ``Stat`` realm object defined as the ``RealmController.currentStat``
      variable. In the ``WatchForChangesToCurrentStats()`` method, handle the ``Stat`` object's
      :dotnet-sdk:`PropertyChanged event<reference/Realms.RealmObjectBase.html#Realms_RealmObjectBase_PropertyChanged>`:

      .. literalinclude:: /tutorial/generated/unity/ScoreCardManager.snippet.watch-for-changes-stat-propery-changed.cs
         :language: csharp

      The Scorecard now updates if the ``Player`` defeats an enemy or collects a token.

      .. figure:: /images/unity-tutorial-defeatEnem-collectTok-functionality.gif
         :width: 350px
         :alt: Select Authentication.uxml as source asset


   .. step:: Restart the Game When the Player Wins

      When the ``Player`` reaches the end of the Microgame level, the game is complete,
      but nothing else happens. To expand upon this, you will update the code to do
      the following when the ``Player`` wins the game:

      - Call the ``RealmController.PlayerWon()`` method to calculate and write the final score to realm
      - Display a dialog with the final score
      - Respawn the ``Player`` and restarts the game if the ``Player`` clicks the restart button


      Navigate to the Platformer Microgame file, ``/Assets/Scripts/Gameplay/PlayerEnteredVictoryZone.cs``,
      in your text editor. This script is executed when the ``Player`` enters the victory zone.

      To create a dialogue, you'll need the `UnityEditor.EditorUtility
      <https://docs.unity3d.com/ScriptReference/EditorUtility.html>`_ class. Add the
      following code to the top of the file:

      .. code-block:: csharp

         using UnityEditor;

      Replace the existing ``Execute()`` method in the PlayerEnteredVictoryZone
      script with the snippet below:

      .. code-block:: csharp

         public override void Execute()
         {
             var finalScore = RealmController.PlayerWon();
             var didClickRestart = EditorUtility.DisplayDialog("You won!", $"Final Score = {finalScore}", "restart game");
             if (didClickRestart == true)
             {
                Simulation.Schedule<PlayerSpawn>(2);
                RealmController.RestartGame();
             }
         }


   .. step:: Delete the Current Playthrough Stats When the Player Loses

      When the ``Player`` loses by colliding with an enemy or by falling from a
      platform, the game starts a new playthrough and respawns the ``Player`` back to
      the start point but does not create a new ``Stat`` object for the new playthrough.
      To expand upon this, you'll perform the following when the ``Player`` loses the game:

      - Update the ``RealmController.DeleteCurrentStat()`` method to delete the current ``Stat`` object for the current playthrough
      - Call the ``RealmController.DeleteCurrentStat()`` method
      - Call the ``RealmController.RestartGame()`` method to create a new ``Stat`` object for the new playthrough

      Navigate to the ``RealmController.DeleteCurrentStat()`` method and add the following code at the bottom of that method:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.delete-current-stat-method.cs
         :language: csharp

      Next, open the Platformer Microgame file,
      ``/Assets/Scripts/Gameplay/PlayerDeath.cs``, which handles the player death
      event. Add the following code to the end of the PlayerDeath's ``Execute()``
      method:

      .. code-block:: csharp

         RealmController.DeleteCurrentStat();
         RealmController.RestartGame();

      Return to the Unity Editor, and click play to enter ``play mode``. The next
      time your ``Player`` loses,  the game respawns the ``Player`` to the start point with a new
      ``Stat`` object showing 0 enemies defeated, 0 tokens collected.


   .. step:: Customize Your Game Assets (Optional)

      To add a personal touch to the game, you can modify its assets from the Unity
      Editor. Navigate to ``Assets/Tiles`` in the `Project Window
      <https://docs.unity3d.com/Manual/ProjectView.html>`_ to find a set of tiles
      that the game uses.

      To modify a tile, click the tile to open its `inspector window
      <https://docs.unity3d.com/Manual/UsingTheInspector.html>`_. From the inspector
      window, you can change the sprite that the tile uses and its color.

      .. figure:: /images/unity-tutorial-customize-game-find-tiles.png
         :width: 500px
         :alt: Customize Tiles

      In the example below, we replaced the fence tile's sprite with the
      ``fence_brown`` sprite that comes with the Platformer Microgame.

      .. figure:: /images/unity-tutorial-customize-change-sprite.png
         :width: 350px
         :alt: Customize Fence Sprite

      You can choose any tile colors and sprites you would like. We went with the
      following for an earth-toned and friendly look:

      .. list-table::
        :header-rows: 1

        * - Tile Name
          - Sprite

        * - Fence
          - fence_brown

        * - House
          - house_green

        * - Plant
          - plant_green

        * - TileFloatingLeftEdge
          - TileFloatingLeftEdge_green

        * - TileFloatingRightEdge
          - TileFloatingRightEdge_green

        * - TileFloatingMiddle
          - TileFloatingMiddle_green

        * - TileGround
          - TileGroundDark_green

        * - TileGroundTop
          - TileGroundTop_green

      .. figure:: /images/unity-tutorial-customize-final-look.png
         :width: 500px
         :alt: Customize Unity Game - Final Look


   .. step:: Run and Test

      Once you have completed the code, you can run the app and check its functionality.

      Click the play button on the top of the screen to enter `play mode
      <https://docs.unity3d.com/Manual/GameView.html>`_ and play the game. Once the
      Unity Editor opens the `GameView
      <https://docs.unity3d.com/Manual/GameView.html>`_, here are some things you
      can try out:

      - Logging in with a username.
      - Achieving a new high score and seeing the leaderboard update with it on the next playthrough.
      - Achieving a new high score using a different user and seeing the leaderboard update with the highscore on the next playthrough.


.. _unity-tutorial-sync:

Part 2: Add Sync to the Game (Optional)
---------------------------------------

.. important:: Prerequisites

   - Completed :ref:`Part 1 <unity-tutorial-local>`.
   - A :ref:`App Services  application <create-a-realm-app>` with :ref:`Email/Password authentication enabled <email-password-authentication>`.

.. tip::

   To view a complete synced version of the app:

   1. Navigate to the root directory of the Realm Tutorial repository:

      .. code-block:: shell

         cd realm-tutorial-unity

   #. Check out the ``sync`` branch:

      .. code-block:: shell

         git checkout sync

   #. In Constants.cs, replace ``<your-realm-app-ID-here>`` with
      your Realm app ID, which you can
      :ref:`find in the App Services UI <find-your-app-id>`.

   #. Run the game by clicking the "Play" button at the top of the Unity UI to
      enter `Play mode <https://docs.unity3d.com/Manual/GameView.html>`_.


.. procedure::

   .. step:: Enable Atlas Device Sync

      Before you can add Sync functionality within your game, you must
      enable Device Sync in your App Services App.

      To enable Device Sync, follow the steps in the :ref:`Enable Atlas Device Sync
      <enable-realm-sync>` guide. When enabling Sync, you will need to configure your app to:

      - use ``Development Mode``
      - add a required :ref:`Partition Key <sync-partitions>` with the name ``"_partition"`` and with the type ``string``


   .. step:: Connect to Your MongoDB Realm App

      To get the app working with your backend, you first need to add your App Services App
      ID to the ``Constants.cs`` file:

      .. literalinclude:: /tutorial/generated/unity/Constants.snippet.create-constants-sync.cs
         :language: csharp

      Change the value of ``AppId`` to your App Services app ID, which you can :ref:`find in
      the App Services UI <find-your-app-id>`.


   .. step:: Open a Synced Realm

      To configure the SDK to automatically synchronize data between
      devices, you'll need to replace your local realm with a synced realm.

      In the ``RealmController.cs`` file, replace the existing ``GetRealm()`` method
      with the one that takes in a User as a parameter and asynchronously gets a
      synced realm instance:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.get-realm-synced-realm-controller.cs
         :language: csharp

      Opening a synced realm requires a logged-in realm user; you'll set
      that up in the next step.


   .. step:: Update the Authentication Screen and Manager

      To add support for :doc:`Email/Password Authentication </sdk/dotnet/examples/users/manage-email-password-users>`,
      you'll need to update your Authentication Screen to have a password field
      and a button that allows users to toggle between a registration mode and login mode.

      Replace the code in your ``Authentication.uxml`` with the following:

      .. literalinclude:: /tutorial/generated/unity/Authentication.snippet.sync-authentication-uxml.uxml
         :language: xml

      You'll need to refactor your AuthenticationManager's ``Start()`` method to contain code that does the following:

      - Defines the ``passInput`` variable as a `password TextField <https://docs.unity3d.com/ScriptReference/UIElements.TextInputBaseField_1-isPasswordField.html>`_.
      - Defines the ``toggleLoginOrRegisterUIButton`` variable as a `button <https://docs.unity3d.com/ScriptReference/UIElements.Button.html>`_.
      - Handles the toggle register/login button's click event and toggles between a register mode and login mode

      In ``AuthenticationManager.cs``, add the following code to your ``Start()`` method, replacing the existing ``startButton.clicked`` event handler with the one below:

      .. literalinclude:: /tutorial/generated/unity/AuthenticationManager.snippet.sync-auth-manager-start.cs
         :language: csharp

      Next, create a ``AuthenticationManager.SwitchToLoginUI()`` and ``AuthenticationManager.SwitchToRegisterUI()`` method to toggle between authentication UI modes:

      .. literalinclude:: /tutorial/generated/unity/AuthenticationManager.snippet.add-sync-togglable-ui-methods.cs
         :language: csharp

      Replace the existing ``AuthenticationManager.OnPressLogin()`` method with the one below, called
      ``OnPressLoginWithBackend`` that uses :doc:`Email/Password Authentication
      </sdk/dotnet/examples/users/manage-email-password-users>`:

      .. literalinclude:: /tutorial/generated/unity/AuthenticationManager.snippet.add-sync-login-click-handler.cs
         :language: csharp

      Notice that there is now a password parameter for the ``RealmController.SetLoggedInUser()`` method. You will update that method in the next step.

      Finally, create an ``AuthenticationManager.OnPressRegister()`` method that calls a ``RealmController.OnPressRegister()`` method that you will create in the next step:

      .. literalinclude:: /tutorial/generated/unity/AuthenticationManager.snippet.add-sync-register-click-handler.cs
         :language: csharp


   .. step:: Setup Authentication in your Game

      Currently, the project's only form of authentication is a username input.
      Let's replace that in the code with realm :doc:`Email/Password
      Authentication </sdk/dotnet/examples/users/manage-email-password-users>`

      In the ``RealmController.cs``, replace the ``SetLoggedInUser()`` with an
      asynchronous method that logs in using the :dotnet-sdk:`LogInAsync()
      <reference/Realms.Sync.App.html#Realms_Sync_App_LogInAsync_Realms_Sync_Credentials_>`
      method to authenticate and obtain a :dotnet-sdk:`User
      <reference/Realms.Sync.User.html>` instance:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.realmcontroller-set-logged-in-user-synced.cs
         :language: csharp

      Next, in the ``RealmController.cs`` file, create an asynchronous method that
      registers a new user by passing a user-provided email and password to the
      :dotnet-sdk:`RegisterUserAsync()
      <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RegisterUserAsync_System_String_System_String_>`
      method:

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.realmcontroller-press-register-sync.cs
         :language: csharp


      Finally, replace the ``RealmController.LogOut()`` method with the
      ``RealmController.LogOutBackend()`` method below that calls
      :dotnet-sdk:`User.LogOutAsync()
      <reference/Realms.Sync.User.html#Realms_Sync_User_LogOutAsync>` to log out
      the realm user when log out button is clicked.

      .. literalinclude:: /tutorial/generated/unity/RealmController.snippet.logout-backend.cs
         :language: csharp


   .. step:: Create a Real-Time Leaderboard with Atlas Device Sync

      The current leaderboard shows the top ``Stat`` objects when the game first loads.
      However, if another ``Player`` gets a new high score after the game loads on your
      device, the leaderboard on your device will not be updated.

      To fix this, you will update the code in the ``LeaderboardManager.cs`` file to do the following:

      - Open a synced realm
      - Listen to changes on all ``Stat`` objects
      - Update the Leaderboard GameObject when there is a new high score

      Navigate to ``LeaderboardManager.cs`` and add the following function that opens a synced realm using the ``RealmController.syncUser`` variable that you created earlier:

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.sync-open-realm-in-leaderboard.cs
         :language: csharp

      In ``LeaderboardManager.cs`` make the ``SetLoggedInUser()`` an
      asynchronous function and replace the existing ``Realm.GetInstance()`` call
      with a call to the new ``GetRealm()`` method. Your code should look something like the following snippet:

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.sync-leaderboard-setloggedinuser.cs
         :language: csharp

      Next, create a :ref:`Change Listener <dotnet-register-a-realm-change-listener>` method:

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.listen-for-stat-changes.cs
         :language: csharp

      Create a method, ``SetNewlyInsertedScores()`` that does the following:

      - Loops through a list of indices of inserted elements to find the newly created ``Stat`` objects.
      - Loops through the current top scores to determine if the new ``Stat`` object's ``score`` is higher than the current score.
      - Updates the list of current top scores if there is a higher one and updates the UI to display the new list of top scores.

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.set-newly-inserted-scores.cs
         :language: csharp

      Call the ``SetStatListener()``  after the user is logged-in, at the
      end of the LeaderboardManager's ``SetLoggedInUser()`` method:

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.call-setstatlistener.cs
         :language: csharp

      Finally, dispose of the listener token once the Leaderboard GameObject is disabled in the ``OnDisable()`` method:

      .. literalinclude:: /tutorial/generated/unity/LeaderboardManager.snippet.leaderboard-cleanup-fn.cs
         :language: csharp

      .. note:: Simulate New Top Scores Through Realm Studio or Atlas

         Since Unity Hub does not allow opening multiple instances of the same
         project by default, we recommend simulating a new top score by creating a
         new ``Stat`` object through :ref:`Realm Studio <realm-studio>` or
         :atlas:`Atlas <>`. When you create a new ``Stat`` object with a high score,
         your leaderboard updates automatically and displays the new high score.
         Alternatively, you can use the `Unity symbolic link workaround
         <https://support.unity.com/hc/en-us/articles/115003118426-Running-multiple-instances-of-Unity-referencing-the-same-project>`_
         to open a second instance of the project and log in with a different user,
         and get a new high score.


   .. step:: Run and Test

      Once you have completed the code, you can run the game and check its
      functionality. Click the play button on the top of the screen to enter `play
      mode <https://docs.unity3d.com/Manual/GameView.html>`_ and play the game. Once
      the Unity Editor opens the `GameView <https://docs.unity3d.com/Manual/GameView.html>`_,
      you should see something like the following images.

      .. figure:: /images/unity-tutorial-play-mode-sync-1.png
         :width: 500px
         :alt: Enter Play Mode Sync - Login Screen

      After you register an account or log in to an existing account, you can play
      the complete game

      .. figure:: /images/unity-tutorial-play-mode-sync-2.png
         :width: 500px
         :alt: Enter Play Mode Sync - Play Game

      Here are some things you can try out:

      - Authenticating a new user.
      - Getting a new high score and seeing the leaderboard update in real-time.
      - Creating a new ``Stat`` object with a high score in Realm Studio or Atlas and seeing the leaderboard update in real-time.


What's Next?
------------

- Read our :ref:`.NET SDK <dotnet-intro>` documentation.
- Read additional information about :ref:`using realm in your Unity project <unity-integration-guide-using-realm-in-project>`. 
- To learn more about other functionality of Realm, such as  :ref:`serverless functions <functions>` and :ref:`database triggers <triggers>`, try out the :ref:`App Services Backend tutorial <backend-tutorial>`.
- Find developer-oriented blog posts and integration tutorials on the `MongoDB Developer Hub <https://developer.mongodb.com>`__.
- Join the `MongoDB Community forum <https://developer.mongodb.com/community/forums/c/realm/9>`__ to learn from other MongoDB developers and technical experts.

.. include:: /includes/tutorial-request-for-feedback-note.rst
