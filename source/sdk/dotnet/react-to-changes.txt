.. _dotnet-react-to-changes:
.. _dotnet-client-notifications:

===========================
React to Changes - .NET SDK
===========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Realm's notification system allows you to watch for and react to changes in your
data, independent of the writes that caused the changes. To observe changes, you 
create a notification handler for the Realm, collection, or object that you want 
to watch. You can then add your specific app logic related to the change.

Realm emits three kinds of notifications:

- :ref:`Realm notifications <dotnet-realm-notifications>` whenever a specific 
  Realm commits a write transaction.
- :ref:`Collection notifications <dotnet-collection-notifications>` whenever 
  any Realm object in a collection changes, including inserts, updates, and deletes.
- :ref:`Object notifications <dotnet-object-notifications>` whenever a specific 
  Realm object changes.

.. note::

   Notifications only work when your realm regularly refreshes.
   In the Main or UI thread of your application, realm refreshes
   happen automatically.
   On background threads, you need to handle this
   yourself by either calling :dotnet-sdk:`Realm.Refresh()
   <reference/Realms.Realm.html#Realms_Realm_Refresh>` or installing a
   `SynchronizationContext
   <https://docs.microsoft.com/en-us/dotnet/api/system.threading.synchronizationcontext>`__
   on the thread before opening the realm. The third-party library
   `Nito.AsyncEx.Context <https://www.nuget.org/packages/Nito.AsyncEx.Context/1.1.0>`__
   provides a ``SynchronizationContext`` implementation and a convenient API to 
   install it.


.. _dotnet-register-a-realm-change-listener:
.. _dotnet-realm-notifications:

Register a Realm Change Listener
--------------------------------
You can register a notification handler on an entire realm.
Realm invokes the notification handler whenever *any* write
transaction on that realm is committed. 

The handler receives no specific information about the change. This is useful 
when you want to know that there has been a change but do not need to know 
specifically what change has occurred.

.. example::

  Suppose you are building a real-time collaborative app and you want to have an 
  indicator that lights up when changes are made. In this scenario, you could 
  subscribe to the realm notification handler and add the code that controls 
  the indicator.

  .. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.notifications.cs
     :language: csharp
     :emphasize-lines: 2

.. _dotnet-register-a-collection-change-listener:
.. _dotnet-collection-notifications:

Watch for Collection Changes
----------------------------

You can register a notification handler on a specific 
collection within a realm. The handler receives a 
description of changes made to the collection since the last notification. 
Unlike realm-wide notifications, collection notifications contain 
detailed information about the change and provide the information you need to 
manage a list or other view that represents the collection in the UI.


Register a Collection Change Listener
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can register a notification handler on a specific 
collection within a realm. The handler receives a 
description of changes made to the collection since the last notification. 
Unlike realm-wide notifications, collection notifications contain 
detailed information about the change and provide the information you need to 
manage a list or other view that represents the collection in the UI.

.. note::
   
   You can add a notification to a collection of realm objects 
   (``realm.All<Person>().SubscribeForNotifications``) or to a collection 
   property on a realm object (``house.Owners.SubscribeForNotifications``).

After retrieving the collection, Realm emits an initial notification. After the 
initial notification, Realm delivers notifications asynchronously whenever a 
write transaction adds, modifies, or removes objects in the collection.

Specifically, the notification contains three lists of indices:

- The indices of the objects that were deleted.
- The indices of the objects that were inserted.
- The indices of the objects that were modified.

To subscribe to collection notifications, you call the 
:dotnet-sdk:`SubscribeForNotifications <reference/Realms.CollectionExtensions.html#Realms_CollectionExtensions_SubscribeForNotifications__1_System_Collections_Generic_IDictionary_System_String___0__Realms_NotificationCallbackDelegate_System_Collections_Generic_KeyValuePair_System_String___0___>` 
method. ``SubscribeForNotifications`` returns a subscription token which can be 
cancelled at any time to stop receiving notifications on the collection. 

.. example::

The following code shows how to observe a collection for changes. It also 
demonstrates calling ``Dispose`` on the token when you no longer want to 
be notified of changes.

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.collection-notifications.cs
   :language: csharp
   :emphasize-lines: 2-3

.. important:: Order Matters
   
   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.

Handle the CollectionChanged Event
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Every Realm collection implements ``INotifyCollectionChanged``, which allows you 
to use a collection directly in data-binding scenarios. Because collections implement 
``INotifyCollectionChanged``, another approach to monitoring collection changes 
is to handle the `CollectionChanged 
<https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.inotifycollectionchanged.collectionchanged?view=net-6.0>`_ 
event. 

.. important:: Less Detailed Information

   The ``CollectionChanged`` event handler does not provide the same level of 
   detail about the change. For finer control, use ``SubscribeForNotifications``.

The following code shows you how to implement the ``CollectionChanged`` event 
handler:

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.call-handle-collection-changed.cs
   :language: csharp

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.define-handle-collection-changed.cs
   :language: csharp

.. _dotnet-collection-cleared:

Check if the Collection Has Been Cleared
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A special case of collection-based notifications occurs if the entire collection 
is cleared (all items in the collection are removed). You still use 
``SubscribeForNotifications`` to handle notifications. If an `IList
<https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist?view=net-6.0>`_
or `ISet
<https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.iset-1?view=net-6.0>`_ 
collection has been cleared by calling ``Clear()``, the :dotnet-sdk:`ChangeSet.IsCleared
<reference/Realms.ChangeSet.html#Realms_ChangeSet_IsCleared>` property to true.

.. example::

  In the following example, we register a change listener on ``fido.Owners``,
  and check the boolean value of ``changes.IsCleared``:

  .. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.get-notification-if-collection-is-cleared.cs
     :language: csharp


.. _dotnet-register-an-object-change-listener:
.. _dotnet-object-notifications:

Register an Object Change Listener
----------------------------------

You can register a notification handler on a specific object
within a realm so that Realm notifies you when any of the object's 
properties change. The handler receives information about which field 
has changed. With the field name, you can get the new value. 

.. example::

  The following code shows how to observe an object for
  changes.

  .. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.object-notifications.cs
     :language: csharp
     :emphasize-lines: 4

.. _dotnet-unregister-a-change-listener:

Unregister a Change Listener
----------------------------

When you no longer want to receive notifications on an event, you unsubscribe. 
The following code demonstrates this:

.. literalinclude:: /examples/generated/dotnet/WorkWithRealm.snippet.unsubscribe.cs
   :language: csharp
