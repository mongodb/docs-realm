.. _sdks-manage-sync-subscriptions:

=========================
Manage Sync Subscriptions
=========================

.. meta::
   :description: Provide a short description of the consolidated page. This is critical for SEO.
   :keywords: Realm, C++ SDK, Flutter SDK, Kotlin SDK, Java SDK, .NET SDK, Node.js SDK, Swift SDK, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: cpp, csharp, dart, java, javascript/typescript, kotlin, swift

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tabs-selector:: drivers

Atlas Device Sync uses subscriptions and permissions to determine what
data to sync with your client application.

After you :ref:`open a synced database <sdks-configure-and-open-synced-database>`,
you must add subscriptions before you can read to and write from the database.

You can manually add, update, and remove subscriptions to determine which 
data syncs to the client device. Or you can subscribe to queries instead of
or in addition to manually managing subscriptions.

What are Subscriptions?
-----------------------

When you configure Device Sync in Atlas, you specify which fields your 
client application can query. The SDK tracks these queries through a
**subscription**. When you subscribe to a query, the SDK automatically tracks 
changes to data matching that subscription, and uploads and downloads relevant
data.

Each subscription corresponds to a query on **queryable fields** for a 
specific object type. See :ref:`Queryable Fields <queryable-fields>` 
in the Device Sync documentation for more information.

For each query subscription, the SDK looks for data matching the query. 
Data matching the subscription, where the user has the appropriate 
permissions, syncs between clients and the backend application.

The SDK tracks these queries through a **subscription set**, which is a
collection of subscriptions. You can add, remove, and update subscriptions in
the subscription set.

You can construct subscription queries with RQL, or one of the SDK-idiomatic
query engines.

- :ref:`realm-query-language`
- :ref:`java-filter-data`
- :ref:`dotnet-linq`
- :ref:`sdks-filter-data-swift`

Subscribe to Object Types
~~~~~~~~~~~~~~~~~~~~~~~~~

Subscription sets are based on your :ref:`data model object types <sdks-object-models>`. 
You might have multiple subscriptions if you have many types of SDK objects.
You can also have multiple subscriptions on the same object type. 

However, note the following if you use :ref:`relationships 
<sdks-relationships>` or :ref:`asymmetric objects 
<sdks-asymmetric-objects>` in your app:

Object Links
````````````

You must add both an object and its linked object to the subscription 
set to see a linked object.

If your subscription results contain an object with a property that links 
to an object not contained in the results, the link appears to be nil.
The SDK does not provide a way to distinguish whether that property's value is 
legitimately nil, or whether the object it links to exists but is out of
view of the query subscription.

Asymmetric Objects
``````````````````

If your app uses :ref:`Data Ingest <sdks-stream-data-to-atlas>` to 
unidirectionally sync **asymmetric objects**, you *cannot* create subscriptions
for those objects. If your app contains asymmetric objects and non-asymmetric
objects in the same database, you can add subscription queries for the
non-asymmetric objects.

Permissions
~~~~~~~~~~~

Subscriptions work hand-in-hand with permissions to determine what data to 
Sync to your client application. The client application only sees the 
subset of data that matches your subscriptions which *also* matches the
permissions of the logged-in user. For more information about the intersection
of subscriptions and user permissions, refer to :ref:`sdks-write-synced-database`.

This page details how to manage client subscriptions for Device Sync. 
For information about setting up permissions for Device Sync, see:
:ref:`Device Sync Rules & Permissions <flexible-sync-rules-and-permissions>`.

Manage Subscriptions in Your Client App
---------------------------------------

In the client application, you add, update, and remove subscriptions to specific 
queries on the queryable fields. This determines which data syncs to the
client device.

You can:

- Add subscriptions with an optional subscription name:
  
  - You can subscribe to a database query. This automatically adds the
    subscription to the subscription set. 
  - Manually add a subscription to the subscription set with the subscribe API.
    Use this API if you need more control over subscriptions for performance
    optimization or business-logic reasons. See :ref:`Performance Considerations
    <sdks-sync-subscription-performance-considerations>` for more information.
  
- React to subscription state changes.
- Update subscriptions with new queries.
- Remove individual subscriptions or all subscriptions for an object type.

Subscriptions persist across user sessions unless you unsubscribe from them.

.. _sdks-sync-results-subscribe-api:

Subscribe to Queries
--------------------

To simplify subscription management, the SDK offers APIs to subscribe to and
unsubscribe from a query directly. These APIs abstract away the details of
manually adding and removing subscriptions. This API is not available for all
languages. If your preferred language does not provide this API, refer to
:ref:`sdks-manually-manage-subscriptions`.

.. important:: The Subscribe to Queries API is in Preview

   The APIs described here are currently in Preview. These APIs may be subject
   to change in the future.

.. _sdks-subscribe-to-query:

Subscribe to a Query
~~~~~~~~~~~~~~~~~~~~

With an :ref:`authenticated user <sdks-authenticate-users>` and a
:ref:`Sync configuration <sdks-configure-and-open-synced-database>`, you can
open a synced database and query for the objects you want to read and write.
You can subscribe to the query to create a subscription for objects matching
the query.

This creates an unnamed subscription and adds it to the subscription set,
similar to :ref:`manually creating a subscription
<sdks-sync-subscriptions-add-subscription>`.

Subscriptions persist across user sessions unless you unsubscribe from them.

.. tip::

   If your app works with multiple subscriptions, or if you want to update
   a subscription, you should add a name when you subscribe to a query. For
   details, refer to the :ref:`sdks-subscribe-to-query-with-name` section on
   this page.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/sync/manage-sync-subscriptions-subscribe-to-query-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-subscribe-to-query-js-ts-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/sync/manage-sync-subscriptions-subscribe-to-query-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/sync/manage-sync-subscriptions-subscribe-to-query-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-subscribe-to-query-js-ts-description.rst

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-subscribe-to-query.rst

.. _sdks-subscribe-to-query-with-name:

Subscribe to a Query with a Subscription Name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your app works with multiple subscriptions, or if you want to update
a subscription, you should add a name when you subscribe to a query.

You can later use this name to:

- :ref:`Check for an existing subscription by name <sdks-check-existing-subscriptions-before-adding>`
- :ref:`Update a subscription's query <sdks-update-subscriptions-with-new-query>`
- :ref:`Remove the query by name <sdks-remove-query-by-name>`

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/sync/manage-sync-subscriptions-subscribe-to-query-with-name-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-subscribe-to-query-with-name-js-ts-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/sync/manage-sync-subscriptions-subscribe-to-query-with-name-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/sync/manage-sync-subscriptions-subscribe-to-query-with-name-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-subscribe-to-query-with-name-js-ts-description.rst

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-subscribe-to-query-with-name.rst

.. _sdks-wait-for-query-subscription-to-sync:

Wait for a Query Subscription to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you subscribe to a query, that query's results do not contain objects
until the subscription syncs with Atlas.

If your app creates objects, you may not need to download synced data before
the user works with it. However, if your app requires data from Atlas before
the user can work with your app, you can specify that the SDK should wait for
the subscription query data to sync before proceeding.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/sync/manage-sync-subscriptions-wait-for-query-subscription-to-sync-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-wait-for-query-subscription-to-sync-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/sync/manage-sync-subscriptions-subscribe-to-query-with-name-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/sync/manage-sync-subscriptions-wait-for-query-subscription-to-sync-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/typescript/sync/manage-sync-subscriptions-wait-for-query-subscription-to-sync-description.rst

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-wait-for-query-subscriptions-to-sync.rst

.. _sdks-unsubscribe-from-query:

Unsubscribe from a Query
~~~~~~~~~~~~~~~~~~~~~~~~

You can unsubscribe from a query that you have previously subscribed to.
Unsubscribing removes the suscription from the subscription set, similar to
:ref:`manually removing a subscription <sdks-remove-query-by-name>`.

A query results set may still contain objects after calling the unsubscribe
method if the subscription set contains another overlapping subscription.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/sync/manage-sync-subscriptions-unsubscribe-from-query-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/generic/sync/manage-sync-subscriptions-subscribe-to-query-not-supported.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-unsubscribe-from-query-js-ts-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/sync/manage-sync-subscriptions-unsubscribe-from-query-not-supported.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/sync/manage-sync-subscriptions-unsubscribe-from-query-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-unsubscribe-from-query-js-ts-description.rst

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-unsubscribe-from-query.rst

The unsubscribe method returns before objects matching the removed subscription
are deleted from the database. Sync continues in the background based on the
new set of subscriptions. There is no API to wait for the unsubscribe method
to sync with the server.

.. _sdks-manually-manage-subscriptions:

Manually Manage Subscriptions
-----------------------------

As an alternative to the subscribe to a query API, you can manually manage the
subscriptions in a subscription set.

You can:

- Add subscriptions
- React to subscription state change
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions for an object type

Data matching the subscription, where the user has the appropriate 
permissions, syncs between devices and Atlas.

You can specify an optional string name for your subscription.

When you create a subscription, the SDK looks for data matching a query on a
specific object type. You can have multiple subscription sets on different 
object types. You can also have multiple queries on the same object type.

.. note:: Duplicate subscriptions

   Subscription names must be unique. Trying to append a subscription 
   with the same name as an existing subscription throws an error.
   
   If you do not explicitly name a subscription, and instead subscribe 
   to the same unnamed query more than once, the SDK does not persist 
   duplicate queries to the subscription set. 
   
   If you subscribe to the same query more than once under different names, 
   the SDK persists both subscriptions to the subscription set.

.. _sdks-sync-subscriptions-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Add a subscription in a subscriptions update block. You append each
new subscription to the client's SDK subscriptions.

Subscriptions persist across user sessions unless you remove them from the
subscription set.

If your app is adding subscriptions for the first time, some SDK languages
provide a special parameter to :ref:`set initial subscriptions
<sdks-set-initial-subscriptions>` or recalculate initial subscriptions on app
launch.

.. tip::

   If your app works with multiple subscriptions, or if you want to update
   a subscription, you should add a name when you subscribe to a query. For
   details, refer to the :ref:`sdks-add-named-subscription` section on
   this page.

.. tabs-drivers::

   .. tab::
      :tabid: cpp-sdk

      .. include:: /includes/api-details/cpp/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: csharp

      .. include:: /includes/api-details/csharp/sync/manage-sync-subscriptions-add-subscription-description.rst
      
   .. tab::
      :tabid: dart

      .. include:: /includes/api-details/dart/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: java

      .. include:: /includes/api-details/java/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: java-kotlin

      .. include:: /includes/api-details/java/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: javascript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-add-subscription-js-ts-description.rst

   .. tab::
      :tabid: kotlin

      .. include:: /includes/api-details/kotlin/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: swift

      .. include:: /includes/api-details/swift/sync/manage-sync-subscriptions-add-subscription-description.rst

   .. tab::
      :tabid: typescript

      .. include:: /includes/api-details/javascript/sync/manage-sync-subscriptions-add-subscription-js-ts-description.rst

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-add-subscription.rst

.. _sdks-add-unnamed-subscription:

Add Unnamed Subscription
````````````````````````

If your app doesn't need to update or remove subscriptions, you can add a
subscription without a name.

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-add-unnamed-subscription.rst

.. _sdks-add-named-subscription:

Add a Named Subscription
````````````````````````

If your app might need to update or remove subscriptions, you should add a
name when you create a subscription. You can use the name to find and update
or remove the appropriate subscription later.

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-add-named-subscription.rst

.. _sdks-add-multiple-subscriptions:

Add Multiple Subscriptions
``````````````````````````

You can add multiple subscriptions within a subscription update block, 
including subscriptions of different object types.

Performing query updates requires Atlas to recalculate which documents match the
query. We strongly advise designing your application to minimize updates. You
can do this by batching additions and changes to the subscription set.

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-add-multiple-subscriptions.rst

.. _sdks-subscribe-to-all-objects-of-type:

Subscribe to All Objects of a Specific Type
```````````````````````````````````````````

In addition to syncing all objects that match a given query, you can subscribe 
to all objects of a specific type. You do this by appending a subscription
without providing a query.

.. include:: /includes/sdk-examples/sync/manage-sync-subscriptions-subscribe-to-all-objects-of-type.rst

.. _ios-sync-add-initial-subscriptions:
.. _sdks-set-initial-subscriptions:

Set Initial Subscriptions
`````````````````````````

.. versionadded:: 10.28.0

You must have at least one subscription before you can read from or write
to the realm. You can bootstrap a realm with an initial subscription set
when you open it with the :swift-sdk:`flexibleSyncConfiguration() 
<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>`.
Pass the ``initialSubscriptions`` parameter with the subscription queries 
you want to use to bootstrap the realm:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-initial-subscriptions.swift
   :language: swift

If your app needs to rerun this initial subscription every time the app starts,
you can pass an additional parameter - ``rerunOnOpen``. This is a bool that 
denotes whether the initial subscription should re-run every time the 
app starts. You might need to do this to re-run dynamic time ranges 
or other queries that require a re-computation of static variables for the 
subscription.

In this example, we don't want users to be overwhelmed by irrelevant tasks,
so we'll load only tasks due within the previous 7 days and the next 7 days.
Tasks that were due more than a week ago are no longer relevant, and tasks
that are due further out than the next week are also not relevant. With
``rerunOnOpen`` here, the query dynamically recalculates the relevant 
objects to sync based on the desired date range every time the app starts.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-initial-subscriptions-rerun-on-open.swift
   :language: swift

.. _sdks-check-existing-subscriptions-before-adding:

Check for Existing Subscriptions Before Adding a Subscription
`````````````````````````````````````````````````````````````

If your application flow appends the same named subscription to the subscription 
set every time you run the application, this is disallowed. In this case, 
add a check for an existing subscription before appending it:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.check-before-adding-subscription.swift
   :language: swift

.. _ios-sync-check-subscription-state:
.. _ios-sync-react-to-subscription-changes:

Wait for Subscription Changes to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Updating the subscription set locally is only one component 
of changing a subscription. After the local subscription change, the realm 
synchronizes with the server to resolve any updates to the data due to 
the subscription change. This could mean adding or removing data from the 
synced realm. 

Pre Async/Await
```````````````

If your application does not use Swift's async/await feature, you can react 
to subscription changes syncing with the server using the ``onComplete`` 
block. This block is called after subscriptions are synchronized with the 
server. If you want to react to subscription state changes by redrawing a 
UI, for example, or taking another action based on changes to the data set, 
take those actions in ``onComplete``. This is also where you can handle 
optional errors that occur during synchronization.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-subscription-with-oncomplete.swift
   :language: swift

Async/Await
```````````

If your application uses async/await, you don't need the ``onComplete`` 
block. The update executes asynchronously and throws an 
error if the update cannot complete successfully.

.. code-block:: swift

   @MainActor
   func changeSubscription() async throws {
      let subscriptions = realm.subscriptions
      try await subcriptions.update {
         subscriptions.remove {
            QuerySubscription<Task> {
               $0.assignee == "Joe Doe"
            }
         }
      }
   }

.. include:: /includes/swift-concurrency-mainactor.rst

Subscription Set State
~~~~~~~~~~~~~~~~~~~~~~

Use the :swift-sdk:`SubscriptionSet.state
<Structs/SyncSubscriptionSet.html#/s:10RealmSwift19SyncSubscriptionSetV5stateAA0cD5StateOvp>`
property to read the current state of the subscription set.

The ``superseded`` state is a :swift-sdk:`SyncSubscriptionState
<Enums/SyncSubscriptionState.html#/s:10RealmSwift21SyncSubscriptionStateO8completeyA2CmF>`
that can occur when another thread updates a subscription on a different
instance of the subscription set. If the state becomes ``superseded``, you must
obtain a new instance of the subscription set before you can update it.

.. include:: /includes/note-sync-state-complete.rst

.. _sdks-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a subscription's query using ``updateQuery``. In this example, 
we search for a subscription matching our query and then update it with a 
new query. 

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.update-subscription.swift
   :language: swift

You can also :swift-sdk:`search for a subscription by name 
<Structs/SyncSubscriptionSet.html#/s:10RealmSwift19SyncSubscriptionSetV5first5namedAA0cD0VSgSS_tF>`
. In this example, we search for a subscription query by name and then 
update it with a new query.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.update-subscription-by-name.swift
   :language: swift

.. _ios-remove-subscriptions:
.. _sdks-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions, you can:

- Remove a single subscription query
- Remove all subscriptions to a specific object type
- Remove all unnamed subscriptions
- Remove all subscriptions

When you remove a subscription query, Realm asynchronously removes the
synced data that matched the query from the client device.

.. _sdks-remove-query-by-name:

Remove a Single Subscription
````````````````````````````

You can remove a specific subscription query in a subscription update block 
using ``remove``. Specify the query by name or use the query as a string 
to find the appropriate subscription query to remove.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-single-subscription.swift
   :language: swift

Remove All Subscriptions to an Object Type
``````````````````````````````````````````

If you want to remove all subscriptions to a specific object type, use the 
``removeAll`` method with ``ofType`` in a subscription update block.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-subscriptions-to-object-type.swift
   :language: swift

Remove All Unnamed Subscriptions
`````````````````````````````````

.. versionadded:: 10.43.0

You may want to remove unnamed subscriptions that are transient or dynamically 
generated, but leave named subscriptions in place.

You can remove all unnamed subscriptions from the subscription set by 
setting ``unnamedOnly`` to ``true`` when you call the ``removeAll`` method:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-all-unnamed-subscriptions.swift
   :language: swift

Remove All Subscriptions
````````````````````````

To remove all subscriptions from the subscription set, use the ``removeAll``
method in a subscription update block.

.. important::

   If you remove all subscriptions and do not add a new one, you'll 
   get an error. A realm opened with a flexible sync configuration needs
   at least one subscription to sync with the server.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-all-subscriptions.swift
   :language: swift

.. _sdks-sync-subscription-performance-considerations:

Performance Considerations
--------------------------

API Efficiency
~~~~~~~~~~~~~~

Adding several subscriptions with the ``.subscribe()`` and ``.unsubscribe()``
APIs described in the :ref:`sdks-sync-results-subscribe-api` section
is less efficient than performing batch updates when you manually 
manage subscriptions. On every ``.subscribe()``, the Swift SDK opens a new
update block. For better performance adding multiple 
subscriptions, use the ``subscriptions.update`` API described in the 
:ref:`sdks-manually-manage-subscriptions` section.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst

.. _swift-flexible-sync-rql-limitations:

Flexible Sync RQL Requirements and Limitations
-----------------------------------------------

.. include:: /includes/flex-sync-limitations.rst

Placeholder page for information about managing Flexible Sync subscriptions.

.. _sdks-add-sync-subscriptions:

Add Sync Subscriptions
----------------------

.. _sdks-remove-sync-subscriptions:

Remove Sync Subscriptions
-------------------------
