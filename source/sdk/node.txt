:template: product-landing
:hidefeedback: header
:noprevnext:

.. _node-intro:

=================
Realm Node.js SDK
=================

.. toctree::
   :titlesonly:
   :hidden:

   Install Realm for Node.js </sdk/node/install>
   Quick Start </sdk/node/quick-start-local>
   Quick Start with Sync </sdk/node/quick-start>
   Fundamentals </sdk/node/fundamentals>
   Data Types </sdk/node/data-types>
   Usage Examples </sdk/node/examples>
   Integration Guides </sdk/node/integrations>
   Advanced Guides </sdk/node/advanced>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Upgrade from Stitch to Realm </sdk/node/migrate>
   Release Notes <https://github.com/realm/realm-js/releases>


The Realm Node.js SDK allows you to use Realm Database and
Atlas App Services from Node.js applications written in JavaScript or TypeScript.
Use the Node.js SDK to build for server applications, desktop applications, CLIs,
IoT programs, and more.

The Node.js SDK does not support applications written for web browsers.
For Web apps, use the :ref:`Realm Web SDK <web-intro>`.
For React Native development, use the :ref:`Realm React Native SDK <react-native-intro>`.

To get started with the Node.js SDK, see :ref:`Quick Start <node-client-quick-start-local>`.

.. kicker:: What You Can Do

Develop Apps with Realm
-----------------------

.. tabs::

  .. tab:: Use Realm Database Locally
      :tabid: local-realm

      .. container::

        Use open-source Realm Database to store data on a device.

        .. procedure::

          .. step:: Install the Realm Node.js SDK

              Set up your project with Node.js and Realm.
              To get started, see :ref:`Install Node.js <node-install>`.

          .. step:: Define an Object Schema

              Define the schema of objects in the database.

              For more information, see :ref:`Define an Object Schema
              <node-define-a-realm-object-schema>`.

          .. step:: Configure & Open a Realm

              Set the configuration for your Realm Database, and open a connection
              to it.

              For more information, see :ref:`Open & Close a Realm <node-open-close-realm>`.

          .. step:: Read and Write Data

              You can create, read, update, and delete objects from the
              realm.

              For more information, see :ref:`Read & Write Data
              <node-read-and-write-data>` and :ref:`Query Data
              <node-query-data>`.

          .. step:: React to Changes

              Realm's live objects mean that your data is always up-to-date.
              You can register a change listener, a notification handler
              that watches for changes and performs logic like updating
              your UI.

              For more information, see :ref:`React to Changes
              <node-react-to-changes>`.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

  .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. container::

         Use Device Sync to keep data in sync with your MongoDB Atlas cluster and other
         clients.

         .. procedure::

            .. step:: Connect to an Atlas App Services App

               Configure :Device Sync in an App Services App
               <realm-sync-get-started. Define data access rules or use
               Development Mode to infer a schema from your client's data model.
               Then, connect to the backend from your Node.js client.

               For more information, see :ref:`Device Sync Overview <realm-sync-get-started>`
               in the Atlas App Services docs and
               :ref:`Connect to an Atlas App Services Backend <node-connect-to-mongodb-realm-backend-app>`.

            .. step:: Authenticate a User

               App Services provides access to custom JWT authentication,
               our built-in email/password provider, anonymous
               authentication, and popular
               authentication providers like Apple, Google, and Facebook.

               For more information, see :ref:`Authenticate Users
               <node-authenticate-users>`.

            .. step:: Open a Synced Realm

               A synced realm allows you to access data across devices.
               To determine what data a synced realm can read and write,
               subscribe to a query.

               For more information, see :ref:`Open & Close a Realm
               <node-open-close-realm>` and :ref:`Subscribe to
               Queryable Fields <node-sync-subscribe-to-queryable-fields>`.

            .. step:: Read and Write Synced Data

               The APIs for reading and writing data are the same for both synced
               and local realms. Data that you read and write is automatically kept
               in sync with your Atlas cluster and other clients.
               Apps keep working offline and sync changes when a network connection
               is available.

               For more information on reading and writing data, see
               :ref:`Read & Write Data <node-read-and-write-data>`.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

  .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Use Atlas App Services in your Node.js application with the Realm SDK.

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can call serverless Functions that run in an App Services App backend
         from your client application.

         For more information, see :ref:`Call a Function <node-call-a-function>`.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         You can query data stored in MongoDB directly from your client application code.

         For more information, see :ref:`Query MongoDB <node-mongodb-remote-access>`.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party authentication
         providers. Use the authenticated user to access App Services.

         For more information, see :ref:`Authenticate Users <node-authenticate-users>`.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: Node.js Reference
      :url: https://www.mongodb.com/docs/realm-sdks/js/latest/
      :icon: /images/icons/branding_2022/General_ACTION_BestPractices3x.png
      :icon-alt: Realm Icon

      Explore generated reference docs for the Node.js SDK.

   .. card::
      :headline: Electron Integration Guide
      :cta: Use Realm with Electron apps
      :url: https://www.mongodb.com/docs/realm/sdk/node/integration/electron
      :icon: /images/icons/electron_logo.png
      :icon-alt: Electron Icon

      Use the Realm Node.js SDK in an Electron desktop application.
