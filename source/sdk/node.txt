:template: product-landing
:hidefeedback: header
:noprevnext:

.. _node-intro:

=================
Realm Node.js SDK
=================

.. toctree::
   :titlesonly:
   :hidden:

   Why Realm Database? </sdk/node/realm-database>
   Install Realm for Node.js </sdk/node/install>
   Quick Start </sdk/node/quick-start>
   Realm Files </sdk/node/realm-files>
   Model Data </sdk/node/model-data>
   CRUD </sdk/node/crud>
   React to Changes </sdk/node/react-to-changes>
   Atlas App Services </sdk/node/app-services>
   Manage Users </sdk/node/manage-users>
   Sync Data </sdk/node/sync>
   Integration Guides </sdk/node/integrations>
   SDK Telemetry </sdk/node/telemetry>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Release Notes <https://github.com/realm/realm-js/releases>

The Realm Node.js SDK allows you to use Realm Database and
Atlas App Services from Node.js applications written in JavaScript or TypeScript.
Use the Node.js SDK to build for server applications, desktop applications, CLIs,
IoT programs, and more.

The Node.js SDK does not support applications written for web browsers.
For Web apps, use the :ref:`Realm Web SDK <web-intro>`.
For React Native development, use the :ref:`Realm React Native SDK <react-native-intro>`.

To get started with the Node.js SDK, see :ref:`Quick Start <node-client-quick-start>`.

.. kicker:: What You Can Do

Develop Apps with Realm
-----------------------

.. tabs::

  .. tab:: Use Realm Database Locally
      :tabid: local-realm

      .. container::

        Use open-source Realm Database to store data on a device.

        .. procedure::

          .. step:: Install the Realm Node.js SDK

              Set up your project with Node.js and Realm.
              To get started, :ref:`install the Realm Node.js SDK <node-install>`.

          .. step:: Define an Object Schema

              Use JavaScript to idiomatically :ref:`define a Realm object schema <node-define-a-realm-object-schema>`.

          .. step:: Configure & Open a Realm

             You can configure your realm to do things
             like populate initial data on load, be encrypted, and more.
             To begin working with your data,
             :ref:`configure and open a realm <node-open-close-realm>`.

          .. step:: Read and Write Data

              You can :ref:`create, read, update, and delete objects <node-read-and-write-data>`
              from a realm. Construct complex queries to :ref:`filter data in a realm <node-query-data>`.

          .. step:: React to Changes

              Realm's live objects mean that your data is always up-to-date.
              Register a change listener to :ref:`react to changes and perform logic like updating
              your UI <node-react-to-changes>`.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

  .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. container::

         Use Device Sync to keep data in sync with your MongoDB Atlas cluster and other
         clients.

         .. procedure::

            .. step:: Connect to an Atlas App Services App

               Configure :ref:`Device Sync in an App Services App <realm-sync-get-started>`.
               Define data access rules or use Development Mode to infer a schema
               from your client's data model.
               Then, :ref:`connect to the backend App from your Node.js client <node-connect-to-mongodb-realm-backend-app>`.

            .. step:: Authenticate a User

               App Services provides access to custom JWT authentication,
               our built-in email/password provider, anonymous
               authentication, and popular
               authentication providers like Apple, Google, and Facebook.
               Use these providers to :ref:`authenticate a user in your client <node-authenticate-users>`.

            .. step:: Open a Synced Realm

               To get started syncing data, :ref:`open a synced realm <node-open-a-synced-realm>`.
               To determine what data a synced realm can read and write,
               :ref:`subscribe to a query <node-sync-subscribe-to-queryable-fields>`.

            .. step:: Read and Write Synced Data

               The :ref:`APIs for reading and writing data <node-read-and-write-data>`
               are the same for both synced and local realms.
               Data that you read and write is automatically kept
               in sync with your Atlas cluster and other clients.
               Apps keep working offline and sync changes when a network connection
               is available.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

  .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Use Atlas App Services in your Node.js application with the Realm SDK.

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         To invoke serverless backend logic from your Node.js client,
         :ref:`call Atlas Functions <node-call-a-function>`.

         Query MongoDB Atlas
         ~~~~~~~~~~~~~~~~~~~

         Query data stored in MongoDB directly from your client application code
         with :ref:`MongoDB Data Access <node-mongodb-remote-access>`.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication providers <node-authenticate-users>`.
         Access App Services with authenticated users.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 2
   :style: extra-compact

   .. card::
      :headline: JavaScript API Reference
      :cta: Node.js Reference
      :url: https://www.mongodb.com/docs/realm-sdks/js/latest/
      :icon: /images/icons/branding_2022/General_ACTION_BestPractices3x.png
      :icon-alt: Realm Icon

      Explore generated reference docs for the Node.js SDK.

   .. card::
      :headline: Electron Integration Guide
      :cta: Use Realm with Electron apps
      :url: https://www.mongodb.com/docs/realm/sdk/node/integrations/electron/
      :icon: /images/icons/electron_logo.png
      :icon-alt: Electron Icon

      Use the Realm Node.js SDK in an Electron desktop application.
