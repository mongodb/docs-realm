.. _node-intro:

=================
Realm Node.js SDK
=================

.. toctree::
   :titlesonly:
   :hidden:
   
   Install Realm for Node.js </sdk/node/install>
   Quick Start </sdk/node/quick-start-local>
   Quick Start with Sync </sdk/node/quick-start>
   Fundamentals </sdk/node/fundamentals>
   Data Types </sdk/node/data-types>
   Usage Examples </sdk/node/examples>
   Integration Guides </sdk/node/integrations>
   Advanced Guides </sdk/node/advanced>
   API Reference <https://www.mongodb.com/docs/realm-sdks/js/latest/>
   Upgrade from Stitch to Realm </sdk/node/migrate>
   Release Notes <https://github.com/realm/realm-js/releases>
   
.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Realm Node.js SDK allows you to use Realm Database and
backend Apps from Node.js applications written in JavaScript or TypeScript.

.. note::

   The Node.js SDK does not support JavaScript or TypeScript
   applications written for web browsers. For that use case, you should
   consider the :ref:`Web SDK <web-intro>`. For development in React
   Native, refer to the :ref:`React Native SDK <react-native-intro>`
   documentation.

.. button:: Create an Account
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_node

Local Realm Database
--------------------

With the Realm Node.js SDK, you can access objects stored in a local
instance of Realm Database. With Realm Database, you can:

Define an Object Schema
~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Define your object schema <node-define-a-realm-object-schema>` by creating
an object or a class.

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-define-object-schema.js
  :language: javascript


Query Realm Database
~~~~~~~~~~~~~~~~~~~~

:ref:`Query <node-client-query-engine>` for stored objects:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-query-realm-database.js
  :language: javascript

Update Live Objects
~~~~~~~~~~~~~~~~~~~

:ref:`Update <node-update-an-object>` objects in Realm Database by
updating field values on an instance of the object within a transaction:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-update-live-objects.js
  :language: javascript

Watch for Object Updates
~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Receive object updates and notifications automatically
<node-react-to-changes>` when objects stored in Realm Database
change:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-watch-for-object-updates.js
  :language: javascript

Always Access the Latest Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Live objects <node-live-objects>` keep all instances
of an object up to date at all times:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-access-the-latest-data.js
  :language: javascript

.. seealso::

   To get started with Realm Database, try our
   :ref:`Quick Start <node-client-quick-start-local>`.

Realm Apps
----------

Apps are backends for client applications hosted by MongoDB in the cloud.
They provide the ability to synchronize data stored in
Realm Database, called **Device Sync**, as well as a layer of backend
functionality collectively called **App Services**.
The Realm Node.js SDK optionally contains the ability to access
these Apps running in the cloud. In addition to local
Realm Database in the SDK, Apps provide the
following functionality:

Atlas Device Sync
~~~~~~~~~~~~~~~~~

Automatically sync data between realms on client devices and your backend
MongoDB Atlas data store with :ref:`Device Sync <node-sync-changes-between-devices>`:

.. literalinclude:: /examples/generated/node/landing-page.snippet.node-landing-sync-data-between-realms.js
  :language: javascript

App Services
~~~~~~~~~~~~

- Use Realm's built-in user management to enable
  :ref:`user account creation <node-register-new-user>`
  and user :ref:`authentication <node-authenticate-users>` across
  devices.

- Store data persistently with :ref:`permissions <mongodb-crud-permissions>`
  in your backend App using a
  :ref:`Atlas database <data-sources>`.

- Execute logic in your backend App from a client application using
  :ref:`Functions <node-call-a-function>`.

- React to events in your backend App using
  :ref:`Triggers <triggers>`.

.. seealso::

   To get started with Realm, try the
   :ref:`Quick Start with Sync <node-client-quick-start>`.


.. button:: Create an Account
   :uri: https://www.mongodb.com/realm/register?tck=docs_CTA_realm_kotlin


Get Started
-----------

To start using the Realm Node.js SDK
in your Node.js application, see :ref:`Install Realm for Node.js
<node-install>` to add the Realm JS SDK dependency and then check
out the :ref:`Quick Start <node-client-quick-start-local>`.

To learn more about the concepts that underly Realm Database,
such as :ref:`write transactions <node-write-transactions>`, the 
:ref:`Query Engine <node-client-query-engine>`, and more,
check out the Fundamentals.

For practical code samples of common tasks in Realm Database and
Apps, take a look at the Examples.
   
.. list-table::
   :header-rows: 1
   :class: index-table

   * - Get Started
     - Fundamentals
     - Examples
     - Realm Apps Examples
     
   * - :doc:`Install Realm for Android </sdk/node/install>`
   
       :doc:`Quick Start </sdk/node/quick-start-local>`
       
       :doc:`Quick Start with Sync </sdk/node/quick-start>`
              
       :doc:`Upgrade from Stitch to Realm </sdk/node/migrate>`

       :doc:`Quick Start with Electron </sdk/node/integrations/electron>`
       
     - :doc:`Realms </sdk/node/fundamentals/realms>`
            
       :doc:`Live Queries </sdk/node/fundamentals/live-queries>`
              
       :doc:`Write Transactions </sdk/node/fundamentals/write-transactions>`
       
       :doc:`Relationships & Embedded Objects </sdk/node/fundamentals/relationships-and-embedded-objects>`

       :doc:`Application Services </sdk/node/fundamentals/application-services>`

       :doc:`Atlas Device Sync </sdk/node/fundamentals/device-sync>`
     
     - :doc:`Define a Realm Object Schema </sdk/node/examples/define-a-realm-object-model>`
     
       :doc:`Open & Close a Realm </sdk/node/examples/open-and-close-a-realm>`
       
       :doc:`Read & Write Data </sdk/node/examples/read-and-write-data>`
       
       :doc:`React to Changes </sdk/node/examples/react-to-changes>`
       
       :doc:`Query Data </sdk/node/examples/query-data>`
       
       :doc:`Modify an Object Schema </sdk/node/examples/modify-an-object-schema>`
       
     - :doc:`Connect to an Atlas App Services backend </sdk/node/examples/connect-to-app-services-backend>`
     
       :doc:`Authenticate Users </sdk/node/examples/authenticate-users>`

       :doc:`Flexible Sync </sdk/node/examples/flexible-sync>`
       
       :doc:`Sync Changes Between Devices </sdk/node/examples/sync-changes-between-devices>`
       
       :doc:`Call a Function </sdk/node/examples/call-a-function>`
       
       :doc:`Manage Email/Password Users </sdk/node/examples/manage-email-password-users>`
       
       :doc:`Query MongoDB </sdk/node/examples/query-mongodb>`
       
       :doc:`Reset a Client Realm </sdk/node/examples/reset-a-client-realm>`

Advanced Guides
---------------
For information about advanced concepts, such as :ref:`encryption
<node-encrypt-a-realm>` and the :ref:`Query Engine <node-client-query-engine>`,
see the :ref:`Advanced Guides <node-client-advanced-guides>` section.

Realm Database
~~~~~~~~~~~~~~

- :doc:`Encryption </sdk/node/advanced/encrypt>`

Realm Apps
~~~~~~~~~~

- :doc:`Link User Identities </sdk/node/advanced/link-identities>`
- :doc:`Multi-User Applications </sdk/node/advanced/multi-user-applications>`
- :doc:`Custom User Data </sdk/node/advanced/access-custom-user-data>`
- :doc:`Client Reset Data Recovery </sdk/node/advanced/client-reset-data-recovery>`
