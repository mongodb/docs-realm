.. _java-realm-database:

================
Realm - Java SDK
================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/realm-database.rst

Comparison with Other Databases
-------------------------------

The Realm data model is similar to both relational and document
databases but has distinct differences from both. To underscore these
differences, it's helpful to highlight what a realm **is not**:

A realm is not a single, application-wide database.
    Unlike other applications, which store all of their data in a single
    database, Apps often split data across multiple realms to
    organize data more efficiently and to enforce access controls.

A realm is not a table.
    Tables typically only store one kind of information, such as street
    addresses or items in a store inventory, whereas a realm can contain
    any number of object types.

A realm is not a collection of schemaless documents.
    Application objects are similar to documents, but every object in a
    realm conforms to a defined schema for its object type. An object
    cannot contain a field that is not described by its schema.

.. _java-live-queries:
.. _java-live-object:

Live Queries
------------

Objects in Realm clients are **live objects** that
update automatically to reflect data changes, including
:ref:`synced <sync>` remote changes, and emit
:ref:`notification events <java-client-notifications>` that you
can subscribe to whenever their underlying data changes. You
can use live objects to work with object-oriented data
natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object always references the most up-to-date data on disk and
:wikipedia:`lazy loads <Lazy_loading>` field values when you access
them from a :ref:`collection <java-client-collections>`. This means that a
realm can contain many objects but only pays the performance cost for
data that the application is actually using.

Valid write operations on a live object automatically persist to the
realm and propagate to any other synced clients. You do not need to
call an update method, modify the realm, or otherwise "push" updates.

.. _java-auto-refresh:

Auto-Refresh
------------

Realm objects accessed on a thread associated with a
:android:`Looper <reference/android/os/Looper.html>` automatically
update periodically to reflect changes to underlying data.

The Android UI thread always contains a ``Looper`` instance. If you need
to keep Realm objects around for long periods of time on
any other thread, you should configure a ``Looper`` for that thread.

.. warning:: Always Close Realm Instances on Non-Looper Threads to Avoid Resource Leaks

   Realms on a thread without a :android:`Looper <reference/android/os/Looper>`
   do not automatically advance their version. This can increase the size of the
   realm in memory and on disk. Avoid using realm instances on
   non-Looper threads when possible. If you *do* open a realm on a non-Looper
   thread, close the realm when you're done using it.
