.. _java-encrypt-a-realm:

==========================
Encrypt a Realm - Java SDK
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can encrypt the realm database file on disk with AES-256 +
SHA-2 by supplying a 64-byte encryption key when :ref:`opening a
realm <java-open-a-local-realm>`.

Realm transparently encrypts and decrypts data with standard
:wikipedia:`AES-256 encryption <Advanced_Encryption_Standard>` using the
first 256 bits of the given 512-bit encryption key. Realm
uses the other 256 bits of the 512-bit encryption key to validate
integrity using a :wikipedia:`hash-based message authentication code
(HMAC) <HMAC>`.

.. note:: Performance Impact

   Reads and writes on encrypted realms can be up to 10%
   slower than equivalent reads and writes to unencrypted realms.

.. important:: Encryption and Atlas Device Sync

   You can encrypt a :ref:`synced realm <java-sync-data>`, but
   Realm only encrypts the data on the device. Realm stores
   the data unencrypted in your data source.

Store & Reuse Keys
------------------

To repeatedly access an encrypted realm, you must pass the same
encryption key to :java-sdk:`RealmConfiguration.Builder.encryptionKey()
<io/realm/RealmConfiguration.Builder.html#encryptionKey-byte:A->` each
time you open the realm. Apps should store the encryption key in the
:android:`Android KeyStore <training/articles/keystore.html>` so
that other apps cannot read the key. The following steps describe the
recommended way to use the KeyStore for encryption with
Realm:

1. Generate an asymmetric RSA key that Android can securely store and
   retrieve using the Android KeyStore.

   .. note:: Android Version M and Above: Keystore Security

      Versions M and above require user PIN or fingerprint to unlock
      the KeyStore.

#. Generate a symmetric key (AES) you can use to encrypt the realm.

#. Encrypt the symmetric AES key using your private RSA key.

#. Store the encrypted AES key on filesystem (in a
   ``SharedPreferences``, for example).

When you need to use your encrypted realm:

1. Retrieve your encrypted AES key.
#. Decrypt your encrypted AES key using the public RSA key.
#. Use the decrypted AES key in the ``RealmConfiguration`` to open the
   encrypted realm.

.. seealso::

   For an end-to-end example of storing and reusing encryption keys, see
   the `store_password <https://github.com/realm/realm-java/tree/feature/example/store_password/examples/StoreEncryptionPassword>`__ example project, which demonstrates the
   fingerprint API.
   
.. include:: /includes/encrypt-use-strong-cryptographic-hash.rst

Generate and Store an Encryption Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following code demonstrates how to securely generate and store an
encryption key for a realm:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.encrypt-key.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.encrypt-key.java
         :language: java
         :copyable: false

Access an Existing Encryption Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following code demonstrates how to access and decrypt a securely
stored encryption key for a realm:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.decrypt-key.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.decrypt-key.java
         :language: java
         :copyable: false

Open an Encrypted Realm
~~~~~~~~~~~~~~~~~~~~~~~

The following code demonstrates how to open an encrypted realm with
the :java-sdk:`encryptionKey() <io/realm/mongodb/sync/SyncConfiguration.Builder.html#encryptionKey-byte:A->`
method:

.. tabs-realm-languages::
   
   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.read-and-write-encrypted-realm.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/EncryptTest.snippet.read-and-write-encrypted-realm.java
         :language: java
         :copyable: false

Accessing an Encrypted Realm from Multiple Process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm forbids opening the same encrypted realm from multiple processes.
Attempting to do so will throw the error:
"{+encrypted-interprocess-sharing-error-message+}"
