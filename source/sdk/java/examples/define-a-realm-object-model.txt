.. _java-define-a-realm-object-schema:
.. _java-object-schema:

=======================================
Define a Realm Object Schema - Java SDK
=======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. seealso::

   For conceptual information about schemas, as well as details about
   types and constraints, see :ref:`Fundamentals: Object Models & Schemas
   <java-object-models-and-schemas>`.

Define a Realm Object
---------------------

To define a Realm object in your application,
create a subclass of :java-sdk:`RealmObject <io/realm/RealmObject.html>`
or implement :java-sdk:`RealmModel <io/realm/RealmModel.html>`.

.. important::

   - All Realm objects must provide an empty constructor.
   - All Realm objects must use the ``public`` visibility modifier in Java
     or the ``open`` visibility modifier in Kotlin.

Extend ``RealmObject``
~~~~~~~~~~~~~~~~~~~~~~

The following code block shows a Realm object that
describes a Frog. This Frog class can be stored in
Realm Database because it ``extends`` the ``RealmObject`` class.

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogObjectExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogObjectExample.snippet.complete.java.rst

Implement ``RealmModel``
~~~~~~~~~~~~~~~~~~~~~~~~

The following code block shows a Realm object that
describes a Frog. This Frog class can
be stored in Realm Database because it ``implements`` the
``RealmModel`` class and uses the ``@RealmClass`` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogRealmModelExampleKt.snippet.complete.kt.rst

      .. important::

         All Realm objects must use the ``open``
         visibility modifier.

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogRealmModelExample.snippet.complete.java.rst

      .. important::

         All Realm objects must use the ``public``
         visibility modifier.

.. tip:: Using ``RealmObject`` Methods

   When you create a Realm object by extending the ``RealmObject``
   class, you can access ``RealmObject`` class methods dynamically on
   instances of your Realm object. Realm objects
   created by implementing ``RealmModel`` can access those same methods
   statically through the ``RealmObject`` class:

   .. tabs-realm-languages::

      .. tab::
         :tabid: kotlin

         .. literalinclude:: /examples/generated/java/local/RealmObjectVsRealmModelTest.snippet.realm-object-vs-realm-model.kt
            :language: kotlin

      .. tab::
         :tabid: java

         .. literalinclude:: /examples/generated/java/local/RealmObjectVsRealmModelTest.snippet.realm-object-vs-realm-model.java
            :language: java

.. _java-field-relationships-lists-example:

Lists
-----

Realm objects can contain lists of non-Realm-object data
types:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogListExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      Unlike lists of Realm objects, these lists can contain
      null values. If null values shouldn't be allowed, use the
      :ref:`@Required <java-required-field>` annotation.

      .. include:: /examples/generated/java/local/FrogListExample.snippet.complete.java.rst

.. seealso::

   :ref:`Data Types: Lists <java-field-relationships-lists>`

.. _java-relationships:
.. _java-define-a-relationship-property:
.. _java-field-relationships:

Define a Relationship Field
---------------------------

.. include:: /includes/see-also-define-relationship-in-app-services-ui.rst

.. warning:: Always Define Accessors and Mutators for Modifiable Fields

   Realm objects use getters and setters to persist updated
   field values to your realms. Always use getters and setters for
   updates.

.. seealso::

   :ref:`Fundamentals: Relationships <java-client-relationships>`

.. _java-field-relationships-many-to-one:

Many-to-One
~~~~~~~~~~~

To set up a many-to-one or one-to-one relationship, create a field
whose type is a Realm object in your application:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogManyToOneExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogManyToOneExample.snippet.complete.java.rst

.. include:: /includes/note-to-one-relationships-must-be-optional.rst

Each ``Frog`` references either zero ``Frog`` instances or one other ``Frog`` instance. Nothing
prevents multiple ``Frog`` instances from referencing the same ``Frog``
as a best friend; the distinction between a many-to-one and a one-to-one
relationship is up to your application.

.. seealso::

   :ref:`Fundamentals: To-One Relationships <java-to-one-relationship>`

.. _java-field-relationships-many-to-many:

Many-to-Many
~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogManyToManyExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogManyToManyExample.snippet.complete.java.rst

``RealmList`` s are containers of ``RealmObject`` s, but otherwise behave
like a regular collection. You can use the same object in multiple
``RealmList`` s.

.. seealso::

   :ref:`Fundamentals: To-Many Relationships <java-to-many-relationship>`

.. _java-field-relationships-inverse:
.. _java-inverse-relationships:

Inverse Relationships
~~~~~~~~~~~~~~~~~~~~~

By default, Realm Database relationships are unidirectional. You
can follow a link from one class to a referenced class, but not in the
opposite direction. Consider the following class defining a ``Toad`` with
a list of ``frogFriends``:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/ToadInverseRelationshipExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/ToadInverseRelationshipExample.snippet.complete.java.rst

You can provide a link in the opposite direction, from ``Frog`` to ``Toad``,
with the :java-sdk:`@LinkingObjects <io/realm/annotations/LinkingObjects.html>`
annotation on a ``final`` (in Java) or ``val`` (in Kotlin) field of type
``RealmResults<T>``:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogInverseRelationshipExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogInverseRelationshipExample.snippet.complete.java.rst

.. important::

   Inverse relationship fields must be marked ``final``.

.. seealso::

   :ref:`Fundamentals: Inverse Relationships <java-inverse-relationship>`

.. _java-define-an-embedded-object-property:
.. _java-field-relationships-embedded:

Define an Embedded Object Field
-------------------------------

Realm Database provides the ability to nest objects within other
objects. This has several advantages:

- If using Sync, objects translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-modeling-introduction/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the realm, so unused objects
  don't accumulate in your realm file, taking up valuable space on
  user's mobile devices.

To embed an object, set the ``embedded`` property of the
:java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html#embedded-->`
annotation to ``true`` on the class that you'd like to nest within
another class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FlyEmbeddedExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FlyEmbeddedExample.snippet.complete.java.rst

Then, any time you reference that class from another class,
Realm Database will embed the referenced class within the enclosing
class, as in the following example:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogEmbeddedExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogEmbeddedExample.snippet.complete.java.rst

.. seealso::

   :ref:`Data Types: Embedded Objects <java-embedded-objects>`

.. _java-property-annotations:

Annotations
-----------

Use annotations to customize your Realm object models.

.. _java-primary-key:

Primary Key
~~~~~~~~~~~

You may optionally define a primary key for an object type as part of
the :ref:`object schema <java-object-schema>` with the
:java-sdk:`@PrimaryKey <io/realm/annotations/PrimaryKey.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogPrimaryKeyExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogPrimaryKeyExample.snippet.complete.java.rst

Only one field in a RealmObject can use the ``@PrimaryKey``
annotation.

.. seealso::

   :ref:`Fundamentals: Primary Key <java-primary-key-fundamentals>`

.. _java-required-field:

Required Fields
~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogRequiredExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogRequiredExample.snippet.complete.java.rst

.. seealso::

   :ref:`Fundamentals: Optionality <java-optionality>`

.. _java-optional-field:

Optional Fields
~~~~~~~~~~~~~~~

Fields are only optional if they can hold a value of ``null`` and they
are not marked with the ``Required`` annotation.

.. seealso::

   :ref:`Fundamentals: Optionality <java-optionality>`

.. _java-default-field-values:

Default Field Values
~~~~~~~~~~~~~~~~~~~~

To assign a default value to a field, use the built-in language features
to assign default values.

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      Assign default values in the field declaration:

      .. include:: /examples/generated/java/local/FrogDefaultValueExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      Use the class constructor(s) to assign default values:

      .. include:: /examples/generated/java/local/FrogDefaultValueExample.snippet.complete.java.rst

.. note:: Default Values and Nullability

   While default values ensure that a newly created object cannot contain
   a value of ``null`` (unless you specify a default value of ``null``),
   they do not impact the nullability of a field. To make a field
   non-nullable, see :ref:`Required Fields <java-required-field>`.

.. _java-index-a-property:
.. _java-index-field:

Index a Field
~~~~~~~~~~~~~

To index a field, use the :java-sdk:`@Index <io/realm/annotations/Index.html>`
annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogIndexExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogIndexExample.snippet.complete.java.rst

.. seealso::

   :ref:`Fundamentals: Indexes <java-indexes-fundamentals>`

.. _java-ignore-a-property:
.. _java-ignore-a-field:
.. _java-ignore-field:

Ignore a Field
~~~~~~~~~~~~~~

If you don't want to save a field in your model to a realm, you can
ignore a field.

Ignore a field from a Realm object model with the
:java-sdk:`@Ignore <io/realm/annotations/Ignore.html>` annotation:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogIgnoreExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogIgnoreExample.snippet.complete.java.rst

.. note:: The SDK ignores ``static`` and ``transient`` Fields

   Fields marked ``static`` or ``transient`` are always ignored, and do
   not need the ``@Ignore`` annotation.

.. _java-rename-field:

Rename a Field
~~~~~~~~~~~~~~

By default, Realm Database uses the name defined in the model class
to represent fields internally. In some cases you might want to change
this behavior:

- To make it easier to work across platforms, since naming conventions differ.
- To change a field name in Kotlin without forcing a migration.

Choosing an internal name that differs from the name used in model classes
has the following implications:

- Migrations must use the internal name when creating classes and fields.
- Schema errors reported will use the internal name.

Use the :java-sdk:`@RealmField <io/realm/annotations/RealmField.html>`
annotation to rename a field:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogRenameAFieldExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogRenameAFieldExample.snippet.complete.java.rst

Alternatively, you can also assign a naming policy at the module or
class levels to change the way that Realm Database interprets field
names.

You can define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the :ref:`module level <java-realm-modules>`,
which will affect all classes included in the module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/RenameModuleExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/RenameModuleExample.snippet.complete.java.rst

You can also define a
:java-sdk:`naming policy <io/realm/annotations/RealmNamingPolicy.html>`
at the class level, which overrides module level settings:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogClassRenamePolicyExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogClassRenamePolicyExample.snippet.complete.java.rst

.. _java-rename-object:

Rename a Class
~~~~~~~~~~~~~~

By default, Realm Database uses the name defined in the model class
to represent classes internally. In some cases you might want to change
this behavior:

- To support multiple model classes with the same simple name in different packages.
- To make it easier to work across platforms, since naming conventions differ.
- To use a class name that is longer than the 57 character limit enforced by Realm Database.
- To change a class name in Kotlin without forcing a migration.

Use the :java-sdk:`@RealmClass <io/realm/annotations/RealmClass.html>`
annotation to rename a class:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/FrogRenameClassExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/FrogRenameClassExample.snippet.complete.java.rst

.. _java-omit-classes-from-schema:

Omit Classes from your Realm Schema
-----------------------------------

By default, your application's Realm Schema includes all
classes that extend ``RealmObject``. If you only want to include a
subset of classes that extend ``RealmObject`` in your Realm
Schema, you can include that subset of classes in a module and open
your realm using that module:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. include:: /examples/generated/java/local/OmitModuleExampleKt.snippet.complete.kt.rst

   .. tab::
      :tabid: java

      .. include:: /examples/generated/java/local/OmitModuleExample.snippet.complete.java.rst
