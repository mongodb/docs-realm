.. _java-client-resets:

===============================
Reset a Client Realm - Java SDK
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. seealso:: Learn More About Client Resets

   To learn about the causes of and strategies for handling client
   resets, check out the Sync :ref:`Client Resets <client-resets>` page.

The realm file in your client handles reads and writes on the device. When 
you use Realm Sync, this local realm syncs with the application backend. 
Some conditions can cause the realm to be unable to sync with the backend. 
When this occurs, you get a **client reset error**. 

This error means you must reset the realm file in the client application. 
Clients in this state may continue to run and save data locally. Until you 
perform the client reset, the realm does not sync with the backend.

Choose a **client reset strategies** to handle client reset errors. These 
strategies restore realm to a syncable state, but have tradeoffs:

- :ref:`Discard Unsynced Changes <java-discard-unsynced-changes>`. Restore 
  Sync by discarding local changes since the last sync. Maintains change 
  listeners.
- :ref:`Manually Recover Unsynced Changes 
  <java-manually-recover-unsynced-changes>`:. Move the unsyncable realm and 
  download a new copy. Invalidates change listeners.

Both options let you write custom logic to recover local changes. Neither 
option can recover local changes for you. 

Discard unsynced changes is an improved version of manual recovery. However, 
this strategy cannot handle every client reset error. You must maintain a 
manual client reset handler as a fallback.

.. _java-discard-unsynced-changes:

Discard Unsynced Changes
------------------------

.. versionadded:: 10.10.0

The **discard unsynced changes** performs client resets "seamlessly." This 
strategy requires minimal code and minimal disruption. This strategy 
does not close the realm or miss notifications.

It *does* delete all local changes made since the last successful sync. 
Do not use this strategy if your application cannot lose unsynced data. 

This strategy provides a frozen copy of the realm from before reset. You 
can attempt to recover changes from this frozen realm. However, the code 
required for a manual recovery is quite complex. This is not recommended 
for most applications.

Discard unsynced changes cannot handle :ref:`breaking or destructive schema 
changes <destructive-changes-synced-schema>`. With breaking changes, this 
strategy falls back to manual recovery mode.

To use this strategy, pass an instance of 
:java-sdk:`DiscardUnsyncedChangesStrategy
<io/realm/mongodb/sync/DiscardUnsyncedChangesStrategy.html>` to the
:java-sdk:`defaultSyncClientResetStrategy()
<io/realm/mongodb/AppConfiguration.Builder.html#defaultSyncClientResetStrategy(io.realm.mongodb.sync.DiscardUnsyncedChangesStrategy)>`
builder method when you instantiate your ``App``. Your
``DiscardUnsyncedChangesStrategy`` instance must implement the following
methods:

- ``onBeforeReset()``. Realm calls this block when it receives a client 
  reset error from the backend.
- ``onAfterReset()``. Realm calls this block after successfully executing 
  this strategy. This block provides a frozen copy of the original realm. 
  It also returns a live instance of the realm in a syncable state.
- ``onError()``: Mimics the "manually recover unsynced changes" strategy. 
  Realm calls this method during a breaking schema change.  
  
  .. seealso::

     :ref:`Discard Unsynced Changes after Breaking Schema Changes
     <java-discard-unsynced-changes-after-destructive-schema-changes>`.

The following example implements this strategy:

.. tabs-realm-languages::

   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes.java
         :language: java
         :copyable: false

.. _java-discard-unsynced-changes-after-destructive-schema-changes:

Discard Unsynced Changes after Breaking Schema Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/destructive-schema-change-app-update.rst

The discard unsynced changes strategy cannot handle breaking changes. You 
must manually handle the client reset in the ``onError()`` method. This 
example discards unsynced changes to handle the client reset:

.. tabs-realm-languages::

   .. tab::
       :tabid: kotlin

       .. literalinclude:: /examples/generated/java/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes-with-simple-manual-fallback.kt
         :language: kotlin
         :copyable: false

   .. tab::
       :tabid: java

       .. literalinclude:: /examples/generated/java/sync/ClientResetTest.codeblock.client-reset-discard-unsynced-changes-with-simple-manual-fallback.java
         :language: java
         :copyable: false

.. _java-manually-recover-unsynced-changes:

Manually Recover Unsynced Changes
---------------------------------

.. note:: Manual Recovery Replaces ``SyncSession.ClientResetHandler``

   This strategy works like the deprecated
   ``SyncSession.ClientResetHandler``.
   Clients can update to manual recovery with no logic changes.

We do not recommend manual client reset recovery. It requires:

- Substantial amounts of code
- Schema concessions
- Complex conflict resolution logic. 

To learn more, see the :ref:`Advanced Guide to Manual Client Reset Data Recovery
<java-advanced-manual-client-reset-data-recovery>`.
