.. _java-object-models-and-schemas:

==================================
Object Models & Schemas - Java SDK
==================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

An **object schema** is a configuration object that defines the fields and
relationships of a Realm object type. Android
Realm applications define object schemas with Java or Kotlin
classes using Realm Schemas.

Object schemas specify constraints on object fields such as the data
:ref:`type <java-supported-data-types>` of each field, whether a
field is required, and default field values. Schemas can also define
:ref:`relationships <java-client-relationships>` between object types in
a realm.

Modifying your application's Realm Schema requires you to
:ref:`migrate <java-schema-versions-and-migrations>` data from older
versions of your Realm Schema to the new version.

Realm Apps
----------

Every App has a :ref:`Realm Schema <java-realm-schema>`
composed of a list of object schemas for each type of object that the
realms in that application may contain.

Realm guarantees that all objects in a realm conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

Apps that use Atlas Device Sync can define schemas in two ways:

- object schemas :ref:`using Kotlin and Java class declarations
  <create-schema-from-rom>` with :ref:`Development Mode <enable-development-mode>`.

- JSON :ref:`object schemas <object-schema>` in your App backend.

.. _java-primary-key-fundamentals:

Primary Keys
------------

.. versionadded:: 10.6.0

   Realm Database automatically :ref:`indexes <java-indexes-fundamentals>`
   primary key fields. Previously, Realm only indexed ``String`` primary
   keys automatically.

Realm treats fields marked with the
:java-sdk:`@PrimaryKey <io/realm/annotations/PrimaryKey.html>` annotation
as primary keys for their corresponding object schema. Primary keys are
subject to the following limitations:

- You can define only one primary key per object schema.

- Primary key values must be unique across all instances of an object
  in a realm. Attempting to insert a duplicate primary key value
  results in a :java-sdk:`RealmPrimaryKeyConstraintException
  <io/realm/exceptions/RealmPrimaryKeyConstraintException.html>`.

- Primary key values are immutable. To change the primary key value of
  an object, you must delete the original object and insert a new object
  with a different primary key value.

- :ref:`Embedded objects <java-embedded-objects>` cannot define a
  primary key.

You can create a primary key with any of the following types:

- ``String``
- ``UUID``
- ``ObjectId``
- ``Integer`` or ``int``
- ``Long`` or ``long``
- ``Short`` or ``short``
- ``Byte`` or ``byte[]``

Non-primitive types can contain a value of ``null`` as a primary key
value, but only for one object of a particular type, since each primary
key value must be unique. Attempting to insert an object with an existing
primary key into a realm will result in a
:java-sdk:`RealmPrimaryKeyConstraintException <io/realm/exceptions/RealmPrimaryKeyConstraintException.html>`.

Realm Database automatically :ref:`indexes <java-index-field>`
primary key fields, which allows you to efficiently read and modify
objects based on their primary key.

You cannot change the primary key field for an object type after adding
any object of that type to a realm. If you are using Sync,
you cannot change the primary key field for an object after defining the
primary key in your backend :ref:`schema <schemas>`.

Embedded objects cannot contain primary keys.

.. seealso::

   - :ref:`Usage Examples: Define a Primary Key <java-primary-key>`
   - :ref:`Usage Examples: Find a Specific Object by Primary Key <java-find-a-specific-object-by-primary-key>`

.. _java-optionality:

Optionality
-----------

You can make a field required to disallow ``null`` values in a field.
Fields marked with Java object types and Kotlin nullable types
(ending with ``?``) are nullable by default. All other types
(primitives, non-nullable Kotlin object types) are required by default.
You can mark a nullable field with the :java-sdk:`@Required <io/realm/annotations/Required.html>`
annotation to prevent that field from holding a null value.
:java-sdk:`RealmLists <io/realm/RealmList.html>` are never nullable, but
you can use the ``@Required`` annotation to prevent objects in a list
from holding a null value, even if the base type would otherwise allow it.
You cannot mark a ``RealmList`` of ``RealmObject`` subtypes as required.

You can make any of the following types required:

- ``String``
- ``UUID``
- ``ObjectId``
- ``Integer``
- ``Long``
- ``Short``
- ``Byte`` or ``byte[]``
- ``Boolean``
- ``Float``
- ``Double``
- ``Date``
- ``RealmList``

Primitive types such as ``int`` and the ``RealmList`` type are
implicitly required. Fields with the ``RealmObject`` type are always
nullable, and cannot be made required.

.. important:: Kotlin Types and Nullability

   In Kotlin, types are non-nullable by default unless you explicitly
   add a ``?`` suffix to the type. You can only annotate
   :ref:`nullable types <java-optional-field>`. Using the
   ``@Required`` annotation on non-nullable types will fail compilation.

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      In Kotlin, fields are considered nullable only if a field is
      marked nullable with the Kotlin `? operator
      <https://kotlinlang.org/docs/reference/null-safety.html>`__ except
      for the following types:

      - ``String``
      - ``Date``
      - ``UUID``
      - ``ObjectId``
      - ``Decimal128``
      - ``RealmAny``

      You can require any type that ends with the Kotlin ``?``
      operator, such as ``Int?``.

      The ``RealmList`` type is non-nullable by default and cannot be
      made nullable.

   .. tab::
      :tabid: java

      Nullable fields are optional by default in Realm Database, unless
      otherwise specified with the :ref:`@Required <java-required-field>`
      annotation. The following types are nullable:

      - ``String``
      - ``Date``
      - ``UUID``
      - ``ObjectId``
      - ``Integer``
      - ``Long``
      - ``Short``
      - ``Byte`` or ``byte[]``
      - ``Boolean``
      - ``Float``
      - ``Double``

      Primitive types like ``int`` and ``long`` are non-nullable by
      default and cannot be made nullable, as they cannot be set to a
      null value.

.. seealso::

   - :ref:`Usage Example: Required Fields <java-required-field>`
   - :ref:`Usage Example: Optional Fields <java-optional-field>`

.. _java-relationships-fundamentals:

Relationships
-------------

You can model **one-to-one** relationships in realm with
:java-sdk:`RealmObject <io/realm/RealmObject.html>` fields.
You can model **one-to-many** and **many-to-one** relationships
:java-sdk:`RealmList <io/realm/RealmList.html>` fields.
Inverse relationships are the opposite end of a **one-to-many** or
**many-to-one** relationship.
You can make **inverse** relationships traversable with the
:java-sdk:`@LinkingObjects <io/realm/annotations/LinkingObjects.html>`
annotation on a :java-sdk:`RealmResults <io/realm/RealmResults.html>`
field. In an instance of a ``RealmObject``, inverse relationship fields
contain the set of Realm objects that point to that object
instance through the described relationship. You can find the same set
of Realm objects with a manual query, but the inverse
relationship field reduces boilerplate query code and capacity for error.

.. seealso::

   - :ref:`Fundamentals: Relationships <java-client-relationships>`
   - :ref:`Usage Example: Define a Relationship Field <java-relationships>`

.. _java-indexes-fundamentals:

Indexes
-------

**Indexes** support the efficient execution of queries in
Realm Database. Without indexes, Realm Database must perform a
*collection scan*, i.e. scan every document in a collection, to select
those documents that match a query. If an appropriate index exists for a
query, Realm Database can use the index to limit the number of
documents that it must inspect.

Indexes are special data structures that store a small portion of a
realm's data in an easy to traverse form. The index stores the value
of a specific field ordered by the value of the field. The ordering of
the index entries supports efficient equality matches and range-based
query operations.

Adding an index to a field makes writing slightly slower, but makes
certain queries faster. Indexes require space in your realm file, so
adding an index to a field will increase disk space consumed by your
realm file.

You can index fields with the following types:

- ``String``
- ``UUID``
- ``ObjectId``
- ``Integer`` or ``int``
- ``Long`` or ``long``
- ``Short`` or ``short``
- ``Byte`` or ``byte[]``
- ``Boolean`` or ``bool``
- ``Date``
- ``RealmAny``

Realm creates indexes for fields annotated with
:java-sdk:`@Index <io/realm/annotations/Index.html>`. Indexes speed up
some queries, but have a negative impact on insert and update operation
speed. Indexes also consume additional space on disk.

.. seealso::

   :ref:`Usage Example: Index a Field <java-index-field>`

.. _java-modules:

Modules
-------

Realm Modules describe the set of Realm objects
that can be stored in a realm. By default, Realm
automatically creates a Realm Module that contains all
Realm objects defined in your application.
You can define a :java-sdk:`RealmModule <io/realm/annotations/RealmModule.html>`
to restrict a realm to a subset of classes defined in an application.
If you produce a library that uses Realm, you can use a
Realm Module to explicitly include only the Realm
objects defined in your library in your realm. This allows
applications that include your library to also use Realm
without managing object name conflicts and migrations with your library's
defined Realm objects.

.. seealso::

   :ref:`Usage Example: Omit Classes from your Realm Schema <java-omit-classes-from-schema>`

.. _java-realm-objects:

Realm Objects
-------------

Unlike normal Java objects, which contain their own data, a
Realm object doesn't contain data. Instead,
Realm objects read and write properties directly to
Realm Database.

Instances of Realm objects can be either **managed** or **unmanaged**.

- **Managed** objects are:

  - persisted in Realm Database

  - always up to date

  - thread-confined

  - generally more lightweight than the unmanaged version, as they take
    up less space on the Java heap.

- **Unmanaged** objects are just like ordinary Java objects, since
  they are not persisted and never update automatically.
  You can move unmanaged objects freely across threads.

You can convert between the two states using
:java-sdk:`realm.copyToRealm()
<io/realm/Realm.html#copyToRealm-E-io.realm.ImportFlag...->`
and :java-sdk:`realm.copyFromRealm()
<io/realm/Realm.html#copyFromRealm-E->`.

.. _java-realm-proxy:

RealmProxy
~~~~~~~~~~

The ``RealmProxy`` classes are the Realm SDK's way of
ensuring that Realm objects don't contain any data
themselves. Instead, each class's ``RealmProxy`` accesses data directly
in the database.

For every model class in your project, the Realm annotation
processor generates a corresponding ``RealmProxy`` class. This class
extends your model class and is returned when you call
``Realm.createObject()``. In your code, this object works just like your
model class.

.. _java-realm-object-limitations:

Realm Object Limitations
~~~~~~~~~~~~~~~~~~~~~~~~

Realm objects:

- cannot contain fields that use the ``final`` or ``volatile`` modifiers
  (except for :ref:`inverse relationship <java-inverse-relationship>`
  fields).

- cannot extend any object other than ``RealmObject``.

- must contain an empty constructor (if your class does not include any
  constructor, the automatically generated empty constructor will suffice)

Naming limitations:

- Class names cannot exceed 57 characters.

- Class names must be unique within :ref:`realm modules <java-modules>`

- Field names cannot exceed 63 characters.

Size limitations:

- ``String`` or ``byte[]`` fields cannot exceed 16 MB.

Usage limitations:

- Because Realm objects are live and can change at any time,
  their ``hashCode()`` value can change over time. As a result, you
  should not use ``RealmObject`` instances as a key in any map or set.

Incremental Builds
------------------

The bytecode transformer used by Realm supports incremental
builds, but your application requires a full rebuild when adding or
removing the following from a Realm object field:

- an ``@Ignore`` annotation

- the ``static`` keyword

- the ``transient`` keyword

You can perform a full rebuild with :guilabel:`Build > Clean Project`
and :guilabel:`Build > Rebuild Project` in these cases.
