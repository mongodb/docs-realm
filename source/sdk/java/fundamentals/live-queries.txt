.. _java-live-queries:
.. _java-live-object:

=======================
Live Queries - Java SDK
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Objects in Realm clients are **live objects** that
update automatically to reflect data changes, including
:ref:`synced <sync>` remote changes, and emit
:ref:`notification events <java-client-notifications>` that you
can subscribe to whenever their underlying data changes. You
can use live objects to work with object-oriented data
natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object always references the most up-to-date data on disk and
:wikipedia:`lazy loads <Lazy_loading>` field values when you access
them from a :ref:`collection <java-client-collections>`. This means that a
realm can contain many objects but only pays the performance cost for
data that the application is actually using.

Valid write operations on a live object automatically persist to the
realm and propagate to any other synced clients. You do not need to
call an update method, modify the realm, or otherwise "push" updates.

.. _java-auto-refresh:

Auto-Refresh
------------

Realm objects accessed on a thread associated with a
:android:`Looper <reference/android/os/Looper.html>` automatically
update periodically to reflect changes to underlying data.

The Android UI thread always contains a ``Looper`` instance. If you need
to keep Realm objects around for long periods of time on
any other thread, you should configure a ``Looper`` for that thread.

.. warning:: Always Close Realm Instances on Non-Looper Threads to Avoid Resource Leaks

   Realms on a thread without a :android:`Looper <reference/android/os/Looper>`
   do not automatically advance their version. This can increase the size of the
   realm in memory and on disk. Avoid using realm instances on
   non-Looper threads when possible. If you *do* open a realm on a non-Looper
   thread, close the realm when you're done using it.

.. _java-read-operations:
.. _java-realm-database-reads:

Read Operations
---------------

You can read back the data that you have
:ref:`stored <java-realm-database-writes>` in Realm Database.
The standard data access pattern across Realm
SDKs is to find, filter, and sort objects, in that order. To
get the best performance from Realm as your app grows and
your queries become more complex, design your app's data
access patterns around a solid understanding of Realm Database
:ref:`read characteristics <java-realm-read-characteristics>`.

.. _java-realm-read-characteristics:

Read Characteristics
~~~~~~~~~~~~~~~~~~~~

When you design your app's data access patterns around the
following three key characteristics of reads in Realm Database,
you can be confident you are reading data as
efficiently as possible.

.. _java-results-are-not-copies:

Results Are Not Copies
~~~~~~~~~~~~~~~~~~~~~~

Results to a query are not copies of your data: modifying
the results of a query will modify the data on disk
directly. This memory mapping also means that results are
**live**: that is, they always reflect the current state on
disk.

.. seealso::

   :ref:`Collections are Live <java-live-collections>`.

.. _java-results-are-lazy:

Results Are Lazy
~~~~~~~~~~~~~~~~

Realm Database defers execution of a query until you access the
results. You can chain several filter and sort operations
without requiring extra work to process the intermediate
state.

.. seealso::

   :ref:`Results are Lazily Evaluated <java-lazy-evaluated-results>`.

.. _java-references-retained:

References Are Retained
~~~~~~~~~~~~~~~~~~~~~~~

One benefit of Realm Database's object model is that
Realm Database automatically retains all of an object's
:ref:`relationships <java-client-relationships>` as
direct references, so you can traverse your graph of
relationships directly through the results of a query.

A **direct reference**, or pointer, allows you to access a
related object's properties directly through the reference.

Other databases typically copy objects from database storage
into application memory when you need to work with them
directly. Because application objects contain direct
references, you are left with a choice: copy the object
referred to by each direct reference out of the database in
case it's needed, or just copy the foreign key for each
object and query for the object with that key if it's
accessed. If you choose to copy referenced objects into
application memory, you can use up a lot of resources for
objects that are never accessed, but if you choose to only
copy the foreign key, referenced object lookups can cause
your application to slow down.

Realm Database bypasses all of this using zero-copy
live objects. Realm object accessors point directly into
database storage using memory mapping, so there is no distinction
between the objects in Realm Database and the results of your query in
application memory. Because of this, you can traverse direct references
across an entire realm from any query result.

.. _java-managed-objects:

Managed Objects
---------------

**Managed objects** are live Realm objects that update
based on changes to underlying data in Realm Database. Managed
objects can only come from an open realm, and receive updates
as long as that realm remains open. Managed objects *cannot be passed
between threads*.

.. _java-unmanaged-objects:

Unmanaged objects
-----------------

**Unmanaged objects** are instances of Realm objects that are
not live. You can get an unmanaged object by manually constructing a
Realm object yourself, or by calling
:java-sdk:`Realm.copyFromRealm() <io/realm/Realm.html#copyFromRealm-E->`.
Unmanaged objects *can be passed between threads*.

.. _java-subscribe-to-changes:

Notifications
-------------

Any modern app should be able to react when data changes,
regardless of where that change originated. When a user adds
a new item to a list, you may want to update the UI, show a
notification, or log a message. When someone updates that
item, you may want to change its visual state or fire off a
network request. Finally, when someone deletes the item, you
probably want to remove it from the UI. Realm's notification
system allows you to watch for and react to changes in your
data, independent of the writes that caused the changes.

Realm emits three kinds of notifications:

- :ref:`Realm notifications <java-realm-notifications>` whenever a specific realm commits a write transaction.
- :ref:`Collection notifications <java-collection-notifications>` whenever any Realm object in a collection changes, including inserts, updates, and deletes.
- :ref:`Object notifications <java-object-notifications>` whenever a specific Realm object changes, including updates and deletes.

.. seealso::

   :ref:`Usage Example: React to Changes <java-react-to-changes>`
