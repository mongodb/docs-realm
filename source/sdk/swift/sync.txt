=====================================
Sync Data Between Devices - Swift SDK
=====================================

.. toctree::
   :titlesonly:

   Add Sync to an App </sdk/swift/sync/add-sync-to-app>
   Configure & Open a Synced Realm </sdk/swift/sync/configure-and-open-a-synced-realm>
   Manage Flexible Sync Subscriptions </sdk/swift/sync/flexible-sync>
   Write to a Synced Realm </sdk/swift/sync/write-to-synced-realm>
   Handle Sync Errors </sdk/swift/sync/handle-sync-errors>
   Sync Data in the Background </sdk/swift/sync/background-sync>
   Suspend or Resume a Sync Session </sdk/swift/sync/sync-session>
   Check Upload & Download Progress </sdk/swift/sync/sync-progress>
   Check the Network Connection </sdk/swift/sync/network-connection>
   Set the Client Log Level </sdk/swift/sync/log-level>
   Record Realm Events </sdk/swift/sync/event-library>
   Stream Data to Atlas </sdk/swift/sync/stream-data-to-atlas>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-realm-sync:

Sync Data
---------

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

When you use Sync in your client application, your implementation must match 
the Sync Mode you select in your backend App configuration. The Sync Mode
options are:

- Flexible Sync
- Partition-Based Sync

You can only use one Sync Mode for your application. You cannot mix 
Partition-Based Sync and Flexible Sync within the same App. However, 
you can migrate from Partition-Based Sync to Flexible Sync.

.. seealso::

   :ref:`enable-realm-sync`

.. _ios-flexible-sync-fundamentals:

Flexible Sync
~~~~~~~~~~~~~

.. versionadded:: 10.22.0

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object 
<ios-realm-objects>`. You might have multiple subscriptions if you 
have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a Flexible Sync configuration. Then, manage subscriptions
to determine which documents to sync.

.. _ios-partition-based-sync-fundamentals:

Partition-Based Sync
~~~~~~~~~~~~~~~~~~~~

When you select :ref:`Partition-Based Sync <partition-based-sync>` for your 
backend App configuration, your client implementation must include a 
partition value. This is the value of the :ref:`partition key 
<partition-key>` field you select when you configure Partition-Based Sync. 

The partition value determines which data the client application can access.

You pass in the partition value when you open a synced realm.

.. _ios-migrate-pbs-to-fs:

Migrate from Partition-Based Sync to Flexible Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can migrate your App Services Device Sync Mode from Partition-Based Sync 
to Flexible Sync. Migrating is an automatic process that does not require 
any changes to your application code. Automatic migration requires Realm 
Swift SDK version 10.40.0 or newer. 

Migrating enables you to keep your existing App Services users and 
authentication configuration. Flexible Sync provides more versatile permissions
configuration options and more granular data synchronization.

For more information about how to migrate your App Services App from 
Partition-Based Sync to Flexible Sync, refer to :ref:`Migrate Device Sync Modes 
<realm-sync-migrate-modes>`.

.. _ios-update-client-code-after-pbs-to-fs-migration:

Updating Client Code After Migration
````````````````````````````````````

The automatic migration from Partition-Based Sync to Flexible Sync does not
require any changes to your client code. However, to support this 
functionality, Realm automatically handles the differences between the two 
Sync Modes by:

- Automatically creating Flexible Sync subscriptions for each object type 
  where ``partitionKey == partitionValue``.
- Injecting a ``partitionKey`` field into every object if one does not already 
  exist. This is required for the automatic Flexible Sync subscription.

If you need to make updates to your client code after migration, consider 
updating your client codebase to remove hidden migration functionality.
You might want update your client codebase when:

- You add a new model or change a model in your client codebase
- You add or change functionality that involves reading or writing Realm objects
- You want to implement more fine-grained control over what data you sync

Make these changes to convert your Partition-Based Sync client code to use 
Flexible Sync:

- Switch to a ``flexibleSyncConfiguration()`` where you :ref:`open a synced realm 
  <ios-flexible-sync-open-realm>`.
- Add relevant properties to your object models to use in your Flexible Sync 
  subscriptions. For example, you might add an ``ownerId`` property to enable
  a user to sync only their own data.
- Remove automatic Flexible Sync subscriptions and manually create the 
  relevant subscriptions. This enables you to see the subscription logic in 
  your codebase, and change and debug it as you evolve your client code.

For more information about removing and creating Flexible Sync subscriptions,
refer to :ref:`swift-manage-flexible-sync-subscriptions`.

For more information about the automatically-generated Flexible Sync 
subscriptions, refer to :ref:`realm-sync-migrate-client`.

For examples of Flexible Sync permissions strategies, including examples of 
how to model data for these strategies, refer to :ref:`flexible-sync-permissions-guide`.
