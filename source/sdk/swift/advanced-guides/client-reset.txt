.. _ios-client-resets:
.. _ios-client-reset:

=========================
Client Resets - Swift SDK
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

When using :doc:`{+sync+} </sync>`, a **client reset** is a serious
error recovery task that your client app must perform in the following
situation:

- The given synced {+realm+} on the server was restored from a backup.
  For example, due to a {+service-short+} server crash.

- The client app made changes to that {+realm+} since the backup was made,
  but did not sync those changes back to the server before the server
  was restored.

In other words, the client app must carry out a client reset on a given
synced {+realm+} if the server is restored to a version older than the
version on the client.

A client reset discards local data and reverts to the data stored in 
MongoDB Atlas. Performing a client reset loses all local changes made 
since the client last successfully synced.

.. _ios-discard-local-changes:

Discard Local Changes
---------------------

.. versionadded:: 10.25.0

Starting in 10.25.0, the Swift SDK provides the option to specify a client 
reset strategy in your :swift-sdk:`SyncConfiguration 
<Structs/SyncConfiguration.html>`. This is the :swift-sdk:`.clientResetMode 
<Structs/SyncConfiguration.html#/s:10RealmSwift17SyncConfigurationV15clientResetModeAA06ClientfG0Ovp>`
property. 

.. literalinclude:: /examples/generated/code/start/ClientReset.codeblock.specify-client-reset-mode.swift
   :language: swift

This property takes :swift-sdk:`an enum representing the different client 
reset strategies <Enums/ClientResetMode.html>`: 

- ``.discardLocal`` 
- ``.manual``

If you do not specify ``.clientResetMode`` in your configuration, it 
defaults to ``.manual``.

.. _ios-manual-mode:

Manual Client Reset Mode
````````````````````````

When you specify ``.manual`` for ``.clientResetMode``, or if you do not 
specify a client reset mode, you can implement your own client reset handler.

In ``.manual`` mode, the local realm file is copied into a recovery directory, 
and deleted from its original location. The next time your app opens the realm 
for that partition, you can re-download the realm and use it as normal. You 
can choose to write a handler to incorporate any local changes that exist
in the old copied realm file into the newly downloaded realm.

For an example of what this handler might include, see: :ref:`Manual Client 
Reset Handler <ios-manual-client-reset-handler>`. If you are using a version
of the Swift SDK older than 10.25.0, there is no ``.clientResetMode`` and 
you must implement your own manual client reset handler.

.. _ios-discard-local-changes-mode:

Discard Local Changes Client Reset Mode
```````````````````````````````````````

When you specify ``.discardLocal`` for ``.clientResetMode``, Realm 
automatically perform a client reset with minimal code and minimal disruption 
to your application workflow. This client reset mode restores your local 
realm file to a syncable state without closing the realm or missing 
notifications.

This strategy comes with a downside: it permanently deletes all local 
unsynced changes made since the last successful sync of the realm. Do 
not use discard local changes mode if your application cannot lose local 
data that has not yet synced to the backend.

If the client reset operation cannot complete in discard local changes mode, 
the client reset process reverts to manual mode.

The :swift-sdk:`.discardLocal 
<Enums/ClientResetMode.html#/s:10RealmSwift15ClientResetModeO12discardLocalyACyAA0A0VcSg_yAF_AFtcSgtcACmF>` 
version of client reset mode can take a before and after block. This gives 
you the option to specify additional logic to execute before or after a 
client reset occurs. You might use these blocks to send reporting or perform
custom recovery logic, such as copying the realm to a local directory and 
using your own logic to apply local changes.

.. important:: You Still Need a Manual Client Reset Handler

   Some conditions, such as :ref:`breaking or destructive schema changes, 
   <destructive-changes-synced-schema>` may cause ``.discardLocal`` 
   client reset mode to fail. When Realm cannot perform the discard local 
   client reset operation, the process reverts to manual mode. For this
   reason, you should continue to provide :ref:`a manual client reset 
   handler <ios-manual-client-reset-handler>` even if you prefer to use 
   ``discardLocal`` mode.

.. example::

   You can specify a before and after block to execute during the client 
   reset process. You might use this to perform recovery logic that is 
   important to your application.

   .. literalinclude:: /examples/generated/code/start/ClientReset.codeblock.client-reset-discard-changes-with-blocks.swift
      :language: swift

.. _ios-manual-client-reset-handler:

Manual Client Reset Handler
---------------------------

By default, the SDK performs client resets automatically on startup when
instructed to do so by the server. When a client reset occurs, the SDK
creates a backup of local data. By default, the SDK makes no effort to
recover lost local changes from this backup. However, you can manually
override the client reset handler to transfer data from the backup 
copy to the new {+realm+}.

If you override the client reset handler, you can access this backup
copy through the path stored in the :objc-sdk:`SyncError
<Enums/RLMSyncError.html#/c:@E@RLMSyncError@RLMSyncErrorClientResetError>`
to manually transfer data from the backup copy to the newly created
{+realm+}.

.. tabs-realm-languages::
   
   .. tab::
       :tabid: swift

       .. literalinclude:: /examples/generated/code/start/Errors.codeblock.client-reset.swift
         :language: swift

   .. tab::
       :tabid: objective-c

       .. literalinclude:: /examples/generated/code/start/Errors.codeblock.client-reset.m
         :language: objectivec


.. tip::

   To see how to recover unsynced local changes in a client reset, check out
   this :github:`example on GitHub
   <mongodb/realm-practice/blob/main/swift/RealmPractice/Classes/ViewController.swift#L260>`.
