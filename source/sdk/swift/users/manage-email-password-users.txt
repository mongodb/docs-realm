.. _ios-manage-email-password-users:

=======================================
Manage Email/Password Users - Swift SDK
=======================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


When you have enabled the :ref:`email/password provider
<email-password-authentication>` in your Atlas App Services app, you can register a new
account, confirm an email address, and reset a user's password from
client code.

.. versionchanged:: 10.16.0
 
   Email/password user APIs add async/await support. Code examples on 
   this page updated to async/await syntax. For an example of the older
   syntax, see: :ref:`Email/Password User Examples with Completion Handlers 
   <ios-manage-users-completion-handler-example>`.

.. _ios-register-a-new-user-account:

Register a New User Account
---------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.register-email.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.register-email-objc.m
         :language: objectivec

.. _ios-confirm-a-new-users-email-address:

Confirm a New User's Email Address
----------------------------------

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.confirm-new-user-email.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.confirm-new-user-email-objc.m
         :language: objectivec

.. _ios-retry-user-confirmation:

Retry User Confirmation Methods
-------------------------------

The SDK provides methods to resend user confirmation emails or retry custom 
confirmation methods.

Resend a User Confirmation Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Resend a :ref:`confirmation email <auth-send-a-confirmation-email>`. Email/password 
URLs expire after 30 minutes, so users who do not visit within that period 
will need new emails to confirm their accounts.

.. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.resend-confirmation-email.swift
   :language: swift

Retry a User Confirmation Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.9.0

Retry a :ref:`custom user confirmation function <auth-run-a-confirmation-function>`. 

.. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.retry-confirmation-function.swift
   :language: swift

.. _ios-reset-a-users-password:

Reset a User's Password
-----------------------

To reset a user password in Device Sync, you can either:

- Send a password reset email
- Run a password reset function

Select your preferred password reset method by going to:

1. Your Atlas App Services App
#. :guilabel:`Authentication`
#. :guilabel:`Authentication Providers`
#. :guilabel:`Email/Password` - and press the :guilabel:`EDIT` button

Send a Password Reset Email
~~~~~~~~~~~~~~~~~~~~~~~~~~~

After you configure your App to :ref:`send a password reset email 
<auth-send-a-password-reset-email>`, you can call ``sendResetPasswordEmail`` 
with the user's email. App Services sends an email to the user that contains 
a unique URL. The user must visit this URL within 30 minutes to confirm 
the reset.
 
.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.reset-password.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.reset-password-objc.m
         :language: objectivec

Run a Password Reset Function
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you configure your app to :ref:`run a password reset function 
<auth-run-a-password-reset-function>`, you'll define the function that 
should run when you call :swift-sdk:`callResetPasswordFunction() <Extensions/EmailPasswordAuth.html#/s:So20RLMEmailPasswordAuthC10RealmSwiftE09callResetB8Function5email8password4args7Combine6FutureCyyts5Error_pGSS_SSSayAC7AnyBSONOGtF>` 
from the SDK. This function can take a username, a password, and any number 
of additional arguments. You can use these arguments to specify details 
like security question answers or other challenges that the user should 
pass to successfully complete a password reset.

You might prefer to use a custom password reset function when you want to
define your own password reset flows. For example, you might send a custom 
password reset email from a specific domain, or through a service other 
than email.

.. seealso::

   For more information on how to define a custom password reset function
   in the Device Sync backend, including how to structure it and examples 
   of implementing custom flows, see: :ref:`Run a Password Reset Function 
   <auth-run-a-password-reset-function>`.
 
.. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.password-reset-function.swift
   :language: swift

.. _ios-manage-users-completion-handler-example:

Email/Password User Methods with Completion Handlers
----------------------------------------------------

If you're not using :apple:`Apple's async/await syntax
<documentation/swift/swift_standard_library/concurrency/updating_an_app_to_use_swift_concurrency>`, 
all of these methods are available with completion handlers. This example 
shows :ref:`registering a user <ios-register-a-new-user-account>` with the 
completion handler syntax.

.. literalinclude:: /examples/generated/code/start/ManageEmailPasswordUsers.snippet.register-email-completion-handler.swift
   :language: swift
