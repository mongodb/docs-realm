.. _ios-client-quick-start-with-sync:

=================================
Quick Start with Sync - Swift SDK
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+} and
{+sync+} integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the Swift SDK <ios-install>`

.. note:: Check Out the Tutorial
   
   This page contains only the essential information that you need to set up a
   MongoDB Realm application. If you prefer to follow a guided tutorial that
   shows you step-by-step how to set up a working app, check out the :ref:`iOS
   Tutorial <ios-swift-tutorial>` where you'll build a mobile app that connects
   to the :ref:`Task Tracker backend <tutorial-task-tracker-create-realm-app>`.

Import Realm
------------

Near the top of any Swift file that uses Realm, add the following import
statement:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.import-realm.swift
   :language: swift

.. _ios-quick-start-init-app:

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.initialize-app.swift
   :language: swift

Define Your Object Model
------------------------

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled {+sync-short+} with
:term:`development mode` in the {+ui+}, you can define your :ref:`object model
<ios-realm-objects>` directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode, you can copy and paste the object model definitions that {+backend-short+} generated for you from the :guilabel:`SDKs` tab in the {+ui+}. You must re-enable Developer Mode if you want to make changes to the object model definition from client side code. See :ref:`Configure Your Data Model <configure-your-data-model>`.

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.model.swift
   :language: swift

.. _ios-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.authenticate-user.swift
   :language: swift

{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso::

   :ref:`ios-authenticate-users`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, 
you can open a :ref:`{+realm+} <ios-realms>` asynchronously by calling 
:swift-sdk:`asyncOpen <Structs/Realm.html#/s:10RealmSwift0A0V9asyncOpen13configuration13callbackQueue0F0AC05AsyncD4TaskVAC13ConfigurationV_So17OS_dispatch_queueCyACSg_s5Error_pSgtctFZ>`, 
passing in the user's  
:swift-sdk:`Configuration <Structs/Realm/Configuration.html>` object, which  
includes the partition name. The following code demonstrates this:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.open-realm.swift
   :language: swift

.. seealso::

   :ref:`Sync Data <ios-open-a-synced-realm>`

Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its :ref:`objects <ios-realm-objects>` in a :ref:`write transaction <ios-write-transactions>` block.

To create a new Task, instantiate the Task class and add it to the {+realm+} in a write block:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.create-task.swift
   :language: swift

You can retrieve a live :ref:`collection <ios-client-collections>` of all tasks in the {+realm+}:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.get-all-tasks.swift
   :language: swift

You can also filter that collection using :ref:`where <ios-client-query-engine>`:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.filter.swift
   :language: swift

To modify a task, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.modify-write-block.swift
   :language: swift

Finally, you can delete a task:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.delete.swift
   :language: swift

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes
<ios-react-to-changes>` with the ``observe`` method.

.. note::

   Be sure to retain the notification token returned by ``observe`` as long as you want to continue observing. When you are done observing, invalidate the token to free the resources.

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.watch-for-changes.swift
   :language: swift

Later, when you're done observing, invalidate the token:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.invalidate-notification-token.swift
   :language: swift


Log Out
-------

Once logged in, you can log out:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.logout.swift
   :language: swift

Complete Example
----------------

Run the complete example by replacing the app ID with your {+app+} ID and
calling ``runExample()``.

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.complete-quick-start.swift
   :language: swift

Output
~~~~~~
Running the above code should output something like the following:

.. literalinclude:: /examples/QuickStarts/CompleteSwiftOutput
