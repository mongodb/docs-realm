.. _ios-react-to-changes:

============================
React to Changes - Swift SDK
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-register-a-realm-change-listener:

Register a Realm Change Listener
--------------------------------

You can register a notification handler on an entire :ref:`realm
<ios-realms>`. Realm Database calls the notification
handler whenever any write transaction involving that Realm is
committed. The handler receives no information about the change.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-realm-change-listener.swift
        :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-realm-change-listener.m
        :language: objectivec
        
.. _ios-register-a-collection-change-listener:

Register a Collection Change Listener
-------------------------------------

You can register a notification handler on a collection within a
realm.

Realm Database notifies your handler:

- After first retrieving the collection.
- Whenever a write transaction adds, changes, or removes objects in the collection.

Notifications describe the changes since the prior notification with
three lists of indices: the indices of the objects that were deleted,
inserted, and modified.

.. important:: Order Matters
   
   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.
  
Collection notifications provide a ``change`` parameter that reports which
objects are deleted, added, or modified during the write transaction. This
:swift-sdk:`RealmCollectionChange <Enums/RealmCollectionChange.html>` 
resolves to an array of index paths that you can pass to a ``UITableView``'s 
batch update methods.

.. important:: High-frequency updates

   This example of a collection change listener does not support 
   high-frequency updates. Under an intense workload, this collection 
   change listener may cause the app to throw an exception.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-collection-change-listener.swift
        :language: swift
        
  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-a-collection-change-listener.m
        :language: objectivec

.. _ios-register-an-object-change-listener:

Register an Object Change Listener
----------------------------------

You can register a notification handler on a specific object
within a Realm. Realm Database notifies your handler:

- When the object is deleted.
- When any of the object's properties change.

The handler receives information about what fields changed
and whether the object was deleted.

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-an-object-change-listener.swift
        :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.register-an-object-change-listener.m
        :language: objectivec

.. _ios-register-a-keypath-change-listener:

Register a Key Path Change Listener
-----------------------------------

.. versionadded:: 10.12.0

In addition to registering a notification handler on an :swift-sdk:`object 
<Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAC0C6ChangeOyxGctSo13RLMObjectBaseCRbzlF>` 
or :swift-sdk:`collection <Protocols/RealmCollection.html#/s:10RealmSwift0A10CollectionP7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0aC6ChangeOyxGctF>`, you can pass an optional string ``keyPaths`` parameter to specify the key path or 
key paths to watch.

.. example::

   .. include:: /examples/generated/code/start/Notifications.snippet.register-a-keypath-change-listener.swift.rst

.. versionadded:: 10.14.0

You can :swift-sdk:`observe <Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E7observe8keyPaths2on_So20RLMNotificationTokenCSays14PartialKeyPathCyxGG_So17OS_dispatch_queueCSgyAC0C6ChangeOyxGctSo13RLMObjectBaseCRbzlF>`
a partially type-erased :apple:`PartialKeyPath <documentation/swift/partialkeypath>`
on :swift-sdk:`Objects <Extensions/Object.html>` or :swift-sdk:`RealmCollections 
<Protocols/RealmCollection.html>`.

.. code-block:: swift

   objectNotificationToken = dog.observe(keyPaths: [\Dog.favoriteToy, \Dog.age], { change in

When you specify ``keyPaths``, *only* changes to those
``keyPaths`` trigger notification blocks. Any other changes do not trigger
notification blocks.

.. example::

   Consider a ``Dog`` object where one of its properties is a list of 
   ``siblings``:

   .. include:: /examples/generated/code/start/Notifications.snippet.alternate-dog-class-for-keypaths.swift.rst

   If you pass ``siblings`` as a ``keyPath`` to observe, any insertion, 
   deletion, or modification to the ``siblings`` list would trigger a 
   notification. However, a change to ``someSibling.name`` would not trigger
   a notification, unless you explicitly observed ``["siblings.name"]``.

.. note::

   Multiple notification tokens on the same object which filter for
   separate key paths *do not* filter exclusively. If one key path
   change is satisfied for one notification token, then all notification
   token blocks for that object will execute.

Realm Collections
~~~~~~~~~~~~~~~~~

When you observe key paths on the various collection types, expect these 
behaviors:

- :swift-sdk:`LinkingObjects: <Structs/LinkingObjects.html#/s:10RealmSwift14LinkingObjectsV7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of the LinkingObject triggers a notification for a 
  change to that property, but does not trigger notifications for changes to 
  its other properties. Insertions or deletions to the list or the object 
  that the list is on trigger a notification. 
- :swift-sdk:`Lists <Classes/List.html#/s:10RealmSwift4ListC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of the list's object will triggers a notification for 
  a change to that property, but does not trigger notifications for changes 
  to its other properties. Insertions or deletions to the list or the object 
  that the list is on trigger a notification. 
- :swift-sdk:`Map <Classes/Map.html#/s:10RealmSwift3MapC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0aC6ChangeOyACyxq_GGctF>`:
  Observing a property of the map's object triggers a notification for a change
  to that property, but does not trigger notifications for changes to its other
  properties. Insertions or deletions to the Map or the object that the map is
  on trigger a notification. The ``change`` parameter reports, in the form of 
  keys within the map, which key-value pairs are added, removed, or modified 
  during each write transaction. 
- :swift-sdk:`MutableSet <Classes/MutableSet.html#/s:10RealmSwift10MutableSetC7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`:
  Observing a property of a MutableSet's object triggers a notification 
  for a change to that property, but does not trigger notifications for changes 
  to its other properties. Insertions or deletions to the MutableSet or the 
  object that the MutableSet is on trigger a notification. 
- :swift-sdk:`Results <Structs/Results.html#/s:10RealmSwift7ResultsV7observe8keyPaths2on_So20RLMNotificationTokenCSaySSGSg_So17OS_dispatch_queueCSgyAA0A16CollectionChangeOyACyxGGctF>`: 
  Observing a property of the Result triggers a notification for a change to 
  that property, but does not trigger notifications for changes to its other 
  properties. Insertions or deletions to the Result trigger a notification.

.. _ios-write-silently:

Write Silently
--------------

You can write to a realm *without* sending a notification to a
specific observer by passing the observer's notification token in an
array to :swift-sdk:`realm.write(withoutNotifying:_:)
<Structs/Realm.html#/s:10RealmSwift0A0V5write16withoutNotifying_xSaySo20RLMNotificationTokenCG_xyKXEtKlF>`:

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.silent-write.swift
         :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.silent-write.m
        :language: objectivec


.. seealso::

   :ref:`ios-interface-driven-writes`

.. _stop-watching-for-changes:

Stop Watching for Changes
-------------------------

Observation stops when the token returned by an ``observe`` call becomes
invalid. You can explicitly invalidate a token by calling its
``invalidate()`` method.

.. important:: Retain Tokens as Long as You Want to Observe

   Notifications stop if the token is in a local variable that goes out
   of scope. 

.. tabs-realm-languages::

  .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.stop-watching.swift
         :language: swift

  .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Notifications.snippet.stop-watching.m
        :language: objectivec

.. _ios-key-value-observation:

Key-value Observation
---------------------

Key-value Observation Compliance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm Database objects are :apple:`key-value observing (KVO) 
compliant<documentation/swift/cocoa_design_patterns/using_key-value_observing_in_swift>` 
for most properties:

- Almost all managed (non-ignored) properties on ``Object`` subclasses 
- The ``invalidated`` property on ``Object`` and ``List``

You cannot observe ``LinkingObjects`` properties via Key-value observation.

.. important::

   You cannot add an object to a realm (with ``realm.add(obj)`` or similar 
   methods) while it has any registered observers.

Managed vs. Unmanaged KVO Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Observing the properties of unmanaged instances of ``Object`` subclasses 
works like any other dynamic property.

Observing the properties of managed objects works differently. With 
realm-managed objects, the value of a property may change when:

- You assign to it
- The realm is refreshed, either manually with ``realm.refresh()`` or 
  automatically on a runloop thread
- You begin a write transaction after changes on another thread

Realm applies changes made in the write transaction(s) on other threads 
at once. Observers see Key-value observation notifications at once. 
Intermediate steps do not trigger KVO notifications.

.. example::

   Say your app performs a write transaction that increments a property 
   from 1 to 10. On the main thread, you get a single notification of a 
   change directly from 1 to 10. You won't get notifications for every 
   incremental change between 1 and 10.

Avoid modifying managed Realm objects from within 
``observeValueForKeyPath(_:ofObject:change:context:)``. Property values 
can change when not in a write transaction, or as part of beginning a 
write transaction.

Observing Realm Lists
~~~~~~~~~~~~~~~~~~~~~

Observing changes made to Realm ``List`` properties is simpler than 
``NSMutableArray`` properties:

- You don't have to mark ``List`` properties as dynamic to observe them.
- You can call modification methods on ``List`` directly. Anyone observing 
  the property that stores it gets a notification.

You don't need to use ``mutableArrayValueForKey(_:)``, although realm 
does support this for code compatibility. 

.. seealso::

   Examples of using Realm with :github:`ReactiveCocoa from 
   Objective-C<realm/realm-swift/tree/master/examples/ios/objc/RACTableView>`
   , and :github:`ReactKit from Swift<realm/realm-swift/tree/v2.3.0/examples/ios/swift-2.2/ReactKit>`.

.. _swift-react-to-changes-actor-confined-realm:

React to Changes in an Actor-Isolated Realm
-------------------------------------------

You can observe notifications on an actor-isolated realm using Swift's 
async/await syntax. Calling ``await object.observe()`` or 
``await collection.observe`` registers a block to be called each time the 
object or collection changes.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.observe-collection-on-actor.swift
   :language: swift

For more information about change notifications on actor-isolated realms, 
refer to :ref:`swift-observe-notifications-on-actor-confined-realm`.

.. _ios-react-to-changes-to-a-class-projection:

React to Changes to a Class Projection
--------------------------------------

Like other realm objects, you can :ref:`react to changes <ios-react-to-changes>`
to a class projection. When you register a class projection change listener, 
you see notifications for changes made through the class projection object 
directly. You also see notifications for changes to the underlying object's 
properties that project through the class projection object.

Properties on the underlying object that are not ``@Projected`` in the 
class projection do not generate notifications.

This notification block fires for changes in:

- ``Person.firstName`` property of the class projection's underlying 
  ``Person`` object, but not changes to ``Person.lastName`` or 
  ``Person.friends``.
- ``PersonProjection.firstName`` property, but not another class projection 
  that uses the same underlying object's property. 

.. literalinclude:: /examples/generated/code/start/ClassProjection.snippet.register-a-class-projection-change-listener.swift
   :language: swift

Notification Delivery
---------------------

If you don't need strict guarantees around when notifications are delivered,
subscribe to a dispatch queue instead of the main thread. If your notification
logic does need strict guarantees, use care in how you write things in your
notification handlers. Otherwise, you may trigger this error:

.. code-block:: console
   :copyable: false

   Cannot register notification blocks from within write transactions.

This issue occurs when you try to perform updates as a result of a 
notification, but the notification occurs while a write transaction is in
progress.

The observe function takes a dispatch queue. If that's set, Realm delivers 
notifications there instead of to the current thread. Realm's notification 
system promises that notifications for writes on different threads are always 
delivered synchronously as part of the refresh process. As long as you aren't 
performing writes on the current thread, you can rely on the guarantee that 
your app cannot see the value you read from an object change without 
receiving a notification about the change in between the reads. 
