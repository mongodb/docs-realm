.. _ios-install:

===============================================
Install Realm for iOS, macOS, tvOS, and watchOS
===============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

Realm's Swift SDK enables your iOS, macOS, tvOS,
and watchOS applications to interact with Realm using either
the Swift or Objective-C programming languages. This page
details how to install Realm in your project and get
started.

Prerequisites
-------------

Before getting started, ensure your development environment
meets the following prerequisites:

- Xcode 14.1-14.3.1 with a target of iOS 11.0 or higher, macOS 10.13 or higher, tvOS 11.0 or higher, or watchOS 4.0 or higher.
- Reflection is enabled in your project. The Realm Swift SDK uses reflection to 
  determine your model's properties. Your project must not set 
  ``SWIFT_REFLECTION_METADATA_LEVEL = none`` or Realm cannot see properties 
  in your model. Reflection is enabled by default if your project does 
  not specifically set a level for this setting. 

.. versionchanged:: 10.40.0

Swift SDK version 10.40.0 drops support for Xcode 13. For v10.39.01 and earlier,
these Xcode 13 requirements apply:

- `Xcode <https://developer.apple.com/xcode/>`__ version 13.1 or higher.
- When using Xcode 13, a target of iOS 9.0 or higher, macOS 10.9 or higher, tvOS 9.0 or higher, or watchOS 2.0 or higher.
- If using Swift Package Manager with Xcode 13, target of iOS 11+ or macOS 10.10+ is required.

.. note::

   There are special considerations when using Realm with
   tvOS. See :ref:`ios-tvos` for more information.

Installation
------------

You can use ``SwiftPM``, ``CocoaPods``, or ``Carthage`` to add the
Realm Swift SDK to your project.

.. tabs::

   .. tab:: SwiftPM
      :tabid: swiftpm

      .. procedure::

         .. step:: Add Package Dependency


            In Xcode, select ``File`` > ``Add Packages...``.


         .. step:: Specify the Repository


            Copy and paste the following into the search/input box.

            .. code-block:: sh

               https://github.com/realm/realm-swift.git


         .. step:: Specify Options


            In the options for the ``realm-swift`` package, we recommend setting
            the ``Dependency Rule`` to ``Up to Next Major Version``,
            and enter the `current Realm Swift SDK version
            <https://github.com/realm/realm-swift/releases>`__ . Then, click ``Add Package``.


         .. step:: Select the Package Products


            Select both ``Realm`` and ``RealmSwift``, then click ``Add Package``.

   .. tab:: CocoaPods
      :tabid: cocoapods

      If you are installing with `CocoaPods <https://guides.cocoapods.org/using/getting-started.html>`__, you need CocoaPods 1.10.1 or later.

      .. procedure::

         .. step:: Update the CocoaPods repositories


            On the command line, run ``pod repo update`` to ensure
            CocoaPods can access the latest available Realm versions.


         .. step:: Initialize CocoaPods for Your Project


            If you do not already have a Podfile for your project,
            run ``pod init`` in the root directory of your project to
            create a Podfile for your project. A Podfile allows you
            to specify project dependencies to CocoaPods.


         .. step:: Add Realm as a Dependency in Your Podfile


            .. tabs-realm-languages::

              .. tab::
                  :tabid: swift

                  Add the line ``use_frameworks!`` if it is not
                  already there.

                  Add the line ``pod 'RealmSwift', '~>10'`` to your main and test
                  targets.

                  When done, your Podfile should look something like this:

                  .. code-block:: text
                     :emphasize-lines: 8

                     platform :ios, '12.0'

                     target 'MyRealmProject' do
                       # Comment the next line if you don't want to use dynamic frameworks
                       use_frameworks!

                       # Pods for MyRealmProject
                       pod 'RealmSwift', '~>10'

                     end

              .. tab::
                  :tabid: objective-c

                  Add the line ``pod 'Realm', '~>10'`` to your main and test
                  targets.

                  Add the line ``use_frameworks!`` as well if it is not
                  already there.

                  When done, your Podfile should look something like this:

                  .. code-block:: text
                     :emphasize-lines: 6, 9, 14

                     # Uncomment the next line to define a global platform for your project
                     # platform :ios, '11.0'

                     target 'MyRealmProject' do
                     # Comment the next line if you don't want to use dynamic frameworks
                     use_frameworks!

                     # Pods for MyRealmProject
                     pod 'Realm', '~>10'

                     target 'MyRealmProjectTests' do
                        inherit! :search_paths
                        # Pods for testing
                        pod 'Realm', '~>10'
                     end

                     end


         .. step:: Install the Dependencies


            From the command line, run ``pod install`` to fetch the
            dependencies.


         .. step:: Use the CocoaPods-Generated ``.xcworkspace`` File


            CocoaPods generates an ``.xcworkspace`` file for you. This
            file has all of the dependencies configured. From now on,
            open this file -- not the ``.xcodeproj`` file -- to work
            on your project.

   .. tab:: Carthage
      :tabid: carthage

      If you are installing with `Carthage <https://github.com/Carthage/Carthage#installing-carthage>`__, you need Carthage 0.33 or later.

      .. procedure::

         .. step:: Add Realm as a Dependency in Your Cartfile


            Add Realm as a dependency by appending the line ``github
            "realm/realm-swift"`` to your Cartfile.

            You can create a Cartfile or append to an existing one by
            running the following command in your project directory:

            .. code-block:: bash

               echo 'github "realm/realm-swift"' >> Cartfile


         .. step:: Install the Dependencies


            From the command line, run ``carthage update --use-xcframeworks``
            to fetch the dependencies.


         .. step:: Add the Frameworks to Your Project


            Carthage places the built dependencies in the ``Carthage/Build``
            directory.

            Open your project's ``xcodeproj`` file in Xcode. Go to
            the Project Navigator panel and click your application
            name to open the project settings editor. Select the
            :guilabel:`General` tab.

            In Finder, open the ``Carthage/Build/`` directory. Drag the
            ``RealmSwift.xcframework`` and ``Realm.xcframework`` files
            found in that directory to the :guilabel:`Frameworks,
            Libraries, and Embedded Content` section of your
            project's :guilabel:`General` settings.

            .. figure:: /images/carthage-add-frameworks.png
               :alt: Drag the xcframework files into the Xcode project.
               :lightbox:

   .. tab:: Static Framework
      :tabid: static-framework

      Installing the Realm Swift SDK as a static framework is only available
      for iOS targets.

      .. procedure::

         .. step:: Download and Extract the Framework


            Download the `latest release of Realm
            <https://github.com/realm/realm-swift/releases>`__ and extract the zip.


         .. step:: Copy Framework(s) Into Your Project


            Drag ``Realm.xcframework`` and ``RealmSwift.xcframework`` (if using)
            to the File Navigator of your Xcode project. Select the
            :guilabel:`Copy items if needed` checkbox and press :guilabel:`Finish`.


         .. step:: Link Binaries


            Select your project in the Xcode File Navigator. Select your app's
            target and go to the :guilabel:`Build Phases` tab. Under
            :guilabel:`Link Binary with Libraries`, click :guilabel:`+` and add
            ``libc++.tbd``, ``libz.tbd``, and ``libcompression.tbd``.
       
      .. tip::
      
         If using the Realm Objective-C API within a Swift project, we 
         recommend you include both Realm Swift and Realm Objective-C in your 
         project. Within your Swift files, you can access the Swift API and 
         all required wrappers. Using the RealmSwift API in mixed 
         Swift/Objective-C projects is possible because the vast majority of 
         RealmSwift types are directly aliased from their Objective-C 
         counterparts.

Import Realm
------------

Add the following line at the top of your source files
to use Realm:

.. tabs-realm-languages::

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/MyRealmApp.snippet.import-realm.m
         :language: objectivec

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/RealmApp.snippet.import-realm.swift
         :language: swift

.. _ios-app-download-file-size:

App Download File Size
----------------------

Realm should only add around 5 to 8 MB to your app's download 
size. The releases we distribute are significantly larger because they 
include support for the iOS, watchOS and tvOS simulators, some debug symbols, 
and bitcode, all of which are stripped by the App Store automatically when 
apps are downloaded.

Troubleshooting
---------------

If you have build issues after using one of these methods to install 
Realm, see :ref:`our troubleshooting guidelines <ios-resolve-build-issues>` 
for information about resolving those issues in realm.

.. _swift-os-support:

OS Support
----------

.. important::

   There are special considerations when using Realm with
   tvOS. See :ref:`ios-tvos` for more information.

Xcode 14
~~~~~~~~

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: index-table

   * - Supported OS
     - Realm
     - Atlas App Services

   * - iOS 11.0+
     - X
     - X

   * - macOS 10.13+
     - X
     - X

   * - tvOS 11.0+
     - X
     - X

   * - watchOS 4.0+
     - X
     - 

Xcode 15
~~~~~~~~

.. versionadded:: 10.40.1

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: index-table

   * - Supported OS
     - Realm
     - Atlas App Services

   * - iOS 12.0+
     - X
     - X

   * - macOS 10.13+
     - X
     - X

   * - tvOS 11.0+
     - X
     - X

   * - watchOS 4.0+
     - X
     - 

   * - visionOS 1.0+
     - X
     - X

Swift Concurrency Support
-------------------------

The Realm Swift SDK supports Swift's concurrency-related language features.
For best practices on using Realm with Swift concurrency features, refer 
to the documentation below.

Async/Await Support
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/swift-async-await-support.rst

For more information about async/await support in the Realm Swift SDK, refer
to :ref:`Swift Concurrency: Async/Await APIs <swift-async-await-apis>`.

Actor Support
~~~~~~~~~~~~~

The Realm Swift SDK supports actor-isolated realm instances. For more information,
refer to :ref:`swift-actor-isolated-realm`.
