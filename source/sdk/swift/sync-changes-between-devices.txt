.. _ios-sync-changes-between-devices:
.. _ios-realm-sync:

========================================
Sync Changes Between Devices - Swift SDK
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Concepts
========

Realm Sync
----------

Realm Sync automatically synchronizes data between client applications and 
a :ref:`MongoDB Realm backend application <realm-cloud>`. When a client 
device is online, {+sync-short+} asynchronously synchronizes data in a 
background thread between the device and your backend {+app+}. 

When you use Sync in your client application, your implementation must match 
the Sync Mode you select in your backend {+app+} configuration. The Sync Mode
options are:

- Partition-Based Sync
- Flexible Sync

You can only use one Sync Mode for your application. You cannot mix 
Partition-Based Sync and Flexible Sync within the same {+app+}.

.. seealso::

   :ref:`enable-realm-sync`

.. _ios-partition-based-sync-fundamentals:

Partition-Based Sync
--------------------

When you select :ref:`Partition-Based Sync <partition-based-sync>` for your 
backend {+app+} configuration, your client implementation must include a 
partition value. This is the value of the :ref:`partition key 
<partition-key>` field you select when you configure Partition-Based Sync. 

The partition value determines which data the client application can access.

You pass in the partition value when you open a synced realm.

.. _ios-flexible-sync-fundamentals:

Flexible Sync
-------------

.. versionadded:: 10.22.0

When you select :ref:`Flexible Sync <flexible-sync>` for your backend {+app+} 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Realm Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`realm object 
<ios-realm-objects>`. You might have multiple subscriptions if you 
have many types of realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a flexible sync configuration. Then, manage subscriptions
to determine which documents to sync.

Usage
=====

.. _ios-open-a-synced-realm:

Prerequisites
-------------

Before you can access a synced {+realm+} from the client, you must:

1. :ref:`Enable sync <enable-sync>` in the {+ui+}.

#. :ref:`Initialize the app <ios-quick-start-init-app>`

#. :ref:`Authenticate a user <ios-quick-start-authenticate>` in
   your client project.

#. :ref:`Open a Synced Realm <ios-login-and-open-realm>`

Sync Data
---------

The syntax to :ref:`read <ios-read-operations>`, :ref:`write
<ios-write-operations>`, and
:ref:`watch for changes <ios-react-to-changes>` on a
synced {+realm+} is identical to the syntax for non-synced {+realms+}. While 
you work with local data, a background thread efficiently integrates, 
uploads, and downloads changesets.

.. important:: When Using Sync, Avoid Writes on the Main Thread

   The fact that {+service-short+} performs sync integrations on a background thread means
   that if you write to your {+realm+} on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`not to write on the main thread
   when using {+sync+} <ios-threading-three-rules>`.

The following code creates a new ``Task`` object and writes it to the {+realm+}:

.. literalinclude:: /examples/generated/code/start/CompleteQuickStart.codeblock.create-task.swift
   :language: swift

.. seealso::

   :ref:`Threading <ios-client-threading>`

.. _ios-sync-changes-in-the-background:

Sync Changes in the Background
------------------------------

If you want your app to update data in the background (while the app is
minimized), iOS requires you to implement :apple:`Background App Refresh
<documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/updating_your_app_with_background_app_refresh>`.
Enabling Background App Refresh minimizes the time it takes for the user
to see the most recent data; without Background App Refresh, {+service+}
updates the data when the user launches the app, potentially resulting
in noticeable lag.

To use the {+realm+} while the device is locked, you must adjust the
file protection settings. See
:ref:`use-realm-when-the-device-is-locked`.

.. _ios-suspend-or-resume-a-sync-session:

Suspend or Resume a Sync Session
--------------------------------

Opening a synced {+realm+} starts a :swift-sdk:`SyncSession <Extensions/SyncSession.html>`
for that {+realm+}. You can suspend and resume the sync session on the {+realm+}.
Pausing a sync session only suspends that {+realm+}'s sync session. If you have
more than one open {+realm+}, suspend does not affect the sync sessions for 
other {+realms+}.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can suspend or resume a sync session using the
      :swift-sdk:`SyncSession <Extensions/SyncSession.html>` instance of
      a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can suspend or resume a sync session using the
      :objc-sdk:`RLMSyncSession <Classes/RLMSyncSession.html>` instance
      of a synced {+realm+}.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.pause-resume-sync-session.m
         :language: objectivec

.. |pause_func_name| replace:: ``.suspend()``
.. include:: /includes/note-details-about-pause.rst

.. _ios-check-sync-progress:

Check Upload & Download Progress for a Sync Session
---------------------------------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can add a progress notification using the synced {+realm+}'s
      SyncSession instance's
      :swift-sdk:`addProgressNotification(for:mode:block:)
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE23addProgressNotification3for4mode5blockSo011RLMProgressG5TokenCSgAbCE0F9DirectionO_AbCE0F4ModeOyAbCE0F0VctF>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can add a progress notification using the synced {+realm+}'s
      RLMSyncSession instance's
      :objc-sdk:`[--addProgressNotificationForDirection:mode:block:]
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(im)addProgressNotificationForDirection:mode:block:>`
      method.

      This method returns a token that you should retain until you wish
      to stop observing upload or download progress. Note that if you
      keep the token in a local variable, observation will stop when the
      local variable goes out of scope.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-progress.m
         :language: objectivec


.. _ios-check-network-connection:

Check the Network Connection
----------------------------

.. tip:: 

   {+service+}'s *offline-first* design means that you generally don't
   need to check the current network connection state. That said, the
   ``connectionState`` property is available if your app calls for some
   indication of connection state.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      To check the connection state, you can read the synced {+realm+}'s
      SyncSession instance's :swift-sdk:`connectionState
      <Extensions/SyncSession.html#/s:So14RLMSyncSessionC10RealmSwiftE15ConnectionStatea>`
      property directly. 

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO or even Combine.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To check the connection state, you can read the synced {+realm+}'s
      RLMSyncSession instance's :objc-sdk:`connectionState
      <Classes/RLMSyncSession.html#/c:objc(cs)RLMSyncSession(py)connectionState>`
      property directly.

      This property is :apple:`KVO-compliant
      <library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`,
      so you can observe changes using KVO. The following example
      demonstrates how to implement an observer class:

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection-setup.m
         :language: objectivec

      You can then attach an observer instance to the RLMSyncSession
      object. Be sure to remove the observer when finished.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.check-network-connection.m
         :language: objectivec

.. _ios-handle-sync-errors:

Handle Sync Errors
------------------

While developing an application that uses {+sync+}, you should set an error
handler. This error handler will detect and respond to any failed sync-related
API calls. 

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Set an error handler on the :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` singleton. Set an error
      handler on the SyncManager singleton. When an error occurs, the Swift SDK
      calls the error handler with the error object and the :swift-sdk:`SyncSession
      <Structs/Realm.html#/s:10RealmSwift0A0V11syncSessionSo07RLMSyncD0CSgvp>` that the
      error occurred on.
      
      .. note::
   
         Realm's :swift-sdk:`SyncError <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>` conforms to :apple:`Swift's Error protocol <documentation/swift/error>`

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Set an error handler on the :objc-sdk:`RLMSyncManager
      <objc/latest/Classes/RLMSyncManager.html>` singleton. When an error
      occurs, the Swift SDK calls the error handler with the error object and the
      :objc-sdk:`RLMSyncSession <objc/latest/Classes/RLMSyncSession.html>` that
      the error occurred on.

      .. note::
   
         Realm represents sync errors through :objc-sdk:`NSError <Categories/NSError%28RLMSync%29.html>` objects whose domain is
         :objc-sdk:`RLMSyncErrorDomain <Constants.html#/c:@RLMSyncErrorDomain>`. To learn more about the error codes, check out
         the definitions of :objc-sdk:`RLMSyncError <Enums/RLMSyncError.html>` and :objc-sdk:`RLMSyncAuthError <Enums/RLMSyncAuthError.html>`.

      .. literalinclude:: /examples/generated/Errors.codeblock.create-error-handler.m
         :language: objectivec


.. _ios-delete-a-client-realm-file:

Delete a Client Realm File
--------------------------

In some cases, you may want to completely delete a realm file from disk.

Realm avoids copying data into memory except when absolutely required.
As a result, all objects managed by a realm have references to the file
on disk. Before you can safely delete the file, you must ensure the
deallocation of these objects:

- All objects read from or added to the realm
- All List and Results objects
- All ThreadSafeReference objects
- The realm itself

In practice, there are two safe times to delete the realm file:

1. On application startup before ever opening the realm.
#. After only having opened the realm within an explicit ``autorelease`` pool, which ensures deallocation of all of objects within it.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the
      :swift-sdk:`Realm.deleteFiles(for:)
      <Structs/Realm.html#/s:10RealmSwift0A0V11deleteFiles3forSbAC13ConfigurationV_tKFZ>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can delete the ``.realm``, ``.note`` and ``.management`` files
      for a given configuration with the :objc-sdk:`+[RLMRealm
      deleteFilesForConfiguration:error:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(cm)deleteFilesForConfiguration:error:>`
      class method.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.reset-client-realm-file.m
         :language: objectivec

.. tip::

   To perform a **client reset**, see :ref:`ios-client-resets`.

.. _ios-set-the-client-log-level:

Set the Client Log Level
------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can set the {+sync+} client log level on the
      :swift-sdk:`SyncManager
      <Typealiases.html#/s:10RealmSwift11SyncManagera>` instance on your
      :swift-sdk:`App <Extensions/App.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can set the {+sync+} client log level on the
      :objc-sdk:`RLMSyncManager <Classes/RLMSyncManager.html>` instance
      on your :objc-sdk:`RLMApp <Classes/RLMApp.html>`.

      .. literalinclude:: /examples/generated/code/start/Sync.codeblock.set-log-level.m
         :language: objectivec

.. tip::

   See :objc-sdk:`RLMSyncLogLevel <Enums/RLMSyncLogLevel.html>` for a
   description of each available log level. Note that more logging can
   negatively affect performance.

.. include:: /includes/tip-sync-log-levels.rst
