.. _ios-mongodb-realm-cloud:
.. _ios-application-services:

================================
Application Services - Swift SDK
================================

.. toctree::
   :titlesonly:

   Connect to an App Services App </sdk/swift/app-services/connect-to-app-services-backend>
   Call a Function </sdk/swift/app-services/call-a-function>
   Query MongoDB </sdk/swift/app-services/mongodb-remote-access>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Realm SDKs let you connect your client apps to the App Services backend.
The SDKs provide the functionality
needed to authenticate users with any of the built-in :ref:`authentication
providers <authentication-providers>`, call backend :ref:`functions
<functions>`, and directly access a linked :ref:`MongoDB data source
<data-sources>`. You can also use an Atlas App Services App to :ref:`sync data
between devices <ios-realm-sync>`.

The App Client
--------------
When using the SDK to access the App Services backend, you start with a
App object. This object provides all other functionality related to
App Services. The ``App`` object is
:ref:`initialized <ios-init-appclient>` with the App
ID, which you can :ref:`find in the App Services UI <find-your-app-id>`.

.. tip::

   To learn how to initialize the App client, see
   :ref:`ios-init-appclient`.


Authentication & User Management
--------------------------------

One of the most challenging aspects of client development is implementing a 
robust and secure authentication system. With the Realm SDKs, however, you 
can use any of the App Services authentication providers with very 
minimal backend setup or client-side code required. With the authentication 
APIs, you can implement the following functionality:

- Creation of new user accounts
- User log-in and log-out
- Multiple users logged on at the same time on the same device 
- Linking user accounts from different providers 
- Providing custom user data 

.. tip::

   To learn how to set up authentication with different providers, see
   :ref:`ios-authenticate-users`.

   To learn how to manage multiple users, see :ref:`ios-multi-user-applications`.

   To learn how to link user accounts, see :ref:`ios-link-user-identities`.

   To learn how to provide custom user data, see :ref:`ios-custom-user-data`.

Calling Functions
-----------------

:ref:`Atlas Functions <functions>` enable you to define and execute server-side 
logic for your application. You can call these Functions from your client applications
via the Realm SDKs. These server-side functions can run under the context 
of the authenticated user, and thus honor the rules, roles, and permissions that 
you have assigned to your collections.

By using Functions, you provide a secure way for a variety of client 
applications to share complex functionality without having to reproduce that 
logic client-side. 

.. tip::

   To learn how to call Functions, see :ref:`Call a Function <ios-call-a-function>`.

Accessing MongoDB
-----------------

The Realm SDKs include APIs for accessing a MongoDB Atlas instance directly. 
With these APIs, you can perform all of the standard CRUD operations from your 
client. For security, you configure server-side :ref:`data access rules <mongodb-rules>` 
to dynamically determine read & write permissions for every object that 
is accessed.

.. tip::

   To learn how to use the MongoDB APIs, see :ref:`Query MongoDB <ios-mongodb-data-access>`.

.. _ios-realm-sync:

Sync Data
---------

Atlas Device Sync automatically synchronizes data between client applications and 
an :ref:`App Services backend <realm-cloud>`. When a client 
device is online, Sync asynchronously synchronizes data in a 
background thread between the device and your backend App. 

When you use Sync in your client application, your implementation must match 
the Sync Mode you select in your backend App configuration. The Sync Mode
options are:

- Partition-Based Sync
- Flexible Sync

You can only use one Sync Mode for your application. You cannot mix 
Partition-Based Sync and Flexible Sync within the same App.

.. seealso::

   :ref:`enable-realm-sync`

.. _ios-partition-based-sync-fundamentals:

Partition-Based Sync
~~~~~~~~~~~~~~~~~~~~

When you select :ref:`Partition-Based Sync <partition-based-sync>` for your 
backend App configuration, your client implementation must include a 
partition value. This is the value of the :ref:`partition key 
<partition-key>` field you select when you configure Partition-Based Sync. 

The partition value determines which data the client application can access.

You pass in the partition value when you open a synced realm.

.. _ios-flexible-sync-fundamentals:

Flexible Sync
~~~~~~~~~~~~~

.. versionadded:: 10.22.0

When you select :ref:`Flexible Sync <flexible-sync>` for your backend App 
configuration, your client implementation must include subscriptions to 
queries on :ref:`queryable fields <queryable-fields>`. Flexible Sync works 
by synchronizing data that matches query subscriptions you maintain in the 
client application. 

A subscription set contains a set of queries. Flexible Sync returns 
documents matching those queries, where the user has the appropriate 
:ref:`permissions <flexible-sync-rules-and-permissions>` to read and/or 
read and write the documents. If documents match the query, but the client 
does not have the permission to read or write them, they do not sync to 
the client application.

You can form queries using :ref:`Realm Query Language <realm-query-language>`.

.. include:: /includes/note-unsupported-flex-sync-rql-operators.rst

Subscription sets are based on a specific type of :ref:`Realm object 
<ios-realm-objects>`. You might have multiple subscriptions if you 
have many types of Realm objects.

To use Flexible Sync in your client application, open a synced realm 
with a Flexible Sync configuration. Then, manage subscriptions
to determine which documents to sync.

Group Updates for Improved Performance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sync-memory-performance.rst
