.. _ios-client-compact-a-realm:

===========================
Compact a Realm - Swift SDK
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


.. _ios-realm-file:

Concept: Realm Files
--------------------

{+client-database+} stores a binary encoded version of every object and type in a
realm in a single ``.realm`` file. The file is located at :ref:`a specific 
path <find-the-default-realm-path>` that you define when you open the realm.

.. note:: Auxiliary Realm Files
   
   Realm Database creates additional files for each {+realm+}.
   To learn more about these files, see :ref:`Realm Database Internals
   <ios-realm-database>`.

.. warning:: Use Caution When Deleting Realm Files
   
   In some circumstances, such as a client reset scenario, you might need to
   delete a {+realm+} file and its auxiliary files.
   
   If you delete a {+realm+} file or any of its auxiliary files while one or
   more instances of the {+realm+} are open, you might corrupt the {+realm+} or
   disrupt :doc:`sync </sync>`.
   
   You may safely delete these files when all instances of a {+realm+} are
   closed. Before you delete a realm file, make sure that you back up any
   important objects as you will lose all unsynced data in the realm.

   For guidance on deleting realm files, see
   :ref:`ios-delete-a-client-realm-file`.

The size of a {+client-database+} file is always larger than the total 
size of the objects stored within it. This architecture enables some of 
{+realm+}'s great performance, concurrency, and safety benefits. 

.. seealso::

   - :ref:`ios-client-threading` 
   - :ref:`ios-file-size`

{+backend-short+} writes new data within unused space tracked inside 
file. In some situations, unused space may comprise a significant 
portion of a {+realm+} file. If file size grows large enough to 
negatively impact performance, compact the {+realm+}. 

.. _ios-file-size:

File Size
---------

Generally, {+client-database+} takes less space on disk than a 
comparable SQLite database. Unexpected file growth may be related to the 
{+backend-short+} referring to outdated data.


Avoid Pinning Transactions
~~~~~~~~~~~~~~~~~~~~~~~~~~

{+backend-short+} ties read transaction lifetimes to the memory lifetime 
of {+realm+} instances. Avoid "pinning" old Realm transactions. 
Use auto-refreshing {+realms+}, and wrap the use of Realm APIs 
from background threads in explicit autorelease pools.

Consider iOS File Size Limitations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A large {+realm+} file can impact the performance and reliability of
your app. Any single {+realm+} file cannot be larger than the amount
of memory your application would be allowed to map in iOS. This limit
depends on the device and on how fragmented the memory space is at
that point in time. 

If you need to store more data, map it over multiple {+realm+} files.

Threading
~~~~~~~~~

{+backend-short+} updates the version of your data that it accesses at 
the start of a run loop iteration. While this gives you a consistent 
view of your data, it has file size implications. 

Imagine this scenario:

- **Thread A**: Read some data from a {+realm+}, and then block the thread on a 
  long-running operation.
- **Thread B**: Write data on another thread.
- **Thread A**: The version on the read thread isn't updated. Realm has 
  to hold intermediate versions of the data, growing in file size with 
  every write. 

To avoid this issue, call :swift-sdk:`invalidate() <Structs/Realm.html#/s:10RealmSwift0A0V10invalidateyyF>` 
on the {+realm+}. This tells the {+realm+} that you no longer need the 
objects you've read so far. This frees {+realm+} from tracking 
intermediate versions of those objects. The next time you access it, 
{+realm+} will have the latest version of the objects.

You can also use these two methods to compact your Realm:

- Set :swift-sdk:`shouldCompactOnLaunch<Structs/Realm/Configuration.html>`
  in the configuration
- Use :swift-sdk:`writeCopy(toFile:encryptionKey:)<Structs/Realm.html>`

.. seealso::

   :ref:`Advanced Guides: Threading <ios-client-threading>`

Dispatch Queues
~~~~~~~~~~~~~~~

When accessing Realm using :apple:`Grand Central Dispatch 
<documentation/dispatch>`, you may see similar file growth. A dispatch 
queue's autorelease pool may not drain immediately upon executing your 
code. Realm cannot reuse intermediate versions of the data until the 
dispatch pool deallocates the {+realm+} object. Use an explicit 
autorelease pool when accessing {+realm+} from a dispatch queue.

.. _ios-app-download-file-size:

App Download File Size
~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} should only add around 5 to 8 MB to your app's download 
size. The releases we distribute are significantly larger because they 
include support for the iOS, watchOS and tvOS simulators, some debug symbols, 
and bitcode, all of which are stripped by the App Store automatically when 
apps are downloaded.


.. _ios-how-to-compact-a-realm:

Compact a Realm
---------------

Use :swift-sdk:`shouldCompactOnLaunch()<Structs/Realm/Configuration.html>` 
(Swift) or :objc-sdk:`shouldCompactOnLaunch <Classes/RLMRealmConfiguration.html>` 
(Objective-C) on a {+realm+}'s configuration object to compact a {+realm+}. 
Specify conditions to execute this method, such as:

- The size of the file on disk
- How much free space the file contains

.. important:: Compacting may not occur

   Compacting cannot occur while a {+realm+} is being accessed, 
   regardless of any configuration settings.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Compacting.codeblock.compacting.swift
        :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Compacting.codeblock.compacting.m
        :language: objectivec

.. _ios-make-a-compacted-copy:

Make a Compacted Copy
---------------------

You can save a compacted (and optionally :ref:`encrypted
<ios-encrypt-a-realm>`) copy of a {+realm+} to another file location
with the :swift-sdk:`Realm.writeCopy(toFile:encryptionKey:)
<Structs/Realm.html#/s:10RealmSwift0A0V9writeCopy6toFile13encryptionKeyy10Foundation3URLV_AG4DataVSgtKF>`
method. The destination file cannot already exist.

.. important::

   Avoid calling this method within a :ref:`write transaction
   <ios-write-transactions>`. If called within a write transaction, this
   method copies the absolute latest data. This includes any
   **uncommitted** changes you made in the transaction before this
   method call.

.. _ios-how-compacting-works:

How Compacting Works
--------------------

{+backend-short+} compacting works by:

1. Reading the entire contents of the {+realm+} file
2. Writing the contents to a new file at a different location
3. Replacing the original file

If the file contains a lot of data, this can be an expensive operation.

Best Practices
--------------

Experiment with conditions to find the right balance of how often to 
compact a {+realm+} file. Because the operation can be 
expensive, don't compact every time you open a {+realm+}. Do compact 
often enough to prevent the file size from growing too large.

Summary
-------

- {+client-database+}'s architecture enables :ref:`threading-related benefits <ios-client-threading>`, 
  but can result in file size growth.

- Use compacting to manage file size growth.

- Define conditions for ``shouldCompactOnLaunch()`` to compact a {+realm+}.

- Compacting cannot occur if another process is accessing the {+realm+}.
