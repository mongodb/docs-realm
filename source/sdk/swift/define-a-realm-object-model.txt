.. _ios-define-a-realm-object-schema:

========================================
Define a Realm Object Schema - Swift SDK
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _ios-object-types:
.. _ios-object-schemas:

Concepts
========

Object Types & Schemas
----------------------

Every Realm object conforms to a specific **object type**, which is
essentially a class that defines the properties and :ref:`relationships
<ios-client-relationships>` for objects of that type. {+service-short+}
guarantees that all objects in a {+realm+} conform to the schema for
their object type and validates objects whenever they're created,
modified, or deleted.

Realm objects are basically regular Swift or Objective-C classes, but
they also bring a few additional features like :ref:`live queries
<ios-live-queries>`. The Swift SDK memory maps Realm objects directly to
native Swift or Objective-C objects, which means there's no need to use
a special data access library, such as an :wikipedia:`ORM
<Object-relational_mapping>`. Instead, you can work with Realm objects
as you would any other class instance.

.. example::
   
   The following schema defines a ``Dog`` object type with a string name,
   optional string breed, date of birth, and primary key ID.
   
   .. tabs-realm-languages::

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.swift
            :language: swift

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.m
            :language: objectivec


{+client-database+} applications model data as objects composed of
field-value pairs that each contain one or more :ref:`supported
<ios-supported-property-types>` data types. :term:`Realm objects <Realm
object>` behave like regular Swift or Objective-C objects, but they also
include additional features like :ref:`real-time updating data views
<ios-live-object>` and reactive :ref:`change event handlers
<ios-react-to-changes>`.

Objects of the same class share an object schema that defines the fields
and relationships of those objects. Every {+realm+} has a schema that
consists of one or more object schemas describing the different forms of
object that can be stored in that {+realm+}.

.. tip::

   To learn how to define a Realm object in Swift or Objective-C, see
   :ref:`ios-define-a-realm-object-schema`.

Property Attributes
-------------------

When you declare the property attributes of a class, you can specify whether
or not those properties should be managed by the {+realm+}. Managed properties 
are stored or updated in the database. Conversely, ignored properties are not
stored to the database. You can mix managed and ignored properties 
within a class. 

The syntax to mark properties as managed or ignored varies depending on which
version of the SDK you use.

.. _persisted-property-attributes:

Persisted Property Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.10.0
   The ``@Persisted`` declaration style replaces the ``@objc dynamic``, 
   ``RealmOptional``, and ``RealmProperty`` declaration notations from older 
   versions of the SDK. For an older version of the SDK, see: 
   :ref:`Objective-C Dynamic Property Attributes <objc-dynamic-property-attributes>`.

Declare model properties that you want to store to the database as 
``@Persisted``. This enables them to access the underlying database data.

When you declare any properties as ``@Persisted`` within a class, the other 
properties within that class are automatically ignored.

If you mix ``@Persisted`` and ``@objc dynamic`` property declarations within
a class definition, any property attributes marked as ``@objc dynamic`` will 
be ignored.

.. seealso::

   Our :ref:`Supported Property Types <ios-supported-property-types>` 
   page contains a property declaration cheatsheet.

.. _objc-dynamic-property-attributes:

Objective-C Dynamic Property Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. versionchanged:: 10.10.0
   This property declaration information is for versions of the SDK before 
   10.10.0. 

Declare dynamic {+backend-short+} model properties in the Objective-C runtime. This 
enables them to access the underlying database data. 

You can either:

- Use ``@objc dynamic var`` to declare individual properties
- Use ``@objcMembers`` to declare a class. Then, declare individual 
  properties with ``dynamic var``. 

Use ``let`` to declare ``LinkingObjects``, ``List``, ``RealmOptional`` and 
``RealmProperty``. The Objective-C runtime cannot represent these 
generic properties.

.. versionchanged:: 10.8.0
   ``RealmProperty`` replaces ``RealmOptional``

.. seealso::

   Our :ref:`Supported Property Types <ios-supported-property-types>` 
   page contains a property declaration cheatsheet.

.. _ios-primary-keys:

Primary Keys
------------

You can :ref:`designate <ios-specify-a-primary-key>` a property as the
**primary key** of your class.

Primary keys allow you to efficiently :ref:`find
<ios-find-a-specific-object-by-primary-key>`, update, and :ref:`upsert
<ios-upsert-an-object>` objects.

Primary keys are subject to the following limitations:

- You can define only one primary key per object model.

- Primary key values must be unique across all instances of an object
  in a {+realm+}. {+client-database+} throws an error if you try to
  insert a duplicate primary key value.

- Primary key values are immutable. To change the primary key value of
  an object, you must delete the original object and insert a new object
  with a different primary key value.

- :ref:`Embedded objects <ios-embedded-objects>` cannot define a
  primary key.

.. seealso::

   - :ref:`Usage Examples: Define a Primary Key <ios-specify-a-primary-key>`
   - :ref:`Usage Examples: Find a Specific Object by Primary Key <ios-find-a-specific-object-by-primary-key>`

Indexes
-------

You can create an index on a given property of your model. Indexes speed
up some queries, but have a negative impact on insert and update
operation speed. Indexes also consume additional space on disk to store
the actual index information.

.. tip::

   To learn how to add an index to your Realm object, see
   :ref:`ios-index-a-property`.

Relationships
-------------

{+service+} allows you to define explicit relationships between the
types of objects in a {+app+}. A relationship is an object property that
references another {+service-short+} object rather than one of the
primitive data types. You define relationships by setting the type of an
object property to another object type in the :ref:`property schema
<property-schema>`.

Relationships are direct references to other objects in a {+realm+},
which means that you don't need bridge tables or explicit joins to
define a relationship like you would in a relational database. Instead
you can access related objects by reading and writing to the property
that defines the relationship. {+client-database+} executes read
operations lazily as they come in, so querying a relationship is just as
performant as reading a regular property.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <ios-to-one-relationship>`
- :ref:`One-to-Many Relationship <ios-to-many-relationship>`
- :ref:`Inverse Relationship <ios-inverse-relationship>`

.. _ios-build-view-models-with-realm:

View Models
-----------

.. versionadded:: 10.21.0

You can work with a subset of your {+client-database+} object's properties 
by creating a class projection. A class projection is a class that can pass 
through or transform some or all of your {+realm+} object's properties. 
You can query a class projection, or observe it for changes. 

Class projection enables you to create model abstractions for use in your 
view models. Class projection also :ref:`simplifies testing with 
{+client-database+} <ios-simplify-testing-with-class-projections>`.

.. seealso::

   :ref:`Define and Use Class Projections <ios-define-and-use-class-projections>`


Type Projection
---------------

.. versionadded:: 10.20.0

You can :ref:`map unsupported types to supported types <ios-type-projection>` 
to persist in Realm Database. This enables you to work with Swift types 
that Realm does not support, but store them as types that Realm does support.

You could store a URL as a ``String``, for example, but read it from 
Realm and use it in your application as though it were a URL.

Unique Identifiers
------------------

.. versionadded:: 10.8.0
   ``UUID`` type

``ObjectId`` is a MongoDB-specific 12-byte unique value. ``UUID`` is a 
16-byte globally-unique value. You can :ref:`index <ios-index-a-property>` 
both types, and use either as a :ref:`primary key <ios-specify-a-primary-key>`.

.. note::

   When declaring default values for ``@Persisted`` UUID or ObjectId property 
   attributes, both of these syntax types are valid:

   - ``@Persisted var value: UUID``
   - ``@Persisted var value = UUID()``

   However, the second will result in poorer performance. This is because the
   latter creates a new identifier that is never used any time an object is
   read from the {+realm+}, while the former only creates them when needed.

   ``@Persisted var id: ObjectId`` has equivalent behavior to ``@objc dynamic 
   var _id = ObjectId.generate()``. They both make random ObjectIds. 
   
   ``@Persisted var _id = ObjectId()`` has equivalent behavior to ``@objc 
   dynamic var _id = ObjectId()``. They both make zero-initialized ObjectIds.


.. _ios-size-limitations:

Size Limitations
----------------

Data and string properties cannot hold more than 16MB. To store
larger amounts of data, either:

- Break the data into 16MB chunks, or
- Store data directly on the file system and store paths to the files in the {+realm+}.

{+service-short+} throws a runtime exception if your app attempts to
store more than 16MB in a single property.

To avoid size limitations and a performance impact, it is best not to
store large blobs, such as image and video files, directly in a
{+realm+}. Instead, save the file to a file store and keep only the
location of the file and any relevant metadata in the {+realm+}.


.. _ios-structs:

Swift Structs
-------------

{+client-database+} does not support Swift structs as models for a variety of 
reasons. {+service-short+}'s design focuses on “live” objects. 
This concept is not compatible with value type structs. By design, 
{+service-short+} provides features that are incompatible with these 
semantics, such as:
 
- :ref:`Live data <ios-live-object>`
- :ref:`Reactive APIs <ios-react-to-changes>`
- Low memory footprint of data
- Good operation performance
- :ref:`Lazy and cheap access to partial data <ios-live-queries>`
- Lack of data serialization/deserialization
- :ref:`Keeping potentially complex object graphs synchronized <ios-sync-changes-between-devices>`

That said, it is sometimes useful to detach objects from their backing 
{+realm+}. This typically isn't an ideal design decision. Instead, 
developers use this as a workaround for temporary limitations in our 
library.

You can use key-value coding to initialize an unmanaged object as a copy of 
a managed object. Then, you can work with that unmanaged object
like any other :apple:`NSObject <documentation/objectivec/nsobject>`.

.. code-block:: swift

   let standaloneModelObject = MyModel(value: persistedModelObject)

.. _ios-inheritance:

Model Inheritance
-----------------

You can subclass {+client-database+} models to share behavior between
classes, but there are limitations. In particular, {+service-short+}
does not allow you to:

- Cast between polymorphic classes: subclass to subclass, subclass to parent, parent to subclass
- Query on multiple classes simultaneously: for example, "get all instances of parent class and subclass"
- Multi-class containers: ``List`` and ``Results`` with a mixture of parent and subclass

.. tip::

   Check out the :github:`code samples
   <realm/realm-swift/issues/1109#issuecomment-143834756>` for working
   around these limitations.

.. versionadded:: 10.10.0
   While you can't mix ``@Persisted`` and ``@objc dynamic`` property declarations
   within a class, you can mix the notation styles across base and subclasses. 
   For example, a base class could have a ``@Persisted var foo: Int`` property, 
   and a subclass could have an ``@objc dynamic var bar = 0`` property, with 
   both persisted. However, the ``@objc dynamic`` property would be ignored if
   the ``@Persisted`` property were within the same base or subclass.

Usage
=====

.. _ios-define-a-new-object-type:

Define a New Object Type
------------------------

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can define a Realm object by deriving from the
      :swift-sdk:`Object <Extensions/Object.html>` or
      :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
      class. The name of the class becomes the table name in the realm,
      and properties of the class persist in the database. This makes it
      as easy to work with persisted objects as it is to work with
      regular Swift objects.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can define a Realm object by deriving from the
      :objc-sdk:`RLMObject <Classes/RLMObject.html>` or
      :objc-sdk:`RLMEmbeddedObject
      <Classes/RLMEmbeddedObject.html>` class. The name of the
      class becomes the table name in the realm, and properties of the
      class persist in the database. This makes it as easy to work with
      persisted objects as it is to work with regular Objective-C
      objects.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.define-a-model.m
         :language: objectivec

.. note::

   Class names are limited to a maximum of 57 UTF-8 characters.

.. _ios-declare-a-property:

Declare Properties
------------------

.. tip::

   For reference on which types {+client-database+} supports for use as
   properties, see :ref:`ios-supported-property-types`.

.. tabs::

   .. tab:: Swift
      :tabid: swift

      When declaring non-generic properties, use the ``@Persisted`` annotation. 
      The ``@Persisted`` attribute turns Realm model properties into accessors 
      for the underlying database data.

   .. tab:: Objective C
      :tabid: objective-c

      Declare properties on your object type as you would on a normal
      Objective-C interface.
      
      In order to use your interface in a Realm array, pass your
      interface name to the ``RLM_ARRAY_TYPE()`` macro. You can put this
      at the bottom of your interface's header file. The
      ``RLM_ARRAY_TYPE()`` macro creates a protocol that allows you to
      tag :objc-sdk:`RLMArray <Classes/RLMArray.html>` with your type:

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.array-declaration.m
         :language: objectivec
   
   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      When declaring non-generic properties, use the ``@objc dynamic
      var`` annotation. The ``@objc dynamic var`` attribute turns Realm
      model properties into accessors for the underlying database data.
      If the class is declared as ``@objcMembers`` (Swift 4 or later),
      you can declare properties as ``dynamic var`` without ``@objc``.

      To declare properties of generic types ``LinkingObjects``,
      ``List``, and ``RealmProperty``, use ``let``. Generic properties
      cannot be represented in the Objective‑C runtime, which
      {+client-database+} uses for dynamic dispatch of dynamic
      properties.

.. note::

   Property names are limited to a maximum of 63 UTF-8 characters.

.. _ios-specify-an-optional-required-property:

Specify an Optional/Required Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::

   .. tab:: Swift
      :tabid: swift

      You can declare properties as optional or required (non-optional) using 
      standard Swift syntax.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To declare a given property as required, implement the
      :objc-sdk:`requiredProperties
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)requiredProperties>`
      method and return an array of required property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties.m
         :language: objectivec
   
   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      .. versionchanged:: 10.8.0
         ``RealmProperty`` replaces ``RealmOptional``

      You can declare ``String``, ``Date``, ``Data``, and
      :swift-sdk:`ObjectId <Classes/ObjectId.html>` properties as
      optional or required (non-optional) using standard Swift syntax.
      Declare optional numeric types using the :swift-sdk:`RealmProperty
      <Classes/RealmProperty.html>` 
      type.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.optional-required-properties-objc-dynamic.swift
         :language: swift

      RealmProperty supports ``Int``, ``Float``, ``Double``, ``Bool``,
      and all of the sized versions of ``Int`` (``Int8``, ``Int16``,
      ``Int32``, ``Int64``).

.. _ios-specify-a-primary-key:

Specify a Primary Key
~~~~~~~~~~~~~~~~~~~~~

:ref:`Primary keys <ios-primary-keys>` enforce uniqueness among objects
in a {+realm+}. 

You can efficiently :ref:`find
<ios-find-a-specific-object-by-primary-key>`, update, and :ref:`upsert
<ios-upsert-an-object>` objects with a primary key.

As long as an object is managed by a {+realm+}, that object's primary
key value is immutable.

.. tabs::

   .. tab:: Swift
      :tabid: swift

      Declare the property with :swift-sdk:`primaryKey: true
      <Structs/Persisted.html#/s:10RealmSwift9PersistedVA2A11_PrimaryKey01_A5ValueRpzrlE07primaryE0ACyxGSb_tcfc>`
      on the ``@Persisted`` notation to set the model's primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      Override :objc-sdk:`+[RLMObject primaryKey]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)primaryKey>` to
      set the model’s primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      Override `Object.primaryKey()
      <https://docs.mongodb.com/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)primaryKey>`_
      to set the model’s primary key.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.specify-a-primary-key-objc-dynamic.swift
         :language: swift

.. _ios-index-a-property:

Index a Property
~~~~~~~~~~~~~~~~

Indexes make queries using equality and IN operators faster in exchange
for slightly slower writes. Indexes take up more space in the realm
file. It’s best to only add indexes when optimizing the read performance
for specific situations.

Realm supports indexing for string, integer, boolean, ``Date``, ``UUID``,
``ObjectId``, and ``AnyRealmValue`` properties.

.. versionadded:: 10.8.0
   ``UUID`` and ``AnyRealmValue`` types

.. tabs::

   .. tab:: Swift
      :tabid: swift

      To index a property, declare the property with 
      :swift-sdk:`indexed:true
      <Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)indexedProperties>`
      on the ``@Persisted`` notation.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To index a property, override :objc-sdk:`+[RLMObject
      indexedProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)indexedProperties>`
      and return a list of indexed property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      To index a property, override
      `Object.indexedProperties()
      <https://docs.mongodb.com/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)indexedProperties>`_
      and return a list of indexed property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.index-a-property-objc-dynamic.swift
         :language: swift

.. _ios-ignore-a-property:

Ignore a Property
~~~~~~~~~~~~~~~~~

Ignored properties behave exactly like normal properties. They can’t be
used in queries and won’t trigger Realm notifications. You can still
observe them using :apple:`KVO
<library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html>`.

.. tip::

   Realm automatically ignores read-only properties.

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. deprecated:: 10.10.0 
         ``ignoredProperties()``

      If you don’t want to save a field in your model to its realm,
      leave the ``@Persisted`` notation off the property attribute.

      Additionally, if you mix ``@Persisted`` and ``@objc dynamic`` 
      property declarations within a class, the ``@objc dynamic`` 
      properties will be ignored.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      If you don’t want to save a field in your model to its realm,
      override :objc-sdk:`+[RLMObject ignoredProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)ignoredProperties>`
      and return a list of ignored property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      If you don’t want to save a field in your model to its realm,
      override `Object.ignoredProperties()
      <https://docs.mongodb.com/realm-sdks/swift/10.9.0/Extensions/Object.html#/c:@CM@RealmSwift@@objc(cs)RealmSwiftObject(cm)ignoredProperties>`_
      and return a list of ignored property names.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.ignore-a-property-objc-dynamic.swift
         :language: swift

.. _ios-realm-enum:

Declare Enum Properties
-----------------------

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. versionchanged:: 10.10.0 
         {+service-short+} supports enums of any RawType. Protocol is now 
         ``PersistableEnum`` rather than ``RealmEnum``.

      You can use enums with ``@Persisted`` by marking it as complying with the
      :swift-sdk:`PersistableEnum <Protocols.html#/s:10RealmSwift15PersistableEnumP>` 
      protocol. {+service-short+} supports enums of any RawType.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.realm-object-enum.swift
         :language: swift

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      {+service-short+} supports only ``Int``-backed ``@objc`` enums.

      .. literalinclude:: /examples/generated/code/start/ObjectModels.codeblock.realm-object-enum-objc-dynamic.swift
         :language: swift

      .. seealso::

         `RealmEnum <https://docs.mongodb.com/realm-sdks/swift/10.9.0/Protocols.html#/s:10RealmSwift0A4EnumP>`_


.. _ios-declare-relationship-properties:
.. _ios-client-relationships:

Declare Relationship Properties
-------------------------------

.. _ios-define-a-to-one-relationship-property:
.. _ios-to-one-relationship:

Define a To-One Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object is related in a specific
way to no more than one other object. You define a to-one relationship
for an object type in its :ref:`object schema
<ios-object-models-and-schemas>` by specifying a property where the type
is the related {+service-short+} object type.

Setting a relationship field to null removes the connection between
objects, but {+client-database+} does not delete the referenced object
unless that object is :ref:`embedded <ios-embedded-objects>`.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-one-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-one-relationship.m
         :language: objectivec

.. _ios-define-a-to-many-relationship-property:
.. _ios-to-many-relationship:

Define a To-Many Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship maps one property to zero or more instances
of another object type. For example, you can model a person having any
number of companion dogs as a to-many relationship.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Use :swift-sdk:`List <Classes/List.html>` tagged with your target
      type to define your to-many relationship property.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-many-relationship.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      Use :objc-sdk:`RLMArray <Classes/RLMArray.html>` tagged with your
      target type to define your to-many relationship property.

      .. tip::

         Remember to use the ``RLM_ARRAY_TYPE()`` macro with your type
         to :ref:`declare the RLMArray protocol for your type
         <ios-declare-a-property>`.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.to-many-relationship.m
         :language: objectivec

.. _ios-define-an-inverse-relationship-property:
.. _ios-inverse-relationship:

Define an Inverse Relationship Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **inverse relationship** links an object back to any other objects that refer
to it in a defined to-one or to-many relationship. Relationship definitions are
unidirectional, so you must explicitly define a property in the object's model
as an inverse relationship.

For example, the to-many relationship "User has many Tasks" does not
automatically create the inverse relationship "Task belongs to User". If you
don't specify the inverse relationship in the object model, you would need to
run a separate query to look up the user that is assigned to a given task.

{+client-database+} automatically updates implicit relationships whenever an
object is added or removed in the specified relationship. You cannot manually
set the value of an inverse relationship property.

Since relationships are many-to-one or many-to-many, following inverse
relationships can result in zero, one, or many objects.

You cannot manually set the value of an inverse relationship property.

.. tabs::

   .. tab:: Swift
      :tabid: swift

      To define an inverse relationship, use :swift-sdk:`LinkingObjects
      <Structs/LinkingObjects.html>` in your object model. The
      ``LinkingObjects`` definition specifies the object type and
      property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To define an inverse relationship, use
      :objc-sdk:`RLMLinkingObjects
      <Classes.html#/c:objc(cs)RLMLinkingObjects>` in your object model.
      Override :objc-sdk:`+[RLMObject linkingObjectProperties]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)linkingObjectsProperties>`
      method in your class to specify the object type and property name
      of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship.m
         :language: objectivec

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      To define an inverse relationship, use `LinkingObjects
      <https://docs.mongodb.com/realm-sdks/swift/10.9.0/Structs/LinkingObjects.html>`_ 
      in your object model. The ``LinkingObjects`` definition specifies 
      the object type and property name of the relationship that it inverts.

      .. literalinclude:: /examples/generated/code/start/Relationships.codeblock.inverse-relationship-objc-dynamic.swift
         :language: swift

.. _ios-define-an-embedded-object-property:

Define an Embedded Object Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **embedded object** exists as nested data inside of a single,
specific parent object. It inherits the lifecycle of its parent object
and cannot exist as an independent Realm object. Realm automatically
deletes embedded objects if their parent object is deleted or when
overwritten by a new embedded object instance.

.. note:: Realm Uses Cascading Deletes for Embedded Objects
   
   When you delete a Realm object, any embedded objects referenced by
   that object are deleted with it. If you want the referenced objects
   to persist after the deletion of the parent object, your type should
   not be an embedded object at all. Use a regular :ref:`Realm object
   <ios-define-a-new-object-type>` with a :ref:`to-one relationship
   <ios-define-a-to-one-relationship-property>` instead.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can define an embedded object by deriving from the
      :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`
      class. You can use your embedded object in another model as you
      would any other type.

      .. literalinclude:: /examples/generated/code/start/EmbeddedObjects.codeblock.models.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      You can define an embedded object by deriving from the
      :objc-sdk:`RLMEmbeddedObject
      <Classes/RLMEmbeddedObject.html>` class. You can use your
      embedded object in another model as you would any other type.

      .. literalinclude:: /examples/generated/code/start/EmbeddedObjects.codeblock.models.m
         :language: objectivec

Reference
=========

.. _ios-supported-property-types:

Supported Property Cheat Sheet
------------------------------

.. tabs::

   .. tab:: Swift
      :tabid: swift

      .. versionchanged:: 10.10.0
         ``@Persisted`` property declaration syntax

      You can use the following types to define your object model
      properties:

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40
      
         * - Type
           - Required
           - Optional
         * - Bool
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Bool
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Bool?
         * - Int, Int8, Int16, Int32, Int64
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Int
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Int?
         * - Float
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Float
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Float?
         * - Double
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Double
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Double?
         * - String
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: String
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: String?
         * - Data
           - .. code-block:: swift
                :copyable: false

                @Persisted var value = Data()
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Data?
         * - Date
           - .. code-block:: swift
                :copyable: false

                @Persisted var value = Date()
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: Date?
         * - Decimal128
           - .. code-block:: swift
                :copyable: false

                @Persisted var decimal: Decimal128
           - .. code-block:: swift
                :copyable: false

                @Persisted var decimal: Decimal128?
         * - :swift-sdk:`UUID <Extensions.html#/s:10Foundation4UUIDV>`
           - .. code-block:: swift
                :copyable: false

                @Persisted var uuid: UUID
           - .. code-block:: swift
                :copyable: false

                @Persisted var uuidOpt: UUID?
         * - :swift-sdk:`ObjectId <Classes/ObjectId.html>`
           - .. code-block:: swift
                :copyable: false

                @Persisted var objectId: ObjectId
           - .. code-block:: swift
                :copyable: false

                @Persisted var objectId: ObjectId?
         * - :swift-sdk:`List <Classes/List.html>`
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: List<Type>
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: List<Type?>
         * - :ref:`MutableSet <ios-mutableset-data-type>` 
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: MutableSet<Type>
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: MutableSet<Type?>
         * - :ref:`Map <ios-map>` 
           - .. code-block:: swift
                :copyable: false

                @Persisted var value = Map<String, String>
           - N/A
         * - :ref:`AnyRealmValue <ios-anyrealmvalue-data-type>`
           - .. code-block:: swift
                :copyable: false

                @Persisted var value: AnyRealmValue
           - N/A
         * - User-defined :swift-sdk:`Object <Extensions/Object.html>`
           - N/A
           - .. code-block:: swift
                :copyable: false
           
                @Persisted var myObject: MyClass?
      
      Additionally:

      - :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`-derived types
      - :swift-sdk:`Enum <Protocols.html#/s:10RealmSwift0A4EnumP>`

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

      To use Key-Value Coding with a user-defined object in the ``@Persisted`` 
      syntax, add the ``@objc`` attribute: ``@Persisted @objc var myObject: MyClass?``

      Setting Default Values
      ~~~~~~~~~~~~~~~~~~~~~~

      With the ``@Persisted`` property declaration syntax, you may see a 
      performance impact when setting default values for: 
         
      - ``List``
      - ``MutableSet`` 
      - ``Dictionary``
      - ``Decimal128``
      - ``UUID``
      - ``ObjectId`` 
         
      ``@Persisted var listProperty: List<Int>`` and ``@Persisted var 
      listProperty = List<Int>()`` are both valid, and are functionally 
      equivalent. However, the second declaration will result in poorer 
      performance. 
         
      This is because the List is created when the parent object is 
      created, rather than lazily as needed. For most types, this is 
      a difference so small you can't measure it. For the types listed 
      here, you may see a performance impact when using the second 
      declaration style.

   .. tab:: Obective C
      :tabid: objective-c

      You can use the following types to define your object model
      properties:

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40
      
         * - Type
           - Required
           - Optional
         * - Boolean
           - .. code-block:: objectivec
                :copyable: false

                @property BOOL value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSNumber<RLMBool> *value;
         * - Integer
           - .. code-block:: objectivec
                :copyable: false
                
                @property int value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSNumber<RLMInt> *value;
         * - Float
           - .. code-block:: objectivec
                :copyable: false
                
                @property float value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSNumber<RLMFloat> *value;
         * - Double
           - .. code-block:: objectivec
                :copyable: false
                
                @property double value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSNumber<RLMDouble> *value;
         * - String
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSString *value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSString *value;
         * - Data
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSData *value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSData *value;
         * - Date
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSDate *value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSDate *value;
         * - Decimal128
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMDecimal128 *value;
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMDecimal128 *value;
         * - NSUUID
           - .. code-block:: objectivec
                :copyable: false
                
                @property NSUUID *uuid;
           - 
         * - :objc-sdk:`RLMObjectId <Classes/RLMObjectId.html>`
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMObjectId *objectId;
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMObjectId *objectId;
         * - :objc-sdk:`RLMArray <Classes/RLMArray.html>`
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMArray<MyClass *><MyClass> *items;
           - .. code-block:: objectivec
                :copyable: false
                
                @property RLMArray<MyClass *><MyClass> *items;
         * - User-defined :objc-sdk:`RLMObject<Classes/RLMObject.html>`
           - N/A
           - .. code-block:: objectivec
                :copyable: false
                
                @property MyClass *value;

      Additionally:

      - Integral types ``int``, ``NSInteger``, ``long``, ``long long``
      - :objc-sdk:`RLMEmbeddedObject<Classes/RLMEmbeddedObject.html>`-derived types

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.

   .. tab:: Swift pre-10.10.0
      :tabid: swift-pre-10.10.0

      .. versionchanged:: 10.8.0
         ``RealmProperty`` replaces ``RealmOptional``

      You can use the following types to define your object model
      properties:

      .. list-table::
         :header-rows: 1
         :stub-columns: 1
         :widths: 20 40 40
      
         * - Type
           - Required
           - Optional
         * - Bool
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = false
           - .. code-block:: swift
                :copyable: false
           
                let value = RealmProperty<Bool?>()
         * - Int, Int8, Int16, Int32, Int64
           - .. code-block:: swift
                :copyable: false

                @objc dynamic var value = 0
           - .. code-block:: swift
                :copyable: false
           
                let value = RealmProperty<Int?>()
         * - Float
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: Float = 0.0
           - .. code-block:: swift
                :copyable: false
           
                let value = RealmProperty<Float?>()
         * - Double
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: Double = 0.0
           - .. code-block:: swift
                :copyable: false
           
                let value = RealmProperty<Double?>()
         * - String
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value = ""
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: String? = nil
         * - Data
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value = Data()
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: Data? = nil
         * - Date
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value = Date()
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: Date? = nil
         * - Decimal128
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var decimal: Decimal128 = 0
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var decimal: Decimal128?
         * - :swift-sdk:`UUID <Extensions.html#/s:10Foundation4UUIDV>`
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var uuid = UUID()
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var uuidOpt: UUID?
         * - :swift-sdk:`ObjectId <Classes/ObjectId.html>`
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var objectId = ObjectId.generate()
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var objectId: ObjectId?
         * - :swift-sdk:`List <Classes/List.html>`
           - .. code-block:: swift
                :copyable: false
           
                let value = List<Type>()
           - 
         * - :ref:`MutableSet <ios-mutableset-data-type>` 
           - .. code-block:: swift
                :copyable: false
           
                let value = MutableSet<Type>()
           - 
         * - :ref:`Map <ios-map>` 
           - .. code-block:: swift
                :copyable: false
           
                let value = Map<String, String>()
           - 
         * - :ref:`AnyRealmValue <ios-anyrealmvalue-data-type>`
           - .. code-block:: swift
                :copyable: false
           
                let value = RealmProperty<AnyRealmValue>()
           - N/A
         * - User-defined :swift-sdk:`Object <Extensions/Object.html>`
           - N/A
           - .. code-block:: swift
                :copyable: false
           
                @objc dynamic var value: MyClass?
      
      Additionally:

      - :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>`-derived types
      - :swift-sdk:`Enum <Protocols.html#/s:10RealmSwift0A4EnumP>`

      You can use ``RealmProperty <T?>`` to
      represent integers, doubles, and other types as optional.

      ``CGFloat`` properties are discouraged, as the type is not
      platform independent.
