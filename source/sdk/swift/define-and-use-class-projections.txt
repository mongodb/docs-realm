.. _ios-define-and-use-class-projections:

==========================================
Define and Use Class Projections - iOS SDK
==========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. versionadded:: 10.21.0

A class projection is a class that passes through or transforms some or 
all of your {+client-database+} object's properties. Class projection 
enables you to build view models that use an abstraction of your object 
model. This simplifies using and testing {+client-database+} objects in 
your application.

With class projection, you can use a subset of your object's properties 
directly in the UI or transform them. When you use a class projection for 
this, you get all the benefits of {+client-database+}'s live objects:

- The class-projected object live updates
- You can observe it for changes
- You can apply changes directly to the properties in write transactions

.. _ios-class-projection-object-model:

About These Examples
--------------------

The examples in this page use a simple data set. The two Realm object 
types are ``Person`` and an embedded object ``Address``. A ``Person`` has 
a first and last name, an optional ``Address``, and a list of friends 
consisting of other ``Person`` objects. An ``Address`` has a city and country.

See the schema for these two classes, ``Person`` and ``Address``, below:

.. literalinclude:: /examples/generated/code/start/ClassProjection.codeblock.models.swift
   :language: swift

.. _ios-define-a-class-projection:

Define a Class Projection
-------------------------

Define a class projection by creating a class of type :swift-sdk:`Projection 
<Classes/Projection.html>`. Specify the :swift-sdk:`Object <Extensions/Object.html>` 
or :swift-sdk:`EmbeddedObject <Extensions/EmbeddedObject.html>` base whose
properties you want to use in the class projection. Use the ``@Projected`` 
property wrapper to declare a property that you want to project from a 
``@Persisted`` property on the base object.

.. note::

   When you use a :ref:`List <ios-list-collections>` or a :ref:`MutableSet 
   <ios-mutableset-data-type>` in a class projection, the type in the 
   class projection should be :swift-sdk:`ProjectedCollection <>`.

.. literalinclude:: /examples/generated/code/start/ClassProjection.codeblock.declare-class-projection.swift
   :language: swift

When you define a class projection, you can transform the original ``@Persisted``
property in several ways:

- Passthrough: the property is the same name and type as the original object
- Rename: the property has the same type as the original object, but a 
  different name
- Keypath resolution: use keypath resolution to access properties of the
  original object, including embedded object properties 
- Collection mapping: Project :ref:`lists <ios-list-collections>` or 
  :ref:`mutable sets <ios-mutableset-data-type>` of ``Object`` s or 
  ``EmbeddedObject`` s as a collection of primitive values
- Exclusion: when you use a class projection, the underlying object's 
  properties that are not ``@Projected`` through the class projection are 
  excluded. This enables you to watch for changes to a class projection 
  and not see changes for properties that are not part of the class 
  projection. 

.. _ios-use-class-projection-in-a-view:

Use a Class Projection in a View
--------------------------------

Query for a Class Projection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To query for class projections in a realm, pass the metatype instance 
``YourProjectionName.self`` to :swift-sdk:`Realm.objects(_:)
<Structs/Realm.html#/s:10RealmSwift0A0V7objectsyAA7ResultsVyxGxmSo0aB6ObjectCRbzlF>`.
This returns a :swift-sdk:`Results <Structs/Results.html>` object
representing all of the class projection objects in the realm.

.. literalinclude:: /examples/generated/code/start/ClassProjection.codeblock.retrieve-data-through-class-projection.swift
   :language: swift

.. tip::

   Don't do derived queries on top of class projection results. Instead, run a 
   query against the Realm object directly and then project the result. If you 
   try to do a derived query on top of class projection results, querying a 
   field with the same name and type as the original object works, but querying 
   a field with a name or type that isn't in the original object fails.

.. _ios-make-changes-to-class-projection-properties:

Change Class Projection Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can make changes to a class projection's properties in a write transaction.

.. literalinclude:: /examples/generated/code/start/ClassProjection.codeblock.change-class-projection-property-value-in-a-write.swift
   :language: swift

.. _ios-use-class-projection-in-swiftui-view:

Use a Class Projection in a SwiftUI View
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use class projection in SwiftUI views. Class projection works with 
SwiftUI property wrappers:

- :swift-sdk:`ObservedRealmObject <Structs/ObservedRealmObject.html>`
- :swift-sdk:`ObservedResults <Structs/ObservedResults.html>`

You can access the class projection's properties to populate UI elements.

.. seealso::

   For a complete example of using a class projection in a SwiftUI 
   application, see :github:`the Projections example app 
   <realm/realm-cocoa/tree/master/examples#projections>`.

.. _ios-react-to-changes-to-a-class-projection:

React to Changes to a Class Projection
--------------------------------------

Like other {+realm+} objects, you can :ref:`react to changes <ios-react-to-changes>`
to a class projection. When you register a class projection change listener, 
you see notifications for changes made through the class projection object 
directly. You also see notifications for changes to the underlying object's 
properties that project through the class projection object.

Properties on the underlying object that are not ``@Projected`` in the 
class projection do not generate notifications.

This notification block fires for changes in:

- ``Person.firstName`` property of the class projection's underlying 
  ``Person`` object, but not changes to ``Person.lastName`` or 
  ``Person.friends``.
- ``PersonProjection.firstName`` property, but not another class projection 
  that uses the same underlying object's property. 

.. literalinclude:: /examples/generated/code/start/ClassProjection.codeblock.register-a-class-projection-change-listener.swift
   :language: swift
