.. _ios-type-projection:

===========================
Type Projection - Swift SDK
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


.. versionadded:: 10.20.0

Overview
--------

The Swift SDK supports type mapping between a data type supported by 
Realm and a type not supported by Realm. This enables developers to use
"projected" types as managed properties as though they are supported types.

Declare Type Projections
------------------------

To use type projection with Realm:

1. Use one of Realm's custom type protocols to map an unsupported data type 
   to a type that Realm supports
#. Use the projected types as @Persisted properties in the Realm object 
   model

.. _ios-conform-to-type-projection-protocol:

Conform to the Type Projection Protocol
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can map an unsupported data type to a :ref:`type that Realm supports 
<ios-supported-property-types>` using one of the Realm type projection protocols.

The Swift SDK provides two type projection protocols:

- CustomPersistable
- FailableCustomPersistable

Use :swift-sdk:`CustomPersistable <Protocols/CustomPersistable.html>` 
when there is no chance the conversion can fail.

Use :swift-sdk:`FailableCustomPersistable <Protocols/FailableCustomPersistable.html>` 
when it is possible for the conversion to fail. 

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.custom-persistable-protocols.swift
   :language: swift

.. seealso::

   These are protocols modeled after Swift's built-in :apple:`RawRepresentable 
   <documentation/swift/rawrepresentable>`.

.. _ios-persisted-types:

Supported PersistedTypes
````````````````````````

The ``PersistedType`` can use any of the primitive types that the 
:ref:`Swift SDK supports <ios-supported-property-types>`. It can also be 
an :ref:`Embedded Object <ios-embedded-objects>`.

``PersistedType`` cannot be an optional or a :ref:`collection 
<ios-client-collections>`. However you can use the mapped type as an 
optional or collection property in your object model.

.. code-block:: swift
   :copyable: false

   extension URL: FailableCustomPersistable {
      // The `PersistedType` cannot be an optional, so this is not a valid
      // conformance to the FailableCustomPersistable protocol.
      public typealias PersistedType = String?
      ...
   }

   class Club: Object {
      @Persisted var id: ObjectId
      @Persisted var name: String
      // Although the `PersistedType` cannot be optional, you can use the
      // custom-mapped type as an optional in your object model.
      @Persisted var url: URL?
   }

.. _ios-use-type-projection-in-the-model:

Use Type Projection in the Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A type that conforms to one of the type projection protocols can be used with 
the ``@Persisted`` property declaration syntax introduced in Swift SDK 
version 10.10.0. It does not work with the ``@objc dynamic`` syntax.

You can use projected types for:

- Top-level types
- Optional versions of the type
- The types for a collection

When using a ``FailableCustomPersistable`` as a property, define it as an
optional property. When it is optional, the ``FailableCustomPersistable``
protocol maps invalid values to ``nil``. When it is a required property, it is 
force-unwrapped. If you have a value that can't be converted to the projected 
type, reading that property throws an unwrapped fail exception.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.use-type-projection-in-objects.swift
   :language: swift

When your model contains projected types, you can :ref:`create the object 
<ios-create-a-new-object>` with values using the persisted type, or 
by assigning to the field properties of an initialized object using the 
projected types.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.create-objects-with-type-projection.swift
   :language: swift

Type Projection in the Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you declare your type as conforming to a type projection protocol, you
specify the type that should be persisted in {+realm+}. For example, if 
you map a custom type ``URL`` to a persisted type of ``String``, a ``URL``
property appears as a ``String`` in the schema, and dynamic access to the 
property acts on strings.

The schema does not directly represent mapped types. Changing a property
from its persisted type to its mapped type, or vice versa, does not require
a migration.

.. figure:: /images/projected-types-persisted-types-in-schema.png
   :alt: Realm Studio screenshot showing the field types using persisted types.

Access Projected Types
----------------------

When you access projected types in Realm, this access is often based on the 
persisted type. 

Queries on Realm Objects
~~~~~~~~~~~~~~~~~~~~~~~~

When working with projected types, queries operate on the persisted type. 
However, you can use the mapped types interchangeably with the persisted 
types in arguments in most cases. The exception is queries on embedded 
objects.

.. tip::

   Projected types support :ref:`sorting and aggregates <ios-filter-data>` where 
   the persisted type supports them.

.. literalinclude:: /examples/generated/code/start/TypeProjection.snippet.query-objects-with-type-projection.swift
   :language: swift

Queries on Embedded Objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can query embedded types on the supported property types within the 
object using memberwise equality. 

Object link properties support equality comparisons, but do not support 
memberwise comparisons. You can query embedded objects for memberwise
equality on all primitive types. You cannot perform memberwise comparison 
on objects and collections.

Dynamic APIs
~~~~~~~~~~~~

Because the schema has no concept of custom type mappings, reading data via
any of the dynamic APIs gives the underlying persisted type. Realm does 
support writing mapped types via a dynamic API, and converts the projected
type to the persisted type.

The most common use of the dynamic APIs is migration. You can write projected
types during migration, and Realm converts the projected type to the persisted
type. However, reading data during a migration gives the underlying persisted
type.
