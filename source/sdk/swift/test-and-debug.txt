.. _ios-test-and-debug:

==========================
Test and Debug - Swift SDK
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Testing
-------

.. _ios-test-using-a-default-realm:

Test Using a Default Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~

The easiest way to use and test {+client-database+}-backed applications 
is to use the default {+realm+}. To avoid overriding application data or 
leaking state between tests, set the default {+realm+} to a new file for 
each test.

.. literalinclude:: /examples/generated/code/start/TestingAndDebugging.codeblock.test-base-case.swift
     :language: swift

.. _ios-test-injecting-realm-instances:

Injecting Realm Instances
~~~~~~~~~~~~~~~~~~~~~~~~~

Another way to test {+client-db-short+}-related code is to have all the 
methods you’d like to test accept a {+realm+} instance as an argument. This 
enables you to pass in different {+realms+} when running the app and when 
testing it. 

For example, suppose your app has a method to ``GET`` a user profile 
from a JSON API. You want to test that the local profile is properly 
created:

.. literalinclude:: /examples/generated/code/start/TestingAndDebugging.codeblock.test-inject-realm.swift
     :language: swift

.. _ios-test-targets:

Test Targets
~~~~~~~~~~~~

Don't link the {+client-db-short+} framework directly to your test target. 
This can cause your tests to fail with an exception message "Object type 
'YourObject' is not managed by the Realm." Unlinking {+client-db-short+} 
from your test target should resolve this issue.

Compile your model class files in your application or framework targets; 
don't add them to your unit test targets. Otherwise, those classes are 
duplicated when testing, which can lead to difficult-to-debug issues.

Expose all the code that you need for testing to your unit test 
targets. Use the ``public`` access modifier or :apple:`@testable <library/archive/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/04-writing_tests.html>`.

Since you’re using {+client-db-short+} as a dynamic framework, you’ll 
need to make sure your unit test target can find {+client-db-short+}. 
Add the parent path to ``RealmSwift.framework`` to your unit test’s 
“Framework Search Paths”.

.. _ios-debugging:

Debugging
---------

.. _ios-debug-using-realm-studio:

Debug Using Realm Studio
~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Realm Studio <realm-studio>` enables you to open and edit local 
{+realms+}. It supports Mac, Windows and Linux.

.. _ios-lldb:

LLDB
~~~~

Debugging apps using {+client-db-short+}'s Swift API must be done through 
the LLDB console.

Although the LLDB script allows inspecting the contents of your {+realm+} 
variables in Xcode’s UI, this doesn’t yet work for Swift. Those 
variables will show incorrect data. Instead, use LLDB’s ``po``
command to inspect the contents of data stored in a {+realm+}.

.. _ios-resolve-build-issues:

Resolve Build Issues
--------------------

Some developers experience build issues after installing {+backend+} via 
CocoaPods or Carthage. Common causes of these issues include:

- Installation issues:

  - Initial install failed
  - Using an unsupported version of the dependency manager

- Build tool issues:

  - Build tools have stale caches
  - Updating build tool versions

- Making changes to your project setup, such as:

  - Adding a new target 
  - Sharing dependencies across targets

A fix that often clears these issues is to delete derived data 
and clean the Xcode build folder.

.. tabs::

   .. tab:: CocoaPods
      :tabid: cocoapods

      .. include:: /includes/steps/troubleshoot-cocoapods-install.rst

   .. tab:: Carthage
      :tabid: carthage

      .. include:: /includes/steps/troubleshoot-carthage-install.rst