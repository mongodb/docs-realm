.. _ios-flexible-sync:

=======================
Flexible Sync - iOS SDK
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

To use Flexible Sync in an iOS client:

- Configure Flexible Sync on the backend [LINK TO BACKEND CONFIG PAGE WHEN COMPLETE]
- :ref:`Initialize the app <ios-quick-start-init-app>`
- :ref:`Authenticate a user <ios-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <ios-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <ios-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

.. seealso::

   This page details how to manage subscriptions for Flexible Sync. 
   
   For general information about using Realm Sync with the Swift SDK, 
   see: :ref:`Sync Changes Between Devices <ios-sync-changes-between-devices>`.

   For information about setting up permissions for Flexible Sync, see:
   :ref:`Flexible Sync Rules & Permissions <flexible-sync-rules-and-permissions>`.

About the Examples on This Page
-------------------------------
   
The examples in this page use a simple data set for a
task list app. The two Realm object types are ``Team``
and ``Task``. A ``Task`` has a ``taskName``, assignee's name, and
completed flag. There is also an arbitrary number for
priority -- higher is more important -- and a count of
minutes spent working on it. A ``Team`` has a ``teamName``, 
zero or more ``Tasks``, and a list of ``members``.

.. code-block:: swift

   class Task: Object {
      @Persisted(primaryKey: true) var id: ObjectId
      @Persisted var taskName: String
      @Persisted var assignee: String?
      @Persisted var completed: Bool
      @Persisted var progressMinutes: Int
   }

   class Team: Object {
      @Persisted(primaryKey: true) var id: ObjectId
      @Persisted var teamName: String
      @Persisted var tasks: List<Task>
      @Persisted var members: List<String>
   }


.. _ios-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When you configure Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
``subscriptions`` API to manage a set of subscriptions to specific queries on 
queryable fields.

You can:

- Add subscriptions
- Check subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions for an object type

Data matching the subscription, where the user has the appropriate 
permissions, syncs between devices and the backend application.

You can specify an optional a string name for your subscription.

When you create a subscription, Realm looks for data matching a query on a
specific object type. You can have multiple subscription sets on different 
object types. You can also have multiple queries on the same object type.

Subscription names must be unique. If you do not explicitly name a 
subscription, and instead subscribe to the same unnamed query more than
once, Realm ignores the duplicate query subscriptions.

.. example::

   You can create a subscription with an explicit name. Then, you can
   search for that subscription by name to update or remove it.

   .. code-block:: swift 

      QuerySubscription<Task>(name: "long-running-completed") {
         $0.complete == true && $0.progressMinutes > 120
      }

   If you do not specify a ``name`` for a subscription, you can search 
   for the subscription by the query string.

   .. code-block:: swift

      QuerySubscription<Team> {
         $0.teamName == "Developer Education"
      }

.. _ios-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Add a subscription in a subscriptions write block. You append each
new subscription to the client's Realm subscriptions.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   if subscriptions.isEmpty {
      try! subscriptions.write {
         subscriptions.append {
            QuerySubscription<Team> {
               $0.teamName == "Developer Education"
            }
         }
      }
   }

.. _ios-sync-check-subscription-state:

Check Subscription State
~~~~~~~~~~~~~~~~~~~~~~~~

You can watch the state of the subscription set with the ``SyncSubscriptionState``
enum. You can use subscription state to:

- Trigger error handling
- Show a progress indicator while data is downloading
- Find out when a subscription set becomes superseded

Subscription state is only one component of changing a subscription.
After the subscription change, the realm syncs to resolve any updates to
the data as a result of the subscription change. This could mean adding 
or removing data from the synced realm. You can wait for a synced 
realm to update data by using the ``waitForDownloads(for: realm)``.
If you want to react to subscription state changes by redrawing a UI, 
for example, or taking another action based on changes to the data set,
wait for the realm to sync after making subscription updates.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   try! subscriptions.write {
      subscriptions.remove {
         QuerySubscription<Task> {
            $0.assignee == "Joe Doe"
         }
      }
   }
   subscriptions?.observe { state in
      if case .complete = state {
            // Do something when state is complete
      }
   }

   // After the state change, wait for the synced realm to update data
   waitForDownloads(for: realm)

Superseded
``````````

``superceded`` is a ``SyncSubscriptionState`` that can occur when another
thread writes a subscription on a different instance of the 
subscription set. If the state becomes ``superceded``, you must obtain 
a new instance of the subscription set before you can write to it.

.. _ios-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update subscriptions using ``update``. In this example, we 
search for a subscription matching our query and then update that 
subscription with a new query. 

.. code-block:: swift

   let subscriptions = realm.subscriptions
   let query = { QuerySubscription<Team> { $0.teamName == "Developer Education" } }
   if let subscription = subscriptions.first(where: query) {
      try! subscriptions.write {
         subscription.update {
            QuerySubscription<Team>(name: "docs-team") {
               $0.teamName == "Documentation"
            }
         }
      }
   }

You can also search for a subscription by name. In this example, we 
search for a subscription by name and then update that subscription with
a new query.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   let foundSubscription = subscriptions.first(named: "docs-team")
   try! subscriptions.write {
      foundSubscription.update {
         QuerySubscription<Team>(name: "docs-team") {
            $0.teamName == "Documentation"
         }
      }
   }

.. _ios-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions, you can:

- Remove a single subscription query
- Remove all subscriptions to a specific object type

When you remove a subscription query, Realm asynchronously removes the
synced data that matched the query from the client device.

Remove a Single Subscription
````````````````````````````

You can remove a specific subscription query in a subscription write block 
using ``remove``. Specify the query by name or use the query as a string 
name to find the appropriate query subscription to remove.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   let foundSubscription = subscriptions.first(named: "docs-team")   
   try! subscriptions.write {
      subscriptions.remove(foundSubscription!)
   }

Remove All Subscriptions to an Object Type
``````````````````````````````````````````

If you want to remove all subscriptions to a specific object type, use the 
``removeAll`` method with ``ofType`` in a subscription write block.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   try! subscriptions.write {
      subscriptions.removeAll(ofType: Team.self)
   }

Remove All Subscriptions
````````````````````````

To remove all subscriptions from the subscription set, use the ``removeAll``
method in a subscription write block.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   try! subscriptions.write {
      subscriptions.removeAll()
   }
