.. _ios-flexible-sync:

=======================
Flexible Sync - iOS SDK
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your {+app+}.

To use Flexible Sync in an iOS client:

- Configure Flexible Sync on the backend [LINK TO BACKEND CONFIG PAGE WHEN COMPLETE]
- :ref:`Initialize the app <ios-quick-start-init-app>`
- :ref:`Authenticate a user <ios-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <ios-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <ios-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

.. include:: /includes/note-flexible-sync-preview.rst

.. seealso::

   This page details how to manage subscriptions for Flexible Sync. For 
   general information about using Realm Sync, see: :ref:`Sync Changes 
   Between Devices <ios-sync-changes-between-devices>`.

.. _ios-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When you configure Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
``subscriptions`` API to manage a set of subscriptions to specific queries on 
queryable fields.

You can:

- Add subscriptions
- Check subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions of a type

Data matching the subscription, where the user has the appropriate 
permissions, syncs between devices and the backend application.

A Realm subscription has:

- Identifier
- Name
- Created and updated dates

You can specify a string name for your subscription. If you do not give your
subscription a name, it uses the value of the query as a string name.

When you create a subscription, Realm looks for data matching a query on a
specific object type. You can have subscriptions on several different object 
types, or several queries on the same object type, in your Flexible Sync 
subscriptions.

.. example::

   When you create a subscription with no explicit name, the name becomes
   a string version of the query. In this example, it's 
   ``$0.name == "Developer Education"``.

   .. code-block:: swift

      QuerySubscription<Team> {
         $0.name == "Developer Education"
      }

   You can also create a subscription with an explicit name. Then, you can
   search for that subscription by name to update or remove it.

   .. code-block:: swift 

      QuerySubscription<Task>(name: "long-running-completed") {
         $0.status == "complete" && $0.progressMinutes > 120
      }

.. _ios-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Add a subscription in a subscriptions write block. You append each
new subscription to the client's realm subscriptions.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   if subscriptions.isEmpty {
      try await subscriptions.write {
         try subscriptions.append {
            QuerySubscription<Team> {
               $0.name == "Developer Education"
            }
         }
      }
      try await subscriptions.waitForAsync()
   }

.. _ios-sync-check-subscription-state:

Check Subscription State
~~~~~~~~~~~~~~~~~~~~~~~~

You can watch the state of the subscription set with the ``SyncSubscriptionState``
enum. You can use subscription state to:

- Trigger error handling
- Show a progress indicator while data is downloading
- Find out when a subscription set is superseded and you should obtain a
  new instance of the subscription set to write a subscription change

.. code-block:: swift

   let subscriptions = realm.subscriptions
   try await subscriptions.write {
      try subscriptions.remove {
         QuerySubscription<Task> {
            $0.owner == "Joe Doe"
         }
      }
   }
   for await state in subscriptions.state {
      // Notify state changes
      print(state)
   }

.. _ios-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update subscriptions using ``update``. In this example, we 
search for a subscription matching our query, and then update that 
subscription with a new query. 

.. code-block:: swift

   let subscriptions = realm.subscriptions
   let query = { QuerySubscription<Team> { $0.name == "Developer Education" } }
   if let subscription = subscriptions.first(where: query) {
      try subscriptions.write {
         subscription.update {
            QuerySubscription<Team>(name: "docs-team") {
               $0.name == "Documentation"
            }
         }
      }
   }

.. _ios-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions, you can:

- Remove a single subscription query
- Remove all subscriptions of a specific type

When you remove a subscription query, the server asynchronously removes 
synced data from the client device.

Remove a Single Subscription
````````````````````````````

You can remove a specific subscription query in a subscription write block 
using ``remove``. Specify the query by name, or use the query as a string 
name to find the appropriate query subscription to remove.

.. code-block:: swift

   let subscriptions = realm.subscriptions
   if let subscription = subscriptions.first(where: { $0.name == "docs-team" }) {   
      try subscriptions.write {
         try subscriptions.remove(subscription)
      }
   }

Remove All Subscriptions of a Type
``````````````````````````````````

If you want to remove all subscriptions to a specific object type, use the 
``removeAll`` method in a subscription write block.

.. code-block:: swift

   let subscriptions = ream.subscriptions
   try await subscriptions.write {
      try subscriptions.removeAll(ofType: Team.self)
   }
   try await subscriptions.waitforAsync()
