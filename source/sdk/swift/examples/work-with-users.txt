.. _ios-work-with-users:

===========================
Work with Users - Swift SDK
===========================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:

   Authenticate Users </sdk/swift/examples/users/authenticate-users>
   Custom User Data </sdk/swift/examples/users/custom-user-data>
   User Metadata </sdk/swift/examples/users/user-metadata>
   Manage Email/Password Users </sdk/swift/examples/users/manage-email-password-users>
   Multi-User Applications </sdk/swift/examples/users/multi-user-applications>
   Link User Identities </sdk/swift/examples/users/link-user-identities>

Overview
--------

When you use {+backend+} to back your client {+app+}, you get access to a
:ref:`user object <user-objects>`. Use client SDK methods with this user 
object to conveniently:

- Log users in and out
- Create and update custom user data
- Read user metadata from social login providers

.. _ios-access-the-app-client:

Log Users In and Out
--------------------

Use one or more :ref:`authentication providers <auth-providers>` to :ref:`log 
users in and out <ios-authenticate-users>` of your client app. You can: 

- Log users in with an existing social account, such as Apple, Facebook,
  or Google. 
- Create new user accounts with {+backend-short+} email/password management,
  or your own custom function or custom JWT user management.
- Enable anonymous users to let users access your {+app+} without persisting
  user data.

When you have a logged-in user, SDK methods enable you to:

- :ref:`Open a synced {+realm+} <ios-login-and-open-realm>` with the user's 
  configuration object
- :ref:`Run a backend function <ios-call-a-function>` as the logged-in user
- :ref:`Log the user out <ios-logout>`
- :ref:`Change the active user <ios-change-the-active-user>` in a multi-user 
  application
- :ref:`Remove a user <ios-remove-a-user-from-the-device>` from the device
- :ref:`Link multiple identities <ios-link-user-identities>` to a single 
  user object

{+service-short+} caches credentials on the device upon successful login in a 
``sync_metadata.realm`` file. You can bypass the login flow and access the 
cached user to open a {+realm+} or call a function upon subsequent app opens.

.. _ios-app-work-with-custom-user-data:

Read and Update Custom User Data
--------------------------------

You can :ref:`associate custom data <custom-user-data>` with a user object, 
such as a preferred language or local timezone, and read it from your client 
application. A user object has a ``customData`` property that you can use 
to :ref:`access custom user data <ios-read-a-users-custom-data>`. 

To :ref:`create <ios-create-a-users-custom-data-document>` and :ref:`update 
<ios-update-a-users-custom-data>` custom user data, you must access 
your MongoDB data source directly. {+backend-short+} does not offer a SDK 
method to create or update this custom user data; it's a read-only property.

.. _ios-app-read-user-metadata-from-login-providers:

Read User Metadata from Login Providers
---------------------------------------

Some authentication providers enable developers to access user metadata, such
as full name or email address. When you configure these metadata fields on 
the {+backend+} application, you can read this medata from your client app. A
user object has a ``profile`` property that you can use to :ref:`access 
user metadata <ios-read-user-metadata>`.
