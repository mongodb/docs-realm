.. _ios-link-user-identities:

================================
Link User Identities - Swift SDK
================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} provides :ref:`multiple ways <authentication-providers>` for users
to log into your application. Because each method of authentication corresponds
to a unique user identity, {+service-short+} lets you merge multiple identities
corresponding to a single user into one user identity.

Example
-------

For instance, consider an application that enables users to authenticate via
:ref:`anonymous authentication <anonymous-authentication>` so they may explore
functionality without linking to an existing SSO provider or generating a new
password. When that user finally decides to create a full account with an SSO
provider or email/password authentication, you need some way of persisting the
user's original anonymous identity with their new permanent identity.

You can link identities using the ``linkUser(credentials:Credentials)`` method
of the ``User`` object of a logged in User.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/MultipleUsers.codeblock.link-identity.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/MultipleUsers.codeblock.link-identity-objc.m
         :language: objectivec

.. _ios-async-await-link-user-identities:

Async/Await Example
-------------------

.. versionadded:: 10.16.0

If you're using Swift 5.5 with an iOS target of 15.0 or higher, you can use 
the :swift-sdk:`async/await version of User.linkUser<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE8linkUser11credentials7Combine6FutureCyABs5Error_pGAC11CredentialsO_tF>`.

.. literalinclude:: /examples/generated/code/start/MultipleUsers.codeblock.async-link-identity.swift
   :language: swift
