.. _ios-swiftui-examples:

===============================
Use Realm Database with SwiftUI
===============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

The Realm Swift SDK offers features to simplify development with SwiftUI.
This page provides an overview of those features.

.. seealso::

   - :ref:`SwiftUI Quick Start Example App <ios-swiftui-quick-start>`
   - `Realm Swift SDK API Reference <https://www.mongodb.com/docs/realm-sdks/swift/latest>`__

Requirements
------------

- Xcode project using the SwiftUI "App" template. To use all of the Realm
  Swift SDK's SwiftUI features, the minimum iOS target is 15.0. Some features
  are compatible with older versions of iOS.
- :ref:`Install the Swift SDK <ios-install>`. Use the most recent version of 
  the Realm Swift SDK to get all of the features and enhancements for SwiftUI.

.. _ios-open-realm-swiftui:

Open a Realm
------------

The Swift SDK provides several different property wrappers that make it 
easier to open a {+realm+}. 

You can:

- :ref:`Implicitly open a {+realm+} <ios-open-realm-with-configuration-swiftui>` 
  with a ``defaultConfiguration``, or specify a different configuration. 
  This works for both non-synced and synced {+realms+}.
- :ref:`Always download changes before opening a synced {+realm+} 
  <swiftui-async-open-synced-realm>`, which times out when the user is offline.
- :ref:`Open a synced {+realm+} even when a user is offline 
  <swiftui-auto-open-synced-realm>`, but may lack the most recent data.

.. _ios-open-realm-with-configuration-swiftui:

Open a Realm with a Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you use :swift-sdk:`@ObservedRealmObject <Structs/ObservedRealmObject.html>` 
or :swift-sdk:`@ObservedResults <Structs/ObservedResults.html>`, these 
property wrappers implicitly open a {+realm+} and retrieve the specified 
objects or results.

.. literalinclude:: /examples/generated/swiftui/local/QuickStart.snippet.implicitly-open-realm.swift
   :language: swift

When you do not specify a configuration, these property wrappers use the 
:swift-sdk:`defaultConfiguration <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>`. 
However, you can :ref:`use environment injection to specify a different 
configuration <ios-swiftui-inject-realm-configuration>`.

.. _ios-open-synced-realm-swiftui:

Open a Synced Realm
~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.12.0

These SwiftUI property wrappers open synced {+realms+} and populate views.
The main difference between these property wrappers is whether the user 
must be online:

- To download updates from your Atlas App Services app before opening a {+realm+}, use the 
  :ref:`@AsyncOpen <swiftui-async-open-synced-realm>` property wrapper. This 
  requires the user to have a network connection. 
- To open a synced {+realm+} regardless of whether the user has a network 
  connection, use the :ref:`@AutoOpen <swiftui-auto-open-synced-realm>` 
  property wrapper. This property wrapper enables developers to design 
  offline-first capabilities into their apps.

.. _swiftui-async-open-synced-realm:

Download Changes Before Opening a Synced Realm
``````````````````````````````````````````````

Use the :swift-sdk:`@AsyncOpen <Structs/AsyncOpen.html>` property wrapper 
for apps that require up-to-date information from the server, such as game 
apps with live leaderboards that the user can play on multiple devices. This 
ensures the user is never using the app with stale data.

.. tabs::

   .. tab:: Flexible Sync
      :tabid: flex-sync

      .. versionadded:: 10.27.0

      Realm Swift SDK version 10.27.0 adds :ref:`Flexible Sync <flexible-sync>` 
      versions of the property wrappers to open Realm with SwiftUI. You can 
      add subscription queries in ``.onAppear`` after opening the realm.

      .. literalinclude:: /examples/generated/swiftui/flex-sync/SwiftUIFlexSyncExampleApp.snippet.fs-property-wrapper-sans-config-comment.swift
         :language: swift

      .. versionadded:: 10.28.0

      You can create a :swift-sdk:`flexibleSyncConfiguration() 
      <https://www.mongodb.com/docs/realm-sdks/swift/latest/Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>` 
      with the ``initialSubscriptions`` parameter. You can use this parameter 
      to :ref:`subscribe to Flexible Sync queries 
      <ios-sync-subscribe-to-queryable-fields>` in the configuration. If 
      this runs more than once - for example, if it's in a view that 
      reloads regularly - check whether the subscription exists already
      before adding it. Adding the same subscription again throws an error.
      
      .. literalinclude:: /examples/generated/swiftui/flex-sync/SwiftUIFlexSyncExampleApp.snippet.flex-sync-config-initial-subscriptions.swift
         :language: swift

      Then, pass the configuration to the view that contains the property 
      wrappers as an environment object.

      .. literalinclude:: /examples/generated/swiftui/flex-sync/SwiftUIFlexSyncExampleApp.snippet.realm-config-environment-object.swift
         :language: swift

      For a complete example, see the :ref:`SwiftUI Quick Start <swiftui-integrate-with-sync>`.

   .. tab:: Partition-Based Sync
      :tabid: pbs

      To open a realm with :ref:`Partition-Based Sync <partition-based-sync>`, 
      add a ``partitionValue`` to the property wrapper:

      .. literalinclude:: /examples/generated/swiftui/sync/QuickStart.snippet.partition-value-empty-string.swift
         :language: swift

This SwiftUI property wrapper initiates ``Realm.asyncOpen()`` for the current 
user. The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. 

.. example::

   This example illustrates one way you might use ``@AsyncOpen`` to 
   open a {+realm+} in a view. First, check for a user, or log them in.
   Then, attempt to open the {+realm+}, switching on the ``AsyncOpenState``
   to display an appropriate view. When the {+realm+} opens successfully,
   inject it as an environment value to populate the view.

   .. tabs::

      .. tab:: Flexible Sync
         :tabid: flex-sync

         .. literalinclude:: /examples/generated/swiftui/flex-sync/SwiftUIFlexSyncExampleApp.snippet.open-realm-view-flex-sync.swift
            :language: swift

      .. tab:: Partition-Based Sync
         :tabid: pbs

         .. literalinclude:: /examples/generated/swiftui/sync/QuickStart.snippet.open-synced-realm-view.swift
            :language: swift

.. _swiftui-auto-open-synced-realm:

Open a Synced Realm Offline
```````````````````````````

Like ``@AsyncOpen``, :swift-sdk:`@AutoOpen <Structs/AutoOpen.html>` attempts 
to download updates before opening the {+realm+}. However, if a network 
connection is not available, this method instead opens a {+realm+} with 
data on the device.

Use this property wrapper for apps where it's not a problem for the user 
to work with potentially stale data, such as note-taking apps where users 
should be able to work with data on the device

.. tabs::

   .. tab:: Flexible Sync
      :tabid: flex-sync

      .. code-block:: swift

         @AutoOpen(appId: "app_id") var autoOpen

   .. tab:: Partition-Based Sync
      :tabid: pbs

      .. code-block:: swift

         @AutoOpen(appId: "app_id", partitionValue: <partition_value>) var autoOpen

This SwiftUI property wrapper attempts to download updates before opening a 
realm for the current user. If there is no internet connection, this property 
wrapper instead returns the most up-to-date version of the local realm file 
for the given ``appId`` and Flexible Sync or Partition-Based Sync 
configuration.

The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. For a full example, see the ``@AsyncOpen``
code examples above.

Pass Realm Data Between Views
-----------------------------

The Realm Swift SDK provides several ways to pass {+realm+} data between views:

- Pass {+client-db-short+} objects to a view
- Use environment injection to:

  - Inject a partition value into a view
  - Inject an opened {+realm+} into a view
  - Inject a {+realm+} configuration into a view

Pass Realm Objects to a View
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you use the ``@ObservedRealmObject`` or ``@ObservedResults`` property 
wrapper, you implicitly open a {+realm+} and retrieve the specified objects 
or results. You can then pass those objects to a view further down the 
hierarchy.

.. literalinclude:: /examples/generated/swiftui/local/QuickStart.snippet.local-only-content-view.swift
   :language: swift

.. _ios-swiftui-pass-environment-values:

Pass Environment Values
~~~~~~~~~~~~~~~~~~~~~~~

:apple:`Environment <documentation/swiftui/environment>` injection is a 
useful tool in SwiftUI development with {+client-database+}. 
{+client-db-short+} property wrappers provide different ways for you to 
work with environment values when developing your SwiftUI application.

Inject the Partition Value
``````````````````````````

If you are using :ref:`Partition-Based Sync <partition-based-sync>`, you 
can use environment injection to pass the ``.partitionValue`` environment 
value. Inject this into a view where you perform the ``@AsyncOpen`` or 
``@AutoOpen``:

.. literalinclude:: /examples/generated/swiftui/sync/QuickStart.snippet.partition-value-environment-object.swift
   :language: swift

Then, when you use the property wrapper to open a synced {+realm+}, leave
the ``partitionValue`` an empty string. The property wrapper populates the 
value from the environment object passed in from above.

.. literalinclude:: /examples/generated/swiftui/sync/QuickStart.snippet.partition-value-empty-string.swift
   :language: swift

Inject an Opened Realm
``````````````````````

You can inject a {+realm+} that you opened in another SwiftUI view into 
a view as an environment value. The property wrapper uses this passed-in 
{+realm+} to populate the view:

.. code-block:: swift

   ListView()
      .environment(\.realm, realm)

.. _ios-swiftui-inject-realm-configuration:

Inject a Realm Configuration
````````````````````````````

You can use a realm other than the default realm by passing a different 
configuration in an environment object.

.. code-block:: swift

   LocalOnlyContentView()
   .environment(\.realmConfiguration, Realm.Configuration( /* ... */ ))

.. _swiftui-update-view-observed-collection:

Update the UI When an Object Changes
------------------------------------

The Swift SDK provides the :swift-sdk:`@ObservedRealmObject 
<Structs/ObservedRealmObject.html>` property wrapper that invalidates a view 
when an observed object changes. You can use this property wrapper to 
create a view that automatically updates itself when the observed object
changes, such as a new item being added to a group.

.. literalinclude:: /examples/generated/swiftui/local/QuickStart.snippet.items-view.swift
   :language: swift

Search a Realm Collection
-------------------------

.. versionadded:: 10.19.0

The Realm Swift SDK allows you to extend :apple:`.searchable 
<swiftui/form/searchable(text:placement:prompt:)-6royb>`. When you use 
:swift-sdk:`ObservedResults <Structs/ObservedResults.html>` to query a {+realm+},
you can specify collection and keypath in the result set to denote it is
searchable. 

.. literalinclude:: /examples/generated/swiftui/examples/ExampleApp.snippet.searchable.swift
   :language: swift

Filter or Query a Realm with ObservedResults
--------------------------------------------

The :swift-sdk:`@ObservedResults <Structs/ObservedResults.html>` property wrapper
opens a realm and returns all objects of the specified type. However, you 
can filter or query ``@ObservedResults`` to use only a subset of the objects
in your view.

Filter with an NSPredicate
~~~~~~~~~~~~~~~~~~~~~~~~~~

To filter ``@ObservedResults`` using the :ref:`NSPredicate Query API 
<ios-nspredicate-query>`, pass an :apple:`NSPredicate 
<documentation/foundation/nspredicate>` as an argument to ``filter``:

.. code-block:: swift

   @ObservedResults(Item.self, filter: NSPredicate(format: "isFavorite == true")) var items

Query with the Realm Type-Safe Query API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.24.0 
   Use *where* to perform type-safe queries on ObservedResults.

To use ``@ObservedResults`` with the :ref:`Realm Type-Safe Query API 
<ios-realm-swift-query-api>`, pass a query in a closure as an argument to 
``where``:

.. code-block:: swift

   @ObservedResults(Item.self, where: ( { $0.isFavorite == true } )) var items

Perform a Quick Write Outside of a Transaction
----------------------------------------------

In addition to performing writes inside a transaction block, the Realm Swift 
SDK offers a convenience feature to enable quick writes outside of a 
transaction.

When you use the ``@ObservedRealmObject`` or ``@ObservedResults`` property 
wrappers, you can implicitly open a write transaction. Use the ``$`` operator
to create a two-way binding to one of the state object's properties. Then,
when you update this value, you initiate an implicit write.

In this example, we create two-way bindings with two of the state object's
properties:

- ``$item.name`` creates a binding to the model Item object's ``name`` 
  property
- ``$item.isFavorite`` creates a binding to the model Item object's 
  ``isFavorite`` property

When the app user updates those fields in this example, {+client-database+}
opens an implicit write transaction and saves the new values to the database.

.. literalinclude:: /examples/generated/swiftui/local/QuickStart.snippet.quick-write-observed-realm-object.swift
   :language: swift

.. literalinclude:: /examples/generated/swiftui/local/QuickStart.snippet.local-only-content-view.swift
   :language: swift

.. _swiftui-realm-migrations:

SwiftUI Realm Migrations
------------------------

.. seealso:: Swift SDK Migration Logic

   For more general information about migration logic in the Realm Swift SDK, 
   such as how to increment a schema or write a migration block, see:
   :ref:`ios-modify-an-object-schema`.

To perform a migration:

- Update your schema and write a migration block, if required
- Specify a :swift-sdk:`Realm.Configuration <Structs/Realm/Configuration.html>`
  that uses this migration logic and/or updated schema version when you 
  initialize your realm.

From here, you have two options to pass the configuration object. You can either:

- Use environment injection to provide this configuration to the first view 
  in your hierarchy that uses Realm
- Explicitly provide the configuration to a Realm property wrapper that takes
  a configuration object, such as ``@ObservedResults`` or ``@AsyncOpen``.

.. example:: 

   For example, you might want to add a property to an existing object, such as
   the ``Item`` object in the :ref:`SwiftUI Quick Start <swiftui_quickstart-define-models>`:

   .. literalinclude:: /examples/generated/swiftui/migration/ExampleApp.snippet.add-property-to-model.swift
      :language: swift

   After you add your new property to the schema, you must increment the 
   schema version. Your ``Realm.Configuration`` might look like this:

   .. literalinclude:: /examples/generated/swiftui/migration/ExampleApp.snippet.realm-configuration-increment-schema.swift
      :language: swift

   Declare this configuration somewhere that is accessible to the first view 
   in the hierarchy that needs it. Declaring this above your ``@main`` app 
   entrypoint makes it available everywhere, but you could also put it in 
   the file where you first open a realm.

Pass the Configuration Object as an Environment Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once you have declared the configuration, you can pass it as an environment 
object to the first view in your hierarchy that opens a realm. If you are 
using the ``@ObservedResults`` or ``@ObservedRealmObject`` property wrappers, 
these views implicitly open a realm, so they also need access to this 
configuration.

.. literalinclude:: /examples/generated/swiftui/migration/ExampleApp.snippet.pass-realm-config-as-environment-object.swift
   :language: swift

In the SwiftUI quickstart, the first view in the hiearchy that opens a realm 
varies depending on whether you're using the app with or without Sync.

Without sync, you can pass the realm configuration environment object directly
to the ``LocalOnlyContentView``: 

.. include:: /examples/generated/swiftui/migration/ExampleApp.snippet.pass-environment-object-to-local-content-view.swift.rst

Which opens a realm implicitly with:

.. include:: /examples/generated/swiftui/migration/ExampleApp.snippet.implicitly-open-realm.swift.rst

However, for the Sync version of the quickstart, you open the Realm explicitly
using the ``@AsyncOpen`` or ``@AutoOpen`` property wrapper:

.. include:: /examples/generated/swiftui/migration/ExampleApp.snippet.auto-open-synced-realm.swift.rst

So you must pass pass the environment object to the ``OpenSyncedRealmView``:

.. include:: /examples/generated/swiftui/migration/ExampleApp.snippet.pass-realm-config-to-synced-realm-view.swift.rst

The important thing to remember is to make sure to pass the 
``Realm.Configuration`` that encompasses your migration logic to any view 
hierarchy that implicitly or explicitly opens a realm.

Explicitly Pass the Updated Configuration to a Realm SwiftUI Property Wrapper
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can explicitly pass the configuration object to a Realm SwiftUI
property wrapper that takes a configuration object, such as ``@ObservedResults``
or ``@AutoOpen``. In this case, you might pass it directly to ``@ObservedResults``
in our ``ItemsView``.

.. literalinclude:: /examples/generated/swiftui/migration/ExampleApp.snippet.explicitly-provide-config-to-property-wrappers.swift
   :language: swift
