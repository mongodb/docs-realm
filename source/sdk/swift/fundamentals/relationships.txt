.. _ios-client-relationships:

=========================
Relationships - Swift SDK
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service+} allows you to define explicit relationships between the
types of objects in a {+app+}. A relationship is an object property that
references another {+service-short+} object rather than one of the
primitive data types. You define relationships by setting the type of an
object property to another object type in the :ref:`property schema
<property-schema>`.

Relationships are direct references to other objects in a {+realm+},
which means that you don't need bridge tables or explicit joins to
define a relationship like you would in a relational database. Instead
you can access related objects by reading and writing to the property
that defines the relationship. {+client-database+} executes read
operations lazily as they come in, so querying a relationship is just as
performant as reading a regular property.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <ios-to-one-relationship>`
- :ref:`One-to-Many Relationship <ios-to-many-relationship>`
- :ref:`Inverse Relationship <ios-inverse-relationship>`

Key Concepts
------------

.. _ios-to-one-relationship:

To-One Relationship
~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object is related in a specific
way to no more than one other object. You define a to-one relationship
for an object type in its :ref:`object schema
<ios-object-models-and-schemas>` by specifying a property where the type
is the related {+service-short+} object type.

Setting a relationship field to null removes the connection between
objects, but {+client-database+} does not delete the referenced object
unless that object is :ref:`embedded <ios-embedded-objects>`.

.. tip::

   To learn how to define a to-one relationship, see
   :ref:`ios-define-a-to-one-relationship-property`.

.. _ios-to-many-relationship:

To-Many Relationship
~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship means that an object is related in a specific
way to multiple objects. A to-many relationship in {+client-database+}
is a list property containing references to other objects.

.. tip::

   To learn how to define a to-many relationship, see
   :ref:`ios-define-a-to-many-relationship-property`.

.. _ios-inverse-relationship:

Inverse Relationship
~~~~~~~~~~~~~~~~~~~~

An **inverse relationship** links an object back to any other objects that refer
to it in a defined to-one or to-many relationship. Relationship definitions are
unidirectional, so you must explicitly define a property in the object's model
as an inverse relationship.

For example, the to-many relationship "User has many Tasks" does not
automatically create the inverse relationship "Task belongs to User". If you
don't specify the inverse relationship in the object model, you would need to
run a separate query to look up the user that is assigned to a given task.

{+client-database+} automatically updates implicit relationships whenever an
object is added or removed in the specified relationship. You cannot manually
set the value of an inverse relationship property.

Since relationships are many-to-one or many-to-many, following inverse
relationships can result in zero, one, or many objects.

.. tip::

   To learn how to define an inverse relationship, see
   :ref:`ios-define-an-inverse-relationship-property`.

Summary
-------

- A **relationship** is an object property that allows an object to
  reference other objects of the same or another object type.

- Relationships are direct references. You can access related objects
  directly through a relationship property without writing any type of join.

- {+client-database+} supports to-one, to-many, and inverse relationships.
