.. _ios-write-transactions:

==============================
Write Transactions - Swift SDK
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+service-short+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+service-short+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note::

   All writes must happen in a transaction.

A {+realm+} allows only one open transaction at a time. {+service-short+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+service-short+} either
**commits** it or **cancels** it:

- When {+service-short+} **commits** a transaction, {+service-short+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+service-short+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+service-short+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. _ios-open-a-transaction:

Run a Transaction
-----------------

{+service-short+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+service-short+} runs
it, {+service-short+} cancels the transaction. Otherwise, {+service-short+} commits
the transaction immediately after the callback.

.. important:: Concurrency Concerns

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync>`, avoid opening transactions on the
   UI thread altogether, as {+service-short+} processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   the {+realm+}'s write method. If the code in the callback
   throws an exception, {+service-short+} cancels the transaction.
   Otherwise, {+service-short+} commits the transaction.

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.transaction.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.transaction.swift
            :language: swift

.. seealso::

   :ref:`Usage Example: Read and Write Data <ios-read-and-write-data>`

.. _ios-interface-driven-writes:
.. _ios-silent-writes:

Interface-Driven Writes
-----------------------

{+service-short+} always delivers notifications asynchronously, so they
never block the UI thread. However, there are situations when the UI
must reflect changes instantly. If you update the UI directly at the
same time as the write, the eventual notification could double that
update. This could lead to your app crashing due to inconsistent state
between the UI and the backing data store. To avoid this, you can write
without sending a notification to a specific handler. We call this type
of transaction an **interface-driven write**.

.. example::

   Say we decide to manage a table view's data source manually, because
   our app design requires an instantaneous response to UI-driven table
   updates. As soon as a user adds an item to the table view, we insert
   it to our data source, which writes to the {+realm+} but also
   immediately kicks off the animation. However, when {+service-short+}
   delivers the change notification for this insertion a little later,
   it indicates that an object has been added. But we already updated
   the table view for it! Rather than writing complicated code to handle
   this case, we can use interface-driven writes to prevent a specific
   notification handler from firing for that specific write.

Interface-driven writes, also known as silent writes, are especially
useful when using fine-grained collection notifications with a
:ref:`synchronized {+realm+} <sync>` {+realm+}. While you use
interface-driven writes for the current user's updates and update the UI
immediately, the sync process can use standard notifications to update
the UI.

.. seealso::

   :ref:`ios-write-silently`
