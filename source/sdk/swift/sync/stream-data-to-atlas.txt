.. _swift-stream-data-to-atlas:

================================
Stream Data to Atlas - Swift SDK
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. versionadded:: 10.29.0

You can use :ref:`Asymmetric Sync <optimize-asymmetric-sync>` to stream 
data from the client application to a Flexible Sync-enabled Atlas App Services
App.

You might want to sync data unidirectionally in IoT applications, such as
a weather sensor sending data to the cloud. Asymmetric sync is also useful 
for writing other types of immutable data where you do not require conflict 
resolution, such as creating invoices from a retail app or logging application 
events.

Asymmetric Sync is optimized to provide performance improvements for heavy
client-side *insert-only* workloads.

Sync Data Unidirectionally from a Client Application
----------------------------------------------------

.. procedure::

   .. step:: Define an AsymmetricObject

      You can data unidirectionally when that object is an 
      ``AsymmetricObject``.
      Define an AsymmetricObject by deriving from :swift-sdk:`AsymmetricObject 
      <Extensions/AsymmetricObject.html>`:

      .. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.asymmetric-model.swift
         :language: swift

      For more information on how to define an AsymmetricObject, including
      limitations when linking to other object types, see: 
      :ref:`Define an AsymmetricObject <swift-define-asymmetric-object>`.

   .. step:: Connect and Authenticate with an App Services App

      To stream data from the client to your backend App, you must 
      :ref:`connect to an App Services backend <ios-init-appclient>` and
      :ref:`authenticate a user <ios-authenticate-users>`.

      .. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.connect-and-authenticate.swift
         :language: swift

      Asymmetric Sync is a feature of Flexible Sync, so the App you connect 
      to must use :ref:`Flexible Sync <sync-modes-flexible-sync>`.

   .. step:: Open a Realm

      After you have an authenticated user, you can open a synced realm
      using a :swift-sdk:`flexibleSyncConfiguration() 
      <Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>`.
      Specify the ``AsymmetricObject`` types you want to sync.

      .. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.open-asymmetric-sync-realm.swift
         :language: swift

      Unlike bidirectional Sync, Asymmetric Sync does not use a 
      :ref:`Flexible Sync subscription <swift-manage-flexible-sync-subscriptions>`.

      .. tip:: Mixed Object and AsymmetricObject Types in Projects

         Generally, Realm expects that you do not mix ``Object`` and 
         ``AsymmetricObject`` types within a project. If your project does
         contain both types, you must explicitly :ref:`pass a subset of 
         classes in your Realm configuration 
         <ios-provide-a-subset-of-classes-to-a-realm>` each time you open 
         a Realm. 
         
         You cannot query an AsymmetricObject or write it to a local
         realm, so AsymmetricObjects are incompatible with bi-directional
         Flexible Sync, Partition-Based Sync, or local Realm use. Automatic 
         schema discovery means that unless you explicitly pass a subset 
         of classes to a realm in a mixed project, opening a realm can 
         throw an error related to trying to use an incompatible object type.

   .. step:: Create Asymmetric Objects

      Once you have an open Realm, you can create an ``AsymmetricObject`` inside
      a write transaction using :swift-sdk:`create(_ type:, value:)
      <Structs/Realm.html#/s:10RealmSwift0A0V6create_5valueyxm_yptSo0aB16AsymmetricObjectCRbzlF>`.

      .. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.create-asymmetric-object.swift
         :language: swift
      
      You cannot read these objects. Once created, they sync to the App 
      Services backend and the linked Atlas database.
