.. _swift-manage-flexible-sync-subscriptions:
.. _ios-flexible-sync:

==============================================
Manage Flexible Sync Subscriptions - Swift SDK
==============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. versionadded:: 10.22.0

Flexible Sync uses subscriptions and permissions to determine which
data to sync with your App.

To use Flexible Sync in an iOS client:

- :ref:`Configure Flexible Sync on the backend <enable-flexible-sync>`
- :ref:`Initialize the app <ios-quick-start-init-app>`
- :ref:`Authenticate a user <ios-quick-start-authenticate>` in
  your client project.
- :ref:`Open the synced Realm with a Flexible Sync configuration <ios-flexible-sync-open-realm>`
- :ref:`Add subscriptions to the client application <ios-sync-subscribe-to-queryable-fields>`

You can add, update, and remove query subscriptions to determine which data 
syncs to the client device.

If your app uses :ref:`Asymmetric Sync <optimize-asymmetric-sync>` to 
unidirectionally sync :swift-sdk:`AsymmetricObjects 
<Extensions/AsymmetricObject.html>` via an Atlas App Services App, you 
cannot create subscriptions for those objects.

.. seealso::

   This page details how to manage subscriptions for Flexible Sync. 
   
   For general information about using Device Sync with the Swift SDK, 
   such as how to sync changes in the background or pause a sync session,
   see: :ref:`Sync Changes Between Devices <ios-sync-changes-between-devices>`.

   For information about setting up permissions for Flexible Sync, see:
   :ref:`Flexible Sync Rules & Permissions <flexible-sync-rules-and-permissions>`.

.. tip::

   Flexible Sync supports :apple:`Combine <documentation/combine>`.

.. important::

   Flexible Sync does not support all the operators available in Realm 
   Query Language. See :ref:`Flexible Sync RQL Limitations 
   <swift-flexible-sync-rql-limitations>` for details.

About the Examples on This Page
-------------------------------
   
The examples on this page use a simple data set for a
task list app. The two Realm object types are ``Team``
and ``Task``. A ``Task`` has a ``taskName``, assignee's name, and
completed flag. There is also a count of minutes spent working on it, and a 
due date. A ``Team`` has a ``teamName``, zero or more ``Tasks``, and a list 
of ``members``.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.flexible-sync-models.swift
   :language: swift

.. _ios-sync-subscribe-to-queryable-fields:

Subscribe to Queryable Fields
-----------------------------

When you configure Flexible Sync on the backend, you specify which fields
your client application can query. In the client application, use the 
``subscriptions`` API to manage a set of subscriptions to specific queries on 
queryable fields.

You can:

- Add subscriptions
- React to subscription state
- Update subscriptions with new queries
- Remove individual subscriptions or all subscriptions for an object type

Data matching the subscription, where the user has the appropriate 
permissions, syncs between devices and the backend application.

You can specify an optional string name for your subscription.

When you create a subscription, Realm looks for data matching a query on a
specific object type. You can have multiple subscription sets on different 
object types. You can also have multiple queries on the same object type.

.. important:: Object Links

   You must add both an object and its linked object to the subscription 
   set to see a linked object.
   
   If your subscription results contain an object with a property that links 
   to an object not contained in the results, the link appears to be nil.
   There is no way to distinguish whether that property's value is 
   legitimately nil, or whether the object it links to exists but is out of
   view of the query subscription.

.. example::

   You can create a subscription with an explicit name. Then, you can
   search for that subscription by name to update or remove it.

   .. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.query-subscription-by-name.swift
      :language: swift

   If you do not specify a ``name`` for a subscription, you can search 
   for the subscription by the query string.

   .. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.query-subscription-without-name.swift
      :language: swift

.. note:: Duplicate subscriptions

   Subscription names must be unique. Trying to append a subscription 
   with the same name as an existing subscription throws an error.
   
   If you do not explicitly name a subscription, and instead subscribe 
   to the same unnamed query more than once, Realm does not persist 
   duplicate queries to the subscription set. 
   
   If you subscribe to the same query more than once under different names, 
   Realm persists both subscriptions to the subscription set.

.. _ios-sync-add-subscription:

Add a Subscription
~~~~~~~~~~~~~~~~~~

Add a subscription in a subscriptions update block. You append each
new subscription to the client's Realm subscriptions.

.. include:: /includes/swift-concurrency-mainactor.rst

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-single-subscription.swift
   :language: swift

You can add multiple subscriptions within a subscription update block, 
including subscriptions of different object types.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-multiple-subscriptions.swift
   :language: swift

.. _ios-sync-add-initial-subscriptions:

Bootstrap the Realm with Initial Subscriptions
``````````````````````````````````````````````

.. versionadded:: 10.28.0

You must have at least one subscription before you can read from or write
to the realm. You can bootstrap a realm with an initial subscription set
when you open it with the :swift-sdk:`flexibleSyncConfiguration() 
<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>`.
Pass the ``initialSubscriptions`` parameter with the subscription queries 
you want to use to bootstrap the realm:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-initial-subscriptions.swift
   :language: swift

If your app needs to rerun this initial subscription every time the app starts,
you can pass an additional parameter - ``rerunOnOpen``. This is a bool that 
denotes whether the initial subscription should re-run every time the 
app starts. You might need to do this to re-run dynamic time ranges 
or other queries that require a re-computation of static variables for the 
subscription.

In this example, we don't want users to be overwhelmed by irrelevant tasks,
so we'll load only tasks due within the previous 7 days and the next 7 days.
Tasks that were due more than a week ago are no longer relevant, and tasks
that are due further out than the next week are also not relevant. With
``rerunOnOpen`` here, the query dynamically recalculates the relevant 
objects to sync based on the desired date range every time the app starts.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-initial-subscriptions-rerun-on-open.swift
   :language: swift

Subscribe to All Objects of a Specific Type
```````````````````````````````````````````

In addition to syncing all objects that match a given query, you can subscribe 
to all objects of a specific type. You do this by appending a subscription
without providing a query.

For example, if you don't want to see a specific team, but instead want to 
subscribe to all the ``Team`` objects, you could do this:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.subscribe-to-all-objects-of-a-type.swift
   :language: swift

.. _ios-check-existing-subscriptions-before-adding:

Check for Existing Subscriptions Before Adding a Subscription
`````````````````````````````````````````````````````````````

If your application flow appends the same named subscription to the subscription 
set every time you run the application, this is disallowed. In this case, 
add a check for an existing subscription before appending it:

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.check-before-adding-subscription.swift
   :language: swift

.. _ios-sync-check-subscription-state:
.. _ios-sync-react-to-subscription-changes:

Wait for Subscription Changes to Sync
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Updating the subscription set locally is only one component 
of changing a subscription. After the local subscription change, the realm 
synchronizes with the server to resolve any updates to the data due to 
the subscription change. This could mean adding or removing data from the 
synced realm. 

Pre Async/Await
```````````````

If your application does not use Swift's async/await feature, you can react 
to subscription changes syncing with the server using the ``onComplete`` 
block. This block is called after subscriptions are synchronized with the 
server. If you want to react to subscription state changes by redrawing a 
UI, for example, or taking another action based on changes to the data set, 
take those actions in ``onComplete``. This is also where you can handle 
optional errors that occur during synchronization.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.add-subscription-with-oncomplete.swift
   :language: swift

Async/Await
```````````

If your application uses async/await, you don't need the ``onComplete`` 
block. The update executes asynchronously and throws an 
error if the update cannot complete successfully.

.. code-block:: swift

   func changeSubscription() async throws {
      let subscriptions = realm.subscriptions
      try await subcriptions.update {
         subscriptions.remove {
            QuerySubscription<Task> {
               $0.assignee == "Joe Doe"
            }
         }
      }
   }

.. include:: /includes/swift-concurrency-mainactor.rst

SyncSubscriptionState Enum
``````````````````````````

Additionally, you can watch the state of the subscription set with the 
``SyncSubscriptionState`` enum. You can use subscription state to:

- Show a progress indicator while data is downloading
- Find out when a subscription set becomes superseded
- Wait for a subscription that has been persisted locally to sync with
  the server
- Watch for errors


Superseded
``````````

The ``superseded`` state is a ``SyncSubscriptionState`` that can occur when 
another thread updates a subscription on a different instance of the 
subscription set. If the state becomes ``superseded``, you must obtain 
a new instance of the subscription set before you can update it.

.. _ios-update-subscriptions-with-new-query:

Update Subscriptions with a New Query
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can update a subscription's query using ``updateQuery``. In this example, 
we search for a subscription matching our query and then update it with a 
new query. 

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.update-subscription.swift
   :language: swift

You can also :swift-sdk:`search for a subscription by name 
<Structs/SyncSubscriptionSet.html#/s:10RealmSwift19SyncSubscriptionSetV5first5namedAA0cD0VSgSS_tF>`
. In this example, we search for a subscription query by name and then 
update it with a new query.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.update-subscription-by-name.swift
   :language: swift

.. _ios-remove-subscriptions:

Remove Subscriptions
~~~~~~~~~~~~~~~~~~~~

To remove subscriptions, you can:

- Remove a single subscription query
- Remove all subscriptions to a specific object type
- Remove all subscriptions

When you remove a subscription query, Realm asynchronously removes the
synced data that matched the query from the client device.

Remove a Single Subscription
````````````````````````````

You can remove a specific subscription query in a subscription update block 
using ``remove``. Specify the query by name or use the query as a string 
to find the appropriate subscription query to remove.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-single-subscription.swift
   :language: swift

Remove All Subscriptions to an Object Type
``````````````````````````````````````````

If you want to remove all subscriptions to a specific object type, use the 
``removeAll`` method with ``ofType`` in a subscription update block.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-subscriptions-to-object-type.swift
   :language: swift

Remove All Subscriptions
````````````````````````

To remove all subscriptions from the subscription set, use the ``removeAll``
method in a subscription update block.

.. important::

   If you remove all subscriptions and do not add a new one, you'll 
   get an error. A realm opened with a flexible sync configuration needs
   at least one subscription to sync with the server.

.. literalinclude:: /examples/generated/code/start/FlexibleSync.snippet.remove-all-subscriptions.swift
   :language: swift

.. _swift-flexible-sync-rql-limitations:

Flexible Sync RQL Limitations
-----------------------------

.. include:: /includes/flex-sync-limitations.rst
