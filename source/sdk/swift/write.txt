.. _ios-write-data:

======================
Write Data - Swift SDK
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Concepts
========

.. _ios-write-transactions:

Transactions
------------

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+service-short+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+service-short+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note::

   All writes must happen in a transaction.

A {+realm+} allows only one open transaction at a time. {+service-short+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+service-short+} either
**commits** it or **cancels** it:

- When {+service-short+} **commits** a transaction, {+service-short+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+service-short+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+service-short+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

Usage
=====

About These Examples
--------------------

The examples on this page use the following models:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.models.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.models.m
         :language: objectivec


.. _ios-open-a-transaction:

Run a Transaction
-----------------

{+service-short+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+service-short+} runs
it, {+service-short+} cancels the transaction. Otherwise, {+service-short+} commits
the transaction immediately after the callback.

.. important:: Concurrency Concerns

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync>`, avoid opening transactions on the
   UI thread altogether, as {+service-short+} processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   the {+realm+}'s write method. If the code in the callback
   throws an exception, {+service-short+} cancels the transaction.
   Otherwise, {+service-short+} commits the transaction.

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.transaction.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.transaction.swift
            :language: swift

.. _ios-write-operations:

Write Operations
----------------

.. _ios-create-a-new-object:

Create a New Object
~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To add an object to a realm, instantiate it as you would any other
      object and then pass it to :swift-sdk:`Realm.add(_:update:)
      <Structs/Realm.html#/s:10RealmSwift0A0V3add_6updateySo0aB6ObjectC_AC12UpdatePolicyOtF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.create.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To add an object to a realm, instantiate it as you would any other
      object and then pass it to :objc-sdk:`-[RLMRealm addObject:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)addObject:>` inside
      of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.create.m
         :language: objectivec

.. _ios-initialize-an-object-with-a-value:

Initialize Objects with a Value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can initialize an object by passing an initializer value to
:swift-sdk:`Object.init(value:)
<Extensions/Object.html#/s:So16RealmSwiftObjectC0aB0E5valueAByp_tcfc>`.
The initializer value can be a :apple:`key-value coding
<library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/>`
compliant object, a dictionary, or an array containing one element for
each managed property.

.. note::

   When using an array as an initializer value, you must include all
   properties in the same order as they are defined in the model.

You can even initialize :ref:`related <ios-client-relationships>` or
:ref:`embedded objects <ios-embedded-objects>` by nesting initializer
values:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.nested-objects.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.nested-objects.m
         :language: objectivec


.. _ios-create-an-object-with-json:

Create an Object with JSON
~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm does not directly support JSON, but you can use
:apple:`JSONSerialization.jsonObject(with:options:)
<documentation/foundation/jsonserialization/1415493-jsonobject>` to
convert JSON into a value that you can pass to
:swift-sdk:`Realm.create(_:value:update:)
<Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.json.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.json.m
         :language: objectivec

Nested objects or arrays in the JSON map to :ref:`to-one
<ios-to-one-relationship>` or :ref:`to-many relationships
<ios-to-one-relationship>`. 

The JSON property names and types must match the destination
:ref:`object schema <ios-object-schemas>` exactly. For example:

- ``float`` properties must be initialized with float-backed ``NSNumbers``.
- ``Date`` and ``Data`` properties cannot be inferred from strings. Convert them to the appropriate type before passing to :swift-sdk:`Realm.create(_:value:update:) <Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`.
- Required properties cannot be ``null`` or missing in the JSON.

{+service-short+} ignores any properties in the JSON not defined in the
object schema.

.. tip::

   If your JSON schema doesn't exactly align with your Realm objects,
   consider using a third-party framework to transform your JSON. There
   are many model mapping frameworks that work with {+service-short+}.
   See a :github:`partial list in the realm-swift repository
   <realm/realm-swift/issues/694#issuecomment-144785299>`.

.. _ios-copy-an-object-to-another-realm:

Copy an Object to Another Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To copy an object from one {+realm+} to another, pass the original
      object to :swift-sdk:`Realm.create(_:value:update:):
      <Structs/Realm.html#/s:10RealmSwift0A0V6create_5value6updatexxm_ypAC12UpdatePolicyOtSo0aB6ObjectCRbzlF>`:

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.copy-to-another-realm.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To copy an object from one {+realm+} to another, pass the original
      object to :objc-sdk:`+[RLMObject createInRealm:withValue:]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)createInRealm:withValue:>`:

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.copy-to-another-realm.m
         :language: objectivec


.. important::

   The ``create`` methods do not support handling cyclical object
   graphs. Do not pass in an object containing relationships involving
   objects that refer back to their parents, either directly or
   indirectly.

.. _ios-modify-an-object:

Modify an Object
~~~~~~~~~~~~~~~~

You can modify properties of a Realm object inside of a write
transaction in the same way that you would update any other Swift or
Objective-C object.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.update.swift
         :language: swift

   .. tab::
      :tabid: objective-c
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.update.m
         :language: objectivec


.. tip:: Update Related and Embedded Objects

   To update a property of an :ref:`embedded object
   <ios-define-an-embedded-object-property>` or a :ref:`related object
   <ios-declare-relationship-properties>`, modify the property with
   dot-notation or bracket-notation as if it were in a regular, nested
   object.

.. _ios-update-with-key-value-coding:

Update Properties with Key-value Coding
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``Object``, ``Result``, and ``List`` all conform to 
:apple:`key-value coding <library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/>`. 
This can be useful when you need to determine which property to update 
at runtime.

Applying KVC to a collection is a great way to update objects in bulk. 
Avoid the overhead of iterating over a collection while creating 
accessors for every item.

.. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.key-value-coding.swift
   :language: swift

.. tip::

   You can also add values for embedded objects or relationships this
   way. See :ref:`ios-initialize-an-object-with-a-value`.

.. _ios-upsert-an-object:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** either inserts or updates an object depending on whether
the object already exists. Upserts require the data model to have a
:ref:`primary key <ios-specify-a-primary-key>`.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To upsert an object, call :swift-sdk:`Realm.add(_:update:)
      <Structs/Realm.html#/s:10RealmSwift0A0V3add_6updateySo0aB6ObjectC_AC12UpdatePolicyOtF>`
      with the second parameter, update policy, set to ``.modified``.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.upsert.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To upsert an object, call :objc-sdk:`-[RLMRealm
      addOrUpdateObject:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)addOrUpdateObject:>`.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.upsert.m
         :language: objectivec

You can also partially update an object by passing the primary key and a
subset of the values to update:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.partial-update.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.partial-update.m
         :language: objectivec

.. _ios-delete-an-object:

Delete an Object
~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To delete an object from a realm, pass the object to
      :swift-sdk:`Realm.delete(_:)
      <Structs/Realm.html#/s:10RealmSwift0A0V6deleteyySo13RLMObjectBaseCF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To delete an object from a realm, pass the object to
      :objc-sdk:`-[RLMRealm deleteObject:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)deleteObject:>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete.m
         :language: objectivec

.. important:: Do not use objects after delete

   You cannot access or modify an object after you have deleted it from
   a realm. If you try to use a deleted object, Realm Database throws an
   error.

.. _ios-delete-multiple-objects:

Delete Multiple Objects
~~~~~~~~~~~~~~~~~~~~~~~

.. tabs::
   
   .. tab:: Realm Swift Query API
      :tabid: swift

      .. versionadded:: 10.19.0

      To delete a collection of objects from a realm, pass the
      collection to :swift-sdk:`Realm.delete(_:)
      <Structs/Realm.html#/s:10RealmSwift0A0V6deleteyyxSTRzSo13RLMObjectBaseC7ElementRczlF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.tsq-delete-collection.swift
         :language: swift

   .. tab:: Swift NSPredicate
      :tabid: swift-nspredicate

      To delete a collection of objects from a realm, pass the
      collection to :swift-sdk:`Realm.delete(_:)
      <Structs/Realm.html#/s:10RealmSwift0A0V6deleteyyxSTRzSo13RLMObjectBaseC7ElementRczlF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-collection.swift
         :language: swift

   .. tab:: Objective C
      :tabid: objective-c

      To delete a collection of objects from a realm, pass the
      collection to :objc-sdk:`-[Realm deleteObjects:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)deleteObjects:>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-collection.m
         :language: objectivec

.. _ios-delete-all-object-of-a-specific-type:

Delete All Objects of a Specific Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To delete all objects of a given object type from a realm, pass
      the result of :swift-sdk:`Realm.objects(_:)
      <Structs/Realm.html#/s:10RealmSwift0A0V7objectsyAA7ResultsVyxGxmSo0aB6ObjectCRbzlF>`
      for the type you wish to delete to :swift-sdk:`Realm.delete(_:)
      <Structs/Realm.html#/s:10RealmSwift0A0V6deleteyyxSTRzSo13RLMObjectBaseC7ElementRczlF>`
      inside of a write transaction.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-all-of-class.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To delete all objects of a given object type from a realm, pass
      the result of :objc-sdk:`+[YourRealmObjectClass
      allObjectsInRealm:]
      <Classes/RLMObject.html#/c:objc(cs)RLMObject(cm)allObjectsInRealm:>`
      to :objc-sdk:`-[Realm deleteObjects:]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)deleteObjects:>`
      inside of a write transaction. Replace ``YourRealmObjectClass``
      with your Realm object class name.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-all-of-class.m
         :language: objectivec

.. _ios-delete-all-objects-in-a-realm:

Delete All Objects in a Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::
   
   .. tab::
      :tabid: swift

      To delete all objects from the realm, call
      :swift-sdk:`Realm.deleteAll()
      <Structs/Realm.html#/s:10RealmSwift0A0V9deleteAllyyF>` inside of a
      write transaction. This clears the realm of all object instances
      but does not affect the realm's schema.

      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-all.swift
         :language: swift

   .. tab::
      :tabid: objective-c

      To delete all objects from the realm, call :objc-sdk:`-[RLMRealm
      deleteAllObjects]
      <Classes/RLMRealm.html#/c:objc(cs)RLMRealm(im)deleteAllObjects>`
      inside of a write transaction. This clears the realm of all object
      instances but does not affect the realm's schema.
      
      .. literalinclude:: /examples/generated/code/start/ReadWriteData.codeblock.delete-all.m
         :language: objectivec
