:template: product-landing
:hidefeedback: header
:noprevnext:

.. _ios-intro:

===============
Realm Swift SDK
===============

.. toctree::
   :titlesonly:
   
   Swift SDK Version B </sdk/swift-version-b>
   Why Realm Database? </sdk/swift/realm-database>
   Install Realm </sdk/swift/install>
   Quick Start </sdk/swift/quick-start>
   Realm Files </sdk/swift/realm-files>
   Model Data </sdk/swift/model-data>
   CRUD </sdk/swift/crud>
   React to Changes </sdk/swift/react-to-changes>
   SwiftUI </sdk/swift/swiftui>
   Test and Debug </sdk/swift/test-and-debug>
   API Reference </sdk/swift/api-reference>
   Release Notes <https://github.com/realm/realm-swift/releases>
   Application Services </sdk/swift/application-services>
   Manage Users </sdk/swift/work-with-users>
   Sync Data </sdk/swift/sync>
   Realm in Xcode Playgrounds </sdk/swift/xcode-playgrounds>

.. introduction::

   Use the Realm Swift SDK to develop iOS, macOS, watchOS and tvOS apps in 
   Swift and Objective-C. 
   
.. kicker:: Learning Paths

Get Started with Realm Swift
----------------------------

.. card-group::
   :columns: 3

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/swift/quick-start/
      :icon: /images/icons/realm/functions.svg
      :icon-alt: Realm Functions Icon

      Minimal-explanation code examples of how to work with Realm Database.

   .. card::
      :headline: Working Example App
      :cta: Explore an Example App
      :url: https://www.mongodb.com/docs/atlas/app-services/template-apps/
      :icon: /images/icons/realm/ios.svg
      :icon-alt: Realm iOS Icon

      Learn from example by dissecting a working SwiftUI client app that 
      uses Realm Database with Device Sync.

   .. card::
      :headline: Guided Tutorial
      :cta: Follow the Tutorial
      :url: https://www.mongodb.com/docs/realm/tutorial/swiftui/
      :icon: /images/icons/realm/fast-data.svg
      :icon-alt: Realm Fast Data Icon

      Follow a guided tutorial to learn how to adapt the example app to 
      create your own working Realm app.

.. kicker:: What You Can Do

Develop Apps with Realm Database
--------------------------------

Use free open-source Realm Database as a local object store on a device.
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and 
other clients.

.. tabs::

   .. tab:: Use Realm Database Locally
      :tabid: local-realm

      .. procedure::

         .. step:: Install the Realm Swift SDK

            Use Swift Package Manager, CocoaPods, or Carthage to
            :ref:`ios-install` in your project.

            Import Realm in your project files to get started.

         .. step:: Define an Object Schema

            Use Swift to idiomatically :ref:`define an object schema 
            <ios-define-a-realm-object-schema>`. 

         .. step:: Open a Realm

            Realm Database stores objects in realm files on your device, 
            or you can open an in-memory realm which does not create a file.
            :ref:`Configure and open a realm <ios-configure-and-open-a-realm>` 
            to get started reading and writing data.

         .. step:: Read and Write Data

            :ref:`Create <swift-crud-create>`, :ref:`read <swift-crud-read>`, 
            :ref:`update <swift-crud-update>`, and :ref:`delete <swift-crud-delete>` 
            objects from the realm. Filter data using Realm Swift's 
            :ref:`type-safe .where syntax <ios-realm-swift-query-api>`, 
            or construct an :ref:`NSPredicate <ios-nspredicate-query>`. 

         .. step:: React to Changes

            Realm's live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <ios-react-to-changes>` 
            to watch for changes and perform some logic, such as updating 
            your UI. Or in SwiftUI, use the Realm Swift property wrappers 
            to :ref:`update Views when data changes 
            <swiftui-update-ui-when-objects-change>`.

      .. image:: /images/icons/realm/realm-mobile.svg
         :width: 100px
         :alt: Realm Sync Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App 
            <realm-sync-get-started>`. Define data access rules. Use 
            Development Mode to infer your schema from your Swift or 
            Objective-C data model.

            Then, :ref:`connect to the backend <ios-init-appclient>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a 
            user <ios-authenticate-users>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or 
            Facebook. Use our built-in email/password provider to manage 
            users without a third-party, or use custom JWT authentication to 
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Realm

            Instead of opening a local realm, :ref:`configure and open a 
            synced Realm <ios-configure-and-open-a-synced-realm>`. 
            :ref:`Subscribe to a query <swift-manage-flexible-sync-subscriptions>` 
            to determine what data the synced realm can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data from a realm are the same 
            whether you're using a synced or local realm. Data that you 
            read and write is automatically kept in sync with your Atlas 
            cluster and other clients. Apps keep working offline and 
            deterministically sync changes whenever a network connection is 
            available. 

      .. image:: /images/icons/realm/mobile-sync.svg         
         :alt: Realm Sync Illustration
         :width: 100px

   .. tab:: Use Realm with SwiftUI
      :tabid: realm-swiftui

      .. literalinclude:: /examples/generated/swiftui/FilterData.snippet.searchable.swift
         :language: swift
         :caption: SwiftUI Property Wrappers Offer Realm/SwiftUI Integration

      The Realm Swift SDK offers property wrappers and convenience features 
      designed to make it easier to work with Realm in SwiftUI. Check out the 
      :ref:`SwiftUI documentation <ios-swiftui-examples>` for example View code 
      that demonstrates common Realm SwiftUI patterns.
