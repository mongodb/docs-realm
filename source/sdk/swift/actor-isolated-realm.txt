.. _swift-actor-isolated-realm:

=================================
Actor-Isolated Realms - Swift SDK
=================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Starting with Realm Swift SDK version 10.39.0, Realm supports actor-isolated
realm instances. You can safely use an actor-isolated realm with Swift concurrency
language features instead of managing threads or dispatch queues.

With an actor-isolated realm, you can use Swift's async/await syntax to:

- Open a realm
- Write to a realm
- Listen for notifications

For general information about Swift actors, refer to :apple:`Apple's Actor 
documentation <documentation/swift/actor>`.

Prerequisites
~~~~~~~~~~~~~

To use Realm in a Swift actor, your project must:

- Use Realm Swift SDK version 10.39.0 or later
- Use Swift 5.8/Xcode 14.3

In addition, we strongly recommend enabling these settings in your project:

- ``SWIFT_STRICT_CONCURRENCY=complete``: enables strict concurrency checking
- ``OTHER_SWIFT_FLAGS=-Xfrontend-enable-actor-data-race-checks``: enables 
  runtime actor data-race detection

About the Examples on This Page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The examples on this page use the following model:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.model.swift
   :language: swift

.. _swift-open-actor-confined-realm:

Open an Actor-Isolated Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the Swift async/await syntax to await opening a realm.

Initializing a realm with ``try await Realm()`` opens a MainActor-isolated
realm. Alternately, you can explicitly specify an actor when opening a 
realm with the ``await`` syntax.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.await-main-actor-realm.swift
   :language: swift

You can specify a default configuration or customize your configuration when 
opening an actor-isolated realm:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-confined-realm-with-config.swift
   :language: swift

For more general information about configuring a realm, refer to 
:ref:`ios-configure-and-open-a-realm`.

You can open a synced realm as an actor-isolated realm:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-confined-synced-realm.swift
   :language: swift

For more general information about opening a synced realm, refer to 
:ref:`ios-configure-and-open-a-synced-realm`.

.. _swift-define-realm-actor:

Define a Custom Realm Actor
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can define a specific actor to manage Realm in asynchronous contexts.
You can use this actor to manage realm access, perform write operations,
and get notifications for changes.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.define-realm-actor.swift
   :language: swift

An actor-isolated realm may be used with either local or global actors.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.global-actor-example.swift
   :language: swift

.. _swift-actor-synchronous-isolated-function:

Use a Realm Actor Synchronously in an Isolated Function
````````````````````````````````````````````````````````

When a function is confined to a specific actor, you can use the actor-isolated
realm synchronously.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-isolated-realm-synchronous.swift
   :language: swift

.. _swift-actor-async-nonisolated-function:

Use a Realm Actor in Async Functions
````````````````````````````````````

When a function isn't confined to a specific actor, you can use your Realm actor
with Swift's async/await syntax.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-isolated-realm-async.swift
   :language: swift

.. _swift-write-to-actor-confined-realm:

Write to an Actor-Isolated Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Actor-isolated realms can use Swift async/await syntax for asynchronous
writes. Using ``try await realm.writeAsync { ... }`` suspends the current task,
acquires the write lock without blocking the current thread, and then invokes
the block. Realm writes the data to disk on a background thread and resumes 
the task when that completes. 

This function from the example ``RealmActor`` defined above shows how you might
write to an actor-isolated realm:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.write-async.swift
   :language: swift

And you might perform this write using Swift's async syntax:

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.actor-isolated-realm-async.swift
   :language: swift

This does not block the calling thread while waiting to write. It does 
not perform I/O on the calling thread. For small writes, this is safe to 
use from ``@MainActor`` functions without blocking the UI. Sufficiently large 
writes may still benefit from being done on a background thread. 

Asynchronous writes are only supported for actor-isolated Realms or in
``@MainActor`` functions.

.. _swift-observe-notifications-on-actor-confined-realm:

Observe Notifications on an Actor-Isolated Realm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can observe notifications on an actor-isolated realm using Swift's 
async/await syntax.

Calling ``await object.observe()`` or ``await collection.observe`` registers 
a block to be called each time the object or collection changes.

The SDK asynchronously calls the block on the given actor's executor.

For write transactions performed on different threads or in different
processes, the SDK calls the block when the realm is (auto)refreshed 
to a version including the changes. For local writes, the SDK calls the block
at some point in the future after the write transaction is committed.

Like :ref:`non-actor-confined notifications <ios-react-to-changes>`, you can 
only observe objects or collections managed by a realm. You must retain the 
returned token for as long as you want to watch for updates. 

If you need to manually advance the state of an observed realm on the main 
thread or an actor-isolated realm, call ``await realm.asyncRefresh()``. 
This updates the realm and outstanding objects managed by the Realm to point to
the most recent data and deliver any applicable notifications.

.. warning:: 

   You cannot call the ``observe`` method during a write transaction
   or when the containing realm is read-only.

.. _swift-actor-collection-change-listener:

Register a Collection Change Listener
`````````````````````````````````````

The SDK calls a collection notification block after each write transaction which:

- Deletes an object from the collection.
- Inserts an object into the collection.
- Modifies any of the managed properties of an object in the collection. This 
  includes self-assignments that set a property to its existing value. 

.. important:: Order Matters
   
   In collection notification handlers, always apply changes
   in the following order: deletions, insertions, then
   modifications. Handling insertions before deletions may
   result in unexpected behavior.

These notifications provide information about the actor on which the change 
occurred. Like non-actor-isolated :ref:`collection notifications 
<ios-register-a-collection-change-listener>`, they also provide 
a ``change`` parameter that reports which objects are deleted, added, or 
modified during the write transaction. This
:swift-sdk:`RealmCollectionChange <Enums/RealmCollectionChange.html>` 
resolves to an array of index paths that you can pass to a ``UITableView``'s 
batch update methods.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.observe-collection-on-actor.swift
   :language: swift

.. _swift-actor-object-change-listener:

Register an Object Change Listener
``````````````````````````````````

The SDK calls an object notification block after each write transaction which:

- Deletes the object.
- Modifies any of the managed properties of the object. This includes 
  self-assignments that set a property to its existing value. 

The block is passed a copy of the object isolated to the requested actor,
along with information about what changed. This object can be safely used
on that actor.

By default, only direct changes to the object's properties produce notifications.
Changes to linked objects do not produce notifications. If a non-nil, non-empty 
keypath array is passed in, only changes to the properties identified by those 
keypaths produce change notifications. The keypaths may traverse link 
properties to receive information about changes to linked objects.

.. literalinclude:: /examples/generated/code/start/RealmActor.snippet.observe-object-on-actor.swift
   :language: swift
