.. _kotlin-multiplatform-frozen-architecture:

==============================================
Frozen Architecture - Kotlin Multiplatform SDK
==============================================

.. default-domain:: mongodb

Unlike the other {+service+} SDKs, the Kotlin SDK
does not provide live objects and collections that
update simultaneously with underlying data. Instead,
the Kotlin SDK works exclusively with **frozen objects**
that can be passed between threads safely.

Work with Frozen Objects
------------------------

Because frozen objects don't automatically update when data changes
in your {+realm+}, they work a little differently from the live objects
you may have used in other {+service-short+} SDKs.

Thread-safe Realms
------------------

The :kotlin-sdk:`Realm <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/index.html>`
class is no longer thread-confined, so you can share a single {+realm+}
across multiple threads. You no longer need to handle the {+realm+}
lifecycle explicitly with calls to
:kotlin-sdk:`Realm.close() <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/index.html#-1654108755%2FFunctions%2F1327329691>`.

Access Changes
~~~~~~~~~~~~~~

To access changes to objects and collections, use
`Coroutines <https://kotlinlang.org/docs/coroutines-overview.html>`__
and the `Flow API <https://kotlinlang.org/docs/flow.html>`__. Changes
are thread-safe, so you can access them from any context. Notifications
are handled on a dedicated internal notifier thread. Frozen objects now
support change listeners.

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.change-listeners.kt
   :language: kotlin

.. note:: Flows API Requires Kotlinx Coroutines

   To use the Flows API in your KMM project, install the
   :github:`kotlinx.coroutines <Kotlin/kotlinx.coroutines#multiplatform>`
   library.

Just like in other {+service-short+} SDKs, write transactions implicitly
advance your {+realm+} to the most recent version of data stored on disk.

Lazy Loading
~~~~~~~~~~~~

{+service-short+} objects are still lazy-loaded by default. This allows
you to query large collections of objects without reading large amounts
of data from disk. This also means that the first access to
a field of an object will always return the most recent data.

Live Objects in Write Transactions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Objects fetched within a write transaction are live objects that
automatically update during that write transaction. Objects returned
from a write closure become frozen objects when the write transaction
completes.
