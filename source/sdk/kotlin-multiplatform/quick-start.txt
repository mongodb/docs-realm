.. _kotlin-multiplatform-client-quick-start:
.. _kotlin-multiplatform-client-quick-start-local:

======================================
Quick Start - Kotlin Multiplatform SDK
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Installed the Kotlin Multiplatform SDK <kotlin-multiplatform-install>`

Define Your Object Model
------------------------

Your application's **data model** defines the structure of data
stored within {+client-database+}.
You can define your application's data model via Kotlin
classes in your application code with
:ref:`Realm Object Models <create-schema-from-rom>`.

To define your application's data model, add the following class
definition to your application code:

.. literalinclude:: /examples/generated/kmm/RealmModels.codeblock.quick-start-model.kt
   :language: kotlin

Open a Realm
------------

Use :kotlin-sdk:`RealmConfiguration <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm-configuration/index.html>`
to control the specifics of the {+realm+} you
would like to open, including the name, location, and schema.
Pass your configuration to the :kotlin-sdk:`Realm constructor <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/index.html>` to generate an instance of that {+realm+}:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-open-a-realm.kt
   :language: kotlin

Create, Read, Update, and Delete Objects
----------------------------------------

Once opened, you can create objects within a {+realm+} in a
:kotlin-sdk:`write transaction block <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm/index.html#1141849336%2FFunctions%2F1327329691>`.

To create a new ``Task``, instantiate an instance of the
``Task`` class and add it to the {+realm+} in a write transaction block:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-create.kt
   :language: kotlin

You can retrieve a collection of all tasks in the {+realm+}:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-read.kt
   :language: kotlin

You can also filter a collection to retrieve a more specific collection
of objects:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-read-filtered.kt
   :language: kotlin

.. note:: Realm Query Language

   You can find more information about string {+client-database+} queries in
   the :ref:`Node SDK Query Guide <node-client-query-engine>`.

To modify a task, update its properties in a write transaction block:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-update.kt
   :language: kotlin

Finally, you can delete a task by calling the :kotlin-sdk:`object.delete() <-realm%20-kotlin%20-multiplatform%20-s-d-k/io.realm/-realm-object/index.html#2054000914%2FExtensions%2F1327329691>`
method in a write transaction block:

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start-delete.kt
   :language: kotlin

Complete Example
----------------

If you're running this project in a fresh KMM template project, you can
copy and paste into the ``Greeting.greeting()`` method in the
``commonMain`` module.

.. literalinclude:: /examples/generated/kmm/Greeting.codeblock.quick-start.kt
   :language: kotlin
