.. _kotlin-multiplatform-authenticate:
.. _kotlin-multiplatform-authenticate-users:

=============================================
Authenticate Users - Kotlin Multiplatform SDK
=============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

{+service+} provides an API for authenticating users using any enabled
authentication provider. Instantiate a ``Credentials`` object and pass
it to either of the  ``app.login()`` or ``app.loginAsync()`` methods to
authenticate a user login and create a ``User`` object. Each
authentication provider corresponds to a static helper method used to
instantiate ``Credentials`` objects using that authentication providers.
See the table below to find the method that instantiates the
``Credentials`` instance for your authentication provider:

.. _kotlin-multiplatform-login:

Log In
------

You can authenticate users with either the ``app.login()`` or
``app.loginAsync()`` methods of your application's instance of the
``io.realm.mongodb.App`` class. While the ``app.login()`` method blocks
code execution in the calling thread until the supplied credentials have
either succeeded or failed to authenticate a user, the
``app.loginAsync()`` method allows execution to continue, handling
success or failure with a callback function that is guaranteed to
execute on the same thread that called ``app.loginAsync()``.

If successful, the ``app.login()`` method returns a ``User`` object.
In the event of a failure, the ``app.login()`` method throws an
exception of type ``ObjectServerError``.

Pass a callback to the ``app.loginAsync()`` method to handle success or
failure. This callback accepts a single parameter of type
``App.Result``. The ``isSuccess()`` method of the ``App.Result`` object
passed to the callback returns a boolean that indicates whether the
operation succeeded. In the event of a failure,  you can view the
error that caused the failure using the ``getError()`` method.

.. _kotlin-multiplatform-anonymous-login:
.. _kotlin-multiplatform-login-anonymous:

Anonymous User
~~~~~~~~~~~~~~

The :doc:`anonymous authentication provider </authentication/anonymous>`
enables users to log in to your application with short-term accounts
that store no persistent personal information. To log in with anonymous
authentication, create an anonymous credential by calling
``Credentials.anonymous()`` and then pass the generated credential to
``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.anonymous.java
         :language: java
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.anonymous.kt
         :language: kotlin

.. _kotlin-multiplatform-email-password-login:
.. _kotlin-multiplatform-login-email-password:

Email/Password User
~~~~~~~~~~~~~~~~~~~

The :doc:`Email/Password authentication provider </authentication/email-password>`
enables users to log in to your application with an email username and
a password. To log in with email/password authentication, create an
email/password credential by calling ``Credentials.emailPassword()``
with the user's email and password. Then pass the generated credential
to ``app.login()`` or ``app.loginAsync()``.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.email-password.java
         :language: java
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.email-password.kt
         :language: kotlin

.. _kotlin-multiplatform-logout:

Log a User Out
--------------

You can log out any user, regardless of the authentication provider used
to log in, using the ``user.logOut()`` or ``user.logOutAsync()``
methods. Both methods:

- delete locally stored user credentials from the device

- immediately halt any synchronization to and from the user's {+realm+}s

Because logging out halts synchronization, you should only log out after
all local Realm updates have uploaded to the server.

.. tabs-realm-languages::
   
   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.log-out.java
         :language: java
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/kotlin-multiplatform/sync/AuthenticationTest.codeblock.log-out.kt
         :language: kotlin
