.. _android-intro:

=========================
MongoDB Realm Android SDK
=========================

.. toctree::
   :titlesonly:
   
   Install Realm for Android </sdk/android/install>
   Quick Start </sdk/android/quick-start-local>
   Quick Start with Sync </sdk/android/quick-start-sync>
   Quick Start with LiveData </sdk/android/livedata>
   Fundamentals </sdk/android/fundamentals>
   Data Types </sdk/android/data-types>
   Usage Examples </sdk/android/examples>
   Advanced Guides </sdk/android/advanced-guides>
   Java Reference Manual (Javadoc) <https://docs.mongodb.com/realm-sdks/java/10.3.1>
   Kotlin Extensions Reference Manual <https://docs.mongodb.com/realm-sdks/kotlin/10.3.1>
   Upgrade from Stitch to Realm </sdk/android/migrate>
   Release Notes <https://github.com/realm/realm-java/blob/releases/CHANGELOG.md>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+service+} Android SDK allows you to use {+client-database+} and
{+service+} from Android applications written in Java or Kotlin.

.. note::

   The Android SDK does not support Java or Kotlin applications
   written for environments other than Android.

Local Realm Database
--------------------

With the {+service+} Android SDK, you can access objects stored in a local
instance of {+client-database+}. With {+client-database+}, you can:

- :ref:`define your object schema <android-define-a-realm-object-schema>`
  with annotated Kotlin or Java classes:

  .. tabs-realm-languages::

     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/local/Frog.codeblock.frog-definition-local.kt
           :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/local/FrogJava.codeblock.frog-definition-local.java
           :language: java

- :ref:`query <android-client-query-engine>` for stored objects using
  Android-native queries:

  .. tabs-realm-languages::
     
     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.kt
           :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.java
           :language: java

- :ref:`update <android-modify-an-object>` stored objects by simply
  updating field values on an instance of the object:

  .. tabs-realm-languages::
   
     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.kt
           :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.java
           :language: java

- :ref:`receive object updates and notifications automatically
  <android-react-to-changes>` when objects stored in {+client-database+}
  change:

  .. tabs-realm-languages::
  
     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.kt
          :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.java
           :language: java

- :ref:`live objects <android-live-object>` keep all instances
  of an object up to date at all times:

  .. tabs-realm-languages::
  
     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.kt
          :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.java
           :language: java

.. seealso::

   To get started with {+client-database+}, try our
   :ref:`Local-only Quick Start <android-client-quick-start-local>`.

MongoDB Realm Apps
------------------

{+app+}s are MongoDB cloud-hosted backends for client applications.
The {+service+} Android SDK optionally contains the ability to access
backend {+backend+} apps running in the cloud. With {+app+}s, you can:

- automatically sync data between {+realm+}s on client devices and your
  MongoDB Atlas data store with :ref:`Sync <android-sync-changes-between-devices>`

  .. tabs-realm-languages::
   
     .. tab::
        :tabid: kotlin

        .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.kt
           :language: kotlin

     .. tab::
        :tabid: java

        .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.java
           :language: java

- use {+service-short+}'s built-in user management to enable
  :ref:`user account creation <android-register-a-new-user-account>`
  and user :ref:`authentication <android-authenticate-users>` across
  devices

- store data persistently with :ref:`permissions <mongodb-crud-permissions>`
  in your backend {+app+} using a
  :ref:`MongoDB Atlas database <mongodb-service>`

- execute logic in your backend {+app+} from a client application using
  :ref:`Functions <android-call-a-function>`

- react to events in your backend {+app+} using
  :ref:`Triggers <triggers>`

.. seealso::

   To get started with {+service+}, try the our
   :ref:`Quick Start with Sync <android-client-quick-start-sync>`.

Get Started
-----------

To start using the {+service+} Android SDK
in your Android application, see :ref:`Install Realm for Android
<android-install>` to add the Android SDK dependency and then check
out the :ref:`Quick Start <android-client-quick-start-local>`:

- :doc:`Install Realm for Android </sdk/android/install>`
- :doc:`Quick Start </sdk/android/quick-start-local>`
- :doc:`Quick Start with Sync </sdk/android/quick-start-sync>`
- :doc:`Quick Start with LiveData </sdk/android/livedata>`
- :doc:`Upgrade from Stitch to Realm </sdk/android/migrate>`

Fundamentals
------------

To learn more about the concepts that underly {+client-database+},
such as the :ref:`Asynchronous API <android-async-api>`, the 
:ref:`Query Engine <android-client-query-engine>`, and more,
check out the Fundamentals section:

- :doc:`Asynchronous API </sdk/android/fundamentals/async-api>`
- :doc:`Realms </sdk/android/fundamentals/realms>`
- :doc:`Live Queries </sdk/android/fundamentals/live-queries>`
- :doc:`Query Engine </sdk/android/fundamentals/query-engine>`
- :doc:`Write Transactions </sdk/android/fundamentals/write-transactions>`
- :doc:`Relationships </sdk/android/fundamentals/relationships>`
- :doc:`Object Models & Schemas </sdk/android/fundamentals/object-models-and-schemas>`
- :doc:`Schema Versions & Migrations </sdk/android/fundamentals/schema-versions-and-migrations>`
- :doc:`MongoDB Realm Cloud </sdk/android/fundamentals/mongodb-realm-cloud>`

Examples
--------

For practical code samples of common tasks in {+client-database+} and
{+app+}s, take a look at the Examples section:

Realm Database Examples
~~~~~~~~~~~~~~~~~~~~~~~

- :doc:`Define a Realm Object Schema </sdk/android/examples/define-a-realm-object-model>`
- :doc:`Open & Close a Local Realm </sdk/android/examples/open-and-close-a-local-realm>`
- :doc:`Read & Write Data </sdk/android/examples/read-and-write-data>`
- :doc:`React to Changes </sdk/android/examples/react-to-changes>`
- :doc:`Modify an Object Schema </sdk/android/examples/modify-an-object-schema>`

MongoDB Realm App Examples
~~~~~~~~~~~~~~~~~~~~~~~~~~

- :doc:`Connect to a MongoDB Realm Backend App </sdk/android/examples/connect-to-mongodb-realm-backend-app>`
- :doc:`Authenticate Users </sdk/android/examples/authenticate-users>`
- :doc:`Sync Changes Between Devices </sdk/android/examples/sync-changes-between-devices>`
- :doc:`Call a Function </sdk/android/examples/call-a-function>`
- :doc:`Manage Email/Password Users </sdk/android/examples/email-password-users>`
- :doc:`Create & Manage User API Keys </sdk/android/examples/manage-user-api-keys>`
- :doc:`Query MongoDB </sdk/android/examples/mongodb-remote-access>`

Advanced
--------

For information about advanced concepts, such as
:ref:`encryption <android-encrypt-a-realm>`
and :ref:`threading <android-threading>`, see the
:ref:`Advanced Guides <advanced-guides>` section.

Realm Database
~~~~~~~~~~~~~~

- :doc:`Encryption </sdk/android/advanced-guides/encryption>`
- :doc:`Threading </sdk/android/advanced-guides/threading>`


MongoDB Realm App
~~~~~~~~~~~~~~~~~

- :doc:`Link User Identities </sdk/android/advanced-guides/link-user-identities>`
- :doc:`Multi-User Applications </sdk/android/advanced-guides/multi-user-applications>`
- :doc:`Custom User Data </sdk/android/advanced-guides/custom-user-data>`
- :doc:`Client Resets </sdk/android/advanced-guides/client-reset>`
