.. _android-intro:

=========================
MongoDB Realm Android SDK
=========================

.. toctree::
   :titlesonly:
   
   Install Realm for Android </sdk/android/install>
   Quick Start </sdk/android/quick-start-local>
   Quick Start with Sync </sdk/android/quick-start-sync>
   Quick Start with LiveData </sdk/android/livedata>
   Fundamentals </sdk/android/fundamentals>
   Data Types </sdk/android/data-types>
   Usage Examples </sdk/android/examples>
   Advanced Guides </sdk/android/advanced-guides>
   Troubleshooting </sdk/android/troubleshooting>
   Java Reference Manual (Javadoc) <https://docs.mongodb.com/realm-sdks/java/latest/>
   Kotlin Extensions Reference Manual <https://docs.mongodb.com/realm-sdks/java/latest/kotlin-extensions/>
   Upgrade from Stitch to Realm </sdk/android/migrate>
   Release Notes <https://github.com/realm/realm-java/blob/releases/CHANGELOG.md>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The {+service+} Android SDK allows you to use {+client-database+} and
backend {+app+}s from Android applications written in Java or Kotlin.

.. note::

   The Android SDK does not support Java or Kotlin applications
   written for environments other than Android.

Local Realm Database
--------------------

With the {+service+} Android SDK, you can access objects stored in a local
instance of {+client-database+}. With {+client-database+}, you can:

Define an Object Schema
~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Define your object schema <android-define-a-realm-object-schema>`
with annotated Kotlin or Java classes:

.. tabs-realm-languages::

   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/Frog.codeblock.frog-definition-local.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/FrogJava.codeblock.frog-definition-local.java
         :language: java

Query Realm Database
~~~~~~~~~~~~~~~~~~~~

:ref:`Query <android-client-query-engine>` for stored objects using
Android-native queries:

.. tabs-realm-languages::
     
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.query.java
         :language: java

Update Live Objects
~~~~~~~~~~~~~~~~~~~

:ref:`Update <android-modify-an-object>` objects in {+client-database+} by
updating field values on an instance of the object within a transaction:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.update.java
         :language: java

Watch for Object Updates
~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Receive object updates and notifications automatically
<android-react-to-changes>` when objects stored in {+client-database+}
change:

.. tabs-realm-languages::
  
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.notifications.java
         :language: java

Always Access the Latest Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:ref:`Live objects <android-live-object>` keep all instances
of an object up to date at all times:

.. tabs-realm-languages::
  
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/local/LandingPageTest.codeblock.live-objects.java
         :language: java

.. seealso::

   To get started with {+client-database+}, try our
   :ref:`Local-only Quick Start <android-client-quick-start-local>`.

Realm Apps
----------

{+app+}s are backends for client applications hosted by MongoDB in the cloud.
They provide the ability to synchronize data stored in
{+client-database+}, called **{+sync+}**, as well as a layer of backend
functionality collectively called **App Services**.
The {+service+} Android SDK optionally contains the ability to access
these {+app+}s running in the cloud. In addition to local
{+client-database+} in the SDK, {+app+}s provide the
following functionality:

Realm Sync
~~~~~~~~~~

Automatically sync data between {+realm+}s on client devices and your backend
MongoDB Atlas data store with :ref:`{+sync+} <android-sync-changes-between-devices>`:

.. tabs-realm-languages::
   
   .. tab::
      :tabid: kotlin

      .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.kt
         :language: kotlin

   .. tab::
      :tabid: java

      .. literalinclude:: /examples/generated/android/sync/LandingPageTest.codeblock.update.java
         :language: java

App Services
~~~~~~~~~~~~

- Use {+service-short+}'s built-in user management to enable
  :ref:`user account creation <android-register-a-new-user-account>`
  and user :ref:`authentication <android-authenticate-users>` across
  devices.

- Store data persistently with :ref:`permissions <mongodb-crud-permissions>`
  in your backend {+app+} using a
  :ref:`{+atlas+} database <mongodb-service>`.

- Execute logic in your backend {+app+} from a client application using
  :ref:`Functions <android-call-a-function>`.

- React to events in your backend {+app+} using
  :ref:`Triggers <triggers>`.

.. seealso::

   To get started with {+service+}, try the our
   :ref:`Quick Start with Sync <android-client-quick-start-sync>`.

Get Started
-----------

To start using the {+service+} Android SDK
in your Android application, see :ref:`Install Realm for Android
<android-install>` to add the Android SDK dependency and then check
out the :ref:`Quick Start <android-client-quick-start-local>`.

To learn more about the concepts that underly {+client-database+},
such as the :ref:`Asynchronous API <android-async-api>`, the 
:ref:`Query Engine <android-client-query-engine>`, and more,
check out the Fundamentals.

For practical code samples of common tasks in {+client-database+} and
{+app+}s, take a look at the Examples.

.. list-table::
   :header-rows: 1
   :class: index-table

   * - Get Started
     - Fundamentals
     - Examples
     - Realm Apps Examples

   * - :doc:`Install Realm for Android </sdk/android/install>`

       :doc:`Quick Start </sdk/android/quick-start-local>`

       :doc:`Quick Start with Sync </sdk/android/quick-start-sync>`

       :doc:`Quick Start with LiveData </sdk/android/livedata>`

       :doc:`Upgrade from Stitch to Realm </sdk/android/migrate>`

     - :doc:`Asynchronous API </sdk/android/fundamentals/async-api>`

       :doc:`Realms </sdk/android/fundamentals/realms>`

       :doc:`Live Queries </sdk/android/fundamentals/live-queries>`

       :doc:`Query Engine </sdk/android/fundamentals/query-engine>`

       :doc:`Write Transactions </sdk/android/fundamentals/write-transactions>`

       :doc:`Relationships </sdk/android/fundamentals/relationships>`

       :doc:`Object Models & Schemas </sdk/android/fundamentals/object-models-and-schemas>`

       :doc:`Schema Versions & Migrations </sdk/android/fundamentals/schema-versions-and-migrations>`

       :doc:`Application Services </sdk/android/fundamentals/application-services>`

     - :doc:`Define a Realm Object Schema </sdk/android/examples/define-a-realm-object-model>`

       :doc:`Open & Close a Local Realm </sdk/android/examples/open-and-close-a-local-realm>`

       :doc:`Read & Write Data </sdk/android/examples/read-and-write-data>`

       :doc:`Filter Data </sdk/android/examples/filter-data>`

       :doc:`React to Changes </sdk/android/examples/react-to-changes>`

       :doc:`Display Collections </sdk/android/examples/adapters>`

       :doc:`Modify an Object Schema </sdk/android/examples/modify-an-object-schema>`

     - :doc:`Connect to a MongoDB Realm Backend App </sdk/android/examples/connect-to-mongodb-realm-backend-app>`

       :doc:`Authenticate Users </sdk/android/examples/authenticate-users>`

       :doc:`Sync Changes Between Devices </sdk/android/examples/sync-changes-between-devices>`

       :doc:`Call a Function </sdk/android/examples/call-a-function>`

       :doc:`Manage Email/Password Users </sdk/android/examples/email-password-users>`

       :doc:`Create & Manage User API Keys </sdk/android/examples/manage-user-api-keys>`

       :doc:`Query MongoDB </sdk/android/examples/mongodb-remote-access>`

Advanced Guides
---------------

.. list-table::
   :header-rows: 1
   :class: index-table

   * - Realm Database
     - Realm Apps

   * - :doc:`Encryption </sdk/android/advanced-guides/encryption>`

       :doc:`Threading </sdk/android/advanced-guides/threading>`

       :doc:`Testing </sdk/android/advanced-guides/testing>`

     - :doc:`Link User Identities </sdk/android/advanced-guides/link-user-identities>`

       :doc:`Multi-User Applications </sdk/android/advanced-guides/multi-user-applications>`

       :doc:`Custom User Data </sdk/android/advanced-guides/custom-user-data>`

       :doc:`Client Resets </sdk/android/advanced-guides/client-reset>`
