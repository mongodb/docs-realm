:template: product-landing
:hidefeedback: header
:noprevnext:

.. _cpp-intro:

===============
C++ SDK (Alpha)
===============

.. toctree::
   :titlesonly:

   Why Realm? </sdk/cpp/realm-database>
   Install Realm </sdk/cpp/install>
   Quick Start </sdk/cpp/quick-start>
   Model Data </sdk/cpp/model-data>
   Configure & Open a Realm </sdk/cpp/realm-files/configure-and-open-a-realm>
   CRUD </sdk/cpp/crud/>
   React to Changes </sdk/cpp/react-to-changes>
   Application Services </sdk/cpp/application-services>
   Manage Users </sdk/cpp/manage-users>
   Sync Data </sdk/cpp/sync>
   Logging </sdk/cpp/logging>
   SDK Telemetry </sdk/cpp/telemetry>
   GitHub <https://github.com/realm/realm-cpp>
   API Reference (Doxygen) <https://www.mongodb.com/docs/realm-sdks/cpp/latest/>
   Example Projects <https://github.com/realm/realm-cpp/tree/main/examples>
   Release Notes <https://github.com/realm/realm-cpp/releases>

Use the Realm C++ SDK to write applications in C++ that access data
stored in realms and sync data with Atlas.

Alpha SDK
---------

This SDK is currently offered as an **alpha** release. We encourage you 
to try out the features and `give feedback
<https://feedback.mongodb.com/forums/923521-realm/>`__. However, be
aware that APIs and functionality are subject to change.

The C++ SDK does not yet support all Realm features or Atlas App
Services integrations.

.. kicker:: What You Can Do

Develop Apps with Realm
-----------------------

Use free open-source Realm as a local object store on a device.
Use Device Sync to keep data in sync with your MongoDB Atlas cluster and
other clients.

.. tabs::

   .. tab:: Use Realm Locally
      :tabid: local-realm

      .. procedure::

         .. step:: Install the Realm C++ SDK

            Use Swift Package Manager or Cmake to :ref:`cpp-install` 
            in your project.

            Include the header in the translation unit where you want to 
            use it to get started.

         .. step:: Define an Object Schema

            Use C++ to idiomatically :ref:`define an object type
            <cpp-define-a-new-object-type>`.

         .. step:: Open a Realm

            Realm stores objects in realm files on your device.
            :ref:`Configure and open a realm <cpp-configure-and-open-a-realm>`
            to get started reading and writing data.

         .. step:: Read and Write Data

            :ref:`Create <cpp-crud-create>`, :ref:`read <cpp-crud-read>`,
            :ref:`update <cpp-crud-update>`, and :ref:`delete <cpp-crud-delete>`
            objects from the realm. Filter data using Realm's
            :ref:`query engine <cpp-filter-data>`.

         .. step:: React to Changes

            Realm's live objects mean that your data is always up-to-date.
            You can :ref:`register a notification handler <cpp-react-to-changes>`
            to watch for changes and perform some logic, such as updating
            your UI.

      .. image:: /images/illustrations/Spot_MauvePurple_Infrastructure_Tech_RealmApp2x.png
         :alt: Realm Mobile Illustration

   .. tab:: Sync Data Across Devices
      :tabid: device-sync

      .. procedure::

         .. step:: Connect to an Atlas App Services App

            Configure :ref:`Device Sync in an App Services App
            <realm-sync-get-started>`. Define data access rules. Use
            Development Mode to infer your schema from your C++ data 
            model.

            Then, :ref:`connect to the backend <cpp-connect-to-backend>` from
            your client.

         .. step:: Authenticate a User

            Use one of our authentication providers to :ref:`authenticate a
            user <cpp-authenticate-users>`. App Services provides access
            to popular authentication providers, such as Apple, Google, or
            Facebook. Use our built-in email/password provider to manage
            users without a third-party, or use custom JWT authentication to
            integrate with other authentication providers. Anonymous authentication
            provides access without requiring a login or persisting user data.

         .. step:: Open a Synced Realm

            Instead of opening a local realm, :ref:`configure and open a
            synced Realm <cpp-open-synced-realm>`.
            :ref:`Subscribe to a query <cpp-manage-flexible-sync-subscriptions>`
            to determine what data the synced realm can read and write.

         .. step:: Read and Write Synced Data

            The APIs to read and write data from a realm are the same
            whether you're using a synced or local realm. Data that you
            read and write is automatically kept in sync with your Atlas
            cluster and other clients. Apps keep working offline and
            deterministically sync changes whenever a network connection is
            available.

      .. image:: /images/illustrations/Spot_AzureBlue_Mobile_Tech_RealmSync.png
         :alt: Realm Sync Illustration

   .. tab:: Build with Atlas App Services
      :tabid: app-services

      .. container::

         Call Serverless Functions
         ~~~~~~~~~~~~~~~~~~~~~~~~~

         You can :ref:`call serverless Functions <cpp-call-a-function>`
         from your client application that run in an App Services backend.

         Authenticate Users
         ~~~~~~~~~~~~~~~~~~

         Authenticate users with built-in and third-party :ref:`authentication
         providers <cpp-authenticate-users>`. Use the authenticated user to
         access App Services.

      .. image:: /images/illustrations/Spot_MauvePurple_APIs_Tech_RealmApp.png
         :alt: App Services Illustration

.. kicker:: Essential Documentation

Recommended Reading
-------------------

.. card-group::
   :columns: 3
   :style: extra-compact

   .. card::
      :headline: Quick Start
      :cta: See Code Examples
      :url: https://www.mongodb.com/docs/realm/sdk/cpp/quick-start/
      :icon: /images/icons/branding_2022/Technical_ATLAS_Functions3x.png
      :icon-alt: Functions Icon

      Minimal-explanation code examples of how to work with Realm.

   .. card::
      :headline: C++ API Reference
      :cta: C++ SDK Reference
      :url: https://www.mongodb.com/docs/realm-sdks/cpp/latest
      :icon: /images/icons/branding_2022/Technical_REALM_SDK3x.png
      :icon-alt: Realm Icon

      Explore generated Doxygen reference docs for the Realm C++ APIs.

   .. card::
      :headline: C++ SDK on GitHub
      :cta: C++ SDK Repository
      :url: https://github.com/realm/realm-cpp
      :icon: /images/icons/branding_2022/Technical_REALM_SDK3x.png
      :icon-alt: Realm Icon

      Explore the Realm C++ SDK on GitHub.
