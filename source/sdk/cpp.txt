.. _cpp-intro:

===============
C++ SDK (Alpha)
===============

.. toctree::
   :titlesonly:

   Why Realm Database? </sdk/cpp/realm-database>
   Install Realm </sdk/cpp/install>
   Model Data </sdk/cpp/model-data>
   Configure & Open a Realm </sdk/cpp/realm-files/configure-and-open-a-realm>
   CRUD </sdk/cpp/crud/>
   Connect to App Services </sdk/cpp/app-services/connect-to-app>
   Manage Email/Password Users </sdk/cpp/users/manage-email-password-users>
   Manage Sync Subscriptions </sdk/cpp/sync/sync-subscriptions>
   GitHub <https://github.com/realm/realm-cpp>
   API Reference (Doxygen) <https://www.mongodb.com/docs/realm-sdks/cpp/latest/>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/note-alpha-sdk.rst

The Realm C++ SDK enables client applications written in C++ to access data
stored in realms and sync data with Atlas.

Limitations
-----------

The C++ SDK does not yet support all Realm database features or Atlas App
Services integrations.

Install
-------

For installation instructions and minimum requirements, refer to 
:ref:`cpp-install`.

Usage
-----

Define Your Data Model
~~~~~~~~~~~~~~~~~~~~~~

You can define your models as classes or structs that inherit from
``realm::object``.

You must declare any property you want to store (persist) in a realm as
``realm::persisted``. Your model must also expose a public static constant
expression (``constexpr``) member called ``schema``. Use the ``realm::schema``
and ``realm::property`` templates to describe your schema.

Realm ignores any members not declared as ``realm::persisted`` and not
declared in the schema.

.. literalinclude:: /examples/generated/cpp/examples.snippet.define-models.cpp
   :language: cpp

Use Realm
~~~~~~~~~

You can use your data models as you would normal classes, except:

- You may not modify any properties outside of a write transaction.

A **realm** is a collection of persisted objects. When opening a realm, you must
specify which models are available by passing the models into the template
parameter list of the ``realm::open()`` function.

To open a write transaction, pass a function to ``realm.write()``. Make all
modifications within that function.

.. literalinclude:: /examples/generated/cpp/examples.snippet.usage.cpp
   :language: cpp

Further Reading
---------------

- :github:`realmcpp on GitHub <realm/realm-cpp>`
- `API Reference (Doxygen) <{+cpp-prefix+}/>`_
