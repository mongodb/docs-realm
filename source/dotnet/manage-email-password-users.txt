.. _dotnet-manage-email-password-users:

===========================
Manage Email/Password Users
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
If you have enabled the :ref:`email/password provider
<email-password-authentication>` in your {+app+}, you can register a new
account, confirm an email address, and reset a user's password in the
client code.

.. _dotnet-email-password-register-new-user:

Register a New User Account
---------------------------
To register a new user, pass a user-provided email and password to the
:dotnet-sdk:`RegisterUserAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_RegisterUserAsync_System_String_System_String_>` 
method:

.. literalinclude:: /examples/generated/code/start/WorkWithRealm.codeblock.register-user.cs
   :language: csharp


.. _dotnet-email-password-confirm-user:

Confirm a New User's Email Address
----------------------------------

To confirm a newly-created user, pass a confirmation ``token`` and
``tokenId`` to the 
:dotnet-sdk:`ConfirmUserAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ConfirmUserAsync_System_String_System_String_>`
mehtod. 

.. note:: Use Deep Links in Mobile Apps

   Mobile applications can handle email confirmation directly in the app
   by configuring `deep linking <https://developer.android.com/training/app-links/deep-linking.html>`_
   in Android, `universal links <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_
   in iOS, and/or `URI handlers <https://docs.microsoft.com/en-us/windows/uwp/launch-resume/web-to-app-linking>`_ for 
   the Universal Windows Platform (UWP).


.. literalinclude:: /examples/generated/code/start/WorkWithRealm.codeblock.confirm-user.cs
   :language: csharp

.. _dotnet-email-password-reset-password:

Reset a User's Password
-----------------------
To reset a user's password, first send the user a password reset email:

.. literalinclude:: /examples/generated/code/start/WorkWithRealm.codeblock.reset-user-1.cs
   :language: csharp

Password reset emails contain two values, ``token`` and ``tokenId``.
To complete the password reset flow, you can reset the user's password on the client 
or by calling a custom function on the backend.

Reset the Password on the Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To reset the password on the client, your UI should prompt the user to enter a new
password and the ``token`` and ``tokenId`` values. You pass these values to the 
:dotnet-sdk:`ResetPasswordAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_ResetPasswordAsync_System_String_System_String_System_String_>` 
method:

.. literalinclude:: /examples/generated/code/start/WorkWithRealm.codeblock.reset-user-2.cs
   :language: csharp

.. note::

   To access the ``token`` and ``tokenId`` values sent in the password
   reset email, you can use a 
   :ref:`custom password reset email <email-password-authentication-password-resets>` containing an 
   `Android deep link <https://developer.android.com/training/app-links/deep-linking>`_ or 
   `iOS universal link <https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html>`_.

Call a Reset Function
~~~~~~~~~~~~~~~~~~~~~
If you have defined a backend function to reset the user's password, you 
pass the user's email address and **new** password to the 
:dotnet-sdk:`CallResetPasswordFunctionAsync() <reference/Realms.Sync.App.EmailPasswordClient.html#Realms_Sync_App_EmailPasswordClient_CallResetPasswordFunctionAsync_System_String_System_String_System_Object___>` 
method. The function will likely require additional parameters, as shown below:

.. literalinclude:: /examples/generated/code/start/WorkWithRealm.codeblock.reset-user-3.cs
   :language: csharp
