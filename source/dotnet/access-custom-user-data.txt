.. _dotnet-access-custom-user-data:

=======================
Access Custom User Data
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
You can store arbitrary custom user data  about your  
users in {+realm+}. For example,
you might store a user's preferred language, date of birth, or local
timezone. Before writing and reading this data, you must enable custom user data 
in the backend. To learn more, see :ref:`Enable Custom User Data <custom-user-data>`.

.. include:: /includes/use-custom-data-note.rst

To create, update, or delete custom user data, you will need the following
information from your custom user data configuration:

- The :term:`custom user data cluster`

- The :term:`custom user data database`

- The :term:`custom user data collection` in which custom
  user data documents are stored

- The :term:`user ID field` used to map custom user data documents
  to users (via :term:`user ID`)

You can find this information in the {+ui+}. In the left sidebar, click  
:guilabel:`App Users`,  and then select the :guilabel:`Custom User Data` tab.

.. _dotnet-create-custom-user-data:

Create Custom User Data
-----------------------
To create custom user data for a user, create a MongoDB document in the
custom user data collection. The user ID field of the document must
contain the the user's :term:`user ID`. The following example uses
:ref:`MongoDB Data Access <dotnet-mongodb-data-access>` to insert a
document containing the user ID of the currently logged in user and several 
custom properties into the custom user data collection:

.. literalinclude:: /examples/generated/code/start/CustomUserDataExamples.codeblock.create.cs
   :language: csharp

You may find it helpful to create a C# class (POCO) that represents the custom 
user data object. The SDK will serialize/deserialize this class to and from BSON 
when writing, reading, and updating properties. The example above uses the 
following class to map the properties:

.. literalinclude:: /examples/generated/code/start/CustomUserDataExamples.codeblock.cud.cs
   :language: csharp

.. _dotnet-read-custom-user-data:

Read Custom User Data
---------------------
You retrieve custom user data by calling the 
:dotnet-sdk:`GetCustomData() <reference/Realms.Sync.User.html#Realms_Sync_User_GetCustomData>`
method on the ``User`` object of a logged in user:

.. literalinclude:: /examples/generated/code/start/CustomUserDataExamples.codeblock.read.cs
   :language: csharp

.. warning:: Custom Data May Be Stale
   
   {+backend+} does not dynamically update the value of the 
   ``CustomData``  immediately when underlying data changes. Instead, {+backend+} 
   fetches the most recent version of custom user data whenever a user 
   refreshes their :ref:`access token <user-sessions>` or when you explicitly 
   call the 
   :dotnet-sdk:`RefreshCustomDataAsync() <reference/Realms.Sync.User.html#Realms_Sync_User_RefreshCustomDataAsync>` 
   method, which ensures your app has the latest customer user data.


.. _dotnet-update-custom-user-data:

Update Custom User Data
-----------------------
Updating custom user data uses the same code as writing. The following example 
finds and updates the data by using the 
:dotnet-sdk:`UpdateOneAsync() <reference/Realms.Sync.MongoClient.Collection-1.html#Realms_Sync_MongoClient_Collection_1_UpdateOneAsync_System_Object_System_Object_System_Boolean_>` 
method, and then refreshes the data to ensure the latest changes are available:

.. literalinclude:: /examples/generated/code/start/CustomUserDataExamples.codeblock.update.cs
   :language: csharp

Summary
-------

- You can use custom user data to store arbitrary information about your application users.

- {+service+} stores custom user data as a document in a MongoDB collection determined by your application configuration.

- {+service+} associates custom user data with a user based on the value of the user ID field.
