.. _dotnet-client-resets:
.. _dotnet-client-reset:

=============
Client Resets
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

When using :doc:`{+sync+} </sync>`, a **client reset** is a task that your client
app must handle in the following situations:

- The given synced {+realm+} on the server was restored from a backup.
  For example, due to a {+service-short+} server crash.

- The client app made changes to that {+realm+} since the backup was made,
  but did not sync those changes back to the server before the server
  was restored.

In other words, the client app must perform a client reset
on a given synced {+realm+} if the server is restored to a
version older than the version on the client.

.. warning::

   A client reset erases all local data and downloads a new copy of the
   data stored in MongoDB Atlas. Performing a client reset loses all local
   changes made since the client last successfully synced.


Example
-------

By default, the SDK performs client resets automatically on startup when
instructed to do so by the server. When a client
reset occurs, the SDK creates a backup of local data. By default,
the SDK makes no effort to recover lost local changes from this backup.

If a reset is required, {+realm+} sends an 
:dotnet-sdk:`ClientResetException <reference/Realms.Sync.Exceptions.ClientResetException.html>`. 
Your code should add a listener on the 
:dotnet-sdk:`Session.Error <reference/Realms.Sync.Session.html#Realms_Sync_Session_Error>` 
event and handle it by calling the 
:dotnet-sdk:`InitiateClientReset() <reference/Realms.Sync.Exceptions.ClientResetException.html#Realms_Sync_Exceptions_ClientResetException_InitiateClientReset>` 
method. The following example demonstrates this:

.. literalinclude:: /examples/generated/code/start/ClientResetExamples.codeblock.handle.cs
   :language: csharp

