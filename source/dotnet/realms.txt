.. _dotnet-realms:

======
Realms
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

A **{+realm+}** is a set of related objects that conform to a pre-defined
schema and share user-level access permissions. Realms may contain more
than one type of data as long as a schema exists for each type.

A {+realm+} allows you to partition data according to who uses it and when they use it.
Every {+realm+} stores data in a separate :term:`{+realm+} file` that contains a binary
encoding of each object in the {+realm+}. You can automatically :doc:`synchronize
a {+realm+} across multiple devices </sync>` and set up :ref:`reactive event handlers
<dotnet-client-notifications>` that call a function any time an object in a {+realm+} is
created, modified, or deleted.

Comparison with Other Databases
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The {+service+} data model is similar to both relational and document
databases but has distinct differences from both. To underscore these
differences, it's helpful to highlight what a {+realm+} **is not**:

A {+realm+} is not a single, application-wide database.
    Unlike other applications, which store all of their data in a single database,
    {+app+}s often split data across multiple {+realms+} to organize data more efficiently
    and to enforce access controls.

A {+realm+} is not a table.
    Tables typically only store one kind of information, such as street
    addresses or items in a store inventory, whereas a {+realm+} can contain
    any number of object types.

A {+realm+} is not a collection of schemaless documents.
    Application objects are similar to documents, but every object in a
    {+realm+} conforms to a defined schema for its object type. An object
    cannot contain a field that is not described by its schema.

Key Concepts
------------

.. _dotnet-realm-path:

Realms are Partitions of Atlas Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using {+sync+}, each {+realm+} corresponds to a subset of the data in your
:term:`{+app+}'s <{+app+}>` :term:`synced {+atlas+} cluster <synced cluster>`. You can
customize the :ref:`partitioning <partitioning>` of data using your application's
:ref:`partition key <partition-keys>`. Unique values of the partition
key, known as :term:`partition values <partition value>`, correspond to
individual {+realms+}.

You can customize permissions for these partitions of data using :ref:`{+service-short+}
Rules <sync-rules>`.

.. _dotnet-realm-schema:

Realm Schema
~~~~~~~~~~~~

A **{+backend-schema+}** is a list of valid :ref:`object schemas <dotnet-realm-objects>` that
each define an object type that a {+app+} may persist. All objects in a {+realm+} must
conform to the {+backend-schema+}.

Client applications provide a {+frontend-schema+} when they open a {+realm+}. If a
{+realm+} already contains data, then it already has a schema, and when it is opened, 
{+client-database+} validates the schema on the client against the existing schema.

To define the schema, you can specify the 
:dotnet-sdk:`ObjectClasses <reference/Realms.RealmConfigurationBase.html#Realms_RealmConfigurationBase_ObjectClasses>` 
property on the 
:dotnet-sdk:`RealmConfiguration <reference/Realms.RealmConfiguration.html>`. If 
you omit this property, then all classes that inherit from 
:dotnet-sdk:`RealmObject <reference/Realms.RealmObject.html>` or 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>` are added 
to the schema automatically.

.. seealso:: :ref:`Objects <dotnet-realm-objects>`

.. _dotnet-schema-version:

Schema Version
~~~~~~~~~~~~~~

A **schema version** identifies the state of a :ref:`{+backend-schema+}
<dotnet-realm-schema>` at some point in time. {+client-database+} tracks the schema
version of each {+realm+} and uses it to map the objects in each {+realm+}
to the correct schema.

Schema versions are ascending integers that you can optionally include
in the {+realm+} configuration when you open a {+realm+}. If a client
application does not specify a version number when it opens a {+realm+} then
the {+realm+} defaults to version ``0``.

.. important:: Increment Versions Monotonically
   
   :ref:`Migrations <dotnet-client-migrations>` must update a {+realm+} to a
   higher schema version. {+client-database+} will throw an error if a client
   application opens a {+realm+} with a schema version that is lower than
   the {+realm+}'s current version or if the specified schema version is the
   same as the {+realm+}'s current version but includes different
   :ref:`object schemas <dotnet-object-schema>`.

Summary
-------

- A :term:`{+realm+}` is a collection of objects that conform to a
  schema. It is not a single, application-wide database. There can and
  usually will be more than one {+realm+} per application.

- A :term:`partition value` is a {+realm+}'s unique identifier.

- {+service-short+} Rules define who can read or write the {+realm+} and apply to the {+realm+} as a whole.

- A :term:`{+backend-schema+}` is a specification of the object types used in a {+app+}.
