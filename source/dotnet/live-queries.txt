.. _dotnet-live-queries:

===============
Live Queries
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
A read from a :term:`{+realm+}` generally consists of the following
steps:

- Get all :ref:`objects <dotnet-objects>` of a certain type from the {+realm+}.
- Optionally, :ref:`filter <dotnet-filter-results>` the results using the 
  :ref:`query engine <dotnet-client-query-engine>`.
- Optionally, :ref:`sort <dotnet-sort-results>` the results.

All query, filter, and sort operations return a
:ref:`results collection <dotnet-results-collections>`. The results
collections are live, meaning they always contain the latest
results of the associated query.

.. _dotnet-realm-read-characteristics:

Read Characteristics
--------------------

When you design your app's data access patterns around the
following three key characteristics of reads in {+client-database+},
you can be confident you are reading data as
efficiently as possible.

.. _dotnet-results-are-not-copies:

Results Are Not Copies
~~~~~~~~~~~~~~~~~~~~~~

Results to a query are not copies of your data: modifying
the results of a query will modify the data on disk
directly. This memory mapping also means that results are
**live**: that is, they always reflect the current state on
disk.

See also: :ref:`Collections are Live <dotnet-live-collections>`.

.. _dotnet-results-are-lazy:

Results Are Lazy
~~~~~~~~~~~~~~~~

{+client-database+} defers execution of a query until you access the
results. You can chain several filter and sort operations
without requiring extra work to process the intermediate
state.

See also: :ref:`Results are Lazily Evaluated
<dotnet-lazy-evaluated-results>`.

.. _dotnet-references-retained:

References Are Retained
~~~~~~~~~~~~~~~~~~~~~~~

One benefit of {+client-database+}'s object model is that
{+client-database+} automatically retains all of an object's
:ref:`relationships <dotnet-client-relationships>` as direct
references, so you can traverse your graph of relationships
directly through the results of a query.

A **direct reference**, or pointer, allows you to access a
related object's properties directly through the reference.

Other databases typically copy objects from database storage
into application memory when you need to work with them
directly. Because application objects contain direct
references, you are left with a choice: copy the object
referred to by each direct reference out of the database in
case it's needed, or just copy the foreign key for each
object and query for the object with that key if it's
accessed. If you choose to copy referenced objects into
application memory, you can use up a lot of resources for
objects that are never accessed, but if you choose to only
copy the foreign key, referenced object lookups can cause
your application to slow down.

{+client-database+} bypasses all of this using :term:`zero-copy`
:term:`live objects`. :term:`{+service-short+} object` accessors point directly into
database storage using memory mapping, so there is no distinction
between the objects in {+client-database+} and the results of your query in
application memory. Because of this, you can traverse direct references
across an entire {+realm+} from any query result.

Summary
-------

- To read from {+client-database+}, first get all objects of a certain type from the {+realm+}, then filter using the query engine, then (optionally) sort the results.
- When you read, the results are not copies. Instead, through memory mapping, results point directly to the version on disk.
- Queries are lazily-evaluated.
