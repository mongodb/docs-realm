.. _dotnet-realm-objects:

=============
Realm Objects
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} applications model data as objects composed of field-value pairs
that each contain one or more primitive data types or other {+service-short+}
objects. :term:`{+service-short+} objects <Realm object>` are essentially the same
as regular objects, but they also include
additional features like
:ref:`real-time updating data views <dotnet-live-object>` and reactive
:ref:`change event handlers <dotnet-client-notifications>`.

Every {+service-short+} object has an *object type* that refers to the object's
class. Objects of the same type share an :ref:`object schema
<dotnet-object-schema>` that defines the properties and relationships of those
objects. In most languages you define object schemas using the native
class implementation.

.. _dotnet-example:

Example
--------

.. example::

   The following code block shows an object schema that describes a Dog.
   Every Dog object must include a ``Name`` and may
   optionally include the dog's ``Age``, ``Breed`` and a list of people that 
   represents the dog's ``Owners``. 

   .. literalinclude:: /examples/generated/code/start/Examples.codeblock.dog_class.cs
      :language: csharp


.. note::
   
   To define a collection of objects within an object, use an ``IList<T>`` with 
   only a getter. You do not need to initialize it in the constructor, as {+realm+} 
   will generate a collection instance the first time the property is accessed. 


.. _dotnet-live-object:

Live Object
-----------

Objects in {+service-short+} clients are **live objects** that
update automatically to reflect data changes, including
:doc:`synced </sync>` remote changes, and emit
:ref:`notification events <dotnet-client-notifications>` that you
can subscribe to whenever their underlying data changes. You
can use live objects to work with object-oriented data
natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object always references the most up-to-date data on disk and
:wikipedia:`lazy loads <Lazy_loading>` property values when you access
them from a :ref:`collection <dotnet-client-collections>`. This means that a
{+realm+} can contain many objects but only pay the performance cost for
data that the application is actually using.

Valid write operations on a live object automatically persist to the
{+realm+} and propagate to any other synced clients. You do not need to
call an update method, modify the {+realm+}, or otherwise "push" updates.

.. _dotnet-object-schema:

Object Schema
-------------

An **object schema** is a configuration object that defines the fields and 
relationships of a {+service-short+} object type. {+service-short+} client 
applications define object schemas with the native class implementation in their 
respective language using the :term:`{+frontend-schema+}`.

Object schemas specify constraints on object properties such as the data
type of each property and whether or not a property is required. Schemas can 
also define :ref:`relationships <dotnet-client-relationships>` between object 
types in a {+realm+}.

Every {+app+} has a :ref:`{+backend-schema+} <dotnet-realm-schema>`
composed of a list of object schemas for each type of object that the
{+realms+} in that application may contain. {+service+} guarantees that all 
objects in a {+realm+} conform to the
schema for their object type and validates objects whenever they're
created, modified, or deleted.

.. _dotnet-field-types:

Field Types
~~~~~~~~~~~

{+client-database+} supports the following field data types:

- ``Boolean`` or ``boolean``
- ``Integer`` or ``int``
- ``Short`` or ``short``
- ``Long`` or ``long``
- ``Byte`` or ``byte[]``
- ``Double`` or ``double``
- ``Float`` or ``float``
- ``String``
- ``Date``
- ``Decimal128`` from ``org.bson.types``
- ``ObjectId`` from ``org.bson.types``
- ``IList<T>`` where T is any of the previous data types (see :ref:`Lists <dotnet-field-lists>`)
- A ``RealmObject`` subclass (see :ref:`Relationship Annotations <dotnet-field-relationships>`)
- An ``EmbeddedObject`` class (see :ref:`Embedded Object Annotations <dotnet-field-relationships-embedded>`)

The ``Byte``, ``Short``, ``Integer``, and ``Long`` types and their
lowercase primitive alternatives are all stored as ``Long`` values
within {+client-database+}. Similarly, {+client-database+} stores objects
of the ``Float`` and ``float`` types as type ``Double``.

``final`` and ``volatile`` fields are not supported, though you can
include fields with those modifiers if you :ref:`ignore
<dotnet-ignore-field>` those fields. If you choose to provide custom
constructors, you must declare a public constructor with no arguments.

.. _dotnet-field-lists:

Lists
~~~~~

Realm objects can contain lists of non-{+service-short+}-object data
types. You can model these collections with the standard .NET interface
`IList<T> <https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-5.0>`__,
where ``T`` can be any data type (excluding lists).

Unlike lists of {+service-short+} objects, these lists can contain
null values. If null values shouldn't be allowed, use the
:ref:`[Required] <dotnet-required-field>` annotation.

.. literalinclude:: /examples/Schemas/Lists.cs
  :language: csharp


.. _dotnet-field-embedded:

Embedded Objects
~~~~~~~~~~~~~~~~

{+client-database+} provides the ability to nest objects within other
objects. This has several advantages:

- If using {+sync+}, objects will translate into MongoDB documents that
  follow a :manual:`denormalized data model </core/data-model-design/>`.

- When you delete an object that contains another object, the delete
  operation removes both objects from the {+realm+}, so unused objects
  don't accumulate in your {+realm+} file, taking up valuable space on
  user's mobile devices.

To embed an object, extend 
:dotnet-sdk:`EmbeddedObject <reference/Realms.EmbeddedObject.html>`
for the class that you'd like to nest within another class:

.. literalinclude:: /examples/Schemas/Embedded.cs
  :language: csharp


Then, any time you reference that class from another class,
{+client-database+} will embed the referenced class within the enclosing
class.

.. seealso::

   :ref:`Embedded Objects <dotnet-embedded-objects>`

.. _dotnet-annotations:

Annotations
------------

.. _dotnet-primary-key:

Primary Key
~~~~~~~~~~~

A **primary key** is a field that uniquely identifies an object. You can
create a primary key with any of the following types:

- ``String``
- ``ObjectId``
- ``Integer`` or ``int``
- ``Long`` or ``long``
- ``Short`` or ``short``
- ``Byte`` or ``byte[]``

You may define a primary key on a **single 
property** for an 
object type as part of the :ref:`object schema <dotnet-object-schema>`.
{+client-database+} automatically indexes primary key properties, which
allows you to efficiently read and modify objects based on their primary
key. 

If an object type has a primary key, then all objects of that type must
include the primary key property with a value that is unique among
objects of the same type in a {+realm+}. 

.. note::
   
   Once you assign a property as a primary key, you cannot change it after adding an
   object of that type to a {+realm+}.
   
   The following example demonstrates how to designate a primary key in an object schema:
   
   .. literalinclude:: /examples/Schemas/PrimaryKey.cs
      :language: csharp


.. _dotnet-required-optional-field:

Required and Optional Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a field is normally nullable, you can make it required to disallow ``null`` values
using the ``[Required]`` annotation. In .NET, fields are nullable only if marked with with the 
C# `? operator <https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types>`__ except
for the following types:

- ``String``
- ``Date``
- ``ObjectId``
- ``Decimal128``

Any value type in C# can be made nullable with the ``?``, although by
default they are non-nullable without it. 
Fields with the ``RealmObject`` type are always
nullable and cannot be required.

You can use the ``[Required]`` annotation as seen in the following example:

 .. literalinclude:: /examples/Schemas/Required.cs
      :language: csharp

Nullable fields are optional by default in {+client-database+}, unless
otherwise specified with the :ref:`[Required] <dotnet-required-field>`
annotation. 


.. _dotnet-default-field-values:

Default Field Values
~~~~~~~~~~~~~~~~~~~~

You can use the built-in language features to assign a default value to a field. 
In .NET, you can assign a default value in the field declaration. 

.. literalinclude:: /examples/Schemas/DefaultValues.cs
  :language: csharp

.. note:: Default Values and Nullability

   While default values ensure that a newly created object cannot contain
   a value of ``null`` (unless you specify a default value of ``null``),
   they do not impact the nullability of a field. To make a field
   non-nullable, see :ref:`Required Fields <dotnet-required-field>`.

.. dotnet-index-field:

Indexes
~~~~~~~

**Indexes** support the efficient execution of queries in
{+client-database+}. Without indexes, {+client-database+} must perform a
*collection scan*, i.e. scan every document in a collection, to select
those documents that match a query. If an appropriate index exists for a
query, {+client-database+} can use the index to limit the number of
documents that it must inspect.

Indexes are special data structures that store a small portion of a
{+realm+}'s data in an easy to traverse form. The index stores the value
of a specific field ordered by the value of the field. The ordering of
the index entries supports efficient equality matches and range-based
query operations.

Adding an index to a field makes write operations slightly slower, but makes
certain queries faster. Indexes require space in your {+realm+} file, so
adding an index to a field will increase disk space consumed by your
{+realm+} file.

You can index fields with the following types:

- ``String``
- ``ObjectId``
- ``Integer`` or ``int``
- ``Long`` or ``long``
- ``Short`` or ``short``
- ``Byte`` or ``byte[]``
- ``Boolean`` or ``bool``
- ``Date``

To index a field, use the :dotnet-sdk:`[Indexed] <reference/Realms.IndexedAttribute.html>`
annotation:

.. literalinclude:: /examples/Schemas/Indexed.cs
  :language: csharp


.. _dotnet-field-relationships:

Relationships
~~~~~~~~~~~~~

{+client-database+} supports several kinds of object relationships.

.. seealso::

   :ref:`Relationships <dotnet-client-relationships>`

.. _dotnet-field-relationships-many-to-one:

To-One
======

To set up a many-to-one or one-to-one relationship, create a field
with whose type is a ``RealmObject`` in your application:


.. literalinclude:: /examples/Schemas/ManyToOne.cs
  :language: csharp

Each ``Dog`` references zero or one ``Person`` instances. Nothing prevents
multiple ``Dog`` instances from referencing the same ``Person`` as an owner;
the distinction between a many-to-one and a one-to-one relationship is
up to your application.

Setting a relationship field to null removes the connection between
objects, but {+client-database+} does not delete the referenced object
unless that object is :ref:`embedded <dotnet-field-relationships-embedded>`.

.. _dotnet-field-relationships-many-to-many:

To-Many
=======

You can create a relationship between one object and any number of objects
using a field of type ``IList<T>`` where ``T`` is a
{+service-short+} object in your application:

.. literalinclude:: /examples/Schemas/ManyToMany.cs
  :language: csharp


.. _dotnet-field-relationships-inverse:

Inverse Relationships
=====================

By default, {+client-database+} relationships are unidirectional. You
can follow a link from one class to a referenced class, but not in the
opposite direction. You can provide a link in the opposite direction
with the :dotnet-sdk:`[Backlink] <reference/Realms.BacklinkAttribute.html>` annotation:

.. literalinclude:: /examples/Schemas/Inverse.cs
  :language: csharp

Since relationships are many-to-one or many-to-many, following inverse
relationships can result in zero, one, or many objects.

Like any other ``RealmResults`` set, you can
:ref:`query <dotnet-client-query-engine>` an inverse relationship.


.. _dotnet-ignore-field:

Ignore a Field
~~~~~~~~~~~~~~

If you don't want to save a field in your model to a {+realm+}, you can
ignore that field.

Ignore a field from a {+service-short+} object model with the
:dotnet-sdk:`[Ignored] <reference/Realms.IgnoredAttribute.html>` annotation:

.. literalinclude:: /examples/Schemas/Ignored.cs
  :language: csharp

.. _dotnet-rename-field:

Rename a Field
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent fields internally. In some cases you might want to change
this behavior:

- To make it easier to work across platforms, since naming conventions differ.
- To change a field name in .NET without forcing a migration.

Choosing an internal name that differs from the name used in model classes
has the following implications:

- Migrations must use the internal name when creating classes and fields.
- Schema errors reported will use the internal name.

Use the :dotnet-sdk:`[MapTo] <reference/Realms.MapToAttribute.html>`
annotation to rename a field:

.. literalinclude:: /examples/Schemas/RenameField.cs
  :language: csharp


.. _dotnet-rename-object:

Rename a Class
~~~~~~~~~~~~~~

By default, {+client-database+} uses the name defined in the model class
to represent classes internally. In some cases you might want to change
this behavior:

- To support multiple model classes with the same simple name in different packages.
- To make it easier to work across platforms, since naming conventions differ.
- To use a class name that is longer than the 57 character limit enforced by {+client-database+}.
- To change a class name in .NET without forcing a migration.

Use the :dotnet-sdk:`[MapTo] <reference/Realms.MapToAttribute.html>`
annotation to rename a class:

.. literalinclude:: /examples/Schemas/RenameClass.cs
  :language: csharp

.. _dotnet-provide-subset-classes-schema:

Provide a Subset of Classes to your Realm Schema
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, your application's {+service-short+} Schema includes all
classes that extend ``RealmObject``. If you only want to include a
subset of classes that extend ``RealmObject`` in your {+service-short+}
Schema, you can update your configuration to include the specific classes you want:

.. literalinclude:: /examples/Schemas/SubsetClasses.cs
  :language: csharp

.. _dotnet-decimal128:

Using Decimal Values
--------------------
Realm supports 128-bit decimal values with the ``Decimal128`` Bson type. When 
defining a decimal type, you can use the ``Decimal128`` Bson type or the .NET 
``decimal`` type, even though it is only a 96-bit decimal. The SDK automatically 
converts between the two, although you risk losing precision or range. The 
following example shows how to use both the ``Decimal128`` Bson type and the .NET 
``decimal`` type:

.. literalinclude:: /examples/generated/code/start/DecimalFun.codeblock.decimal128.cs
  :language: csharp


Summary
-------

- {+service-short+} objects are of a **type** defined as you would any other
  class.

- {+service-short+} objects are **live**: they always reflect the latest version
  on disk and update automatically when the underlying object changes.

- A {+service-short+} object type may have a **primary key** property to uniquely
  identify each instance of the object type.

- The {+service-short+} object's **schema** defines the properties of the object and
  which properties are optional, which properties have a default value,
  and which properties are indexed.
