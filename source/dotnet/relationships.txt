.. _dotnet-client-relationships:

=============
Relationships
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} allows you to define explicit relationships between the types of
objects in a {+app+}. A relationship is an object property that references
another {+service-short+} object rather than one of the primitive data types. You
define relationships by setting the type of an object property to
another object type in the :ref:`property schema <dotnet-property-schema>`.

Relationships are direct references to other objects in a {+realm+}, which
means that you don't need bridge tables or explicit joins to define a
relationship like you would in a relational database. Instead you can
access related objects by reading and writing to the property that
defines the relationship. {+client-database+} executes read operations
lazily as they come in, so querying a relationship is just as performant
as reading a regular property.

There are three primary types of relationships between objects:

- :ref:`One-to-One Relationship <dotnet-to-one-relationship>`
- :ref:`One-to-Many Relationship <dotnet-to-many-relationship>`
- :ref:`Inverse Relationship <dotnet-inverse-relationship>`

Key Concepts
------------

.. _dotnet-to-one-relationship:

To-One Relationship
~~~~~~~~~~~~~~~~~~~

A **to-one** relationship means that an object is related in a specific
way to no more than one other object. You define a to-one relationship
for an object type in its :ref:`object schema <dotnet-object-schema>` by
specifying a property where the type is the related {+service-short+} object type.

.. example::

   An application could use the following object schemas to indicate
   that a Person may or may not own a single Dog by including it in its
   ``dog`` property:
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: c-sharp
 
         .. literalinclude:: /examples/Relationships/ToOne/ToOne.cs
           :language: csharp
           :emphasize-lines: 5

.. _dotnet-to-many-relationship:

To-Many Relationship
~~~~~~~~~~~~~~~~~~~~

A **to-many** relationship means that an object is related in a specific
way to multiple objects. You define a to-many relationship for an object
type in its :ref:`object schema <dotnet-object-schema>` by specifying a
property where the type is a list or array of the related {+service-short+} object
type.

.. example::
   
   An application could use the following object schemas to indicate
   that a Person may own multiple Dogs by including them in its ``dog``
   property:
   
   .. tabs-realm-languages::
   
      .. tab::
         :tabid: c-sharp
   
         .. literalinclude:: /examples/Relationships/ToMany/ToMany.cs
            :language: csharp
            :emphasize-lines: 5


.. _dotnet-inverse-relationship:

Inverse Relationship
~~~~~~~~~~~~~~~~~~~~

An **inverse relationship** links an object back to any other objects that refer
to it in a defined to-one or to-many relationship. Relationships are
unidirectional, so you must explicitly define a property in the object's model
as an inverse relationship.

For example, the to-many relationship "User owns Tasks" does not automatically
create the inverse relationship "Task is owned by User". If you don't specify
the inverse relationship in the object model, you would need to run a separate
query to look up the user that owns a given task.

{+client-database+} automatically updates implicit relationships whenever an
object is added or removed in the specified relationship. You cannot manually
set the value of an inverse relationship property.

.. example::
   
   An application could use the following object schemas to indicate that a User
   may own multiple Tasks by including them in their ``tasks`` property and that
   {+client-database+} should implicitly keep track of each tasks's owner in its
   ``assignee`` property:
   
   .. tabs-realm-languages::
    
      .. tab::
         :tabid: c-sharp

         .. literalinclude:: /examples/Relationships/Inverse/Inverse.cs
            :language: csharp
            :emphasize-lines: 7, 19-20

Summary
-------

- A **relationship** is when a {+service-short+} object property references
  another {+service-short+} object.

- Relationships are direct references. You can access a related object
  directly through the relationship property of another object.

- {+client-database+} supports to-one, to-many, explicit inverse and implicit
  inverse relationships.
