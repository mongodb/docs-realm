.. _dotnet-call-a-function:

===============
Call a Function
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

Overview
--------

You can call a :doc:`function </functions>` from a connected client
application.

Usage
-----

The examples in this section demonstrate calling a simple function named
``sum`` that takes two arguments, adds them, and returns the result:

.. code-block:: javascript

   // sum: adds two numbers
   exports = function(a, b) {
     return a + b;
   };

Call from a Client Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To execute a function from the .NET Client SDK, use the ``user.Functions.CallAsync()`` 
method, passing in the name of the function as the first parameter and the arguments
as the remaining parameters:

.. literalinclude:: /examples/generated/code/start/Examples.codeblock.callfunc.cs
   :language: csharp

.. note::

   The ``CallAsync()`` method returns a single ``BsonValue`` object, which you can 
   deserialize after calling the function or by using the the generic 
   overload. Both of these approaches to deserialization are shown in the 
   code above. 
   
A ``BsonValue`` object can hold a single primitive value (as shown in the 
example above), or hold a complete BSON document. If 
you have a class that maps to the returned object, you can deserialize 
to that class by using the generic overload. For example, the following code 
calls a function that returns an object from a collection of "RealmTasks". 
Since we know the shape of the returned object, we we can deserialize the 
``BsonValue`` to a class that we have created, and then we have 
access to the properties and methods on that object:

.. literalinclude:: /examples/generated/code/start/Examples.codeblock.callfuncWithPOCO.cs
   :language: csharp
