.. _dotnet-embedded-objects:

================
Embedded Objects
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

An embedded object is a special type of :ref:`Realm object
<dotnet-realm-objects>` that models complex data about a specific object.
Embedded objects are similar to :ref:`relationships
<dotnet-client-relationships>`, but they provide additional constraints and
map more naturally to the denormalized :manual:`MongoDB document model
</core/data-modeling-introduction/>`.

Realm enforces unique ownership constraints that treat each embedded
object as nested data inside of a single, specific parent object. An
embedded object inherits the lifecycle of its parent object and cannot
exist as an independent Realm object. Realm automatically deletes
embedded objects if their parent object is deleted or when overwritten
by a new embedded object instance.

.. admonition:: Realm Uses Cascading Deletes for Embedded Objects
   :class: note

   When you delete a Realm object, Realm automatically deletes any
   embedded objects referenced by that object. Any objects that your
   application must persist after the deletion of their parent object
   should use :ref:`relationships <dotnet-client-relationships>`
   instead.

Embedded Object Data Models
---------------------------

You can define embedded object types using either Realm object models or
a server-side document schema. Embedded object types are reusable and
composable. You can use the same embedded object type in multiple parent
object types and you can embed objects inside of other embedded objects.

.. important::
   
   Embedded objects cannot have a primary key.

Realm Object Models
~~~~~~~~~~~~~~~~~~~

To specify that a Realm object model defines an embedded object, derive
the embedded object class from :java-sdk:`RealmObject
<io/realm/RealmObject.html>` and set the ``embedded`` property of the
:java-sdk:`RealmClass <io/realm/annotations/RealmClass.html>`
annotation to ``true``. You can reference an
embedded object type from parent object types in the same way as you
would define a relationship.


Consider the following code example where a Task Class is created containing an
``Assignee`` field that is an embedded object of a User Class: 

.. literalinclude:: /examples/generated/code/start/Task.codeblock.task-object-model.cs
   :language: csharp

.. literalinclude:: /examples/generated/code/start/User.cs
   :language: csharp

JSON Schema
~~~~~~~~~~~

.. include:: /includes/embedded-object-json-schema.rst


Read and Write Embedded Objects
-------------------------------

Create an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To create an embedded object, assign an instance of the embedded object
to a parent object's property:

.. literalinclude:: /examples/generated/code/code/start/Examples.codeblock.embeddedobject.cs
   :language: csharp
