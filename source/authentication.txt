.. _users-and-authentication:

----------------------
Users & Authentication
----------------------

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

{+service+} manages authentication for your application's
end users and allows you to store and access metadata for
each user. Every request in {+service+} is associated with an
authenticated user, which enables {+service+}'s role-based
:ref:`data access rules <mongodb-rules>` to dynamically
determine read & write permissions for every object included
in their request.

Users log in through modular :doc:`authentication providers
</authentication/providers>` that each represent a specific method of
authentication. {+service+} includes several built-in providers for
common use cases as well as custom providers that allow you to integrate
any external authentication system.

Concepts
--------

.. _auth-providers:

Authentication Providers
~~~~~~~~~~~~~~~~~~~~~~~~

An **authentication provider** is a modular service that maintains
information about your application's users and allows them to verify
their identity.

Users authenticate themselves by providing a set of credentials to an
authentication provider. If the credentials are valid, the provider
returns a unique identity associated with the user and {+backend+}
logs them in as the :ref:`active user <active-user>`.

{+service+} includes built-in authentication providers for common
use cases, including :doc:`anonymous
</authentication/anonymous>` users, :doc:`email/password
</authentication/email-password>` combinations, :doc:`API
keys </authentication/api-key>`, and OAuth 2.0 through
:doc:`Facebook </authentication/facebook>`, :doc:`Google
</authentication/google>`, and :doc:`Apple ID
</authentication/apple>`.

You can also configure your own custom authentication
providers to integrate external authentication systems. The
:doc:`Custom JWT </authentication/custom-jwt>` provider
accepts JSON web tokens signed by the external system and
the :doc:`Custom Function </authentication/custom-function>`
provider allows you to define custom logic in a :term:`{+service-short+} Function`.

.. admonition:: User Authentication is Required
   :class: important
   
   Every application must have at least one authentication provider
   configured and enabled before any client application can successfully
   connect. For more information on how to configure and enable
   authentication providers, see :doc:`Authentication Providers
   </authentication/providers>`.

.. _user-accounts:

User Accounts
~~~~~~~~~~~~~

A **user account** represents a single, distinct user of
your application. Every user account has a unique ID and is
associated with at least one :ref:`authentication provider
identity <authentication-provider-identities>`. {+backend+}
automatically sources user metadata, such as their email
address or birthday, from authentication providers and
allows you to associate each user with :doc:`custom data
</users/enable-custom-user-data>` stored in a collection
of your :term:`linked {+atlas+} data source <data source>`.

.. admonition:: Link Multiple Identities to One User Account
   :class: note

   When a user authenticates with a provider for the first
   time, {+backend+} creates a new account and associates the
   authenticated identity with that account. Some providers
   allow you to associate the identity with an existing user
   account instead of creating a new one. This allows users
   to log in to the same account with multiple
   authentication providers. For more information, see
   :doc:`Link a New Identity to a User
   </authentication/linking>`.


.. _authentication-provider-identities:

Authentication Provider Identities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An **authentication provider identity** is a set of metadata
about a user that {+backend+} obtains from each authentication
provider used to authenticate that user. A single user
account can have multiple identities if the user associates
their account with multiple authentication providers.

When a user first logs in with an authentication provider,
{+backend+} associates the user with an identity object that
contains a unique identifier and :ref:`additional,
provider-specific metadata <user-metadata>` about the user.
On subsequent logins, {+backend+} refreshes the existing identity
data but does not create a new identity.

.. _active-user:

Active User
~~~~~~~~~~~

In the {+service-short+} SDKs, multiple users can log in simultaneously,
but only one account can be **active** at any given time.
The **active user** is a user account associated with an
application request. When {+backend+} receives a request from a
client application, it executes the request in the context
of the active user, replacing any dynamic references to the
user (e.g. :json-expansion:`%%user` in a JSON expression)
with the active user's information.

In most circumstances, the active user is the authenticated
user that issued a request. You can also configure a
specific active user for Functions, Triggers, and webhooks
or choose to use the :ref:`system user <system-user>`
instead.

.. _system-user:

System User
~~~~~~~~~~~

The **system user** is an internal user that has advanced
privileges and automatically bypasses all rules. You can
configure :doc:`Functions </functions>` and :ref:`incoming
webhooks <incoming-webhooks>` to run in the context of the
system user instead of the user account that issued a
request. Triggers always run in the context of the system
user.

The system user is useful for administrative tasks that need
to circumvent rules and queries that need :doc:`unrestricted
access </mongodb/service-limitations>` to MongoDB
CRUD and aggregation operations.

.. admonition:: Security Warning
   :class: important

   Rules do not apply to the system user, which means that
   Functions and webhooks that run as the :term:`system user`
   can become a security liability. Ensure that you do not expose these
   functions to unauthorized users.
   
   For example, you can use :ref:`function context <context-user>` to
   check if the active user is allowed to call the system function based
   on a condition that you define, e.g.:

   .. code-block:: javascript
      
      exports = function() {
        const activeUser = context.user
        const adminUserId = context.values.get("adminUserId");
        if(activeUser.id == adminUserId) {
          // The user can only execute code here if they're an admin.
        } else {
          throw Error("This user is not allowed to execute the system function")
        }
      }

.. _user-sessions:

User Sessions
~~~~~~~~~~~~~

A **user session** is a user's state of being authenticated
with your app for a certain period of time. While a user is
authenticated, they can interact with app data without
needing to enter their password or otherwise
re-authenticate.

Sessions are managed with access tokens and a refresh token
provided by {+backend+}. The client SDKs implement the logic of
managing these tokens and providing them to {+backend+} when
making requests.

For web browsers, the JavaScript SDK stores these tokens in
`HTML5 local storage <https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API>`_.
In the Android SDK, they are stored in
`Shared Preferences <https://developer.android.com/guide/topics/data/data-storage.html#pref>`_.
In the iOS SDK, they are stored in the
`Keychain <https://developer.apple.com/documentation/security/keychain_services>`_.

The access token for a session expires after thirty minutes.
However, a new session can be started by retrieving a new
access token from {+backend+} using the refresh token. The SDKs
automatically take care of refreshing access tokens, so you
do not need to worry about this when implementing client
applications.

You can invalidate a refresh token by calling the
``logout()`` method on the client, which does two things:

- It deletes the local session information by deleting both the access and refresh tokens.
- It invalidates the refresh token in the {+backend+} backend.

.. note::

   The ``logout()`` method provided by the SDKs does **NOT**
   invalidate any active sessions on the server. This means
   that if you somehow expose the access token to a
   malicious user before ``logout()`` is called, the
   malicious user could theoretically use the token to
   continue making requests on behalf of the user who
   "logged out" for up to thirty minutes (that is, until
   that access token expires).

The user list under the :guilabel:`Users` tab, on the
:guilabel:`Users` page of the {+service-short+} admin console, provides
a way to revoke all sessions for a specific user. This will
invalidate all access tokens and refresh tokens for that user. See the
:ref:`Revoking User Sessions <revoke-user-sessions>` page for the specific
steps.

Summary
-------

- {+service+} supports authentication and user accounts through a
  variety of :doc:`authentication providers </authentication/providers>`.
  Users can associate themselves with multiple authentication providers
  and have identity information from multiple providers.

- {+service+} supports having multiple users logged in at the same time.
  There is only one **active user** at a time.

- The **system user** is a special user in {+backend+} that
  bypasses all rules.

- {+backend+} handles the access tokens and refresh tokens that comprise
  a **user session** automatically.


.. toctree::
   :titlesonly:
   :caption: User Management
   :maxdepth: 2
   :hidden:

   User Objects </authentication/user-objects>
   Create a User </users/create>
   Find and View a User </users/find-and-view>
   Enable Custom User Data </users/enable-custom-user-data>
   Delete or Prevent Users From Accessing a Realm Application </users/delete-or-revoke>

.. toctree::
   :titlesonly:
   :caption: Authentication Providers
   :maxdepth: 2
   :hidden:

   Authentication Providers </authentication/providers>
   Anonymous Authentication </authentication/anonymous>
   Email/Password Authentication </authentication/email-password>
   Custom JWT Authentication </authentication/custom-jwt>
   Custom Function Authentication </authentication/custom-function>
   API Key Authentication </authentication/api-key>
   Facebook Authentication </authentication/facebook>
   Google Authentication </authentication/google>
   Apple ID Authentication  </authentication/apple>
