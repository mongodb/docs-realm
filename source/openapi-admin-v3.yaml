---
openapi: 3.0.1
info:
  description: Admin API for MongoDB Realm
  version: "3.0"
  title: MongoDB Realm API
servers:
  - url: https://realm.mongodb.com/api/admin/v3.0
    description: The root API resource and starting point for the Realm API.
paths:
  "/auth/providers":
    get:
      tags:
        - admin
      operationId: getAdminAuthProviders
      summary: Enumerate available Realm administration authentication providers
      responses:
        "200":
          description: Successfully enumerated available authentication providers.
          content:
            application/json:
              schema:
                type: array
                description: An array of authentication providers.
                items:
                  "$ref": "#/components/schemas/ProviderSummary"
      security: []
  "/auth/providers/{provider}/login":
    post:
      tags:
        - admin
      operationId: adminLogin
      summary: Authenticate as a Realm administrator
      description: |-
        Authenticate as a Realm administrator. Use `GET
        /auth/providers` to list the available
        authentication providers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                apiKey:
                  type: string
              required:
                - username
                - apiKey
      responses:
        "200":
          description: Authentication was successful.
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
                    description: |-
                      An access token you may provide in the `Authorization` header of API
                      requests. `realm-api-authentication` demonstrates how to use this token.
                  refresh_token:
                    type: string
                    description: |-
                      A refresh token you may provide in the `Authorization` header of `POST
                      auth/session` to obtain a new `access_token`
                      for the current user session.
                  user_id:
                    type: string
                    description: The unique `_id` value of the MongoDB Cloud user.
                  device_id:
                    type: string
      security: []
    parameters:
      - name: provider
        description: The authentication provider to use.
        in: path
        required: true
        schema:
          "$ref": "#/components/schemas/ProviderType"
  "/auth/profile":
    get:
      tags:
        - admin
      operationId: getAdminProfile
      summary: Get information about the currently logged in user
      responses:
        "200":
          description: The profile was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RealmProfile"
  "/auth/session":
    delete:
      tags:
        - admin
      operationId: adminDeleteSession
      summary: Delete a Realm access token
      responses:
        "401":
          description: "invalid refresh token: incorrect token type"
    post:
      tags:
        - admin
      operationId: adminCreateSession
      summary: Obtain a Realm access token
      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
      security:
        - refreshAuth: []
  "/groups/{groupId}/apps":
    get:
      tags:
        - apps
      operationId: adminListApplications
      summary: List all Realm apps in an Atlas project/group
      description: |-
        List all Realm apps within an Atlas
        [project/group](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
      parameters:
        - name: product
          in: query
          description: |-
            Specify `product=atlas` to include [Atlas
            trigger](https://docs.atlas.mongodb.com/triggers) apps.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Application"
    post:
      tags:
        - apps
      operationId: adminCreateApplication
      summary: Create a new Realm app
      parameters:
        - name: defaults
          in: query
          description: Whether or not to create a default application.
          required: false
          schema:
            type: boolean
      requestBody:
        description: The application to create.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewApplication"
      responses:
        "201":
          description: The application was successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationSummary"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
  "/groups/{groupId}/apps/{appId}":
    get:
      tags:
        - apps
      operationId: adminGetApplication
      summary: Retrieve an application definition
      responses:
        "200":
          description: The application was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Application"
    delete:
      tags:
        - apps
      operationId: adminDeleteApplication
      summary: Delete an application
      responses:
        "204":
          description: The application was successfully deleted.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/export":
    get:
      tags:
        - apps
      operationId: adminExportApplication
      summary: Export an application as a zip file
      description: |-
        [Export](https://docs.mongodb.com/realm/manage-apps/configure/export-realm-app#std-label-export-realm-app)
        an application as a zip file.
      responses:
        "200":
          description: The application was successfully exported.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/triggers":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
    post:
      tags:
        - triggers
      operationId: adminCreateTrigger
      summary: Create a trigger
      requestBody:
        description: The trigger to create.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TriggerRequest"
      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TriggerResponse"
              example:
                name: myTrigger
                type: DATABASE
                function_id: 5ae8a0c88f25b9dc5cabb21f
                config:
                  operation_types:
                    - INSERT
                    - UPDATE
                    - DELETE
                    - REPLACE
                  database: HR
                  collection: employees
                  service_id: 5adeb649b8b998486770ae7c
                  match: {}
                  full_document: true
    get:
      tags:
        - triggers
      operationId: adminListTriggers
      summary: List all triggers
      responses:
        "200":
          description: Successfully listed triggers.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TriggerResponse"
  "/groups/{groupId}/apps/{appId}/triggers/{triggerId}":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/TriggerId"
    put:
      tags:
        - triggers
      operationId: adminUpdateTrigger
      summary: Update a trigger
      requestBody:
        description: The trigger to update.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TriggerRequest"
      responses:
        "204":
          description: Successfully updated the trigger.
        "409":
          description: Encountered an error while updating the trigger.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    get:
      tags:
        - triggers
      operationId: adminGetTrigger
      summary: Retrieve the configuration for a specific trigger
      responses:
        "200":
          description: Successfully retrieved trigger.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TriggerResponse"
    delete:
      tags:
        - triggers
      operationId: adminDeleteTrigger
      summary: Delete a trigger
      responses:
        "200":
          description: Successfully deleted the trigger.
          content:
            application/json:
              schema:
                properties: {}
  "/groups/{groupId}/apps/{appId}/triggers/{triggerId}/resume":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/TriggerId"
    put:
      tags:
        - triggers
      operationId: adminResumeTrigger
      summary: Resume a suspended trigger
      responses:
        "204":
          description: Successfully resumed the trigger.
        "404":
          description: Trigger not found.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    description: A description of the error that Realm encountered.
  "/groups/{groupId}/apps/{appId}/values":
    get:
      tags:
        - values
      operationId: adminListValues
      description: |-
        List all [values](https://docs.mongodb.com/realm/values-and-secrets)
        defined in an application.
      summary: |-
        List all values defined in an application.
      responses:
        "200":
          description: |-
            [values](https://docs.mongodb.com/realm/values-and-secrets) were
            successfully enumerated.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ValueSummary"
    post:
      tags:
        - values
      operationId: adminCreateValue
      summary: Define a Value in an application.
      description: |-
        Define a [Value](https://docs.mongodb.com/realm/values-and-secrets) in
        an application.
      requestBody:
        description: The value to create.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewValue"
      responses:
        "201":
          description: |-
            The [value](https://docs.mongodb.com/realm/values-and-secrets) was
            successfully defined.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NewValue"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/values/{valueId}":
    get:
      tags:
        - values
      operationId: adminGetValue
      summary: |-
        Retrieve a value definition from an application
      description: |-
        Retrieve a [value](https://docs.mongodb.com/realm/values-and-secrets)
        definition from an application.
      responses:
        "200":
          description: Successfully retrieved the value.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Value"
    delete:
      tags:
        - values
      operationId: adminDeleteValue
      summary: |-
        Delete a value defined in an application.
      description: |-
        Delete a [value](https://docs.mongodb.com/realm/values-and-secrets)
        defined in an application.
      responses:
        "204":
          description: Successfully deleted the value.
    put:
      tags:
        - values
      operationId: adminUpdateValue
      summary: Update a value definition in an application.
      description: |-
        Update a [value](https://docs.mongodb.com/realm/values-and-secrets)
        definition in an application.
      responses:
        "200":
          description: Successfully updated the value.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/NewValue"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ValueId"
  "/groups/{groupId}/apps/{appId}/services":
    get:
      tags:
        - services
      operationId: adminListServices
      summary: List all services within an application.
      description: |-
        List all [services](https://docs.mongodb.com/realm/services#std-label-services) within an
        application.
      responses:
        "200":
          description: Successfully listed services.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Service"
    post:
      tags:
        - services
      operationId: adminCreateService
      summary: Create a service
      description: Create a [service](https://docs.mongodb.com/realm/services#std-label-services).
      responses:
        "201":
          description: Successfully created the service.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NewService"
        "409":
          description: There is already a service with the given `name`.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}":
    get:
      tags:
        - services
      operationId: adminGetService
      summary: Retrieve a service
      description: Retrieve a [service](https://docs.mongodb.com/realm/services#std-label-services).
      responses:
        "200":
          description: The service was successfully deleted.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Service"
    delete:
      tags:
        - services
      operationId: adminDeleteService
      summary: Delete a service.
      description: Delete a [service](https://docs.mongodb.com/realm/services#std-label-services).
      responses:
        "204":
          description: The service was successfully deleted.
    patch:
      tags:
        - services
      operationId: adminUpdateService
      summary: Update a service
      description: Update a [service](https://docs.mongodb.com/realm/services#std-label-services).
      responses:
        "200":
          description: Successfully updated.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/{commandName}":
    post:
      tags:
        - services
      operationId: adminRunCommand
      summary: Run a command associated with a service
      description: |-
        Run a command associated with a
        [service](https://docs.mongodb.com/realm/services#std-label-services).
      responses:
        "200":
          description: Successfully executed.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
      - "$ref": "#/components/parameters/CommandName"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/build_info":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
    get:
      tags:
        - services
      operationId: getBuildInfo
      summary: Get information about the underlying Atlas mongod
      responses:
        "200":
          description: The build information was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BuildInfo"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/config":
    get:
      tags:
        - services
      operationId: adminGetServiceConfig
      summary: Retrieve a service's configuration.
      description: |-
        Retrieve a [service's](https://docs.mongodb.com/realm/services#std-label-services)
        configuration.
      responses:
        "200":
          description: Successfully retrieved.
    patch:
      tags:
        - services
      operationId: adminUpdateServiceConfig
      summary: Update a service's configuration
      description: Update a [service's](https://docs.mongodb.com/realm/services#std-label-services) configuration.
      responses:
        "200":
          description: Successfully updated.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/rules":
    get:
      tags:
        - services
        - rules
      operationId: adminListRules
      summary: List rules
      description: List [rules](https://docs.mongodb.com/realm/rules#std-label-mongodb-rules).
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Rule"
    post:
      tags:
        - services
        - rules
      operationId: adminCreateRule
      summary: Create a rule
      description: Create a [rule](https://docs.mongodb.com/realm/rules#std-label-mongodb-rules).
      requestBody:
        required: true
        description: The rule to create.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Rule"
      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        "409":
          description: There is already a rule with the given `name`.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/rules/{ruleId}":
    get:
      tags:
        - services
        - rules
      operationId: adminGetRule
      summary: Retrieve a rule
      description: Retrieve a [rule](https://docs.mongodb.com/realm/rules#std-label-mongodb-rules).
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Rule"
    delete:
      tags:
        - services
        - rules
      operationId: adminDeleteRule
      summary: Delete a rule
      description: Delete a [rule](https://docs.mongodb.com/realm/rules#std-label-mongodb-rules).
      responses:
        "204":
          description: Successfully deleted.
    put:
      tags:
        - services
        - rules
      operationId: adminUpdateRule
      summary: Update a rule
      description: Update a [rule](https://docs.mongodb.com/realm/rules#std-label-mongodb-rules).
      requestBody:
        required: true
        description: The new state of the rule.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Rule"
      responses:
        "200":
          description: Successfully updated.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
      - "$ref": "#/components/parameters/RuleId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/commands/generate_schema":
    post:
      tags:
        - services
      operationId: adminGenerateSchema
      summary: Generate a JSON schema from sample
      description: Sample a subset of documents in a collection to generate a JSON schema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - database_name
                - collection_name
                - limit
              properties:
                database_name:
                  type: string
                  description: The name of the database that contains the collection.
                collection_name:
                  type: string
                  description:
                    The name of the collection to sample and generate a
                    schema for.
                limit:
                  type: integer
                  description: The maximum number of documents to include in the sample.
      responses:
        "200":
          description: Successfully generated schema
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    type: object
                    description: The generated JSON schema
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks":
    get:
      tags:
        - services
        - webhooks
      operationId: adminListWebhooks
      summary: List webhooks
      description: List [webhooks](https://docs.mongodb.com/realm/services#std-label-service-webhooks).
      responses:
        "200":
          description: Successfully listed incoming webhooks.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IncomingWebhook"
    post:
      tags:
        - services
        - webhooks
      operationId: adminCreateWebhook
      summary: Create a webhook
      description: Create a [webhook](https://docs.mongodb.com/realm/services#std-label-service-webhooks).
      requestBody:
        description: The webhook to create.
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IncomingWebhook"
      responses:
        "201":
          description: Successfully created.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
  "/groups/{groupId}/apps/{appId}/services/{serviceId}/incoming_webhooks/{incomingWebhookId}":
    get:
      tags:
        - services
        - webhooks
      operationId: adminGetWebhook
      summary: Retrieve a webhook
      description: Retrieve a [webhook](https://docs.mongodb.com/realm/services#std-label-service-webhooks).
      responses:
        "200":
          description: Successfully retrieved.
    delete:
      tags:
        - services
        - webhooks
      operationId: adminDeleteWebhook
      summary: Delete a webhook
      description: Delete a [webhook](https://docs.mongodb.com/realm/services#std-label-service-webhooks).
      responses:
        "204":
          description: Successfully deleted.
    put:
      tags:
        - services
        - webhooks
      operationId: adminUpdateWebhook
      summary: Update a webhook
      description: Update a [webhook](https://docs.mongodb.com/realm/services#std-label-service-webhooks).
      requestBody:
        required: true
        description: The updated state of the webhook.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/IncomingWebhook"
      responses:
        "200":
          description: Successfully updated.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ServiceId"
      - "$ref": "#/components/parameters/IncomingWebhookId"
  "/groups/{groupId}/apps/{appId}/sync/data":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
    get:
      tags:
        - sync
      operationId: adminGetSync
      summary: Get sync information for a specific linked MongoDB cluster.
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SyncDataResponse"
      parameters:
        - in: query
          name: service_id
          required: true
          schema:
            type: string
          description: The Service ID for the linked cluster.
  "/groups/{groupId}/apps/{appId}/push/notifications":
    get:
      tags:
        - notifications
      operationId: adminListNotifications
      summary: List push notifications
      description: |-
        List [push notifications](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications).
      parameters:
        - name: state
          in: query
          description: Only list notifications with the given state.
          required: false
          schema:
            "$ref": "#/components/schemas/MessageState"
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Message"
    post:
      tags:
        - notifications
      operationId: adminCreateNotification
      summary: Create a push notification
      description: |-
        Create a [push
        notification](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications).
      requestBody:
        required: true
        description: The notification to create.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewMessage"
      responses:
        "201":
          description: Successfully created.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/push/notifications/{messageId}":
    get:
      tags:
        - notifications
      operationId: adminGetMessage
      summary: Retrieve a push notification message
      description: |-
        Retrieve a [push
        notification](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications)
        message.
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Message"
    delete:
      tags:
        - notifications
      operationId: adminDeleteMessage
      summary: Delete a push notification message
      description: |-
        Delete a [push
        notification](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications)
        message.
      responses:
        "204":
          description: Successfully deleted.
    put:
      tags:
        - notifications
      operationId: adminUpdateMessage
      summary: Update a push notification
      description: |-
        Update a [push
        notification](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications)
        message.
      responses:
        "200":
          description: Successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Message"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/MessageId"
  "/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/type":
    put:
      tags:
        - notifications
      operationId: adminSetMessageType
      summary: Set a push notification's type
      description: |-
        Set a [push
        notification's](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications)
        type.
      responses:
        "200":
          description: Successfully set.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/MessageId"
  "/groups/{groupId}/apps/{appId}/push/notifications/{messageId}/send":
    post:
      tags:
        - notifications
      operationId: adminSendMessage
      summary: Send a push notification
      description: |-
        Send a [push
        notification](https://docs.mongodb.com/realm/push-notifications#std-label-push-notifications).
      responses:
        "200":
          description: Successfully sent.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/MessageId"
  "/groups/{groupId}/apps/{appId}/users":
    get:
      tags:
        - users
      operationId: adminListUsers
      summary: List users
      description: List [users](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      parameters:
        - "$ref": "#/components/parameters/UsersAfter"
        - "$ref": "#/components/parameters/UsersSort"
        - "$ref": "#/components/parameters/UsersDesc"
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                type: array
                maxItems: 50
                description: At most 50 results per request.
                items:
                  "$ref": "#/components/schemas/User"
    post:
      tags:
        - users
      operationId: adminCreateUser
      summary: Create a user
      description: Create a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      requestBody:
        required: true
        description: The user to create
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/users/verify_token":
    post:
      tags:
        - users
      operationId: adminVerifyUserAccessToken
      summary: Verify valid client access token
      description: |-
        Verify a that a user's [client access
        token](https://docs.mongodb.com/realm/reference/authenticate-http-client-requests#std-label-get-client-api-access-token)
        is valid.
      requestBody:
        required: true
        description: |-
          The user's client access token. This is distinct from the
          [API access token](https://docs.mongodb.com/realm/reference/authenticate-http-client-requests#std-label-get-client-api-access-token)
          you need to authenticate to the admin API.
        content:
          application/json:
            schema:
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        "200":
          description: |-
            Success returns this object. A 200 [may also return token
            expired](https://docs.mongodb.com/realm/reference/authenticate-http-client-requests#std-label-verify-client-access-token-responses).
          content:
            application/json:
              schema:
                properties:
                  sub:
                    type: string
                    description: User ID.
                  aud:
                    type: string
                    description: |-
                      Optional; specifies which Resource Servers the JWT is valid for. Omitted
                      if empty.
                  exp:
                    type: integer
                    description: Unix timestamp after which the JWT expires.
                  iat:
                    type: integer
                    description: Unix timestamp at which the JWT was issued.
                  iss:
                    type: string
                    description: The issuer of the JWT.
                  custom_user_data:
                    type: object
                    description: |-
                      Optional; contains [custom user
                      data](https://docs.mongodb.com/realm/users/enable-custom-user-data#std-label-custom-user-data)
                      if it exists for the user. Only present if the access token is created
                      after custom user data is enabled and configured. Omitted if empty.
                  domain_id:
                    type: string
                    description: The UID representing the app domain.
                  data:
                    type: string
                    description:
                      "Optional: any metadata stored with the token. Omitted
                      if empty."
                  device_id:
                    type: string
                    description: The UID representing the device.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/users/{uid}":
    get:
      tags:
        - users
      operationId: adminGetUser
      summary: Retrieve a user
      description: Retrieve a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
    delete:
      tags:
        - users
      operationId: adminDeleteUser
      summary: Delete a user
      description: Delete a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "204":
          description: Successfully deleted.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Uid"
  "/groups/{groupId}/apps/{appId}/users/{uid}/devices":
    get:
      tags:
        - users
      operationId: adminListDevices
      summary: List a user's devices.
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  type: object
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Uid"
  "/groups/{groupId}/apps/{appId}/users/{uid}/logout":
    put:
      tags:
        - users
      operationId: adminUserLogout
      summary: Revoke user sessions
      description: |-
        Revoke all of a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts)'s
        sessions.
      responses:
        "204":
          description: Successfully revoked.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Uid"
  "/groups/{groupId}/apps/{appId}/users/{uid}/enable":
    put:
      tags:
        - users
      operationId: adminEnableUser
      summary: Enable a user
      description: Enable a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "204":
          description: Successfully enabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Uid"
  "/groups/{groupId}/apps/{appId}/users/{uid}/disable":
    put:
      tags:
        - users
      operationId: adminDisableUser
      summary: Disable a user
      description: Disable a [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "204":
          description: Successfully disabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Uid"
  "/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}":
    delete:
      tags:
        - users
      operationId: adminDeletePendingUser
      summary: Delete a pending user
      description: Delete a pending [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "204":
          description: Successfully deleted.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Email"
  "/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/send_confirm":
    post:
      tags:
        - email
      operationId: adminSendConfirmationEmail
      summary: Send a confirmation email
      description: |-
        Send a [confirmation
        email](https://docs.mongodb.com/realm/authentication/email-password).
      responses:
        "200":
          description: Successfully sent.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Email"
  "/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/confirm":
    post:
      tags:
        - email
      operationId: adminConfirmPendingUser
      summary: Confirm a pending user
      description: Confirm a pending [user](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "204":
          description: Successfully confirmed.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Email"
  "/groups/{groupId}/apps/{appId}/user_registrations/by_email/{email}/run_confirm":
    post:
      tags:
        - email
      operationId: adminRerunPendingUserConfirmation
      summary: Re-runs a pending user's confirmation workflow
      description: |-
        Re-runs a pending user's [confirmation workflow](https://docs.mongodb.com/realm/authentication#std-label-user-accounts).
      responses:
        "202":
          description: Successfully re-ran confirmation workflow.
        "400":
          description: |-
            User is already confirmed or Email/Password authentication is not
            enabled.
        "404":
          description: User does not exist.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/Email"
  "/groups/{groupId}/apps/{appId}/debug/execute_function":
    post:
      tags:
        - functions
      operationId: adminExecuteFunction
      summary: Execute a function
      description: Execute a [function](https://docs.mongodb.com/realm/functions#std-label-functions) for testing.
      parameters:
        - name: user_id
          in: query
          description: |-
            The user as which to execute the function. Either `user_id` or
            `run_as_system` is required. You cannot specify both.
          schema:
            type: string
          required: true
        - name: run_as_system
          in: query
          description: |-
            Determine whether or not to run as system user. Either `run_as_system`
            or `user_id` is required. You cannot specify both.
          schema:
            type: boolean
          required: true
      requestBody:
        required: true
        description: The function to execute.
        content:
          application/json:
            schema:
              properties:
                service:
                  type: string
                  description: The service to use when calling this function.
                name:
                  type: string
                  description: The name of the function you want to run.
                arguments:
                  type: array
                  description: Any arguments that your function needs.
                  items:
                    type: string
              required:
                - name
      responses:
        "200":
          description: Successfully executed.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: object
                  logs: {}
                  result:
                    type: object
                  stats:
                    properties:
                      execution_time:
                        type: string
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/debug/execute_function_source":
    post:
      tags:
        - functions
      operationId: adminExecuteFunctionSource
      summary: Execute a function's source code for testing.
      description: |-
        Execute a [function](https://docs.mongodb.com/realm/functions#std-label-functions)'s source code
        for testing.
      parameters:
        - name: user_id
          in: query
          description: |-
            The user as which to execute the function. Either `user_id` or
            `run_as_system` is required. You cannot specify both.
          schema:
            type: string
          required: true
        - name: run_as_system
          in: query
          description: |-
            Determine whether or not to run as system user. Either `run_as_system`
            or `user_id` is required. You cannot specify both.
          schema:
            type: boolean
          required: true
      requestBody:
        required: true
        description: The source to execute.
        content:
          application/json:
            schema:
              properties:
                eval_source:
                  type: string
                  description: |-
                    This JSON expression must evaluate to `true` before the function may
                    run. If this field is blank, it will evaluate to `true`.
                source:
                  type: string
              required:
                - source
      responses:
        "200":
          description: Successfully executed.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: object
                  logs: {}
                  result:
                    type: object
                  stats:
                    properties:
                      execution_time:
                        type: string
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/auth_providers":
    get:
      tags:
        - authproviders
      operationId: adminListAuthProviders
      summary: List authentication providers in a Realm app.
      description: |-
        List [authentication
        providers](https://docs.mongodb.com/realm/authentication/providers)
        within a Realm app.
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/ProviderSummary"
    post:
      tags:
        - authproviders
      operationId: adminCreateAuthProvider
      summary: Create an authentication provider
      description: |-
        Create an [authentication
        provider](https://docs.mongodb.com/realm/authentication/providers).
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewProvider"
      responses:
        "201":
          description: Successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FullProvider"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/auth_providers/{providerId}":
    get:
      tags:
        - authproviders
      operationId: adminGetAuthProvider
      summary: Retrieve information about authentication provider
      description: |-
        Retrieve information about one of an application's [authentication
        providers](https://docs.mongodb.com/realm/authentication/providers)
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FullProvider"
    delete:
      tags:
        - authproviders
      operationId: adminDeleteAuthProvider
      summary: Delete an authentication provider
      description: |-
        Delete an [authentication
        provider](https://docs.mongodb.com/realm/authentication/providers).
      responses:
        "204":
          description: Successfully deleted.
    patch:
      tags:
        - authproviders
      operationId: adminUpdateAuthProvider
      summary: Update an authentication provider
      description: |-
        Update an [authentication
        provider](https://docs.mongodb.com/realm/authentication/providers).
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FullProvider"
      responses:
        "204":
          description: Successfully updated.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ProviderId"
  "/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/disable":
    put:
      tags:
        - authproviders
      operationId: adminDisableAuthProvider
      summary: Disable an authentication provider
      description: |-
        Disable an [authentication
        provider](https://docs.mongodb.com/realm/authentication/providers).
      responses:
        "204":
          description: Successfully disabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ProviderId"
  "/groups/{groupId}/apps/{appId}/auth_providers/{providerId}/enable":
    put:
      tags:
        - authproviders
      operationId: adminEnableAuthProvider
      summary: Enable an authentication provider
      description: |-
        Enable an [authentication
        provider](https://docs.mongodb.com/realm/authentication/providers).
      responses:
        "204":
          description: Successfully enabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ProviderId"
  "/groups/{groupId}/apps/{appId}/security/allowed_request_origins":
    get:
      tags:
        - security
      operationId: adminListAllowedRequestOrigins
      summary: List allowed HTTP origins
      description: |-
        List the allowed [HTTP
        origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        from which MongoDB Realm should allow requests.
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  type: string
    post:
      tags:
        - security
      operationId: adminSetAllowedRequestOrigins
      summary: Set allowed HTTP origins
      description: |-
        Set the allowed [HTTP
        origins](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)
        from which MongoDB Realm should allow requests.
      requestBody:
        required: true
        description: A list of HTTP origins.
        content:
          application/json:
            schema:
              items:
                description: An HTTP origin. Must be of the form `<scheme>://<host>[:port]`.
                type: string
      responses:
        "204":
          description: The allowed HTTP origins were successfully set.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/security/access_list":
    get:
      tags:
        - security
      operationId: allowedIPAccessListGet
      summary: List the allowed entries in the Access List
      description: List the allowed entries in the Access List of your Realm app.
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                items:
                  properties:
                    current_ip:
                      type: string
                    allowed_ips:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            format: ObjectID
                            description: ObjectID
                          address:
                            type: string
                          ip:
                            type: string
                            format: net.IP
                            description: net.IP
                          network:
                            type: string
                            format: net.IPNet
                            description: net.IPNet
                          comment:
                            type: string
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
    post:
      tags:
        - security
      operationId: allowedIPAccessListCreate
      summary: Create an IP address or CIDR block in the Access List
      description: |-
        Create an IP address or CIDR block in the Access List for your Realm
        app.
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: ObjectID
                    description: ObjectID
                  address:
                    type: string
                  ip:
                    type: string
                    format: net.IP
                    description: net.IP
                  network:
                    type: string
                    format: net.IPNet
                    description: net.IPNet
                  comment:
                    type: string
  "/groups/{groupId}/apps/{appId}/security/access_list/{ipId}":
    patch:
      tags:
        - security
      operationId: allowedIPAccessListUpdate
      summary: Modify an IP address or CIDR block in the Access List
      description: |-
        Modify an IP address or CIDR block in the Access List of your Realm
        app
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    format: ObjectID
                    description: ObjectID
                  address:
                    type: string
                  ip:
                    type: string
                    format: net.IP
                    description: net.IP
                  network:
                    type: string
                    format: net.IPNet
                    description: net.IPNet
                  comment:
                    type: string
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - name: ipId
        in: path
        description: |-
          The IP address entry denoted by `ip_id` with the information given in
          the request body
        schema:
          type: string
        required: true
    delete:
      tags:
        - security
      operationId: allowedIPAccessListDelete
      summary: Delete an IP address or CIDR block from the Access List
      description: |-
        Delete an IP address or CIDR block from the Access List of your Realm
        app
      responses:
        "404":
          description: No IP addresses or CIDR blocks to delete
  "/groups/{groupId}/apps/{appId}/logs":
    get:
      tags:
        - logs
      operationId: adminGetLogs
      summary: Retrieve MongoDB Realm logs
      parameters:
        - name: co_id
          in: query
          description: Return only log messages associated with the given request ID.
          schema:
            type: string
          required: false
        - name: errors_only
          in: query
          description: Whether to only return errors.
          schema:
            type: boolean
          required: false
        - name: user_id
          in: query
          schema:
            type: string
          description: Return only log messages associated with the given `user_id`.
          required: false
        - name: start_date
          in: query
          schema:
            type: string
          description: |-
            The date and time in ISO 8601 at which to begin returning results,
            exclusive.
          required: false
        - name: end_date
          in: query
          schema:
            type: string
          description: |-
            The date and time in ISO 8601 at which to cease returning results,
            inclusive.
          required: false
        - name: skip
          in: query
          schema:
            type: integer
          description: |-
            The offset number of matching log entries to skip before including them
            in the response.
          required: false
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: |-
            The maximum number of log entries to include in the response. If the
            query matches more than this many logs, it returns documents in
            ascending order by date until the limit is reached.
          required: false
      responses:
        "200":
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                required:
                  - nextEndDate
                  - nextSkip
                properties:
                  logs:
                    type: array
                    maxItems: 100
                    description: At most 100 results per request.
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        co_id:
                          type: string
                        domain_id:
                          type: string
                        app_id:
                          type: string
                          description: |-
                            The ObjectID of your application.
                            `realm-api-project-and-application-ids` demonstrates how to find this
                            value.
                        group_id:
                          type: string
                          description: |-
                            An Atlas [Project/Group
                            ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
                        request_url:
                          type: string
                        request_method:
                          type: string
                        started:
                          type: string
                        completed:
                          type: string
                        error:
                          type: string
                        error_code:
                          type: string
                        status:
                          type: integer
                  nextEndDate:
                    type: string
                    description: |-
                      The end date and time of the next page of log entries in ISO 8601
                      format. MongoDB Realm paginates the result sets of queries that match
                      more than 100 log entries and includes this field in paginated
                      responses. To get the next page of up to 100 entries, pass this value as
                      the `end_date` parameter in a subsequent request.
                  nextSkip:
                    type: integer
                    description: |-
                      The offset into the next page of log entries in ISO 8601 format. MongoDB
                      Realm paginates the result sets of queries that match more than 100 log
                      entries and includes this field in paginated responses where the first
                      entry on the next page has the same timestamp as the last entry on this
                      page. To get the next page of up to 100 entries, pass this value, if it
                      is present, as the `skip` parameter in a subsequent request.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/api_keys":
    get:
      tags:
        - apikeys
      operationId: adminListApiKeys
      summary: List API keys
      description: |-
        List [API keys](https://docs.mongodb.com/realm/authentication/api-key)
        associated with a Realm app.
      responses:
        "200":
          description: The API keys were successfully listed.
          content:
            application/json:
              schema:
                items:
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    disabled:
                      type: boolean
    post:
      tags:
        - apikeys
      operationId: adminCreateApiKey
      summary: Create a new API key
      description: |-
        Create a new [API
        key](https://docs.mongodb.com/realm/authentication/api-key).
      requestBody:
        description: The API key to create.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        "201":
          description: The API key was successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiKey"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}":
    get:
      tags:
        - apikeys
      operationId: adminGetApiKey
      summary: Retrieve information about an API key
      description: |-
        Retrieve information about an [API
        key](https://docs.mongodb.com/realm/authentication/api-key).
      responses:
        "200":
          description: The API key was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApiKeyResponse"
    delete:
      tags:
        - apikeys
      operationId: adminDeleteApiKey
      summary: Delete an API key
      description: |-
        Delete an [API
        key](https://docs.mongodb.com/realm/authentication/api-key).
      responses:
        "204":
          description: The API key was successfully deleted.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ApiKeyId"
  "/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/enable":
    put:
      tags:
        - apikeys
      operationId: adminEnableApiKey
      summary: Enable an API key
      description: |-
        Enable an [API
        key](https://docs.mongodb.com/realm/authentication/api-key).
      responses:
        "204":
          description: The API key was successfully enabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ApiKeyId"
  "/groups/{groupId}/apps/{appId}/api_keys/{apiKeyId}/disable":
    put:
      tags:
        - apikeys
      operationId: adminDisableApiKey
      summary: Disable an API key
      description: |-
        Disable an [API
        key](https://docs.mongodb.com/realm/authentication/api-key).
      responses:
        "204":
          description: The API key was successfully disabled.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/ApiKeyId"
  "/groups/{groupId}/apps/{appId}/secrets":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
    get:
      tags:
        - secrets
      operationId: adminGetAllSecrets
      summary: List secrets
      description: |-
        List [secrets](https://docs.mongodb.com/realm/values-and-secrets/define-and-manage-secrets#std-label-define-secret)
        associated with a Realm app.
      responses:
        "200":
          description: The Secrets were successfully listed.
          content:
            application/json:
              schema:
                items:
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
    post:
      tags:
        - secrets
      operationId: adminCreateASecret
      summary: |-
        Create a new Secret
      description: |-
        Create a new
        [Secret](https://docs.mongodb.com/realm/values-and-secrets/define-and-manage-secrets).
      requestBody:
        description: The Secret to create.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                value:
                  type: string
              required:
                - name
                - value
      responses:
        "201":
          description: The Secret was successfully created.
          content:
            application/json:
              schema:
                properties:
                  _id:
                    type: string
                  name:
                    type: string
  "/groups/{groupId}/apps/{appId}/secrets/{secretId}":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/SecretId"
    put:
      tags:
        - secrets
      operationId: adminModifyASecret
      summary: Modify a Secret
      description: |-
        Modify a
        [Secret](https://docs.mongodb.com/realm/values-and-secrets/define-and-manage-secrets)
        associated with a Realm app.
      requestBody:
        description: The modified value of the Secret.
        required: true
        content:
          application/json:
            schema:
              properties:
                _id:
                  type: string
                name:
                  type: string
                value:
                  type: string
              required:
                - name
                - value
      responses:
        "204":
          description: No body returned for response
    delete:
      tags:
        - secrets
      operationId: adminDeleteSecret
      summary: Delete a Secret
      description: |-
        Delete a
        [Secret](https://docs.mongodb.com/realm/values-and-secrets/define-and-manage-secrets)
        associated with a Realm app.
      responses:
        "204":
          description: The Secret was successfully deleted.
  "/groups/{groupId}/apps/{appId}/functions":
    get:
      tags:
        - functions
      operationId: adminListFunctions
      summary: List Functions
      description: List [Functions](https://docs.mongodb.com/realm/functions#std-label-functions).
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                items:
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
    post:
      tags:
        - functions
      operationId: adminCreateFunction
      summary: Create a new Function
      description: Create a new [Function](https://docs.mongodb.com/realm/functions#std-label-functions).
      requestBody:
        description: The function to create
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewFunction"
      responses:
        "201":
          description: The function was successfully created.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NewFunction"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/functions/{functionId}":
    get:
      tags:
        - functions
      operationId: adminGetFunction
      summary: Retrieve a Function
      description: Retrieve a [Function](https://docs.mongodb.com/realm/functions#std-label-functions).
      responses:
        "200":
          description: The function was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Function"
    delete:
      tags:
        - functions
      operationId: adminDeleteFunction
      summary: Delete a Function
      description: Delete a [Function](https://docs.mongodb.com/realm/functions#std-label-functions).
      responses:
        "204":
          description: The function was successfully deleted.
    put:
      tags:
        - functions
      operationId: adminUpdateFunction
      summary: Update a Function
      description: Update a [Function](https://docs.mongodb.com/realm/functions#std-label-functions).
      responses:
        "200":
          description: The function was successfully updated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/NewFunction"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/FunctionId"
  "/groups/{groupId}/apps/{appId}/dependencies":
    get:
      tags:
        - dependencies
      operationId: adminGetAllDependencies
      summary: List external dependencies
      description: |-
        List [external
        dependencies](https://docs.mongodb.com/realm/functions#std-label-external-dependencies) uploaded
        to the Realm app.
      responses:
        "200":
          description: The function was successfully retrieved.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DependenciesSummary"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/deployments":
    get:
      tags:
        - deploy
      operationId: adminListDeployments
      summary: List recent deployments
      description: Return the 100 most recent application deployments.
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Deployment"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/drafts":
    get:
      tags:
        - deploy
      operationId: adminListDeploymentDrafts
      summary: Return current deployment draft
      description: Return the current application deployment draft, if applicable.
      responses:
        "200":
          description: Successfully listed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploymentDraft"
    post:
      tags:
        - deploy
      operationId: adminCreateDeploymentDraft
      summary: Create a new deployment draft
      description: Create a new application deployment draft, if none exists.
      responses:
        "200":
          description: Successfully created draft.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploymentDraft"
        "409":
          description: Draft already exists
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/drafts/{draftId}":
    delete:
      tags:
        - deploy
      operationId: adminDiscardDraft
      summary: Discard the specified deployment draft
      description: Discard the specified application deployment draft.
      responses:
        "204":
          description: The draft was successfully discarded.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/DraftId"
  "/groups/{groupId}/apps/{appId}/drafts/{draftId}/deployment":
    post:
      tags:
        - deploy
      operationId: adminDeployDraft
      summary: Deploy a deployment draft
      description: Deploy the specified application deployment draft.
      responses:
        "201":
          description: The draft was successfully deployed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Application"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/DraftId"
  "/groups/{groupId}/apps/{appId}/drafts/{draftId}/diff":
    get:
      tags:
        - deploy
      operationId: adminDeployDraftDiff
      summary: Return a diff between currently deployed application and deployment draft
      description: |-
        Return a diff between the currently deployed application and the
        specified draft.
      responses:
        "200":
          description: Successfully diffed draft.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Diff"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
      - "$ref": "#/components/parameters/DraftId"
  "/groups/{groupId}/apps/{appId}/hosting/assets":
    get:
      tags:
        - hosting
      operationId: adminGetAllHostedAssets
      summary: List all hosted assets
      responses:
        "200":
          description: Successfully listed hosted files.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/HostedAssetMetadata"
    post:
      tags:
        - hosting
      operationId: adminMoveCopyHostedAsset
      summary: Move or copy a hosted asset
      description: Move or copy a hosted asset to a new resource path.
      requestBody:
        description: |-
          The hosted asset file and its metadata. (Must use
          `Content-Type: multipart/mixed`)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                move_from:
                  type: string
                  description: |-
                    The current resource path of the asset to move. Must be used with
                    `move_to`.
                move_to:
                  type: string
                  description: |-
                    The resource path to which the asset will move. Must be used with
                    `move_from`.
                copy_from:
                  type: string
                  description: |-
                    The current resource path of the asset to copy. Must be used with
                    `copy_to`.
                copy_to:
                  type: string
                  description: |-
                    The resource path to which the asset will be copied. Must be used with
                    `copy_from`.
      responses:
        "204":
          description: Successfully moved/copied the hosted asset.
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/apps/{appId}/hosting/assets/asset":
    get:
      tags:
        - hosting
      operationId: adminGetHostedAsset
      summary: Retrieve metadata for a specific hosted asset
      parameters:
        - "$ref": "#/components/parameters/AssetResourcePath"
        - "$ref": "#/components/parameters/AssetResourcePathPrefix"
      responses:
        "200":
          description: Successfully retrieved metadata for the hosted file.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HostedAssetMetadata"
        "404":
          description: Asset not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - hosting
      operationId: adminUploadHostedAsset
      summary: Upload or replace a hosted asset
      description: Upload or replace a hosted asset at a specific resource path.
      parameters:
        - "$ref": "#/components/parameters/AssetResourcePath"
      requestBody:
        description: |-
          The hosted asset file and its metadata. (Must use
          `Content-Type: multipart/mixed`)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                meta:
                  type: object
                  "$ref": "#/components/schemas/AssetMetadata"
                  required:
                    - meta
                    - file
                  description: |-
                    An [asset metadata
                    document](https://docs.mongodb.com/realm/admin/api/v3#std-label-asset-metadata-document)
                    (encoded as JSON).
                file:
                  type: string
                  format: binary
                  description: The asset file to upload (encoded as binary).
      responses:
        "204":
          description: Successfully added/replaced the hosted asset.
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    "$ref": "#/components/schemas/Error"
    patch:
      tags:
        - hosting
      operationId: adminUpdateHostedAsset
      summary: Update the metadata attributes of a hosted asset
      description: |-
        Update the metadata attributes of a hosted asset at a specific resource
        path.
      parameters:
        - "$ref": "#/components/parameters/AssetResourcePath"
      responses:
        "204":
          description: Successfully updated the hosted asset.
        "400":
          description: Bad Request.
      requestBody:
        description: |-
          The new metadata attributes for the hosted asset. These attributes
          replace all existing attributes for the file.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                attributes:
                  type: array
                  items:
                    "$ref": "#/components/schemas/MetadataAttribute"
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
  "/groups/{groupId}/measurements":
    get:
      tags:
        - billing
      operationId: adminMeasurements
      summary: List group billing usage in a given period
      description: |-
        List the request, compute, sync, and data transfer usage in a given
        period for [billing](https://docs.mongodb.com/realm/billing) purposes.
      parameters:
        - "$ref": "#/components/parameters/GroupId"
        - name: start
          in: query
          description: |-
            The ISO 8601 date and time of the start of the query period. Default is
            00:00:00 UTC on the first day of the current month.
          schema:
            type: string
          required: false
        - name: end
          in: query
          description: |-
            The ISO 8601 date and time of the end of the query period. Default is
            23:59:59 UTC on the the last day of the current month.
          schema:
            type: string
          required: false
        - name: granularity
          in: query
          description: |-
            Specifies the granularity of the query period, either P31D (31 day) or
            PT1H (1 hour). Default is P31D.
          schema:
            type: string
            enum:
              - P31D
              - PT1H
          required: false
      responses:
        "200":
          description: The measurements were successfully returned.
          content:
            application/json:
              schema:
                properties:
                  start:
                    type: string
                    description: |-
                      The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the
                      start of the query period, which can be specified with the `start` query
                      parameter.
                  end:
                    type: string
                    description: |-
                      The [RFC 3339](https://tools.ietf.org/html/3339) date and time of the
                      end of the query period, which can be specified with the `end` query
                      parameter.
                  granularity:
                    type: string
                    description: |-
                      The granularity, which can be specified with the `granularity` query
                      parameter.
                  group_id:
                    type: string
                    description: |-
                      The Atlas [Group
                      ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
                  measurements:
                    type: array
                    description: The array of measurements.
                    items:
                      properties:
                        name:
                          type: string
                          enum:
                            - request_count
                            - compute_time
                            - data_out
                            - sync_time
                          description: |-
                            The usage metric represented by each data point. See
                            [billing](https://docs.mongodb.com/realm/billing).
                        units:
                          type: string
                          enum:
                            - "<empty string>"
                            - HOURS
                            - GIGABYTES
                          description: The unit of the `value` of each data point.
                        data_points:
                          type: array
                          description: |-
                            The array of data points for this measurement. A finer `granularity`
                            results in more data points.
                          items:
                            properties:
                              timestamp:
                                type: string
                                description:
                                  The ISO 8601 date and time of the data
                                  point.
                              value:
                                type: number
                                description:
                                  The value at the time in the `unit` of
                                  the measurement.
        "400":
          "$ref": "#/components/responses/ClientErrorResponse"
  "/groups/{groupId}/apps/{appId}/measurements":
    parameters:
      - "$ref": "#/components/parameters/GroupId"
      - "$ref": "#/components/parameters/AppId"
    get:
      tags:
        - billing
      operationId: adminAppMeasurements
      summary: List app billing usage
      description: |-
        List the request, compute, sync, data transfer, and memory usage of a
        specific app in a given period for
        [billing](https://docs.mongodb.com/realm/billing) purposes.
      parameters:
        - "$ref": "#/components/parameters/GroupId"
        - "$ref": "#/components/parameters/AppId"
        - name: start
          in: query
          description: |-
            The ISO 8601 date and time of the start of the query period. Default is
            00:00:00 UTC on the first day of the current month.
          schema:
            type: string
          required: false
        - name: end
          in: query
          description: |-
            The ISO 8601 date and time of the end of the query period. Default is
            23:59:59 UTC on the the last day of the current month.
          schema:
            type: string
          required: false
        - name: granularity
          in: query
          description: |-
            Specifies the granularity of the query period, either P31D (31 day) or
            PT1H (1 hour). Default is P31D.
          schema:
            type: string
            enum:
              - P31D
              - PT1H
          required: false
      responses:
        "200":
          description: The measurements were successfully returned.
          content:
            application/json:
              schema:
                properties:
                  start:
                    type: string
                    description: |-
                      The RFC 3339 date and time of the start of the query period, which can
                      be specified with the `start` query parameter.
                  end:
                    type: string
                    description: |-
                      The RFC 3339 date and time of the end of the query period, which can be
                      specified with the `end` query parameter.
                  granularity:
                    type: string
                    description: |-
                      The granularity, which can be specified with the `granularity` query
                      parameter.
                  group_id:
                    type: string
                    description: |-
                      The Atlas [Group
                      ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
                  appId:
                    type: string
                    description: The Realm app ID specified by the `appId` path parameter.
                  appName:
                    type: string
                    description:
                      The name of the Realm app specified by the `appId`
                      path parameter.
                  measurements:
                    type: array
                    description: The array of measurements.
                    items:
                      properties:
                        name:
                          type: string
                          enum:
                            - request_count
                            - compute_time
                            - data_out
                            - sync_time
                            - mem_usage
                          description: |-
                            The usage metric represented by each data point. See
                            [billing](https://docs.mongodb.com/realm/billing).
                        units:
                          type: string
                          enum:
                            - "<empty string>"
                            - HOURS
                            - GIGABYTES
                            - GIGABYTE_SECONDS
                          description: The unit of the `value` of each data point.
                        data_points:
                          type: array
                          description: |-
                            The array of data points for this measurement. A finer `granularity`
                            results in more data points.
                          items:
                            properties:
                              timestamp:
                                type: string
                                description:
                                  The ISO 8601 date and time of the data
                                  point.
                              value:
                                type: number
                                description:
                                  The value at the time in the `unit` of
                                  the measurement.
        "400":
          "$ref": "#/components/responses/ClientErrorResponse"
components:
  parameters:
    AssetResourcePath:
      name: path
      in: query
      description: The resource path of a hosted asset.
      required: true
      schema:
        type: string
    AssetResourcePathPrefix:
      name: prefix
      in: query
      description: |-
        Return only those assets where the resource path begins with the
        specified prefix.
      required: false
      schema:
        type: string
    GroupId:
      name: groupId
      description: |-
        An Atlas [Project/Group
        ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
      in: path
      required: true
      schema:
        type: string
    AppId:
      name: appId
      description: |-
        The ObjectID of your application.
        `realm-api-project-and-application-ids` demonstrates how to find this
        value.
      in: path
      required: true
      schema:
        type: string
    UsersAfter:
      name: after
      required: false
      description: The `id` of the last user returned by a previous paginated request.
      in: query
      schema:
        type: string
    UsersSort:
      name: sort
      required: false
      description: |-
        The field name to sort to sort results by. The only valid value is the
        default: `_id`.
      in: query
      schema:
        type: string
    UsersDesc:
      name: desc
      required: false
      description: |-
        If `true`, returns sorted results in descending order. If not specified
        or set to `false`, results return in ascending order.
      in: query
      schema:
        type: boolean
    FunctionId:
      name: functionId
      description: Function ID
      in: path
      required: true
      schema:
        type: string
    ServiceId:
      name: serviceId
      description: Service ID
      in: path
      required: true
      schema:
        type: string
    SecretId:
      name: secretId
      description: Secret ID
      in: path
      required: true
      schema:
        type: string
    CommandName:
      name: commandName
      description: Command name
      in: path
      required: true
      schema:
        type: string
    ValueId:
      name: valueId
      description: Value ID
      in: path
      required: true
      schema:
        type: string
    DraftId:
      name: draftId
      description: Draft ID
      in: path
      required: true
      schema:
        type: string
    RuleId:
      name: ruleId
      description: Rule ID
      in: path
      required: true
      schema:
        type: string
    IncomingWebhookId:
      name: incomingWebhookId
      description: Incoming webhook ID
      in: path
      required: true
      schema:
        type: string
    Email:
      name: email
      description: Email address
      in: path
      required: true
      schema:
        type: string
    MessageId:
      name: messageId
      description: Message ID
      in: path
      required: true
      schema:
        type: string
    Uid:
      name: uid
      description: UID
      in: path
      required: true
      schema:
        type: string
    ProviderId:
      name: providerId
      description: Provider ID
      in: path
      required: true
      schema:
        type: string
    ApiKeyId:
      name: apiKeyId
      description: API Key ID
      in: path
      required: true
      schema:
        type: string
    TriggerId:
      name: triggerId
      description: The ObjectID of the trigger.
      in: path
      required: true
      schema:
        type: string
  schemas:
    ApiKey:
      properties:
        _id:
          type: string
        key:
          type: string
        name:
          type: string
        disabled:
          type: string
    ApiKeyResponse:
      properties:
        _id:
          type: string
        name:
          type: string
        disabled:
          type: string
    Application:
      type: object
      properties:
        _id:
          type: string
          description: The application's unique internal ID.
        client_app_id:
          type: string
          description: The application's public App ID.
        name:
          type: string
          description: The name of the application.
        location:
          type: string
          description: The application's deployment region.
        deployment_model:
          type: string
          description: The application's deployment model.
        domain_id:
          type: string
        group_id:
          type: string
          description: |-
            An Atlas [Project/Group
            ID](https://docs.atlas.mongodb.com/tutorial/manage-projects/).
    ApplicationSummary:
      type: object
      properties:
        _id:
          type: string
          description: The application's unique internal ID.
        client_app_id:
          type: string
          description: The application's public App ID.
        name:
          type: string
          description: The name of the application.
        location:
          type: string
          description: The application's deployment region.
        deployment_model:
          type: string
          description: The application's deployment model.
        domain_id:
          type: string
          description: The application's associated domain ID.
        group_id:
          type: string
          description: The application's current owner ID.
        last_used:
          type: integer
          description: The time this app was last used.
        last_modified:
          type: integer
          description: The time this app was last modified.
        product:
          type: string
          description: The product this app is for.
        environment:
          type: string
          description: The environment the app is in.
    BuildInfo:
      type: object
      properties:
        version:
          type: string
          description: |-
            Human-readable version information about the mongod instance. This
            string will take the format `<major>.<minor>.<patch>`.
        gitVersion:
          type: string
          description: |-
            The commit identifier that identifies the state of the code use to build
            the mongod.
        versionArray:
          type: array
          description: |-
            An array that conveys version information about the mongod instance. See
            version for a more readable version of this string.
          items:
            type: integer
        javascriptEngine:
          type: string
          description: |-
            A string that reports the JavaScript engine used in the mongod instance.
            By default, this is `mozjs` after version `3.2`, and previously `V8`.
        bits:
          type: string
          description: |-
            A number that reflects the target processor architecture of the mongod
            binary.
        debug:
          type: boolean
          description: |-
            A boolean that reflects whether or not the `mongod` instance was built
            with debugging options.
        maxBsonObjectSize:
          type: integer
          description: |-
            A number that reports the [Maximum BSON Document
            Size](https://docs.mongodb.com/manual/reference/limits/#BSON-Document-Size)
    DependenciesSummary:
      type: object
      properties:
        _id:
          type: string
          description: The dependency collection's unique internal ID.
        location:
          type: string
          description: The application's deployment region.
        user_id:
          type: string
          description: |-
            The unique `_id` value of the MongoDB Cloud user that uploaded the
            dependency collection.
        last_modified:
          type: integer
          description: |-
            The time at which the dependencies were uploaded in [Unix
            time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since
            January 1, 1970 at 00:00 UTC).
        dependencies_list:
          type: array
          description: |-
            An array of documents that each describe a dependency uploaded to the
            application.
          items:
            "$ref": "#/components/schemas/Dependency"
    Dependency:
      type: object
      properties:
        name:
          type: string
          description: The name of the uploaded dependency.
        version:
          type: string
          description: The version of the uploaded dependency.
    DeploymentDraft:
      type: object
      properties:
        _id:
          type: string
          description: The unique ID of the draft.
        user_id:
          type: string
          description:
            The unique `_id` value of the MongoDB Cloud user that created
            the draft.
        app:
          "$ref": "#/components/schemas/Application"
    Deployment:
      type: object
      properties:
        _id:
          type: string
          description: The unique ID of the deployment.
        app_id:
          type: string
          description: The unique `_id` value of the Realm app.
        draft_id:
          type: string
          description: |-
            The unique `_id` value of the deployment draft associated with the
            deployment, if applicable.
        user_id:
          type: string
          description:
            The unique `_id` value of the MongoDB Cloud user that deployed
            the draft.
        deployed_at:
          type: integer
          description: |-
            The time at which the deployment was made. Represented as the number of
            seconds since January 1, 1970.
        origin:
          type: string
          description: The deployment method used to create the deployment.
        commit:
          type: string
          description: The commit hash of the deployment (Automatic GitHub Deployment)
        status:
          type: string
          description:
            A message that indicates whether or not the deployment was
            successful.
        status_error_message:
          type: string
          description: |-
            The error message of the error that caused the deployment to fail, if
            applicable.
        diff_url:
          type: string
          description: |-
            A link to the diff of changes in the deployment (Automatic GitHub
            Deployment)
    Diff:
      type: object
      properties:
        diffs:
          type: array
          description: |-
            A list where each item is the line-by-line diff for a specific
            configuration file.
          items:
            type: string
        hosting_files_diff:
          type: object
          description: |-
            The filenames of hosted files that have been added, removed, or
            modified.
          properties:
            added:
              type: array
              items:
                type: string
                description: |-
                  A list where each element is the name of a file that was added in the
                  draft.
            deleted:
              type: array
              items:
                type: string
                description: |-
                  A list where each element is the name of a file that was deleted in the
                  draft.
            modified:
              type: array
              items:
                type: string
                description: |-
                  A list where each element is the name of a file that was changed in the
                  draft.
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message that describes the error.
        error_code:
          type: string
          description: The error type.
    NewApplication:
      properties:
        name:
          type: string
          description: Can only contain ASCII letters, numbers, underscores, and hyphens.
        template_id:
          type: string
          description: |-
            Name of [supported template
            app](https://docs.mongodb.com/realm/manage-apps/create/template-apps#std-label-template-apps) to
            serve as base template.
        data_source:
          "$ref": "#/components/schemas/DataSource"
      required:
        - name
    DataSource:
      type: object
      properties:
        name:
          type: string
          description: Should be "mongodb-atlas".
          example: mongodb-atlas
          enum:
            - mongodb-atlas
        type:
          type: string
          description: Should be "mongodb-atlas".
          example: mongodb-atlas
          enum:
            - mongodb-atlas
        config:
          type: object
          properties:
            clusterName:
              type: string
              description: Name of Atlas cluster associated with the Realm app.
          required:
            - clusterName
      required:
        - name
        - type
        - config
    Service:
      properties:
        _id:
          type: string
        name:
          type: string
        type:
          type: string
        version:
          type: integer
    NewService:
      properties:
        name:
          type: string
        type:
          type: string
        config:
          type: object
      required:
        - name
        - type
    Rule:
      properties:
        name:
          type: string
        actions:
          items:
            type: string
        when:
          type: object
      required:
        - name
        - when
    IncomingWebhook:
      properties:
        name:
          type: string
        function_source:
          type: string
        respond_result:
          type: boolean
        options:
          type: object
          properties:
            secret:
              type: string
            secretAsQueryParam:
              type: boolean
      required:
        - name
        - function_source
        - respond_result
    UserProvider:
      type: object
      properties:
        id:
          type: string
        provider_type:
          "$ref": "#/components/schemas/ProviderType"
        provider_id:
          type: string
    ProviderSummary:
      properties:
        _id:
          type: string
        name:
          type: string
        type:
          "$ref": "#/components/schemas/ProviderType"
        disabled:
          type: boolean
    FullProvider:
      properties:
        _id:
          type: string
        name:
          type: string
        type:
          "$ref": "#/components/schemas/ProviderType"
        disabled:
          type: boolean
        config:
          type: object
    NewProvider:
      properties:
        name:
          type: string
        type:
          "$ref": "#/components/schemas/ProviderType"
        disabled:
          type: boolean
        config:
          type: object
      required:
        - name
        - type
        - disabled
    RealmProfile:
      properties:
        user_id:
          type: string
        domain_id:
          type: string
        identities:
          type: array
          items:
            "$ref": "#/components/schemas/ProviderSummary"
        data:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
        type:
          "$ref": "#/components/schemas/ProfileType"
        roles:
          type: array
          items:
            type: object
            properties:
              role_name:
                type: string
              group_id:
                type: string
    NewFunction:
      properties:
        can_evaluate:
          type: object
          description: |-
            A JSON expression that evaluates to `true` if the Function is allowed to
            run in response to an incoming request.
        name:
          type: string
          description: A unique name for the Function.
        private:
          type: boolean
          description: |-
            If `true`, the function is hidden from client applications. You can
            still call a private function from JSON expressions and other functions,
            including incoming webhooks and triggers.
        source:
          type: string
          description: |-
            The stringified source code for the function. The code must be valid
            ES6.
        run_as_system:
          type: boolean
          description: |-
            If `true`, the function executes with full privileges, bypassing rules
            on all services.
      required:
        - name
        - private
        - source
        - run_as_system
    Function:
      properties:
        _id:
          type: string
        can_evaluate:
          type: object
          description: |-
            A JSON expression that evaluates to `true` if the Function is allowed to
            run in response to an incoming request.
        name:
          type: string
          description: A unique name for the Function.
        private:
          type: boolean
          description: |-
            If `true`, the function is hidden from client applications. You can
            still call a private function from JSON expressions and other functions,
            including incoming webhooks and triggers.
        source:
          type: string
          description: |-
            The stringified source code for the function. The code must be valid
            ES6.
    ValueSummary:
      properties:
        _id:
          type: string
        name:
          type: string
        private:
          type: boolean
    NewValue:
      properties:
        name:
          type: string
        private:
          type: boolean
        value: {}
      required:
        - name
        - private
        - value
    Value:
      properties:
        _id:
          type: string
        name:
          type: string
        private:
          type: boolean
        value: {}
    ProviderType:
      type: string
      enum:
        - anon-user
        - local-userpass
        - api-key
        - oauth2-apple
        - oauth2-google
        - oauth2-facebook
        - custom-token
        - custom-function
    ProfileType:
      type: string
      enum:
        - normal
        - server
        - system
        - unknown
    MessageState:
      type: string
      enum:
        - sent
        - draft
    NewMessage:
      properties:
        label:
          type: string
        message:
          type: string
        topic:
          type: string
        state:
          "$ref": "#/components/schemas/MessageState"
      required:
        - label
        - message
        - state
        - topic
    Message:
      properties:
        allowed_ips:
          type: string
        appID:
          type: string
        label:
          type: string
        message:
          type: string
        topic:
          type: string
        created:
          type: string
        sent:
          type: string
        state:
          "$ref": "#/components/schemas/MessageState"
    User:
      properties:
        _id:
          type: string
        identities:
          items:
            "$ref": "#/components/schemas/UserProvider"
        type:
          type: string
        creation_date:
          type: integer
        last_authentication_date:
          type: integer
        disabled:
          type: boolean
        data:
          type: object
    Partition:
      properties:
        key:
          type: string
        type:
          type: string
    SyncDataResponse:
      properties:
        service_id:
          type: string
          description:
            The Service ID for the currently synced cluster, if there is
            one.
        partition_fields:
          type: array
          items:
            "$ref": "#/components/schemas/Partition"
          description: |-
            A list of valid partition keys based on the cluster's collection
            schemas.
    TriggerResponse:
      properties:
        _id:
          type: string
          description: The unique ID of the trigger.
        name:
          type: string
          description: The name of the trigger.
        type:
          type: string
          description: The type of the trigger.
        function_id:
          type: string
          description: The ID of the function associated with the trigger.
        function_name:
          type: string
          description: The name of the function associated with the trigger.
        disabled:
          type: boolean
          description: If true, the trigger is disabled and will not fire.
    TriggerRequest:
      required:
        - name
        - type
        - function_id
      properties:
        name:
          type: string
          description: The name of the trigger.
        type:
          type: string
          description: The type of the trigger.
          enum:
            - DATABASE
            - AUTHENTICATION
            - SCHEDULE
        function_id:
          type: string
          description: The ID of the function associated with the trigger.
        disabled:
          type: boolean
          description: "Default: `false` If true, the trigger is disabled."
        config:
          type: object
          description: An object that defines configuration values for the trigger.
          required:
            - database
            - collection
            - operation_types
            - operation_type
            - service_id
            - providers
          properties:
            operation_types:
              type: array
              items:
                type: string
                enum:
                  - INSERT
                  - UPDATE
                  - REPLACE
                  - DELETE
              description: |-
                **Required for Database Triggers** -- The [database event operation
                types](https://docs.mongodb.com/realm/triggers/database-triggers#std-label-database-events) to
                listen for. This must contain at least one value.
            operation_type:
              type: string
              description: |-
                **Required for Authentication Triggers** -- The [authentication
                operation
                type](https://docs.mongodb.com/realm/triggers/authentication-triggers#std-label-authentication-event-operation-types)
                to listen for.
              enum:
                - LOGIN
                - CREATE
                - DELETE
            providers:
              type: string
              description: |-
                **Only Available for Authentication Triggers** -- A list of one or more
                [authentication
                provider](https://docs.mongodb.com/realm/authentication/providers) id
                values. The trigger will only listen for authentication events produced
                by these providers.
            database:
              type: string
              description: |-
                **Required for Database Triggers** -- The name of the MongoDB database
                that contains the watched collection.
            collection:
              type: string
              description: |-
                **Required for Database Triggers** -- The name of the MongoDB collection
                that the trigger watches for change events. The collection must be part
                of the specified database.
            service_id:
              type: string
              description: |-
                **Required for Database Triggers** -- The ID of the MongoDB Service
                associated with the trigger.
            match:
              type: object
              description: |-
                **Only Available for Database Triggers** -- A
                [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match)
                expression document that MongoDB Realm includes in the underlying change
                stream pipeline for the trigger. This is useful when you want to filter
                change events beyond their operation type. The trigger will only fire if
                the expression evaluates to true for a given change event.
            full_document:
              type: boolean
              description: |-
                **Only Available for Database Triggers** -- If true, indicates that
                `UPDATE` change events should include the most current
                [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/)
                version of the modified document in the `fullDocument` field.
            full_document_before_change:
              type: boolean
              description: |-
                **Only Available for Database Triggers** -- If true, indicates that the
                `UPDATE` change event response should include a copy of the modified
                document from before the update was applied.
                [Preimages](https://docs.mongodb.com/realm/mongodb/trigger-preimages#std-label-trigger-preimages)
                must be enabled.
            schedule:
              type: string
              description: |-
                **Only Available for Scheduled Triggers** -- A [cron
                expression](https://docs.mongodb.com/realm/triggers/cron-expressions)
                that defines the trigger schedule.
        event_processors:
          type: object
          description: |-
            An object where each field name is an event processor ID and each value
            is an object that configures its corresponding event processor. The
            following event processors are supported: `AWS_EVENTBRIDGE` For an
            example configuration object, see [Send Trigger Events to AWS
            EventBridge](https://docs.mongodb.com/realm/triggers/examples/send-events-aws-eventbridge#std-label-event_processor_example).
    MetadataAttribute:
      type: object
      properties:
        name:
          type: string
          description: |-
            The [metadata
            attribute](https://docs.mongodb.com/realm/hosting/file-metadata-attributes)
            name.
        value:
          type: string
          description: |-
            The [metadata
            attribute](https://docs.mongodb.com/realm/hosting/file-metadata-attributes)
            value.
    AssetMetadata:
      properties:
        path:
          type: string
          description: The resource path of the asset
        size:
          type: integer
          description: The size of the asset in bytes
        attrs:
          type: array
          description: |-
            An array of documents that each describe a [metadata
            attribute](https://docs.mongodb.com/realm/hosting/file-metadata-attributes)
            that applies to the asset.
          items:
            "$ref": "#/components/schemas/MetadataAttribute"
        hash:
          type: string
          description: The MD5 checksum hash for the asset
    HostedAssetMetadata:
      properties:
        appId:
          type: string
          description: The unique App ID of the Realm app that is hosting the file.
        last_modified:
          type: integer
          description: |-
            The time at which the hosted asset was last modified in [Unix
            time](https://en.wikipedia.org/wiki/Unix_time) (number of seconds since
            January 1, 1970 at 00:00 UTC).
        url:
          type: string
          description: The full URL of the hosted asset.
        path:
          type: string
          description: The resource path of the hosted asset
        size:
          type: integer
          description: The size of the hosted asset in bytes
        attrs:
          type: array
          description: |-
            An array of documents that each describe a [metadata
            attribute](https://docs.mongodb.com/realm/hosting/file-metadata-attributes)
            that applies to the asset.
          items:
            "$ref": "#/components/schemas/MetadataAttribute"
        hash:
          type: string
          description: The MD5 checksum hash for the hosted asset
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      description: |-
        The authorization token provided in the `access_token` field of the
        `POST /auth/providers/{provider}/login`
        and  `POST /auth/session` API endpoints.
    refreshAuth:
      type: http
      scheme: bearer
      description: |-
        The authorization token provided in the `refresh_token` field of the
        `POST /auth/providers/{provider}/login`
        API endpoint.
  responses:
    ClientErrorResponse:
      description: There is an error in the request.
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
                description: A message describing the error.
tags:
  - name: admin
    description: Realm Administrator APIs
    x-displayName: Realm Administrator APIs
  - name: apikeys
    description: API Key APIs
    x-displayName: API Key APIs
  - name: billing
    description: Billing APIs
    x-displayName: Billing APIs
  - name: secrets
    description: Secrets APIs
    x-displayName: Secrets APIs
  - name: apps
    description: Application-level APIs
    x-displayName: Application-level APIs
  - name: authproviders
    description: Auth Provider APIs
    x-displayName: Auth Provider APIs
  - name: email
    description: Email APIs
    x-displayName: Email APIs
  - name: functions
    description: Functions APIs
    x-displayName: Functions APIs
  - name: logs
    description: Logging APIs
    x-displayName: Logging APIs
  - name: notifications
    description: Notifications APIs
    x-displayName: Notifications APIs
  - name: rules
    description: Rules APIs
    x-displayName: Rules APIs
  - name: security
    description: Security APIs
    x-displayName: Security APIs
  - name: services
    description: Services APIs
    x-displayName: Services APIs
  - name: sync
    description: Sync APIs
    x-displayName: Sync APIs
  - name: users
    description: Users APIs
    x-displayName: Users APIs
  - name: values
    description: Values APIs
    x-displayName: Values APIs
  - name: webhooks
    description: Incoming Webhook APIs
    x-displayName: Incoming Webhook APIs
  - name: triggers
    description: Event Trigger APIs
    x-displayName: Event Trigger APIs
  - name: hosting
    description: Static File Hosting APIs
    x-displayName: Static File Hosting APIs
  - name: deploy
    description: Application Deployment APIs
    x-displayName: Application Deployment APIs
  - name: dependencies
    description: Dependency APIs
    x-displayName: Dependency APIs
security:
  - tokenAuth: []
