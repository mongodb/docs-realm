.. _appconfig-sync:

==============================
Realm Sync Configuration Files
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

You can configure :ref:`Realm sync <sync>` for your application in the ``sync``
directory:

.. code-block:: none
   
   app/
   └── sync/
       └── config.json

.. _partition-based-sync-config-object:

Partition-Based Sync Configuration
----------------------------------

When you use :ref:`Partition-Based Sync <partition-based-sync>`, your Realm 
app uses this Sync configuration:

.. code-block:: json
   :caption: sync/config.json
   
   {
     "state": <"enabled" | "disabled">,
     "development_mode_enabled": <Boolean>,
     "service_name": "<Data Source Name>",
     "database_name": "<Development Mode Database Name>",
     "partition": {
       "key": "<Partition Key Field Name>",
       "type": "<Partition Key Type>",
       "permissions": {
         "read": { <JSON Expression> },
         "write": { <JSON Expression> }
       }
     },
     "last_disabled": <Number>,
     "client_max_offline_days": <Number>
   }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - | ``state``
       | String
     - The current state of the :doc:`Sync </sync>` protocol for the application.
       
       Valid Options:

       - ``"enabled"``
       - ``"disabled"``

   * - | ``service_name``
       | String
     - The name of the Atlas cluster :ref:`data source <appconfig-data_sources>`
       to sync.

   * - | ``development_mode_enabled``
       | Boolean
     - If ``true``, :ref:`Development Mode <enable-development-mode>` is enabled
       for the application. While enabled, Realm automatically stores synced
       objects in a specific database (specified in ``database_name``) and
       mirrors objects types in that database's collection schemas.

   * - | ``database_name``
       | String
     - The name of a database in the synced cluster where Realm stores data in
       :ref:`Development Mode <enable-development-mode>`. Realm automatically
       generates a schema for each synced type and maps each object type to a
       collection within the database.

   * - | ``partition.key``
       | String
     - The field name of your app's :ref:`partition key <partition-key>`. This
       field must be defined in the schema for object types that you want to
       sync.

   * - | ``partition.type``
       | String
     - The value type of the partition key field. This must match the type
       defined in the object schema.
       
       Valid Options:

       - ``"string"``
       - ``"objectId"``
       - ``"long"``

   * - | ``partition.permissions.read``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a user
       has permission to read objects in a partition. If the expression
       evaluates to ``false``, {+service-short+} does not allow the user to read
       an object or its properties.

   * - | ``partition.permissions.write``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a user
       has permission to write objects in a partition. If the expression
       evaluates to ``false``, {+service-short+} does not allow the user to
       modify an object or its properties. Write permission requires read 
       permission. A user cannot write to a document that they cannot read.

   * - | ``last_disabled``
       | Number
     - The date and time that sync was last paused or disabled, represented by
       the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
       UTC).

   * - | ``client_max_offline_days``
       | Number
     - Controls how long the :ref:`backend compaction <optimize-sync-atlas-usage>`
       process waits before aggressively pruning metadata that some clients
       require to synchronize from an old version of a {+realm+}.

.. _flexible-sync-config-object:

Flexible Sync Configuration
---------------------------

When you use :ref:`Flexible Sync <flexible-sync>`, your Realm app uses this 
Sync configuration:

.. code-block:: json
   :caption: sync/config.json

   {
     "type": "flexible",
     "development_mode_enabled": <Boolean>,
     "service_name": "<Data Source Name>",
     "database_name": "<Development Mode Database Name>",
     "state": <"enabled" | "disabled">,
     "permissions": {
       "rules": {
         "<Collection Name>": [
           {
             "name": <String>,
             "applyWhen": { <JSON Expression> },
             "read": { <JSON Expression> },
             "write": { <JSON Expression> }
           }
         ]
       },
       "defaultRoles": [
         {
           "name": <String>,
           "applyWhen": { <JSON Expression> },
           "read": <JSON Expression>,
           "write": <JSON Expression>
         }
       ]       
     },
     "queryable_fields_names": [
       <Array of String Field Names>
     ]
   }

.. list-table::
   :header-rows: 1
   :widths: 10 30

   * - Field
     - Description

   * - | ``type``
       | String
     - The :ref:`Sync Mode <sync-modes>` for the application.
       
       Valid Options:

       - ``"flexible"``

   * - | ``development_mode_enabled``
       | Boolean
     - If ``true``, :ref:`Development Mode <enable-development-mode>` is enabled
       for the application. While enabled, Realm automatically stores synced
       objects in a specific database (specified in ``database_name``) and
       mirrors objects types in that database's collection schemas.

   * - | ``service_name``
       | String
     - The name of the Atlas cluster :ref:`data source <appconfig-data_sources>`
       to sync.

   * - | ``database_name``
       | String
     - The name of a database in the synced cluster where Realm stores data in
       :ref:`Development Mode <enable-development-mode>`. Realm automatically
       generates a schema for each synced type and maps each object type to a
       collection within the database.

   * - | ``state``
       | String
     - The current state of the :doc:`Sync </sync>` protocol for the application.
       
       Valid Options:

       - ``"enabled"``
       - ``"disabled"``

   * - | ``permissions.rules.<Coll>``
       | String
     - You can define rules that apply to a single collection by specifying
       the collection name. Realm apps apply rules in order from the beginning
       of the array, so start with the most specific rules first.

   * - | ``rules.<Coll>.name``
       | String
     - The name of the specific rule in the rules array. You might use a 
       descriptive name to make it easier to parse the rules, such as 
       "adminReadWrite" or "employeeReadOnly".

   * - | ``rules.<Coll>.applyWhen``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when 
       the rule should be applied. An example might be 
       ``{"%%user.custom_data.isGlobalAdmin": true}``. This reads the 
       value of the ``isGlobalAdmin`` bool from the :ref:`user's custom data 
       <custom-user-data>`, and applies the rule when the value of this 
       bool is ``true``.

   * - | ``rules.<Coll>.read``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a 
       user has permission to read objects in the collection. If the 
       expression evaluates to ``false``, {+service-short+} does not allow 
       the user to read an object or its properties.

   * - | ``rules.<Coll>.write``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a 
       user has permission to write objects in the collection. If the 
       expression evaluates to ``false``, {+service-short+} does not allow 
       the user to modify an object or its properties. Write permission
       requires read permission. A user cannot write to a document that
       they cannot read.

   * - | ``permissions.defaultRoles``
       | String
     - Your Realm app evaluates ``defaultRoles`` after ``rules``. If no 
       collection-specific rule applies to a user's attempt to access 
       data through a Realm app, Realm proceeds to evaluate ``defaultRoles`` 
       until it finds a set of permissions that apply to the user. This 
       may occur when a collection does not have a specific set of rules 
       defined, or when none of the rules defined for a collection apply
       to a user. 
       
       You can have more than one ``defaultRole``, and they apply
       across all the collections that your Realm app can access, even 
       when you have more specific collection rules defined.

   * - | ``defaultRoles.name``
       | String
     - The name of the specific role in the defaultRoles array. You might 
       use a descriptive name to make it easier to parse the roles, such as 
       "adminReadWrite" or "employeeReadOnly".

   * - | ``defaultRoles.applyWhen``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when 
       the role should be applied. An example might be 
       ``{"%%user.custom_data.isGlobalAdmin": true}``. This reads the 
       value of the ``isGlobalAdmin`` bool from the :ref:`user's custom data 
       <custom-user-data>`, and applies the role when the value of this 
       bool is ``true``.

   * - | ``defaultRoles.read``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a 
       user has permission to read objects in the collection. If the 
       expression evaluates to ``false``, {+service-short+} does not allow 
       the user to read an object or its properties.

   * - | ``defaultRoles.write``
       | JSON Expression
     - An :ref:`expression <expressions>` that evaluates to ``true`` when a 
       user has permission to write objects in the collection. If the 
       expression evaluates to ``false``, {+service-short+} does not allow 
       the user to modify an object or its properties. 

   * - | ``queryable_fields_names``
       | Array of Strings
     - The :ref:`names of the fields <queryable-fields>` that your client 
       application can query to determine which data to synchronize.

   * - | ``last_disabled``
       | Number
     - The date and time that sync was last paused or disabled, represented by
       the number of seconds since the Unix epoch (January 1, 1970, 00:00:00
       UTC).

   * - | ``client_max_offline_days``
       | Number
     - Controls how long the :ref:`backend compaction <optimize-sync-atlas-usage>`
       process waits before aggressively pruning metadata that some clients
       require to synchronize from an old version of a {+realm+}.
