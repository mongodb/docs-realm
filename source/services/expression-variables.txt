.. _expression-variables:

====================
Expression Variables
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can use special variables in :doc:`JSON expressions
</services/json-expressions>` to represent dynamic values and
operations. There are two types of expression variables:

- :ref:`Expansions <expansions>`, which represent dynamic values and begin with two percent signs (``%%``).
- :ref:`Operators <expression-operators>`, which represent runtime operations and begin with one percent sign (``%``).

.. _expansions:
.. _expression-expansions:

Expansions
----------

Expansions represent dynamic values that Realm replaces when it
evaluates an expression. Expansion variables begin with two percent
signs (``%%``).

General Logic
~~~~~~~~~~~~~

You can use the following expansions in any :doc:`JSON expression
</services/json-expressions>` to represent boolean values.

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%true
     - boolean
     - Always evaluates to ``true``. This is useful when comparing with
       a function (:json-operator:`%function`) that returns a boolean
       value.

   * - .. json-expansion:: %%false
     - boolean
     - Always evaluates to ``false``. This is useful when comparing with
       a function (:json-operator:`%function`) that returns a boolean
       value.

.. _expansions-application:

Application Components
~~~~~~~~~~~~~~~~~~~~~~

You can use the following expansions in any :doc:`JSON expression
</services/json-expressions>` to represent components of your
application.

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%values
     - Document
     - A document that includes all :doc:`global values </values-and-secrets>`
       that you have defined in your {+app+}. You
       can access a specific value from this document.

       .. example::

          The following is a MongoDB schema validation
          expression that evaluates to ``true`` if the
          document's ``secret`` field matches the
          used-defined :doc:`value </values-and-secrets>`
          named ``secretString``:

          .. code-block:: json

             {
               "%%root.secret": "%%values.secretString"
             }
   * - .. json-expansion:: %%request
     - Document
     - A document that includes :doc:`context request </functions/context>`
       information about the external HTTP request that triggered the function
       call.

.. _user-object:
.. _expansions-user:

Authenticated User
~~~~~~~~~~~~~~~~~~

The :json-expansion:`%%user` expansion represents the
currently authenticated :doc:`user </authentication>` and
allows you to access their information. You can use this
expansion to create expressions that evaluate based on the
user that initiated a request or action.

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 15 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%user
     - Document
     - A document containing information and data about the
       authenticated :doc:`user </authentication>`.

   * - .. json-expansion:: %%user.id
     - String
     - The authenticated user's id.

   * - .. json-expansion:: %%user.type
     - String

     - The type of user that initiated the request. Evaluates to
       ``"server"`` for :doc:`API key </authentication/api-key>` users
       and ``"normal"`` for all other users.

   * - .. json-expansion:: %%user.custom_data
     - Document
     - The user's custom data. The exact contents vary depending on
       the :doc:`custom user data </users/enable-custom-user-data/>`
       available.

       .. example::

          .. code-block:: json

             "custom_data": {
               "primaryLanguage": "English",
             }

   * - .. json-expansion:: %%user.data
     - Document
     - The user's metadata. The exact contents will vary depending on
       the :doc:`authentication provider </authentication/providers>`
       identities associated with the user.

       .. example::

          .. code-block:: json

             "data": {
               "name": "Joe Mango",
               "email": "joe.mango@example.com"
             }

   * - .. json-expansion:: %%user.identities
     - Array of Documents

     - A list of all :doc:`authentication provider
       </authentication/providers>` identities associated with the user.
       An identity consists of a unique identifier given to a user by an
       authorization provider along with the provider's type:

       .. example::

          .. code-block:: json

             "identities": [
               {
                 "id": "5bce299457c70db9bd73b8-aajddbkuvomsvcrjjfoxs",
                 "providerType": "local-userpass"
               }
             ]

.. example::

   The following is a MongoDB role's :guilabel:`Apply When` expression
   that evaluates to ``true`` only if a document's ``owner_id`` and
   ``owner_name`` values match the values of ``%%user.id`` and
   ``%%user.data.name``:

   .. code-block:: javascript

      {
        "owner_id": "%%user.id",
        "owner_name": "%%user.data.name"
      }

.. _mongodb-expansions:
.. _expansions-mongodb:

MongoDB Documents
~~~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`MongoDB Rules
<mongodb-rules>` and :ref:`Document Schema <mongodb-schemas>` validation
expressions:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%this
     - any
     - The value of a particular field as it exists at the end of a database operation.

   * - .. json-expansion:: %%prev
     - any

     - The value of a particular field before it is changed by a write operation.

   * - .. json-expansion:: %%root
     - Document
     - The full document as it exists at the end of a database operation.

   * - .. json-expansion:: %%prevRoot
     - Document
     - The full document before it is changed by a write operation.

.. example::

   The following is a MongoDB schema validation expression that
   evaluates to ``true`` if either the document previously existed (i.e.
   the action is not an insert) or the document's ``status`` field has a
   value of ``"new"``:

   .. code-block:: javascript

      {
        "%or": [
          { "%%prevRoot": { "%exists": %%true } },
          { "%%root.name": "new" }
        ]
      }



.. _service-expansions:

Service Expansions
~~~~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`external service rules
<service-rules>`:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%args
     - Document
     - A document containing the values passed as arguments to a
       :ref:`service action <service-actions>`. You can access each
       argument by its parameter name.

.. example::

   The following is a :doc:`Twilio service </services/twilio>` rule that
   evaluates to ``true`` if the sender's phone number (the ``from``
   argument) matches a specific value:

   .. code-block:: javascript

      {
        "%%args.from": "+15558675309"
      }

.. _sync-expansions:

Sync Expansions
~~~~~~~~~~~~~~~

You can use the following expansions in :ref:`sync rules
<sync-rules>`:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 10 30

   * - Name
     - Type
     - Description

   * - .. json-expansion:: %%partition
     - any
     - The partition key value of the current partition being evaluated.

.. _expression-operators:

Operators
---------

Operators represent runtime operations that Realm executes when it
evaluates an expression. Operator variables begin with one percent sign
(``%``).

Application Components
~~~~~~~~~~~~~~~~~~~~~~

The following operators allow you access other components of your Realm
application and are available in all :doc:`JSON expressions
</services/json-expressions>`:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %function
     - Calls a :doc:`function </functions>` with the specified name and
       arguments. Evaluates to the value that the function returns.

       .. example::

          .. code-block:: json

             {
               "%%true": {
                 "%function": {
                   "name": "isEven",
                   "arguments": [42]
                 }
               }
             }

Existence Operators
~~~~~~~~~~~~~~~~~~~

The following operators allow you to determine if a value exists in a
given context and are available in all :doc:`JSON expressions
</services/json-expressions>`:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %exists

     - Checks if the field it is assigned to has any value. Evaluates to
       a boolean representing the result.

       .. example::

          .. code-block:: json

             {
               "url": { "%exists": true }
             }

   * - .. json-operator:: %in

     - Checks a specified array of values to see if the array contains
       the value of the field that this operator is assigned to.
       Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             {
               "url": {
                 "%in": [
                   "https://www.example.com",
                   "https://www.mongodb.com"
                 ]
               }
             }

   * - .. json-operator:: %nin

     - Checks a specified array of values to see if the array does not
       contain the value of the field that this operator is assigned to.
       Evaluates to a boolean representing the result.


       .. example::

          .. code-block:: json

             {
               "url": {
                 "%nin": [
                   "https://www.example.com",
                   "https://www.mongodb.com"
                 ]
               }
             }

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

The following operators allow you to compare values, including
:ref:`expanded <expansions>` values, and are available in all :doc:`JSON
expressions </services/json-expressions>`:

.. cssclass:: auth-table
.. list-table::
   :header-rows: 1
   :widths: 10 40

   * - Operator
     - Description

   * - .. json-operator:: %eq

     - Checks if the field it is assigned to is equal to the specified
       value. Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             { "score": { "%eq": 42 } }

   * - .. json-operator:: %neq

     - Checks if the field it is assigned to is not equal to the
       specified value. Evaluates to a boolean representing the result.

       .. example::

          .. code-block:: json

             { "numPosts": { "%neq": 0 } }

   * - .. json-operator:: %gt

     - Checks if the field it is assigned to is strictly greater than
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%gt": 0 } }

   * - .. json-operator:: %gte

     - Checks if the field it is assigned to is greater than or equal to
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%gte": 0 } }

   * - .. json-operator:: %lt

     - Checks if the field it is assigned to is strictly less than
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%lt": 0 } }

   * - .. json-operator:: %lte

     - Checks if the field it is assigned to is less than or equal to
       the specified value. Evaluates to a boolean representing the
       result.

       .. example::

          .. code-block:: json

             { "score": { "%lte": 0 } }

Summary
-------

- You can use expression variables in :doc:`JSON expressions </services/json-expressions>` to represent dynamic values and operations.
- :ref:`Expansions <expansions>` represent dynamic values and begin with two percent signs (``%%``).
- :ref:`Operators <expression-operators>` represent runtime operations and begin with one percent sign (``%``).
