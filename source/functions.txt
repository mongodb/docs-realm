.. _functions:

=========
Functions
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Realm Functions allow you to define and execute server-side logic for
your application. You can call functions from your client applications
as well as from other functions and in JSON expressions throughout
Realm.

Functions are written in modern JavaScript (ES6+) and execute in a
serverless manner. When you :doc:`call a function
</functions/call-a-function>`, you can dynamically access components of
the current application as well as information about the request to
execute the function and the logged in user that sent the request.

By default, Realm Functions have no Node.js modules available for
import. If you would like to make use of any such modules, you can
:doc:`upload external dependencies </functions/upload-external-dependencies>`
to make them available to
:doc:`import into your Realm Functions </functions/import-external-dependencies>`.

Use Cases
~~~~~~~~~

You can use functions to handle low-latency, short-running connection
logic and other server-side interactions. Functions are particularly
useful when you want to work with multiple services, behave dynamically
based on the current user, or abstract away implementation details from
your client applications. You can upload external Node.js packages and
import them into your functions to streamline data processing and reuse
shared code.

Realm also uses functions internally for incoming webhooks and
triggers. The functions that you create for these components are regular
Realm functions that take specific arguments depending on the service.

Behavior
~~~~~~~~

- Realm automatically encodes values returned from functions as
  :manual:`Extended JSON </reference/mongodb-extended-json>`.

- Functions do not continue to execute after they return. You cannot use
  functions with asynchronous callbacks or event listeners. If you need
  to do asynchronous work in a function, use a :mdn:`Promise
  <Web/JavaScript/Reference/Global_Objects/Promise>`.

.. _function-constraints:

Constraints
~~~~~~~~~~~

- Function runtime is limited to 90 seconds.

- Function memory usage is limited to 256MB.

- Functions support most commonly used ES6+ features, but some features that are
  uncommon or unsuited to serverless workloads are not supported (e.g.
  ``WeakSet``, ``Proxy``, ``Array.prototype.flat()``).

- A function may open a maximum of 5 sockets using the :nodejs:`net
  <docs/v10.18.1/api/net.html>` built-in module.

- {+service-short+} supports a subset of built-in Node modules. For a 
  full list of supported and unsupported modules, see
  :ref:`Built-In Module Support <builtin-module-support>`.

- There is an 18 MB limit for incoming webhook and function requests. For
  functions called from an SDK, this limit applies to the total size of all
  arguments you pass to the function.

Concepts
--------

.. _function-active-user:

Active User
~~~~~~~~~~~

The **active user** of a given function execution is the authenticated
:ref:`user <user-accounts>` that called the function. Functions inherit
the user context of other functions that call them.

{+service+} evaluates rules in the context of the active user and resolves
dynamic references like :ref:`context.user <context-user>` and
:json-expansion:`%%user` to their :doc:`user object </authentication>`.

.. _function-run-as-system:
.. _function-system-user:
.. _system-functions:

System Functions
~~~~~~~~~~~~~~~~

A **System Function** is a function that runs as the :ref:`system user
<system-user>` rather than an :ref:`application user <user-accounts>`.
System functions have full access to MongoDB CRUD and Aggregation APIs
bypass collection rules and schema validation.

You can configure a Function to run as the :ref:`system user
<system-user>` by enabling its :guilabel:`Run As System` configuration
option. To determine if a function executes as a system user at runtime,
call :method:`context.runningAsSystem()`.

.. admonition:: System Function Active User
   :class: note
   
   {+service-short+} always resolves dynamic references like :ref:`context.user
   <context-user>` and :json-expansion:`%%user` to the authenticated
   user that called a function if there was one. If a function executes
   without being called by an authenticated user, such as in a trigger
   or webhook, then {+service-short+} resolves the dynamic references to the
   :ref:`system user <system-user>` instead.

.. _external-dependencies:

External Dependencies
~~~~~~~~~~~~~~~~~~~~~

An **external dependency** is an external library that includes logic
you'd rather not implement yourself, such as string parsing, convenience
functions for array manipulations, and data structure or algorithm
implementations.

{+service-short+} allows you to upload external dependencies from the :npm:`npm registry <>`
and then import those dependencies into your functions using standard JavaScript
module syntax. {+service-short+} automatically transpiles dependencies and supports most
built-in Node.js modules. To get started with external dependencies, check out
the following guides:

- :doc:`Upload External Dependencies </functions/upload-external-dependencies>`
- :doc:`Import External Dependencies </functions/import-external-dependencies>`
- :doc:`Built-In Module Support </functions/built-in-module-support>`

.. admonition:: Create Your Own Modules
   :class: note

   Though most npm modules are written by third parties, you can also
   create and publish your own npm modules to house logic specific to
   your application. You can make your modules available to the Node.js
   community or reserve them for private use. For more information,
   check out npm's guide on `Contributing packages to the registry
   <https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry>`_.

Guides
------

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Define a Function </functions/define-a-function>`
     - Learn how to write and add new functions to your {+app+}.

   * - :doc:`Upload an External Dependency </functions/upload-external-dependencies>`
     - Learn how to make Node.js packages available for import in your
       {+service-short+} Functions.

   * - :doc:`Call a Function </functions/call-a-function>`
     - Learn how to execute functions that you've defined from a client
       application or from another {+service-short+} component.

   * - :doc:`Import an External Dependency </functions/import-external-dependencies>`
     - Learn how to import and call uploaded Node.js packages within
       a {+service-short+} Function.

   * - :doc:`Access Function Context </functions/access-function-context>`
     - Learn how to access runtime information and interfaces to other
       components of your application from within a function.

Reference Documentation
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Subject
     - Description

   * - :doc:`Function Context </functions/context>`
     - Includes detailed information about specific application
       ``context`` modules as well as examples of runtime data objects.

   * - :doc:`Utility Packages </functions/utilities>`
     - Includes detailed information about global utility packages.

   * - :doc:`JSON & BSON </functions/utilities>`
     - Details built-in global modules for working with JavaScript and MongoDB data formats.

   * - :doc:`Built-In Module Support </functions/built-in-module-support>`
     - Details which standard Node modules and APIs are available in {+service-short+} functions.


.. toctree::
   :titlesonly:
   :caption: Work with Realm Functions
   :hidden:

   Define a Function </functions/define-a-function>
   Call a Function </functions/call-a-function>
   Access Function Context </functions/access-function-context>

.. toctree::
   :titlesonly:
   :caption: External Dependencies
   :hidden:

   Upload External Dependencies </functions/upload-external-dependencies>
   Import External Dependencies </functions/import-external-dependencies>
   Built-In Module Support </functions/built-in-module-support>

.. toctree::
   :titlesonly:
   :caption: Reference
   :hidden:

   Function Context Reference </functions/context>
   Utility Packages </functions/utilities>
   JSON & BSON </functions/json-and-bson>
