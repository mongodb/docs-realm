.. _functions:

=========
Functions
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Realm Functions allow you to define and execute server-side logic for
your application. You can call functions from your client applications
as well as from other functions and in JSON expressions throughout
Realm.

Functions are written in modern JavaScript (ES6+) and execute in a
serverless manner. When you :doc:`call a function
</functions/call-a-function>`, you can dynamically access components of
the current application as well as information about the request to
execute the function and the logged in user that sent the request.

Use Cases
~~~~~~~~~

You can use functions to handle low-latency, short-running connection
logic and other server-side interactions. Functions are particularly
useful when you want to work with multiple services, behave dynamically
based on the current user, or abstract away implementation details from
your client applications. You can use external Node.js packages and
import them into your functions to streamline data processing and reuse
shared code.

Realm also uses functions internally for HTTPS endpoints and
triggers. The functions that you create for these components are regular
Realm functions that take specific arguments depending on the service.

Behavior
~~~~~~~~

- Realm automatically serializes values returned from functions to
  :manual:`Extended JSON </reference/mongodb-extended-json>`.
  
  .. tip:: Return JSON instead of EJSON
     
     If you return a JavaScript object from a function, it may include EJSON
     value documents instead of raw JSON values. This is useful to preserve type
     information but may not be what your application expects.
     
     Instead, to return an object as JSON, call ``JSON.stringify()`` on the
     object and then return the stringified result, as in the following example:
     
     .. code-block:: javascript
        :emphasize-lines: 5
        
        const plants = context.services.get("mongodb-atlas").db("example").collection("plants");
        const plant = await plants.findOne();
        // Return e.g. { "_id": "5f87976b7b800b285345a8b6", ... }
        // instead of { "_id": { "$oid": "5f87976b7b800b285345a8b6" } }
        return JSON.stringify(plant);

- Functions do not continue to execute after they return. You cannot use
  functions with asynchronous callbacks or event listeners. If you need
  to do asynchronous work in a function, use a :mdn:`Promise
  <Web/JavaScript/Reference/Global_Objects/Promise>`.

.. _function-constraints:

Constraints
~~~~~~~~~~~

- Function runtime is subject to a 120 second timeout.

- Function memory usage is limited to 256MB.

- Functions support most commonly used ES6+ features, but some features that are
  uncommon or unsuited to serverless workloads are not supported. For more
  information, see :ref:`JavaScript Support <js-support>`.

- A function may open a maximum of 5 sockets using the :nodejs:`net
  <docs/v10.18.1/api/net.html>` built-in module.

- {+service-short+} supports a subset of built-in Node modules. For a 
  full list of supported and unsupported modules, see
  :ref:`Built-In Module Support <js-support-builtin-modules>`.

- There is an 18 MB limit for incoming webhook and function requests. For
  functions called from an SDK, this limit applies to the total size of all
  arguments you pass to the function.

Concepts
--------

.. _function-active-user:

Active User
~~~~~~~~~~~

The **active user** of a given function execution is the authenticated
:ref:`user <user-accounts>` that called the function. Functions inherit
the user context of other functions that call them.

{+service+} evaluates rules in the context of the active user and resolves
dynamic references like :ref:`context.user <context-user>` and
:json-expansion:`%%user` to their :doc:`user object </authentication>`.

.. _function-run-as-system:
.. _function-system-user:
.. _system-functions:

System Functions
~~~~~~~~~~~~~~~~

A **System Function** is a function that runs as the :ref:`system user
<system-user>` rather than an :ref:`application user <user-accounts>`.
System functions have full access to MongoDB CRUD and Aggregation APIs
and bypass all rules and schema validation.

You can configure a Function to run as the :ref:`system user
<system-user>` by enabling its :guilabel:`Run As System` configuration
option. To determine if a function executes as a system user at runtime,
call :method:`context.runningAsSystem()`.

.. note:: System Function Active User
   
   {+service-short+} always resolves dynamic references like :ref:`context.user
   <context-user>` and :json-expansion:`%%user` to the authenticated
   user that called a function if there was one. If a function executes
   without being called by an authenticated user, such as in a trigger
   or webhook, then {+service-short+} resolves the dynamic references to the
   :ref:`system user <system-user>` instead.

Guides
------

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Define a Function </functions/define-a-function>`
     - Learn how to write and add new functions to your {+app+}.

   * - :doc:`External Dependencies </functions/dependencies>`
     - Learn how to add and use Node.js packages from ``npm`` in your functions.

   * - :doc:`Call a Function </functions/call-a-function>`
     - Learn how to execute functions that you've defined from a client
       application or from another {+service-short+} component.

Reference Documentation
-----------------------

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Subject
     - Description

   * - :doc:`Function Context </functions/context>`
     - Includes detailed information about specific application
       ``context`` modules as well as examples of runtime data objects.

   * - :doc:`Global Modules </functions/globals>`
     - Includes detailed information about global utility packages.

   * - :doc:`JavaScript Support </functions/javascript-support>`
     - JavaScript syntax and built-ins that are available in
       {+service-short+} functions, including Node.js built-in modules.


.. toctree::
   :titlesonly:
   :caption: Work with Realm Functions
   :hidden:

   Define a Function </functions/define-a-function>
   Call a Function </functions/call-a-function>

.. toctree::
   :titlesonly:
   :caption: External Dependencies
   :hidden:

   External Dependencies </functions/dependencies>
   JavaScript Support </functions/javascript-support>

.. toctree::
   :titlesonly:
   :caption: Reference
   :hidden:

   Context </functions/context>
   Query MongoDB Atlas </functions/mongodb>
   Global Modules </functions/globals>
