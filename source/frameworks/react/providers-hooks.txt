.. _sdks-react-providers-hooks:

=================
Providers & Hooks
=================

.. meta:: 
   :description: Develop apps using the providers and Hooks available in the @realm/react library.
   :keywords: Realm, JavaScript SDK, React, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: javascript/typescript

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

The ``@realm/react`` library offers custom React components that eliminate the boilerplate needed to
develop a React app using JavaScript-based Atlas Device SDKs. The components leverage the
Provider design pattern to manage your Atlas connection, user creation and authentication, and
data management.

- ``AppProvider``: Used to connect to your :ref:`Atlas App Services App Client
  <create-app>`, including for user authentication.

- ``UserProvider``: Used to access the logged-in :ref:`user object <user-accounts>`.

- ``RealmProvider``: Used to work with the configured database.

Use these providers to develop with frameworks and for platforms that support a React
environment, including: React Native, Web, and Electron. 

Getting Started with Providers
------------------------------

Like all React components, you call providers using HTML opening and closing tags. Nesting a
component within another component's tags creates a parent-child relationship between them,
where child components can access the context created by their parent component. 

Context refers to the information made accessible by a provider. For example, the
``RealmProvider`` context is the Realm database it connects to, so all components nested in the
``RealmProvider`` have access to that database.

Props
~~~~~

Components take parameters called props as input, passed into the opening tag. The props passed
into a parent component help create the context inherited by the components it wraps. Each
Provider has different props you can use for configuration.

.. tabs::

   .. tab:: RealmProvider Props
      :tabid: realm-provider-props

      All properties of :realm-react-sdk:`BaseConfiguration <types/Realm.BaseConfiguration.html>` can be passed as props.

      The most common BaseConfiguration properties used are:

      - ``schema?: (RealmObjectConstructor<AnyRealmObject> | ObjectSchema)[]``

        Specifies all the object schemas in the database. Required when first creating a database.
        If omitted, the schema will be read from the existing database file.

      - ``sync?: SyncConfiguration``

        Defines Device Sync behavior for this database, including initial subscriptions.

      ``RealmProvider`` has more props that define its behavior:

      - ``fallback?: React.ComponentType<unknown> | React.ReactElement | null | undefined``

        The fallback component to render while the database is opening or if it fails to open.

      - ``closeOnUnmount?: boolean``

        Default is ``true``. If set to ``false``, the open database will not close when the
        component unmounts.

      - ``realmRef?: React.MutableRefObject<Realm | null>``

        A ref to the database instance. This is useful if you need to access the database
        instance outside of the scope of the database.
      
      - ``children: React.ReactNode``

      - ``realm?: Realm``

        A configured Realm instance for the provider to connect to. Using this prop
        eliminates the need to pass in other configuration parameters as props.

        ``closeOnUnmount`` will be set to ``false`` by default.

      For more details, see the :realm-react-sdk:`RealmProvider API Reference (@realm/react) <functions/RealmProvider.html>`

   .. tab:: AppProvider Props
      :tabid: app-provider-props

      All properties of :realm-react-sdk:`AppConfiguration 
      <types/Realm.AppConfiguration.html>` can be passed as props to ``AppProvider``.

      The most common AppConfiguration property used is:

      - ``id: string``

        Specifies the App Services App ID.

      ``AppProvider`` has more an additional prop that defines its behavior:

      - ``app?: Realm.App``

        An Atlas App Services App for the provider to connect to. Using this prop
        eliminates the need to pass in other configuration parameters as props.

      For more details, see the :realm-react-sdk:`AppProvider API Reference (@realm/react) <functions/AppProvider.html>`

   .. tab:: UserProvider Props
      :tabid: user-provider-props

      The only prop passed into ``UserProvider`` is an optional fallback component:

      - ``fallback?: React.ComponentType<unknown> | React.ReactElement | null | undefined``

        The fallback component to render if there is no authorized user. This can be
        used to render a log in screen or otherwise handle authentication.

      For more details, see the :realm-react-sdk:`UserProvider API Reference (@realm/react) <functions/UserProvider.html>`

Configure your Providers
~~~~~~~~~~~~~~~~~~~~~~~~

Your app's needs determine what providers you use, as all three providers are not always
necessary. The example below walks through configuring all three providers. If your app does not need a
certain provider, you can skip the steps and omit the code for that provider.

**To configure your providers:**

1. Import ``RealmProvider``, ``AppProvider``, and ``UserProvider`` from ``@realm/react``.

2. Configure ``AppProvider``.

   a. Pass your App Services App ID string to the ``id`` prop of the ``AppProvider``.

   b. Add other configuration object properties as props to ``AppProvider`` as needed.

3. Configure ``UserProvider`` and nest it within ``AppProvider``.
   
   a. Pass a component that logs in a user to the ``fallback`` prop. The app renders this component if there is no authenticated user.

4. Configure ``RealmProvider`` and nest it within ``UserProvider``.

   a. Pass your object models to the ``schema`` prop.

   b. If configuring a synced database, use the ``sync`` prop. Sync properties are defined by
      a :ref:`Sync Config Object <flexible-sync-config-object>`.
   
      To sync data, you must set up a sync subscription. The example below uses an initial subscription,
      but you can also set up subscriptions in ``RealmProvider`` child components.

   c. Add other configuration object properties as props to ``RealmProvider`` as needed.

5. Nest your app components in the providers.

   Once your providers have been configured and nested as described above, nest your app components within the
   provider whose context it needs to access. Generally, you can nest your components within the
   ``RealmProvider`` to ensure they have access to all three providers' contexts.

The rendering of each component is dependent on the successful
execution of its parent components' functionality. For example, while ``AppProvider`` is
connecting to your app's App Services backend, or if ``AppProvider`` is unable to connect, the
components it wraps will not render. In these cases, the provider's fallback component is
rendered instead.

You *must* nest the providers as shown below to ensure each has access to its required context:

.. literalinclude:: /examples/generated/react-native/ts/configure-realm-sync.test.snippet.configure-realm-sync-full.tsx
   :language: javascript

.. note:: Exposing more than one database using createRealmContext()

   The example above details how to configure and expose a single database using a ``RealmProvider``
   imported directly from ``@realm/react``. 
   For information about using ``createRealmContext()`` to configure a database or exposing more
   than one database, see :ref:`Create Context with createRealmContext()
   <create_context_with_createrealmcontext>` below.

Working with Providers using Hooks
----------------------------------

To use the provider's context in your app's components, you can use Hooks.

Hooks act as functions used to access states in your app. React offers built-in Hooks you can
use either on their own or to build custom  Hooks.

There are two important rules to consider when working with Hooks:

- Hooks can only be used at the top level of a React component.
- Hooks can only be called in a React component or a custom Hook, not in regular JavaScript
  functions.

The ``@realm/react`` library has custom Hooks for each provider you can
use to access a provider's context in the components it wraps.

RealmProvider Hooks
~~~~~~~~~~~~~~~~~~~

.. _sdks-react-use-realm-hook:

useRealm()
``````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useRealm(): Realm 

The ``useRealm()`` Hook returns an opened :js-sdk:`database instance<classes/Realm-1.html>`. The database instance
gives you access to database methods and properties. For example, you can call
``realm.write()`` to add a Realm Object to your database.

To learn more about modifying data in your database, refer to :ref:`Write Transactions
<sdks-write-transactions>`.

.. literalinclude:: /examples/generated/react-native/ts/create-test.test.snippet.crud-create-object.tsx
   :language: typescript
   :emphasize-lines: 3, 6-8, 15

*Returns*

- ``Realm`` Returns a database instance from the ``RealmProvider`` context.

.. _sdks-react-use-object-hook:

useObject()
```````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useObject<T>(type, sdks-open-synced-database-offlineKey): T & Realm.Object<T> | null

The ``useObject()`` Hook returns a :js-sdk:`Realm Object <classes/Realm.Object.html>` for a given
:ref:`primary key <sdks-primary-key>`. You can pass an object class
or the class name as a string and the primary key.

The ``useObject()`` Hook returns ``null`` if the object doesn't exist or you have
deleted it. The Hook will automatically subscribe to updates and rerender the
component using the Hook on any change to the object.

.. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-object-by-id.tsx
         :language: typescript

*Parameters* 

- ``type: string`` A string that matches your object model's class name or a reference to a
  class that extends :js-sdk:`Realm.Object <classes/Object.html>`.
- ``primaryKey: T[keyof T]`` The primary key of the desired object.

*Returns*

- ``Realm.Object | null`` A Realm Object or ``null`` if no object is found.

.. _sdks-react-use-query-hook:

useQuery()
``````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useQuery<T>(type, query?, deps?): Realm.Results<T & Realm.Object<T>>

The ``useQuery()`` Hook returns a :js-sdk:`result <classes/Realm.Results.html>` that is a
collection of Realm Objects of a given type. These are the results of your query. A query can
be an object class or the class name as a string.

The ``useQuery()`` method subscribes to updates to any objects in the collection
and rerenders the component using it on any change to the results.

You can use ``.filtered()`` and ``.sorted()`` to filter and sort your query
results. Do this in the ``query`` argument of ``useQuery`` so that
they only run when there are changes in the dependency array. For more examples,
refer to the :ref:`Read Objects <sdks-crud-read>` page.

.. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-filter-data.tsx
   :language: typescript
   :emphasize-lines: 6-8, 14-18

*Parameters* 

- ``type: string`` A string that matches your object model's class name or a reference to a
  class that extends :js-sdk:`Realm.Object <classes/Object.html>`. 
- ``query?: QueryCallback<T>`` A query function that can filter and sort query results. Builds on
  ``useCallback`` to memoize the query function.
- ``deps?: DependencyList`` A list of query function dependencies that's used to memoize
  the query function.

*Returns*

- ``Realm.Results<T>`` A Realm Object or ``null`` if no object is found.

UserProvider Hooks
~~~~~~~~~~~~~~~~~~

.. _sdks-react-use-user-hook:

useUser()
`````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useUser<FunctionsFactoryType, CustomDataType, UserProfileDataType>(): Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>

The ``useUser()`` Hook provides access to the :js-sdk:`logged-in user <classes/Realm.User.html>`. For example,
you can use ``useUser()`` to log the current user out.

When changes to the user object happen, this Hook will rerender its parent
component. For example, if you call ``user.refreshCustomData`` to get updated
custom user data, the ``useUser()`` parent component will rerender.

.. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.log-user-out.tsx.rst

*Returns*

- ``Realm.User`` An instance of the currently-authenticated Atlas user.

AppProvider Hooks
~~~~~~~~~~~~~~~~~

.. _sdks-react-use-app-hook:

useApp()
````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useApp<FunctionsFactoryType, CustomDataType>(): Realm.App<FunctionsFactoryType, CustomDataType>

*Example*

The ``useApp()`` Hook provides access to a :js-sdk:`Realm.App <classes/App.html>`
instance.

.. include:: /examples/generated/react-native/v12/use-app.snippet.import-use-app.tsx.rst
.. include:: /examples/generated/react-native/v12/use-app.snippet.use-app.tsx.rst

*Returns*

- ``Realm.App`` An instance of the current ``Realm.App`` created by ``AppProvider``.

.. _sdks-react-use-auth-hook:

useAuth()
`````````

.. code:: typescript
   :copyable: false
   :caption: Type signature

   useAuth(): UseAuth

You destructure the ``useAuth()`` Hook result into a ``result`` and authentication method.

result
++++++

.. code:: typescript
   :copyable: false
   :caption: Type signature

   result: AuthResult

Result of authentication Hook operation. For example, ``result.operation`` gives
you the name of the current operation.

*Enum values* 

- ``state``: Can be ``"not-started"``, ``"pending"``, ``"success"``, ``"error"``.
- ``operation``: For a list of all operation names, refer to the
  :realm-react-sdk:`API documentation <enums/AuthOperationName.html>`.
- ``pending``: Can be ``true`` or ``false``.
- ``success``: Can be ``true`` or ``false``.
- ``error``: Error-based object or undefined.

Authentication Methods
++++++++++++++++++++++

The authentication method specifies how you want users to login to your app. ``useAuth`` has an authentication method for every App Services authentication provider.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 23 20 57

   * - Operation
     - Parameter
     - Example

   * - logIn
     - ``credentials``: An Atlas credential supplied by any supported Atlas App Services
       authentication provider.
     - Logs in a user with any authentication mechanism supported by Atlas App Services. If called when a
       user is logged in, the current user switches to the new user. Usually, it's better to use
       the more specific login methods.

       .. code:: typescript

         const {logIn, result} = useAuth();

         useEffect(() => logIn(Realm.Credentials.anonymous()), []);

         if(result.pending) {
            return (<LoadingSpinner/>)
         }

         if(result.error) {
            return (<ErrorComponent/>)
         }

         if(result.success) {
            return (<SuccessComponent/>)
         }
         //...

   * - logInWithAnonymous
     - None
     - Log in with the anonymous authentication provider.

       .. code:: typescript

         const {logInWithAnonymous, result} = useAuth();
         const performLogin = () => {
            logInWithAnonymous();
         };

   * - logInWithApiKey
     - ``key``: A string that is linked to an App Services user.
     - Log in with an API key.

       .. code:: typescript

         const {logInWithApiKey, result} = useAuth();
         const performLogin = () => {
          const key = getApiKey(); 
              // user defined function
              logInWithApiKey(key);
         };

   * - logInWithEmailPassword
     - ``credentials``: An object with ``email`` and ``password`` fields.
     - Log in with Email/Password.

       .. code:: typescript

         const {logInWithEmailPassword, result} = useAuth();
         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performLogin = () => {
            logInWithEmailPassword({email, password});
         };

   * - logInWithJWT
     - ``credentials``: A string representation of a user's JWT.
     - Log in with a JSON Web Token (JWT).
       
       .. code:: typescript

         const {logInWithJWT, result} = useAuth();

         const performLogin = () => {
          const token = authorizeWithCustomerProvider(); 
              // user defined function
              logInWithJWT(token);
         };

   * - logInWithGoogle
     - ``credentials``: An object with an ``idToken`` or ``authCode`` field that
       should contain the string token you get from Google Identity Services.
     - Log in with Google.
       
       .. code:: typescript

         const {logInWithGoogle, result} = useAuth();

         const performLogin = () => {
          const token = getGoogleToken(); 
              // user defined function
              logInWithGoogle({idToken: token});
         };

   * - logInWithApple
     - ``idToken``: A string you get from the Apple SDK.
     - Log in with Apple.
       
       .. code:: typescript

         const {logInWithApple, result} = useAuth();

         const performLogin = () => {
          const token = getAppleToken(); 
              // user defined function
              logInWithApple(token);
         };

   * - logInWithFacebook
     - ``accessToken``: A string you get from the Facebook SDK.
     - Log in with Facebook.
       
       .. code:: typescript

         const {logInWithFacebook, result} = useAuth();

         const performLogin = () => {
          const token = getFacebookToken(); 
              // user defined function
              logInWithFacebook(token);
         };

   * - logInWithFunction
     - ``payload``: An object that contains user information you want to pass to
       the App Services function that processes log in requests.
     - Log in with a custom function.
       
       .. code:: typescript

         const {logInWithFunction, result} = useAuth();

         const performLogin = () => {
          const customPayload = getAuthParams(); 
              // user defined arguments
              logInWithFunction(customPayload);
         };

   * - logOut
     - None
     - Logs out the current user.
       
       .. code:: typescript

         const {logOut, result} = useEmailPasswordAuth();
         const performLogout = () => {
            logOut();
         }

.. _sdks-react-use-emailpassword-auth-hook:

useEmailPasswordAuth()
``````````````````````

You destructure the ``useEmailPasswordAuth()`` Hook result into a ``result`` and authentication operation.

result
++++++

.. code:: typescript
   :copyable: false
   :caption: Type signature

   result: AuthResult

Result of operation. For example, ``result.operation`` gives you the name of the current
operation.

*Enum values* 

- ``state``: Can be ``"not-started"``, ``"pending"``, ``"success"``, ``"error"``.
- ``operation``: For a list of all operation names, refer to the
  :realm-react-sdk:`API documentation <enums/AuthOperationName.html>`.
- ``pending``: Can be ``true`` or ``false``.
- ``success``: Can be ``true`` or ``false``.
- ``error``: Error-based object or undefined.

Authentication Operations
+++++++++++++++++++++++++

``useEmailPasswordAuth`` has a number of operations to facilitate email and password user authentication.

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 27 18 55

   * - Operation
     - Parameter
     - Example

   * - logIn
     - ``credentials``: An object that contains ``email`` and ``password`` properties.
     - Logs a user in using an email and password. You could also call
       ``logIn(Realm.Credentials.emailPassword(email, password))``. Returns a
       ``Realm.User`` instance of the logged-in user.

       .. code:: typescript

         const {logIn, result} = useEmailPasswordAuth();

         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performLogin = () => {
            logIn({email, password});
         };

         if(result.pending) {
            return (<LoadingSpinner/>)
         }

         if(result.error) {
            return (<ErrorComponent/>)
         }

         if(result.success) {
            return (<SuccessComponent/>)
         }
         //...

   * - logOut
     - None
     - Logs out the current user.
       
       .. code:: typescript

         const {logOut, result} = useEmailPasswordAuth();
         const performLogout = () => {
            logOut();
         }

   * - register
     - ``args``: An object that contains ``email`` and ``password`` properties.
     - Registers a new user. Requires a user email and password.
       
       .. code:: typescript

         const {register, result} = useEmailPasswordAuth();

         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performRegister = () => {
            register({email, password});
         };

   * - confirm
     - ``args``: An object that contains ``token`` and ``tokenId`` properties.
     - Confirms a user account. Requires a ``token`` and ``tokenId``.
       
       .. code:: typescript

         const {confirm, result} = useEmailPasswordAuth();

         const performConfirmation = () => {
            confirm({token, tokenId});
         };

   * - resendConfirmationEmail
     - ``args``: An object that contains an ``email`` property.
     - Resends a confirmation email.

       .. code:: typescript

         const {resendConfirmationEmail, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performResendConfirmationEmail = () => {
            resendConfirmationEmail({email});
         };

   * - retryCustomConfirmation
     - ``args``: An object that contains an ``email`` property.
     - Retries confirmation with a custom function.

       .. code:: typescript

         const {retryCustomConfirmation, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performRetryCustomConfirmation = () => {
            retryCustomConfirmation({email});
         };

   * - sendResetPasswordEmail
     - ``args``: An object that contains an ``email`` property.
     - Sends a password reset email.

       .. code:: typescript

         const {sendResetPasswordEmail, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performSendResetPasswordEmail = () => {
            sendResetPasswordEmail({email});
         };

   * - resetPassword
     - ``args``: An object that contains ``token``, ``tokenId``, and ``password``
       properties.
     - Resets a user's password.

       .. code:: typescript

         const {resetPassword, result} = useEmailPasswordAuth();
         const [password, setPassword] = useState('');

         const performResetPassword = () => {
            resetPassword({token, tokenId, password});
         };

   * - callResetPasswordFunction
     - ``args``: An object that contains ``email`` and ``password`` properties.

       ``restArgs``: Additional arguments that you need to pass to your custom
       reset password function.
     - Calls your App Services backend password reset function. Can pass arguments to
       the function as needed.

       .. code:: typescript

         const {callResetPasswordFunction, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performResetPassword = () => {
            callResetPasswordFunction({email, password}, "extraArg1", "extraArg2");
         };

.. _create_context_with_createrealmcontext:

Create Context with createRealmContext()
----------------------------------------

.. code:: typescript
   :copyable: false
   :caption: Type signature

   createRealmContext(realmConfig?): RealmContext

Use ``createRealmContext()`` to configure more than one database. The ``createRealmContext()``
method creates a `React Context <https://react.dev/learn/passing-data-deeply-with-context>`__
object for a database with a given :realm-react-sdk:`Configuration
<types/Realm.BaseConfiguration.html>`. The ``Context`` object contains the following: 

- A Context Provider component that wraps around child components
  and provides them with access to Hooks.
- Various prebuilt Hooks that access the configured database.

To work with more than one database, you need to destructure a new provider and its
associated Hooks from the result of ``createRealmContext()``. You can call this new database
provider and use its associated Hooks the same way you would with the ``RealmProvider``
imported from the ``@realm/react`` library.  Namespace your providers to avoid confusion about
which provider and Hooks you're working with.

*Parameters* 

- ``realmConfig?: Realm.Configuration`` All properties of :realm-react-sdk:`BaseConfiguration 
  <types/Realm.BaseConfiguration.html>` can be used.

*Returns*

- ``RealmContext`` An object containing a ``RealmProvider`` component, and the ``useRealm``,
  ``useQuery`` and ``useObject``  Hooks.

For a detailed guide, refer to :ref:`Expose More Than One Database <sdks-expose-more-than-one-database>`.