.. _sdks-react-providers-hooks:

=================
Providers & Hooks
=================

.. meta:: 
   :description: Develop apps using the Providers and Hooks available in the @realm/react library.
   :keywords: Realm, Javascript SDK, React, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: javascript

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``@realm/react`` offers custom React components that eliminate the boilerplate needed to
develop a React app. The components leverage the Provider design pattern to manage user
creation, user authentication, and data management.

- ``RealmProvider``: Work with the configured database.

- ``AppProvider``: Connect to your App Client for user authentication, only necessary when
  using Device Sync. 

- ``UserProvider``: Access to the logged-in user object, only necessary when using Device Sync.

The Providers are available to all frameworks used to build with the JavaScript SDK.

Configure your Providers
------------------------

Like all React components, you call Providers using html opening and closing tags. They take
parameters called Props as input, passed into the opening tag.

Nesting components within each other creates a parent-child relationship between them. The
props passed into the parent component help create the context inherited by the components it
wraps. Thus, any component wrapped by the Providers can access their context.

You can configure a ``RealmProvider`` in two ways:

- Import ``RealmProvider`` directly from ``@realm/react``
- Use ``createRealmContext()`` to configure a ``Realm

This section details how to configure a ``RealmProvider`` imported directly from
``@realm/react`` to expose a single realm. For information about using
``createRealmContext()``, refer to :ref:`Create Context with createRealmContext()
<react-native-realm-context>`. For information about using
configuring more than one realm, refer to Expose More Than One Realm.

``sentence about when you may need a synced vs non-synced realm``

.. tabs::

   .. tab:: Configure realm with sync
      :tabid: configure-sync-realm

      If you are developing an app using sync, you will need to use ``RealmProvider``,
      ``AppProvider``, and ``UserProvider``. 

      By default, Realm syncs all data from the server before returning anything. If you want
      to sync data in the background, read Configure a Synced Realm While Offline [link]. 

      To configure a synced realm:

      #. Import ``RealmProvider``, ``AppProvider``, and ``UserProvider`` from ``@realm/react``.
      
      #. Configure ``AppProvider``.

         Pass your App ID string to the ``id`` prop of the ``AppProvider``. 
      
      #. Configure ``UserProvider`` and nest it within ``AppProvider``.

         Pass a component that logs a user in into the ``fallback`` prop. The app renders this component if there is no authenticated user.
      
      #. Configure ``RealmProvider`` for sync and nest it within ``UserProvider``.

         Pass your object models to the ``schema`` prop. (link out)

         Pass your sync properties into the ``sync`` prop. Your sync properties are formatted like a json dictionary.
         
         Add other Configuration object properties as props to ``RealmProvider``.

      Once your Providers have been configured, nest your app components within the ``RealmProvider``.

      You *must* nest the Providers and app components as described. This ensures each Provider can
      access the context it needs to function and all your app components can access the App Client, authenticated user object, and opened realm.

      [Code example here]

   .. tab:: Configure realm without sync
      :tabid: configure-non-sync-realm

      If you are developing an app without sync, you only need to configure your ``RealmProvider``.

      To configure a non-synced realm:
      
      #. Import ``RealmProvider`` from ``@realm/react``.

      #. Pass your object models to the ``schema`` prop. (link out)

      #. Add other Configuration object properties as props to ``RealmProvider``

      Once your ``RealmProvider`` has been configured, nest your app components within it to
      give them access to the realm opened. 

      [code example - unsynced]


Working in your Providers
-------------------------

[insert text here lol]