.. _sdks-react-providers-hooks:

=================
Providers & Hooks
=================

.. meta:: 
   :description: Develop apps using the Providers and Hooks available in the @realm/react library.
   :keywords: Realm, Javascript SDK, React, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: javascript

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The ``@realm/react`` library offers custom React components that eliminate the boilerplate needed to
develop a React app. The components leverage the Provider design pattern to manage user
creation, user authentication, and data management.

- ``RealmProvider``: Work with the configured database.

- ``AppProvider``: Connect to your App Client for user authentication, only necessary when
  using Device Sync. 

- ``UserProvider``: Access to the logged-in user object, only necessary when using Device Sync.

The Providers are available to all frameworks used to build with the JavaScript SDK.

Configure your Providers
------------------------

Like all React components, you call Providers using html opening and closing tags. Nesting a
component within in another component's tags creates a parent-child relationship between them,
where child components can access the context created by its parent component.

Props
~~~~~

Components take parameters called Props as input, passed into the opening tag. The props passed
into a parent component help create the context inherited by the components it wraps. Each
Provider has different props you can use for configuration.

.. tabs::

   .. tab:: RealmProvider Props
      :tabid: realm-provider-props

      All properties of :realm-react-sdk:`BaseConfiguration <types/Realm.BaseConfiguration.html>` can be passed as props.

      The most common BaseConfiguration properties used are:

      - ``schema?: (RealmObjectConstructor<AnyRealmObject> | ObjectSchema)[]``
         Specifies all the object schemas in this Realm. Required when first creating a Realm.
         If omitted, the schema will be read from the existing Realm file.

      - ``sync?: SyncConfiguration``
         Configures a synced realm.

      ``RealmProvider`` has more props that define its behavior:

      - ``fallback?: React.ComponentType<unknown> | React.ReactElement | null | undefined``
         The fallback component to render while the Realm is opening.

      - ``closeOnUnmount?: boolean``
         Default is ``true``. If set to ``false``, realm will not close when the
         component unmounts.

      - ``realmRef?: React.MutableRefObject<Realm | null>``
         A ref to the realm instance. This is useful if you need to access the realm
         instance outside of the scope of the realm.
      
      - ``children: React.ReactNode``

   .. tab:: AppProvider Props
      :tabid: app-provider-props

      All properties of :realm-react-sdk:`AppConfiguration 
      <types/Realm.AppConfiguration.html>` can be passed as props to ``AppProvider``.

      The most common AppConfiguration property used is:

      - ``id: string``
         Specifies the App ID.

   .. tab:: UserProvider Props
      :tabid: user-provider-props

      - ``fallback?: React.ComponentType<unknown> | React.ReactElement | null | undefined``
         The fallback component to render if there is no authorized user. This can be
         used to render a log in screen or otherwise handle authentication.

You can configure a ``RealmProvider`` in two ways:

- Import ``RealmProvider`` directly from ``@realm/react``
- Use ``createRealmContext()`` to configure a ``Realm

This section details how to configure a ``RealmProvider`` imported directly from
``@realm/react`` to expose a single realm. For information about using
``createRealmContext()``, refer to :ref:`Create Context with createRealmContext()
<react-native-realm-context>`. For information about using
configuring more than one realm, refer to Expose More Than One Realm.

``sentence about when you may need a synced vs non-synced realm``

.. tabs::

   .. tab:: Configure realm with sync
      :tabid: configure-sync-realm

      If you are developing an app using sync, you will need to use ``RealmProvider``,
      ``AppProvider``, and ``UserProvider``. 

      By default, Realm syncs all data from the server before returning anything. If you want
      to sync data in the background, read Configure a Synced Realm While Offline [link]. 

      To configure a synced realm:

      #. Import ``RealmProvider``, ``AppProvider``, and ``UserProvider`` from ``@realm/react``.
      
      #. Configure ``AppProvider``.
         Pass your App ID string to the ``id`` prop of the ``AppProvider``. 
      
      #. Configure ``UserProvider`` and nest it within ``AppProvider``.

         Pass a component that logs a user in into the ``fallback`` prop. The app renders this component if there is no authenticated user.
      
      #. Configure ``RealmProvider`` for sync and nest it within ``UserProvider``.

         Pass your object models to the ``schema`` prop. (link out)

         Pass your sync properties into the ``sync`` prop. Your sync properties are formatted like a json dictionary.

         Add other Configuration object properties as props to ``RealmProvider``.

      Once your Providers have been configured, nest your app components within the ``RealmProvider``.

      You *must* nest the Providers and app components as described. This ensures each Provider can
      access the context it needs to function and all your app components can access the App Client, authenticated user object, and opened realm.

      [Code example here]

   .. tab:: Configure realm without sync
      :tabid: configure-non-sync-realm

      If you are developing an app without sync, you only need to configure your ``RealmProvider``.

      To configure a non-synced realm:
      
      #. Import ``RealmProvider`` from ``@realm/react``.

      #. Pass your object models to the ``schema`` prop. (link out)

      #. Add other Configuration object properties as props to ``RealmProvider``

      Once your ``RealmProvider`` has been configured, nest your app components within it to
      give them access to the realm opened. 

      [code example - unsynced]


Working in your Providers
-------------------------

To use the Provider's context in your app's components, you can use hooks [link].

Hooks act as functions used to access states in your app. React offers built-in hooks you can
use either on their own or to build custom hooks.

There are two important rules to consider when working with hooks:

- Hooks can only be used at the top level of a React component.
- Hooks can only be called in a React component or a custom hook, not in regular JavaScript
  functions.

The ``@realm/react`` library has custom hooks for each Provider you can import and
use in any wrapped component.

.. tabs::

   .. tab:: RealmProvider Hooks
      :tabid: realm-provider-hooks

      .. _react-native-use-realm-hook:

      useRealm()
      ~~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useRealm(): Realm 

      The ``useRealm()`` hook returns an opened realm instance. The realm instance
      gives you access to realm methods and properties. For example, you can call
      ``realm.write()`` to add a realm object to your realm.

      To learn more about modifying Realm data, refer to :ref:`Write Transactions
      <react-native-write-transactions>`.

      .. literalinclude:: /examples/generated/react-native/ts/create-test.test.snippet.crud-create-object.tsx
         :language: typescript
         :emphasize-lines: 3, 6-8, 15

      *Returns*

      - ``Realm``
      Returns a realm instance. This is the realm created by the hook's parent,
      ``RealmProvider``.

      .. _react-native-use-object-hook:

      useObject()
      ~~~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useObject<T>(type, primaryKey): T & Realm.Object<T> | null

      The ``useObject()`` hook returns a Realm object for a given
      :ref:`primary key <react-native-primary-keys>`. You can pass an object class
      or the class name as a string and the primary key.

      The ``useObject()`` method returns null if the object doesn't exist or you have
      deleted it. The hook will automatically subscribe to updates and rerender the
      component using the hook on any change to the object.

      .. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-object-by-id.tsx
               :language: typescript

      *Parameters* 

      - ``type: string``
      A string that matches your object model's class name or a reference to a
      class that extends :js-sdk:`Realm.Object <classes/Object.html>`.
      - ``primaryKey: T[keyof T]``
      The primary key of the desired object.

      *Returns*

      - ``Realm.Object | null``
      A Realm Object or ``null`` if no object is found.

      .. _react-native-use-query-hook:

      useQuery()
      ~~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useQuery<T>(type, query?, deps?): Realm.Results<T & Realm.Object<T>>

      The ``useQuery()`` hook returns a collection of realm objects of a given type.
      These are the results of your query. A query can be an object class or the class
      name as a string.

      The ``useQuery()`` method subscribes to updates to any objects in the collection
      and rerenders the component using it on any change to the results.

      You can use ``.filtered()`` and ``.sorted()`` to filter and sort your query
      results. You should do this in the ``query`` argument of ``useQuery`` so that
      they only run when there are changes in the dependency array. For more examples,
      refer to the :ref:`CRUD - Read <react-native-read-objects>` docs.

      .. literalinclude:: /examples/generated/react-native/ts/read.test.snippet.crud-read-filter-data.tsx
         :language: typescript
         :emphasize-lines: 3-5, 8-14

      *Parameters* 

      - ``type: string``
      A string that matches your object model's class name or a reference to a
      class that extends :js-sdk:`Realm.Object <classes/Object.html>`.
      - ``query?: QueryCallback<T>``
      A query function that can filter and sort query results. Builds on
      ``useCallback`` to memoize the query function.
      - ``deps?: DependencyList``
      A list of query function dependencies that's used to memoize
      the query function.

      *Returns*

      - ``Realm.Results<T>``
      A Realm Object or ``null`` if no object is found.

      .. _react-native-realm-context:

   .. tab:: AppProvider Hooks
      :tabid: app-provider-hooks

      .. _react-native-use-auth:

      useAuth()
      ~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useAuth(): UseAuth

      ``useAuth`` has an authentication method for every App Services
      authentication provider.

      result
      ``````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         result: AuthResult

      Result of authentication hook operation. For example, ``result.operation`` gives
      you the name of the current operation.

      *Enum values* 

      - ``state``. Can be "not-started", "pending", "success", "error".
      - ``operation``. For a list of all operation names, refer to the
      :realm-react-sdk:`API documentation <enums/AuthOperationName.html>`.
      - ``pending``. Can be ``true`` or ``false``.
      - ``success``. Can be ``true`` or ``false``.
      - ``error``. Error-based object or undefined.

      logIn(credentials)
      ``````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logIn(credentials: Realm.Credentials): void

      *Parameters*

      - ``credentials``. A Realm credential supplied by any supported Realm
      authentication.

      *Example*

      Logs in a user with any authentication mechanism supported by
      Realm. If called when a user is logged in, the current user switches to
      the new user. Usually, it's better to use the more specific login
      methods.

      .. code:: typescript

      const {logIn, result} = useAuth();

      useEffect(() => logIn(Realm.Credentials.anonymous()), []);

      if(result.pending) {
         return (<LoadingSpinner/>)
      }

      if(result.error) {
         return (<ErrorComponent/>)
      }

      if(result.success) {
         return (<SuccessComponent/>)
      }
      //...

      logInWithAnonymous()
      ````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithAnonymous(): void

      *Example*

      Log in with the anonymous authentication provider.

      .. code:: typescript

         const {logInWithAnonymous, result} = useAuth();
         const performLogin = () => {
            logInWithAnonymous();
         };

      logInWithApiKey(key)
      ````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithApiKey(key: string): void

      *Parameters*

      - ``key``. A string that is linked to an App Services user.

      *Example*

      Log in with an API key.

      .. code:: typescript

         const {logInWithApiKey, result} = useAuth();
         const performLogin = () => {
         const key = getApiKey(); // user defined function
            logInWithApiKey(key);
         };

      logInWithEmailPassword(credentials)
      ```````````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithEmailPassword(credentials: {
         email: string;
         password: string;
         }): void

      *Parameters*

      - ``credentials``. An object with ``email`` and ``password`` fields.

      *Example*

      Log in with Email/Password.

      .. code:: typescript

         const {logInWithEmailPassword, result} = useAuth();
         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performLogin = () => {
            logInWithEmailPassword({email, password});
         };

      logInWithJWT(credentials)
      `````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithJWT(token: string): void

      *Parameters*

      - ``credentials``. A string representation of a user's JWT.

      *Example*

      Log in with a JSON Web Token (JWT).
            
      .. code:: typescript

         const {logInWithJWT, result} = useAuth();

         const performLogin = () => {
         const token = authorizeWithCustomerProvider(); // user defined function
            logInWithJWT(token);
         };

      logInWithGoogle(credentials)
      ````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithGoogle(credentials: {
            idToken: string;
         } | {
            authCode: string;
         }): void;

      *Parameters*

      - ``credentials``. An object with an ``idToken`` or ``authCode`` field that
      should contain the string token you get from Google Identity Services.

      *Example*

      Log in with Google.
            
      .. code:: typescript

         const {logInWithGoogle, result} = useAuth();

         const performLogin = () => {
         const token = getGoogleToken(); // user defined function
            logInWithGoogle({idToken: token});
         };

      logInWithApple(idToken)
      ```````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithApple(idToken: string): void;

      *Parameters*

      - ``idToken``. A string you get from the Apple SDK.

      *Example*

      Log in with Apple.
            
      .. code:: typescript

         const {logInWithApple, result} = useAuth();

         const performLogin = () => {
         const token = getAppleToken(); // user defined function
            logInWithApple(token);
         };

      logInWithFacebook(accessToken)
      ``````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithFacebook(accessToken: string): void;

      *Parameters*

      - ``accessToken``. A string you get from the Facebook SDK.

      *Example*

      Log in with Facebook.
            
      .. code:: typescript

         const {logInWithFacebook, result} = useAuth();

         const performLogin = () => {
         const token = getFacebookToken(); // user defined function
            logInWithFacebook(token);
         };

      logInWithFunction(payload)
      ``````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logInWithFunction<PayloadType extends Record<string, unknown>>(payload: PayloadType): void;

      *Parameters*

      - ``payload``. An object that contains user information you want to pass to
      the App Services function that processes log in requests.

      *Example*

      Log in with a custom function.
            
      .. code:: typescript

         const {logInWithFunction, result} = useAuth();

         const performLogin = () => {
         const customPayload = getAuthParams(); // user defined arguments
            logInWithFunction(customPayload);
         };

      logOut()
      ````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logOut(): void;

      *Example*

      Logs out the current user.
            
      .. code:: typescript

         const {logOut, result} = useEmailPasswordAuth();
         const performLogout = () => {
            logOut();
         }

      .. _react-native-use-emailpassword-auth:

      useEmailPasswordAuth()
      ~~~~~~~~~~~~~~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         result: AuthResult

      Result of authentication hook operation. For example, ``result.operation`` gives
      you the name of the current operation.

      *Enum values* 

      - ``state``. Can be "not-started", "pending", "success", "error".
      - ``operation``. For a list of all operation names, refer to the
      :realm-react-sdk:`API documentation <enums/AuthOperationName.html>`.
      - ``pending``. Can be ``true`` or ``false``.
      - ``success``. Can be ``true`` or ``false``.
      - ``error``. Error-based object or undefined.

      logIn(credentials)
      ``````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logIn(credentials: { email: string; password: string }): void;

      *Parameters*

      - ``credentials``. An object that contains ``email`` and ``password`` properties.

      *Example*

      Logs a user in using an email and password. You could also call
      ``logIn(Realm.Credentials.emailPassword(email, password))``. Returns a
      ``Realm.User`` instance of the logged-in user.

      .. code:: typescript

         const {logIn, result} = useEmailPasswordAuth();

         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performLogin = () => {
            logIn({email, password});
         };

         if(result.pending) {
            return (<LoadingSpinner/>)
         }

         if(result.error) {
            return (<ErrorComponent/>)
         }

         if(result.success) {
            return (<SuccessComponent/>)
         }
         //...

      logOut()
      ````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         logOut(): void;

      *Example*

      Logs out the current user.
            
      .. code:: typescript

         const {logOut, result} = useEmailPasswordAuth();
         const performLogout = () => {
            logOut();
         }

      register(args)
      ``````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         register(args: { email: string; password: string }): void;

      *Parameters*

      - ``args``. An object that contains ``email`` and ``password`` properties.

      *Example*

      Registers a new user. Requires a user email and password.
            
      .. code:: typescript

         const {register, result} = useEmailPasswordAuth();

         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performRegister = () => {
            register({email, password});
         };

      confirm(args)
      `````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         confirm(args: { token: string; tokenId: string }): void;

      *Parameters*

      - ``args``. An object that contains ``token`` and ``tokenId`` properties.

      *Example*

      Confirms a user account. Requires a ``token`` and ``tokenId``.
            
      .. code:: typescript

         const {confirm, result} = useEmailPasswordAuth();

         const performConfirmation = () => {
            confirm({token, tokenId});
         };

      resendConfirmationEmail(args)
      `````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         resendConfirmationEmail(args: { email: string }): void;

      *Parameters*

      - ``args``. An object that contains an ``email`` property.

      *Example*

      Resends a confirmation email.

      .. code:: typescript

         const {resendConfirmationEmail, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performResendConfirmationEmail = () => {
            resendConfirmationEmail({email});
         };

      retryCustomConfirmation(args)
      `````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         retryCustomConfirmation(args: { email: string }): void;

      *Parameters*

      - ``args``. An object that contains an ``email`` property.

      *Example*

      Retries confirmation with a custom function.

      .. code:: typescript

         const {retryCustomConfirmation, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performRetryCustomConfirmation = () => {
            retryCustomConfirmation({email});
         };

      sendResetPasswordEmail(args)
      `````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         sendResetPasswordEmail(args: { email: string }): void;

      *Parameters*

      - ``args``. An object that contains an ``email`` property.

      *Example*

      Sends a password reset email.

      .. code:: typescript

         const {sendResetPasswordEmail, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');

         const performSendResetPasswordEmail = () => {
            sendResetPasswordEmail({email});
         };

      resetPassword(args)
      ```````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         resetPassword(args: { token: string; tokenId: string; password: string }): void;

      *Parameters*

      - ``args``. An object that contains ``token``, ``tokenId``, and ``password``
      properties.

      *Example*

      Resets a user's password.

      .. code:: typescript

         const {resetPassword, result} = useEmailPasswordAuth();
         const [password, setPassword] = useState('');

         const performResetPassword = () => {
            resetPassword({token, tokenId, password});
         };

      callResetPasswordFunction(args, restArgs)
      `````````````````````````````````````````

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         callResetPasswordFunction<Args extends unknown[] = []>(
         args: {
            email: string;
            password: string;
         },
         ...restArgs: Args
         ): void;

      *Parameters*

      - ``args``. An object that contains ``email`` and ``password`` properties.
      - ``restArgs``. Additional arguments that you need to pass to your custom
      reset password function.

      *Example*

      Calls your App Services backend password reset function. Can pass arguments to
      the function as needed.

      .. code:: typescript

         const {callResetPasswordFunction, result} = useEmailPasswordAuth();
         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');

         const performResetPassword = () => {
            callResetPasswordFunction({email, password}, "extraArg1", "extraArg2");
         };

      .. _react-native-use-app-hook:

      useApp()
      ~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useApp<FunctionsFactoryType, CustomDataType>(): Realm.App<FunctionsFactoryType, CustomDataType>

      *Example*

      The ``useApp()`` hook provides access to a :js-sdk:`Realm.App <classes/App.html>`
      instance.

      .. include:: /examples/generated/react-native/v12/use-app.snippet.import-use-app.tsx.rst
      .. include:: /examples/generated/react-native/v12/use-app.snippet.use-app.tsx.rst

      *Returns*

      - ``Realm.App``
      An instance of the current ``Realm.App`` created by ``AppProvider``.

   .. tab:: UserProvider Hooks
      :tabid: user-provider-hooks

      .. _react-native-use-user-hook:

      useUser()
      ~~~~~~~~~

      .. code:: typescript
         :copyable: false
         :caption: Type signature

         useUser<FunctionsFactoryType, CustomDataType, UserProfileDataType>(): Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>

      The ``useUser()`` hook provides access to the logged-in user. For example,
      you can use ``useUser()`` to log the current user out.

      When changes to the user object happen, this hook will rerender its parent
      component. For example, if you call ``user.refreshCustomData`` to get updated
      custom user data, the ``useUser()`` parent component will rerender.

      .. include:: /examples/generated/react-native/v12/RealmWrapper.snippet.log-user-out.tsx.rst

      *Returns*

      - ``Realm.User``
      An instance of the currently-authenticated Realm user.