.. _swiftui-open-database:

=======================================
Configure and Open a Database - SwiftUI
=======================================

.. meta::
   :description: Use the SDK's built in SwiftUI property wrappers to configure and open a database. 
   :keywords: Realm, Swift SDK, code example

.. facet::
  :name: genre
  :values: reference

.. facet::
   :name: programming_language
   :values: swift

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Swift SDK provides property wrappers to open a database in a 
SwiftUI-friendly way. 

You can:

- :ref:`Implicitly open a database <swiftui-open-database-with-configuration>` 
  with a ``defaultConfiguration`` or specify a different configuration. 
  This works for both non-synced and synced databases.
- :ref:`Always download changes before opening a synced database 
  <swiftui-async-open-synced-database>`, which times out when the user is offline.
- :ref:`Open a synced database even when a user is offline 
  <swiftui-auto-open-synced-database>`. The database may lack the most recent data.

.. _swiftui-open-database-with-configuration:

Open a Database with a Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you use :swift-sdk:`@ObservedRealmObject <Structs/ObservedRealmObject.html>` 
or :swift-sdk:`@ObservedResults <Structs/ObservedResults.html>`, these 
property wrappers implicitly open a database and retrieve the specified 
objects or results.

.. literalinclude:: /examples/generated/swiftui/PassObjectsToView.snippet.implicitly-open-realm.swift
   :language: swift

.. include:: /includes/note-observedresults-swiftui-view.rst

When you do not specify a configuration, these property wrappers use the 
:swift-sdk:`defaultConfiguration <Structs/Realm/Configuration.html#/s:10RealmSwift0A0V13ConfigurationV07defaultC0AEvpZ>`. 
You can :ref:`set the defaultConfiguration <sdks-default-and-file-url-database>`
globally, and property wrappers across the app can use that configuration 
when they implicitly open a database.

You can provide alternative configurations that the property wrappers use 
to implicitly open the database. You might want to do this when using 
multiple configurations in your app, as in cases where you have both
a :swift-sdk:`SyncConfiguration <Structs/SyncConfiguration.html>` and 
a local :swift-sdk:`Configuration <Structs/Realm/Configuration.html>`.
To do this, :ref:`create explicit configurations <sdks-configure-and-open-database>`. 
Then, :ref:`use environment injection to pass the respective configurations 
to the views that need them <swiftui-inject-database-configuration>`.
Passing a configuration to a view where property wrappers open a database 
uses the passed configuration instead of the ``defaultConfiguration``.

.. _swiftui-open-synced-database:

Open a Synced Database
~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 10.12.0

These SwiftUI property wrappers open synced databases and populate views.
The main difference between these property wrappers is whether the user 
must be online:

- To download updates from your Atlas App Services app before opening a database,
  use the :ref:`@AsyncOpen <swiftui-async-open-synced-database>` property wrapper.
  This requires the user to have a network connection. 
- To open a synced database regardless of whether the user has a network 
  connection, use the :ref:`@AutoOpen <swiftui-auto-open-synced-database>` 
  property wrapper. This property wrapper enables developers to design 
  offline-first capabilities into their apps.

.. _swiftui-async-open-synced-database:

Download Changes Before Opening a Synced Database
`````````````````````````````````````````````````

Use the :swift-sdk:`@AsyncOpen <Structs/AsyncOpen.html>` property wrapper 
for apps that require up-to-date information from the server, such as game 
apps with live leaderboards that the user can play on multiple devices. This 
ensures the user is never using the app with stale data.

You can add subscription queries in ``.onAppear`` after opening the database.

.. literalinclude:: /examples/generated/swiftui/OpenRealm.snippet.fs-property-wrapper-sans-config-comment.swift
   :language: swift

You can create a :swift-sdk:`flexibleSyncConfiguration() 
<Extensions/User.html#/s:So7RLMUserC10RealmSwiftE25flexibleSyncConfigurationAC0B0V0F0VyF>` 
with the ``initialSubscriptions`` parameter. You can use this parameter 
to :ref:`subscribe to Sync queries <sdks-manage-sync-subscriptions>` in the
configuration. If this runs more than once - for example, if it's in a view
that reloads regularly - check whether the subscription exists already
before adding it. Adding the same subscription again throws an error.

.. literalinclude:: /examples/generated/swiftui/Authenticate.snippet.flexible-sync-config.swift
   :language: swift

Then, pass the configuration to the view that contains the property 
wrappers as an environment object.

.. literalinclude:: /examples/generated/swiftui/Authenticate.snippet.inject-flex-sync-config-as-environment-object.swift
   :language: swift

For a complete example, see the :ref:`SwiftUI Quick Start <swiftui-integrate-with-sync>`.

This SwiftUI property wrapper initiates ``Realm.asyncOpen()`` for the current 
user. The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. 

.. example::

   This example illustrates one way you might use ``@AsyncOpen`` to 
   open a database in a view. First, check for a user, or log them in.
   Then, attempt to open the database, switching on the ``AsyncOpenState``
   to display an appropriate view. When the database opens successfully,
   inject it as an environment value to populate the view.

   .. literalinclude:: /examples/generated/swiftui/OpenRealm.snippet.open-realm-view-flex-sync.swift
      :language: swift

.. _swiftui-auto-open-synced-database:

Open a Synced Database Offline
``````````````````````````````

Like ``@AsyncOpen``, :swift-sdk:`@AutoOpen <Structs/AutoOpen.html>` attempts 
to download updates before opening the database. However, if a network 
connection is not available, this method instead opens a database with 
data on the device.

Use this property wrapper for apps where it's not a problem for the user 
to work with potentially stale data, such as note-taking apps where users 
should be able to work with data on the device

.. code-block:: swift

   @AutoOpen(appId: "app_id") var autoOpen

This SwiftUI property wrapper attempts to download updates before opening a 
database for the current user. If there is no internet connection, this property 
wrapper instead returns the most up-to-date version of the local database file 
for the given ``appId`` and Sync configuration.

The property wrapper publishes states, represented by the :swift-sdk:`AsyncOpenState 
enum <Enums/AsyncOpenState.html#/s:10RealmSwift14AsyncOpenStateO5erroryACs5Error_pcACmF>`,
which you can use to update the view. For a full example, see the ``@AsyncOpen``
code examples above.
