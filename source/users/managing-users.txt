======================
Managing User Accounts
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

On the :guilabel:`Users` page, you can manage user accounts. The
Realm console makes it easy to create test user accounts, delete
user accounts, and revoke sessions.

.. _create-user:

Creating an Email/Password User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. default-domain:: mongodb

In most cases, you do not need to create MongoDB Realm users manually. If,
for example, the :doc:`Email/Password authentication provider
</authentication/userpass>` is enabled, users will be prompted to create
their own accounts the first time they connect to your Realm
application. For all other :doc:`authentication providers
</authentication/providers>`, the user object is created when an end
user authenticates for the first time.

However, for testing and debugging with the :doc:`Email/Password
authentication provider </authentication/userpass>`, you can create new
users from within the MongoDB Realm admin console.

Use the following procedure to manually create a new user:

#. Select :guilabel:`Users` from the left-side navigation.

#. Click the :guilabel:`Add New User` button.

#. Specify an email address and password for the new user.

   .. note::

      The Email/Password authentication provider requires passwords to be
      between 6 and 128 characters long.

#. Click :guilabel:`Create`.

.. note::
   You can also create API keys that applications use to connect to your
   MongoDB Realm application. While these are not associated with a single user,
   they are listed in the :guilabel:`Users` tab. To learn more about API
   keys, see :doc:`API Key Authentication </authentication/api-key>`.

.. _delete-user:

Deleting or Disabling a User
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. default-domain:: mongodb

There may be a situation when you need to disable or completely remove a
user from your MongoDB Realm application. To do so, use the following procedure:

#. Select :guilabel:`Users` from the left-hand navigation.

#. Select either :guilabel:`Confirmed` or :guilabel:`Pending`, depending
   on the current state of the user you wish to delete.

#. Under the :guilabel:`Users` tab, find a user in the list and click on
   the ellipsis (``...``).

#. Choose either :guilabel:`Disable User` or :guilabel:`Delete User`.
   Both options invalidate all access tokens and refresh tokens for the
   user, and the user can no longer log in. :guilabel:`Delete User`
   also removes the account from your Realm application. Users
   that have not yet been confirmed cannot be disabled, only deleted.

.. note::

   Deleting a user will not automatically delete any data in your
   MongoDB database that you have associated with that user. For
   example, if you have a ``todo_items`` collection with an
   ``"owner_id"`` field, deleting a user will not automatically delete
   all of their To-Do items. You will need to manually remove those
   documents from your database if you want to fully remove all traces
   of that user.

Confirming a User
~~~~~~~~~~~~~~~~~

.. default-domain:: mongodb

.. _handshake: https://en.wikipedia.org/wiki/Handshaking

You must confirm the email address of new
:doc:`Email/Password users </authentication/userpass>` before they are
permitted to log into MongoDB Realm. The exact method of confirmation
depends upon your provider configuration, but typically involves
a :wikipedia:`handshake process <Handshaking>` between the user and your
application. You can read more about Email/Password user confirmation at
:ref:`Email/Password Confirmation <auth-confirmation>`.

Sometimes, however, users are unable to complete the confirmation
process. For example:

- an overzealous spam filter might block Stitch email confirmation
  emails

- a proxy or web blocker could prevent a user from activating the
  ``confirmUser`` client SDK function via the client application

- an implementation error could cause the client application's user
  confirmation page to fail for specific use cases.

To help you work around cases like this, Stitch allows you to manually
confirm users. To manually confirm a user from the Stitch UI:

#. Select :guilabel:`Users` from the left-hand navigation.

#. Under the :guilabel:`Users` tab, select the :guilabel:`PENDING`
   button.

#. Find the user in the list and click on the ellipsis (``...``).

#. Select the :guilabel:`Confirm User` option from the context menu that
   appears.

#. If the operation succeeds, the banner at the top of the MongoDB Realm
   admin console should display a confirmation message. The user's
   :guilabel:`User Status` changes from :guilabel:`Pending Confirmation`
   to :guilabel:`Pending User Login`.

A manually confirmed user continues to appear in the :guilabel:`PENDING`
user list until they log in to your application for the first time, at
which point Stitch moves them into the list of confirmed users and
transitions their :guilabel:`User Status` to ``confirmed``.

Re-run User Confirmation Workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. default-domain:: mongodb

A few circumstances can lead to incomplete Email/Password user
confirmation worflows:

- An email is caught by a spam filter, not delivered due to a bug, or
  accidentally deleted by a prospective Stitch user.

- A custom confirmation function is unable to communicate with an
  unconfirmed user due to a bug or oversight.

- An unconfirmed user forgot to visit their confirmation link within 30
  minutes of receiving their login tokens and the tokens expired.

Users caught in this situation appear stuck in an unconfirmed state.
They cannot create another account with their email address since it is
registered to an existing account, but they cannot log into their
existing account because it has not been confirmed.

Applications that use Stitch's built-in email confirmation service can
use the ``resendConfirmationEmail`` Client SDK method to send a new
email with a new confirmation link to the user, allowing them to confirm
their account and log in. Any application using a confirmation flow
other than ``send a confirmation email`` will generate an error if this
method is called.

There is no such specific method to re-run a custom confirmation
function. Instead, Stitch has a method to trigger a re-run of whatever
the current Email/Password user confirmation workflow happens to be. You
can manually re-run the currently selected user confirmation flow using
the :doc:`Stitch Admin API </admin/api/admin-v3>` or via the Stitch UI:

To re-run the confirmation workflow for a user through the Stitch UI:

#. Select :guilabel:`Users` from the left-hand navigation.

#. Under the :guilabel:`Users` tab, select the :guilabel:`PENDING`
   button.

#. Find the user in the list and click on the ellipsis (``...``).

#. Select the :guilabel:`Run user confirmation` option from the context
   menu that appears.

#. Select the :guilabel:`Run User Confirmation` button in the dialogue
   box that appears.

#. If the operation succeeds, the banner at the top of the MongoDB Realm
   admin console should display a confirmation message. The user's
   :guilabel:`User Status` changes from :guilabel:`Pending Confirmation`
   to :guilabel:`Pending User Login`. Once the user logs in, they will
   move into the active users list automatically.

If the re-run fails or the user's tokens expire again, you can re-run
the confirmation function as many times as necessary.

.. _revoke-user-sessions:

Revoking User Sessions
~~~~~~~~~~~~~~~~~~~~~~

Situations may arise where you need to log a particular user out of
all of their :ref:`sessions <user-sessions>`, and prevent them from making
further requests until they reauthenticate. The MongoDB Realm admin console
makes this a straightforward process.

Use the following procedure to revoke all the sessions for a particular
user:

#. Select :guilabel:`Users` from the left-side navigation.

#. Under the :guilabel:`Users` tab, find a user in the list and click on the ellipsis (``...``).

#. Click :guilabel:`Revoke all sessions`. This invalidates all access
   tokens and refresh tokens for that user. This means that to perform
   any further requests in any of their sessions, they will need to
   reauthenticate.