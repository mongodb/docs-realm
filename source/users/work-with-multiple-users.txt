========================
Work with Multiple Users
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Multiple :ref:`users <user-accounts>` can log in to a Realm client
application simultaneously. You can set the app's :ref:`active user
<active-user>` to be any authenticated user at any time, which lets you
quickly switch between users without requiring them to log in again.
This is particularly useful when multiple users share a single device.

User Account States
~~~~~~~~~~~~~~~~~~~

When a user first logs in to a client application on a given device, the
SDK saves the user's information to the device. There are

- **Authenticated:** any user that has logged in on the client device
  and has not logged out or had its session revoked.

   - **Active**: a single authenticated user that the SDK associates
     with outgoing Realm requests. See :ref:`active user <active-user>`
     for more information.
   
   - **Inactive**: all authenticated users that are not the current
     active user.

- **Logged Out:** any user that has logged in on the client device but
  has since logged out or had its session revoked.

The following diagram shows how client application users transition
between states when different events occur:

.. figure:: /images/multi-user.png

Use Cases
----------

Add a New User to a Device
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can add a new user to a device by logging in with the user's
credential exactly as you would in a single-user application. The newly
added user immediately becomes the application's :ref:`active user
<active-user>`.

.. tabs-stitch-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Stitch.defaultAppClient;
         const auth = app.auth;
         
         // Log in as user1
         await auth.loginWithCredential(new UserPasswordCredential('user1', 'password'));
         // The active user is now user1
         const user1 = auth.user;
         
         // Log in as user2
         await auth.loginWithCredential(new UserPasswordCredential('user2', 'password'));
         // The active user is now user2
         const user2 = auth.user;
         
         // The active user changed from user1 to user2
         assert(user1.id !== user2.id);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java

         StitchAppClient app = Stitch.getDefaultAppClient();
         StitchAuth auth = app.getAuth();
         
         // Log in as user1
         auth.loginWithCredential(new UserPasswordCredential("user1", "password"))
             .addOnCompleteListener(task -> {
                 StitchUser user1 = task.getResult();
                 // The active user is user1
                 assert (user1.id == auth.getUser().id);
             });
         
         // Log in as user2
         auth.loginWithCredential(new UserPasswordCredential("user2", "password"))
             .addOnCompleteListener(task -> {
                 StitchUser user2 = task.getResult();
                 // The active user is user2
                 assert (user2.id == auth.getUser().id);
             });
   
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
         
         let app: StitchAppClient = Stitch.defaultAppClient;
         let auth: StitchAuth = app.auth;
         
         // Log in as user1
         let credentialForUser1: StitchCredential = UserPasswordCredential.init("user1", "password");
         auth.login(withCredential: credentialForUser1) { result in
           switch result {
           case .success(let user1: StitchUser):
             // The active user is user1
             assert(user1.id == auth.currentUser.id)
           case .failure(let error):
             print("Authentication error: \(error)")
           }
         }
         
         // Log in as user2
         let credentialForUser2: StitchCredential = UserPasswordCredential.init("user2", "password");
         auth.login(withCredential: credentialForUser2) { result in
           switch result {
           case .success(let user2: StitchUser):
             // The active user is user2
             assert(user2.id == auth.currentUser.id)
           case .failure(let error):
             print("Authentication error: \(error)")
           }
         }

List All On-Device Users
~~~~~~~~~~~~~~~~~~~~~~~~

You can access a list of all :ref:`user accounts <user-accounts>` that
have logged in to a client application on a given device regardless of
whether they are currently authenticated.

.. tabs-stitch-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Stitch.defaultAppClient;
         const auth = app.auth;
         
         const users = auth.listUsers();
         users.forEach(user => {
            console.log(`User with id ${user.id} is ${user.isLoggedIn ? "logged in" : "logged out"}`);
         });
      
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         StitchAppClient app = Stitch.getDefaultAppClient();
         StitchAuth auth = app.getAuth();
         
         List<StitchUser> loggedInUsers = client.getAuth().listUsers();
         for (StitchUser user : loggedInUsers) {
            String message = String.format(
               "User with id %s is %s",
               user.id,
               user.isLoggedIn() ? "logged in" : "logged out"
            );
             Log.d("Stitch", message);
         }
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: StitchAppClient = Stitch.defaultAppClient;
         let auth: StitchAuth = app.auth;
         
         let users: [StitchUser] = auth.listUsers()
         for user in users {
           print("User with id \(user.id) is $(user.isLoggedIn ? "logged in" : "logged out")")
         }

Switch the Active User
~~~~~~~~~~~~~~~~~~~~~~

You can switch a client application's :ref:`active user <active-user>`
to any authenticated user by specifying their User ID.

.. tabs-stitch-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Stitch.defaultAppClient;
         const auth = app.auth;
         
         // Get all on-device users
         const users = auth.listUsers();
         // You can only switch to a logged-in user
         const authenticatedUsers = users.filter(user => user.isLoggedIn);
         // Switch between user1 and user2
         const user1 = authenticatedUsers[0];
         const user2 = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUserWithId(user1.id);
         // The active user is now user1
         assert(auth.user.id === user1.id);
         // Switch to user2
         auth.switchToUserWithId(user2.id);
         // The active user is now user2
         assert(auth.user.id === user2.id);
      
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         StitchAppClient app = Stitch.getDefaultAppClient();
         StitchAuth auth = app.getAuth();
         
         // Get all on-device users
         List<StitchUser> users = auth.listUsers();
         // You can only switch to a logged-in user
         List<StitchUser> authenticatedUsers = users
             .stream()
             .filter(user -> user.isLoggedIn())
             .collect(Collectors.toList());
         // Switch between user1 and user2
         StitchUser user1 = authenticatedUsers[0];
         StitchUser user2 = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUserWithId(user1.id);
         // The active user is now user1
         assert (auth.getUser().id === user1.id);
         // Switch to user2
         auth.switchToUserWithId(user2.id);
         // The active user is now user2
         assert (auth.getUser().id === user2.id);
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: StitchAppClient = Stitch.defaultAppClient;
         let auth: StitchAuth = app.auth;
         
         // Get all on-device users
         let users: [StitchUser] = auth.listUsers()
         // You can only switch to a logged-in user
         let authenticatedUsers: [StitchUser] = users.filter { $0.isLoggedIn }
         // Switch between user1 and user2
         let user1: StitchUser = authenticatedUsers[0];
         let user2: StitchUser = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUser(withId: user1.id);
         // The active user is now user1
         assert(auth.currentUser.id === user1.id);
         // Switch to user2
         auth.switchToUser(withId: user2.id);
         // The active user is now user2
         assert(auth.currentUser.id === user2.id);

Remove the Active User from the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can remove all information about the current :ref:`active user
<active-user>` from the device and automatically log the user out.

.. tabs-stitch-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Stitch.defaultAppClient;
         const auth = app.auth;
         
         const oldActiveUser = auth.user;
         await auth.removeUser();
         // The user is no longer the active user
         const newActiveUser = auth.user;
         if(newActiveUser) {
           assert(oldActiveUser.id !== newActiveUser.id);
         }
         // The user is no longer on the device
         const onDeviceUser = auth.listUsers().find(user => user.id === oldActiveUser.id);
         assert(onDeviceUser === undefined);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         StitchAppClient app = Stitch.getDefaultAppClient();
         StitchAuth auth = app.getAuth();
      
         StitchUser oldActiveUser = auth.getUser();
         auth.removeUser().addOnCompleteListener(task -> {
           if (task.isSuccessful()) {
               // The user is no longer the active user
               StitchUser newActiveUser = auth.getUser();
               if(newActiveUser != null) {
                 assert (oldActiveUser.id != newActiveUser.id);
               }
               // The user is no longer on the device
               StitchUser onDeviceUser = auth.listUsers()
                   .stream()
                   .filter(user -> user.id == oldActiveUser.id)
                   .findAny()
                   .orElse(null);
               assert (onDeviceUser == null);
           }
         });
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: StitchAppClient = Stitch.defaultAppClient;
         let auth: StitchAuth = app.auth;
         
         let oldActiveUser: StitchUser = auth.currentUser
         auth.removeUser() { result in
           switch result {
           case .success():
             // The user is no longer the active user
             let newActiveUser: StitchUser = auth.currentUser?;
             if newActiveUser != nil {
               assert(oldActiveUser.id != newActiveUser.id)
             }
             // The user is no longer on the device
             StitchUser onDeviceUser = auth.listUsers().first(where: { $0.id == oldActiveUser.id })
             assert(onDeviceUser == nil)
           }
         }

Remove a Specific User from the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can remove all information about a specific user on the device and
automatically log the user out by specifying their User ID.

.. tabs-stitch-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Stitch.defaultAppClient;
         const auth = app.auth;
         
         const user1 = auth.user;
         await auth.removeUserWithId(user1.id);
         // The user is no longer on the device
         const onDeviceUser = auth.listUsers().find(user => user.id === user1.id);
         assert(onDeviceUser === undefined);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         StitchAppClient app = Stitch.getDefaultAppClient();
         StitchAuth auth = app.getAuth();
         
         StitchUser user1 = auth.getUser();
         auth.removeUserWithId(user1.id).addOnCompleteListener(task -> {
           if (task.isSuccessful()) {
               // The user is no longer on the device
               StitchUser onDeviceUser = auth.listUsers()
                   .stream()
                   .filter(user -> user.id == user1.id)
                   .findAny()
                   .orElse(null);
               assert (onDeviceUser == null);
           }
         });
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: StitchAppClient = Stitch.defaultAppClient;
         let auth: StitchAuth = app.auth;
         
         let user1: StitchUser = auth.currentUser
         auth.removeUser(withId: user1.id) { result in
           switch result {
           case .success():
             // The user is no longer on the device
             StitchUser onDeviceUser = auth.listUsers().first(where: { $0.id == user1.id })
             assert(onDeviceUser == nil)
           }
         }
