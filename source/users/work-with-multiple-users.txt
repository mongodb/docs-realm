========================
Work with Multiple Users
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

Multiple :ref:`users <user-accounts>` can log in to a :term:`{+service-short+} client`
simultaneously. You can set the app's :ref:`active user <active-user>`
to be any authenticated user at any time, which lets you
quickly switch between users without requiring them to log in again.
This is particularly useful when multiple users share a single device.

User Account States
~~~~~~~~~~~~~~~~~~~

When a user first logs in to a {+service-short+} client on a given device, the
SDK saves the user's information to the device. An on-device user may or
may not be logged in. {+service-short+} clients run in the context of
a single user even if multiple users are logged in simultaneously.

The following states describe an on-device user at any given time:

- **Authenticated:** any user that has logged in on the client device
  and has not logged out or had its session revoked.
  
  - **Active**: a single authenticated user that the SDK associates
    with outgoing {+backend+} requests. See :ref:`active user <active-user>`
    for more information.
   
  - **Inactive**: all authenticated users that are not the current
    active user.

- **Logged Out:** any user that authenticated on the client device but
  has since logged out or had its session revoked.

The following diagram shows how users within a {+service-short+} client transition
between states when different events occur:

.. figure:: /images/multi-user.png

Use Cases
----------

Add a New User to a Device
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can add a new user to a device by logging in with the user's
credential exactly as you would in a single-user application. The newly
added user immediately becomes the application's :ref:`active user
<active-user>`.

.. tabs-realm-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Realm.defaultAppClient;
         const auth = app.auth;
         
         // Log in as user1
         await auth.loginWithCredential(new UserPasswordCredential('user1', 'password'));
         // The active user is now user1
         const user1 = auth.user;
         
         // Log in as user2
         await auth.loginWithCredential(new UserPasswordCredential('user2', 'password'));
         // The active user is now user2
         const user2 = auth.user;
         
         // The active user changed from user1 to user2
         assert(user1.id !== user2.id);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java

         RealmAppClient app = Realm.getDefaultAppClient();
         RealmAuth auth = app.getAuth();
         
         // Log in as user1
         auth.loginWithCredential(new UserPasswordCredential("user1", "password"))
             .addOnCompleteListener(task -> {
                 RealmUser user1 = task.getResult();
                 // The active user is user1
                 assert (user1.id == auth.getUser().id);
             });
         
         // Log in as user2
         auth.loginWithCredential(new UserPasswordCredential("user2", "password"))
             .addOnCompleteListener(task -> {
                 RealmUser user2 = task.getResult();
                 // The active user is user2
                 assert (user2.id == auth.getUser().id);
             });
   
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
         
         let app: RealmAppClient = Realm.defaultAppClient;
         let auth: RealmAuth = app.auth;
         
         // Log in as user1
         let credentialForUser1: RealmCredential = UserPasswordCredential.init("user1", "password");
         auth.login(withCredential: credentialForUser1) { result in
           switch result {
           case .success(let user1: RealmUser):
             // The active user is user1
             assert(user1.id == auth.currentUser.id)
           case .failure(let error):
             print("Authentication error: \(error)")
           }
         }
         
         // Log in as user2
         let credentialForUser2: RealmCredential = UserPasswordCredential.init("user2", "password");
         auth.login(withCredential: credentialForUser2) { result in
           switch result {
           case .success(let user2: RealmUser):
             // The active user is user2
             assert(user2.id == auth.currentUser.id)
           case .failure(let error):
             print("Authentication error: \(error)")
           }
         }

List All On-Device Users
~~~~~~~~~~~~~~~~~~~~~~~~

You can access a list of all :ref:`user accounts <user-accounts>` that
have logged in to a {+service-short+} client on a given device regardless of
whether they are currently authenticated.

.. tabs-realm-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Realm.defaultAppClient;
         const auth = app.auth;
         
         const users = auth.listUsers();
         users.forEach(user => {
            console.log(`User with id ${user.id} is ${user.isLoggedIn ? "logged in" : "logged out"}`);
         });
      
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         RealmAppClient app = Realm.getDefaultAppClient();
         RealmAuth auth = app.getAuth();
         
         List<RealmUser> loggedInUsers = client.getAuth().listUsers();
         for (RealmUser user : loggedInUsers) {
            String message = String.format(
               "User with id %s is %s",
               user.id,
               user.isLoggedIn() ? "logged in" : "logged out"
            );
             Log.d("Realm", message);
         }
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: RealmAppClient = Realm.defaultAppClient;
         let auth: RealmAuth = app.auth;
         
         let users: [RealmUser] = auth.listUsers()
         for user in users {
           print("User with id \(user.id) is $(user.isLoggedIn ? "logged in" : "logged out")")
         }

Switch the Active User
~~~~~~~~~~~~~~~~~~~~~~

You can switch a {+service-short+} client's :ref:`active user <active-user>`
to any authenticated user by specifying their User ID.

.. tabs-realm-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Realm.defaultAppClient;
         const auth = app.auth;
         
         // Get all on-device users
         const users = auth.listUsers();
         // You can only switch to a logged-in user
         const authenticatedUsers = users.filter(user => user.isLoggedIn);
         // Switch between user1 and user2
         const user1 = authenticatedUsers[0];
         const user2 = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUserWithId(user1.id);
         // The active user is now user1
         assert(auth.user.id === user1.id);
         // Switch to user2
         auth.switchToUserWithId(user2.id);
         // The active user is now user2
         assert(auth.user.id === user2.id);
      
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         RealmAppClient app = Realm.getDefaultAppClient();
         RealmAuth auth = app.getAuth();
         
         // Get all on-device users
         List<RealmUser> users = auth.listUsers();
         // You can only switch to a logged-in user
         List<RealmUser> authenticatedUsers = users
             .stream()
             .filter(user -> user.isLoggedIn())
             .collect(Collectors.toList());
         // Switch between user1 and user2
         RealmUser user1 = authenticatedUsers[0];
         RealmUser user2 = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUserWithId(user1.id);
         // The active user is now user1
         assert (auth.getUser().id === user1.id);
         // Switch to user2
         auth.switchToUserWithId(user2.id);
         // The active user is now user2
         assert (auth.getUser().id === user2.id);
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: RealmAppClient = Realm.defaultAppClient;
         let auth: RealmAuth = app.auth;
         
         // Get all on-device users
         let users: [RealmUser] = auth.listUsers()
         // You can only switch to a logged-in user
         let authenticatedUsers: [RealmUser] = users.filter { $0.isLoggedIn }
         // Switch between user1 and user2
         let user1: RealmUser = authenticatedUsers[0];
         let user2: RealmUser = authenticatedUsers[1];
         // Switch to user1
         auth.switchToUser(withId: user1.id);
         // The active user is now user1
         assert(auth.currentUser.id === user1.id);
         // Switch to user2
         auth.switchToUser(withId: user2.id);
         // The active user is now user2
         assert(auth.currentUser.id === user2.id);

Remove the Active User from the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can remove all information about the current :ref:`active user
<active-user>` from the device and automatically log the user out.

.. tabs-realm-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Realm.defaultAppClient;
         const auth = app.auth;
         
         const oldActiveUser = auth.user;
         await auth.removeUser();
         // The user is no longer the active user
         const newActiveUser = auth.user;
         if(newActiveUser) {
           assert(oldActiveUser.id !== newActiveUser.id);
         }
         // The user is no longer on the device
         const onDeviceUser = auth.listUsers().find(user => user.id === oldActiveUser.id);
         assert(onDeviceUser === undefined);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         RealmAppClient app = Realm.getDefaultAppClient();
         RealmAuth auth = app.getAuth();
      
         RealmUser oldActiveUser = auth.getUser();
         auth.removeUser().addOnCompleteListener(task -> {
           if (task.isSuccessful()) {
               // The user is no longer the active user
               RealmUser newActiveUser = auth.getUser();
               if(newActiveUser != null) {
                 assert (oldActiveUser.id != newActiveUser.id);
               }
               // The user is no longer on the device
               RealmUser onDeviceUser = auth.listUsers()
                   .stream()
                   .filter(user -> user.id == oldActiveUser.id)
                   .findAny()
                   .orElse(null);
               assert (onDeviceUser == null);
           }
         });
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: RealmAppClient = Realm.defaultAppClient;
         let auth: RealmAuth = app.auth;
         
         let oldActiveUser: RealmUser = auth.currentUser
         auth.removeUser() { result in
           switch result {
           case .success():
             // The user is no longer the active user
             let newActiveUser: RealmUser = auth.currentUser?;
             if newActiveUser != nil {
               assert(oldActiveUser.id != newActiveUser.id)
             }
             // The user is no longer on the device
             RealmUser onDeviceUser = auth.listUsers().first(where: { $0.id == oldActiveUser.id })
             assert(onDeviceUser == nil)
           }
         }

Remove a Specific User from the Device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can remove all information about a specific user on the device and
automatically log the user out by specifying their User ID.

.. tabs-realm-sdks::

   .. tab::
      :tabid: javascript
      
      .. code-block:: javascript
      
         const app = Realm.defaultAppClient;
         const auth = app.auth;
         
         const user1 = auth.user;
         await auth.removeUserWithId(user1.id);
         // The user is no longer on the device
         const onDeviceUser = auth.listUsers().find(user => user.id === user1.id);
         assert(onDeviceUser === undefined);
   
   .. tab::
      :tabid: android
      
      .. code-block:: java
      
         RealmAppClient app = Realm.getDefaultAppClient();
         RealmAuth auth = app.getAuth();
         
         RealmUser user1 = auth.getUser();
         auth.removeUserWithId(user1.id).addOnCompleteListener(task -> {
           if (task.isSuccessful()) {
               // The user is no longer on the device
               RealmUser onDeviceUser = auth.listUsers()
                   .stream()
                   .filter(user -> user.id == user1.id)
                   .findAny()
                   .orElse(null);
               assert (onDeviceUser == null);
           }
         });
      
   .. tab::
      :tabid: ios
      
      .. code-block:: swift
      
         let app: RealmAppClient = Realm.defaultAppClient;
         let auth: RealmAuth = app.auth;
         
         let user1: RealmUser = auth.currentUser
         auth.removeUser(withId: user1.id) { result in
           switch result {
           case .success():
             // The user is no longer on the device
             RealmUser onDeviceUser = auth.listUsers().first(where: { $0.id == user1.id })
             assert(onDeviceUser == nil)
           }
         }
