.. _sync:
.. _sync-overview:

===================
Realm Sync Overview
===================

.. default-domain:: mongodb

.. toctree::
   :titlesonly:
   :hidden:
   
   Get Started with Sync </sync/get-started>
   Configure Your Data Model </sync/configure-your-data-model>
   Partition Atlas Data into Realms </sync/partitioning>   
   Define Sync Rules  </sync/rules>
   Enable Development Mode  </sync/enable-development-mode>
   Conflict Resolution </sync/conflict-resolution>
   Sync Permissions </sync/permissions>
   Realm Sync Protocol </sync/protocol>
   Sync Errors </sync/errors>
   Modify a Synced Object Schema </sync/modify-synced-object-schema>

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

What is {+sync+}?
-------------------
Most mobile apps are data-dependent. Eventually, many apps
need to share that data with other apps and the outside world. {+sync+} is 
an out-of-the-box that meets this need.

Consider a few examples:

- A team collaborates in real-time on a shared
  document across the Internet.

- A front-line worker fills out a report while
  working somewhere with low or no network connectivity.

- An IoT device uploads its sensor data to the cloud.

Traditionally, mobile app developers use an HTTP client to
manually communicate with an endpoint. This means that
every mobile app needs to solve the following problems for every
client platform:

- serialization

- a consistent schema of objects

- gracefully handling network failures and slowdowns

- resolving conflicts between changes to the same data on different
  clients

{+sync+} handles network access and conflict resolution in a
background thread of your application, so your application logic stays
the same regardless of network conditions. The :term:`{+service-short+} data model`
makes it easy to manage a consistent schema of objects in your database
and across all client platforms.

Using {+sync+} in Your App
-----------------------------------

To sync data across devices, you :ref:`enable {+sync+} <enable-sync>` for your
{+app+} and then use the sync-related methods and properties in the SDKs. To 
learn more, see :ref:`Get Started with Sync <realm-sync-get-started>`.

How {+sync+} Works
----------------------------------

{+sync+} is built on 3 main pillars:

- :ref:`Offline-first functionality <offline-first-overview>`
- :ref:`Live objects <live-objects-overview>`
- :ref:`Conflict resolution <conflict-resolution-overview>`

.. _offline-first-overview:

Offline-First
~~~~~~~~~~~~~

{+sync+} is built on the assumption that connectivity will
drop. We call this mentality **offline-first**. After you
make changes to the local {+realm+} on the client device, the {+service-short+}
SDK automatically sends the changes to the server as soon
as possible. Likewise, the {+service-short+} SDK automatically receives
changes from the server and integrates those changes into
the local {+realm+}. In effect, you continue to work with the
local {+realm+} without moment-to-moment concern for network
connectivity or lack thereof.

The offline-first design leads to one of the main benefits of {+service+}: a 
seamless user experience. Users interact with local data with zero latency 
regardless of their moment-to-moment connectivity, and because {+sync+} is 
built into the {+service-short+} SDK, you do not need to write
your own synchronization protocol and deal with connectivity issues when 
synchronizing data. 

The main difficulty with offline-first data is ensuring that devices that are 
offline for extended periods are able to resolve potential conflicts with 
changes made to the same data. Ultimately, every client device must
arrive at the same state when all changes have been synced. This is why {+sync+} 
includes :ref:`automatic conflict resolution <conflict-resolution-overview>`.

.. _live-objects-overview:

Live Objects
~~~~~~~~~~~~
Realm's :term:`Live objects <live objects>` means that you can update data in 
one place (a mobile app, for example), and that data is updated everywhere. 
Live objects always reflect the latest data stored in {+client-database+}. 
This concept extends across devices: updates on one device sync to the corresponding 
objects on other devices. :term:`Notifications` based on these updates make it 
easy to update the application UI to react to local and remote changes.

.. _conflict-resolution-overview:

Conflict Resolution
~~~~~~~~~~~~~~~~~~~

{+service+}'s :term:`sync conflict resolution engine <sync protocol>` is
deterministic. Changes received out-of-order eventually converge on the
same state across the server and all clients. As such, {+sync+}
is :wikipedia:`strongly eventually consistent
<Eventual_consistency#Strong_eventual_consistency>`.

.. note:: Realm Sync's Internal Conflict Resolution

   From {+service+}'s perspective, changesets may
   arrive any time that connectivity allows. There is no
   guarantee that an earlier-timestamped changeset from one
   client actually arrives before a later-timestamped
   changeset from another client. As a result, the server
   has to be able to process events out-of-order. {+service+}
   keeps a per-{+realm+} transaction history to deal with the
   out-of-order nature of messages.

In simple terms, {+sync+}'s conflict resolution comes down
to **last write wins**. {+sync+} also uses more
sophisticated techniques like :wikipedia:`operational
transform <Operational_transformation>` to handle, for
example, insertions into lists.

.. seealso::

   :ref:`Conflict Resolution <conflict-resolution>`

.. _realm-sync-best-practices:

Best Practices
--------------

We recommend following these best practices to ensure optimal {+app+}
performance:

Deployment model and geographic regions:
  Use a local {+service-short+} :ref:`deployment model<realm-local-deployment>` 
  when building a {+sync+} application. Configure your {+app+} and
  MongoDB data source to run within the same geographic region and cloud
  provider.

Atlas oplog:
  {+sync+} requires access to the {+atlas+} oplog. For best results,
  keep 48 hours of oplog for a cluster using {+sync-short+}.  For 
  more information, see :atlas:`Atlas oplog </reference/atlas-oplog>`.

Realm Sync Schema Data Consistency
  If you create or modify {+sync+} documents using another tool, such as the 
  :binary:`~bin.mongo` shell or {+compass+}, be sure the documents validate 
  against the Sync object schema. For more information, see 
  :ref:`Realm Sync Schema Data Consistency <realm-sync-data-consistency>`.

Summary
-------

- {+sync+} is the part of {+realm+} that handles data synchronization between 
  a Realm Database on one or more clients and MongoDB Atlas.

- {+sync+} enables offline-first app development by handling network
  loss and recovery automatically.

- {+sync+} has a built-in conflict resolution engine that guarantees
  strong eventual consistency.

- {+sync+} is included in the client SDKs to simplify app development.