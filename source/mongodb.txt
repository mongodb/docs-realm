.. _data-sources:

====================
MongoDB Data Sources
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:
   
   CRUD & Aggregation APIs </mongodb/crud-and-aggregation-apis>
   Read Preference </mongodb/read-preference>
   Wire Protocol </mongodb/wire-protocol>
   Document Preimages </mongodb/preimages>
   Internal Database Usage </mongodb/internal-database-usage>

Overview
--------

A **data source** represents a `{+atlas+}
<https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_
instance in the same project as your app. You use data sources to store
and retreive your application's data.

Most apps connect to a single data source, but you can configure
multiple data sources if your data is spread across instances. You
define a unique name for each data source linked to your application and
use the name to refer to the data source throughout your app.

Read, Write, and Aggregate Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can read and write data in a data source from a server-side function
or connect from a client application. You write queries using standard
MongoDB query syntax.

.. code-block:: javascript

   exports = async function() {
      const mongodb = context.services.get("mongodb-atlas");
      return mongodb
         .db("myDatabase")
         .collection("myCollection")
         .findOne()
   }

To learn how to work with a data source in a function, refer to the
following guides:

- :ref:`Read Data from MongoDB Atlas <mongodb-read>`
- :ref:`Write Data in MongoDB Atlas <mongodb-write>`
- :ref:`Aggregate Data in MongoDB Atlas <mongodb-aggregate>`

To learn how to work with a data source from a Realm SDK, refer to the
docs for the SDK:

- :ref:`Query MongoDB - Swift SDK <ios-mongodb-data-access>`
- :ref:`Query MongoDB - .NET SDK <dotnet-mongodb-data-access>`
- :ref:`Query MongoDB - Java SDK <java-mongodb-data-access>`
- :ref:`Query MongoDB - Node.js SDK <node-mongodb-data-access>`
- :ref:`Query MongoDB - React Native SDK <react-native-mongodb-data-access>`
- :ref:`Query MongoDB - Web SDK <web-mongodb-data-access>`

.. note::

   Linked data sources do not support all MongoDB CRUD and Aggregation
   operations. Some operations are not available when you query MongoDB
   as a specific :ref:`user <users-and-authentication>` due to overhead
   from schema validation and data access rules. You can bypass some
   limitations by querying MongoDB as the :ref:`system user
   <system-user>` instead.
   
   For more information on which operations are supported, see
   :ref:`CRUD & Aggregation APIs <mongodb-crud-and-aggregation-apis>`.

Secure and Validate Data
~~~~~~~~~~~~~~~~~~~~~~~~

Data sources allow you to define :ref:`access rules <rules>` and
:ref:`document schemas <schemas>` for the data they contain. Rules
dynamically authorize users to read and write subsets of your data and
schemas control the shape and contents of each document.

Read and write operations on a linked data source are secure by default.
A user cannot read or write any data unless a rule explicitly allows
them to. Any data inserted or modified by an authorized user must
conform to the corresponding schema.

If you do not define rules for a collection, queries on the collection
will fail. This means that you can safely expose a properly configured
data source interface in client applications without risking data
corruption or leaks.

Automatically Sync Data
~~~~~~~~~~~~~~~~~~~~~~~

{+sync+} applications store data and sync data changes to a linked
cluster, called the *synced cluster*. The sync protocol ensures that
your data is eventually consistent across all sync clients and the
synced cluster.

To learn more about {+sync+} and how it interacts with your app's data
sources, see :ref:`{+sync+} <sync-overview>`.

.. note:: Version 4.4 Required for Sync
   
   In order to use {+sync+}, your cluster must run MongoDB version
   4.4 or newer.

React to Changing Data
~~~~~~~~~~~~~~~~~~~~~~

You can create database triggers that run functions automatically in
response to changing data. Triggers use MongoDB change streams to
observe the data source and execute a function whenever a change event
matches the trigger configuration. A trigger function can run arbitrary
code and can access a change event for detailed information about the
change that caused it to run.

To learn more about how triggers work and how to define your own, see
:ref:`Database Triggers <database-trigger>`.

.. important::

   Triggers are only available for data sources that support change
   streams. You cannot define triggers on a linked Data Lake or
   Serverless Instance.

.. _link-a-data-source:

Link a Data Source
------------------

A configured data source in your app is *linked* to the underlying
instance in {+atlas-short+}. You can link multiple instances to your app
and even create multilpe data sources that link to the same underyling
instance.

You can configure a new linked data source in the {+ui+} or by defining
and pushing a configuration file with {+cli+} or GitHub deployment:

.. tabs-realm-admin-interfaces::
   
   .. tab::
      :tabid: ui
      
      .. include:: /includes/steps/link-a-data-source-realm-ui.rst
   
   .. tab::
      :tabid: cli
      
      .. include:: /includes/steps/link-a-data-source-import-export.rst

Data Source Limitations
-----------------------

A linked data source can represent one of several instance {+atlas+}
instance types. Depending on the type of the underlying instance, not
all functionality is supported.

Once you've linked a data source, you cannot change the underlying
instance type. Instead, you can link a new data source with another
instance type.

.. _data-lake-caveats:

Data Lakes
~~~~~~~~~~

For the most part, you can interact with a linked Data Lake just as you
would with a linked Atlas cluster. However, there are some caveats to
keep in mind when working with a Data Lake:

- Data Lakes :adl:`do not support write operations </supported-unsupported/mql-support>`.
- You can only access a Data Lake from a :ref:`system function <system-functions>`.
- You cannot connect to a Data Lake via the wire protocol.
- You cannot define :ref:`roles and permissions <define-roles-and-permissions>` for a Data Lake.
- You cannot set a :ref:`Read Preference <read-preference>` for a linked Data Lake.
