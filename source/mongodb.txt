.. _mongodb-service:

======================
MongoDB Atlas Overview
======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :caption: Configure a MongoDB Data Source
   :hidden:

   Link a Data Source </mongodb/link-a-data-source>
   Enforce a Document Schema </mongodb/enforce-a-document-schema>
   Filter Incoming Queries </mongodb/filter-incoming-queries>
   Specify Read Preference for a MongoDB Cluster </mongodb/specify-cluster-read-preference>
   Define Roles And Permissions </mongodb/define-roles-and-permissions>
   Configure Advanced Rules </mongodb/configure-advanced-rules>
   Enable Wire Protocol Connections </mongodb/enable-wire-protocol-connections>
   Connect Over the Wire Protocol </mongodb/connect-over-the-wire-protocol>

.. toctree::
   :titlesonly:
   :caption: CRUD Operations
   :hidden:

   Insert Documents </mongodb/insert-documents>
   Find Documents </mongodb/find-documents>
   Update Documents </mongodb/update-documents>
   Delete Documents </mongodb/delete-documents>
   Run Aggregation Pipelines </mongodb/run-aggregation-pipelines>
   Transactions </mongodb/transactions>

.. toctree::
   :titlesonly:
   :caption: Reference
   :hidden:
   
   Query Roles </mongodb/query-roles>
   Document Schemas </mongodb/document-schemas>
   Query Filters </mongodb/query-filters>
   Service Limitations </mongodb/service-limitations>
   Connection Strings </mongodb/connection-strings>
   CRUD & Aggregation APIs </mongodb/crud-and-aggregation-apis>
   MongoDB Actions </mongodb/actions>

Overview
--------

{+service+} provides a first-class service interface for `{+atlas+}
<https://www.mongodb.com/cloud/atlas?tck=docs_realm>`_ that lets you
securely query one or more {+atlas-short+} data sources. You can use
standard MongoDB query language syntax to access your data directly in
your client application code or from a :doc:`{+service-short+} Function
</functions>`.

The :ref:`MongoDB service <mongodb-service>` secures your data with a
dynamic, role-based :guilabel:`Rules` engine that proxies and modifies
incoming queries
based on rules that you define. There are three types of MongoDB
collection rules: :ref:`roles <mongodb-roles>`, :ref:`filters
<mongodb-filters>`, and :ref:`{+backend-schema+} <mongodb-schemas>`.

Get Started
~~~~~~~~~~~

To get started with the MongoDB service, :doc:`link a data source to
your application </mongodb/link-a-data-source>` and :doc:`define roles
and permissions </mongodb/define-roles-and-permissions>` for a
collection. After you've created at least one role, you can start to
work with data in the collection.

Concepts
--------

.. _crud-aggregation-operations:

CRUD & Aggregation Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service+} allows you to securely work with data in a {+atlas+} cluster
directly from your client applications and :doc:`Functions </functions>`
using standard, platform-idiomatic MongoDB query syntax. You can also
access a linked `{+atlas+} Data Lake
<https://www.mongodb.com/atlas/data-lake?tck=docs_realm>`_ from a
:ref:`system function <system-functions>`.

The following guides demonstrate how to use :doc:`MongoDB service
actions </mongodb/actions>` to work with data in a :ref:`linked data
source <link-a-data-source>`:

- :doc:`Insert Documents </mongodb/insert-documents>`
- :doc:`Find Documents </mongodb/find-documents>`
- :doc:`Update Documents </mongodb/update-documents>`
- :doc:`Delete Documents </mongodb/delete-documents>`
- :doc:`Watch for Document Changes </mongodb/watch-documents>`
- :doc:`Run Aggregation Pipelines </mongodb/run-aggregation-pipelines>`

.. admonition:: Define Collection Rules
   :class: important

   When working with a linked {+atlas+} cluster outside of a
   :ref:`system function <system-functions>`, {+backend+} dynamically
   determines which documents and fields in a collection each
   :doc:`application user </authentication>` can read and write for all
   incoming query operations by evaluating :ref:`collection rules
   <mongodb-rules>` that you define.

   **If you do not define rules for a collection, queries on
   the collection will fail.**   

.. admonition:: Advanced MongoDB Queries
   :class: note

   {+service+} does not support all MongoDB CRUD and Aggregation
   operations when you query MongoDB as a specific
   :doc:`user </authentication>`. You can bypass this limitation by
   querying MongoDB from a :term:`system function` that
   runs as the :ref:`system user <system-user>`, which has
   access to the full MongoDB CRUD and Aggregation APIs.

   For more information on which operations are unsupported,
   see :doc:`CRUD & Aggregation APIs
   </mongodb/crud-and-aggregation-apis>`.

.. _mongodb-rules:

Collection Rules
~~~~~~~~~~~~~~~~

In traditional applications, an application server exposes
an API to client applications and handles database queries
on their behalf. To prevent malicious, improper, or
incorrect read and write operations, clients don't query the
database directly.

{+service+} provides a configurable and dynamic rules engine that
enables you to run a MongoDB query from client applications
while transparently preventing unauthorized reads and
writes. Rules are defined for entire collections in a linked
MongoDB Atlas cluster and apply to individual documents in
the collection dynamically based on the :doc:`application
user </authentication>` that issued a query.

.. include:: /includes/data-lake-rules-note.rst

The rules engine handles incoming queries with the following 4-step
process:

.. include:: /includes/steps/mdb-rules-process.rst

Considerations
--------------

System-Generated Cluster Users
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service+} automatically creates a :manual:`MongoDB user
</core/security-users>` for each app linked to a cluster.
These users are for internal use only and cannot be edited
or manually deleted. If you delete a {+app+}, the
associated user will also be deleted.

Users generated by {+service+} have names of the form:
``mongodb-realm-<your app id>``

Accessing Application Data with Another Tool
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

{+service+} connects to standard MongoDB Atlas clusters, which
means that you can connect directly to a :term:`linked cluster`
using another tool such as the :binary:`~bin.mongo` shell or
{+compass+}. There are no special considerations when reading
data from a linked cluster with another tool.

While running update operations, {+backend+} temporarily adds a
reserved field, ``_id_realm_transaction``, to documents.
Once a document is successfully updated, {+backend+} removes this
field. If you want to use another tool to modify data in a
collection, ensure that you :manual:`$unset
</reference/operator/update/unset>` this field prior to
making changes.

For example, if you are using the :program:`mongo` shell to
update documents in the products collection, your command
might resemble the following code:

.. code-block:: sh
   :emphasize-lines: 3

   db.products.update(
      { sku: "unknown" },
      { $unset: { _id_realm_transaction: "" } }
   )


Related Content
---------------

Configuration Guides
~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Link a MongoDB Data Source </mongodb/link-a-data-source>`
     - Learn how to connect a MongoDB Atlas cluster or Data Lake to your application.

   * - :doc:`Define Roles and Permissions </mongodb/define-roles-and-permissions>`
     - Learn how to set up role based data access controls on your
       MongoDB collections.

   * - :doc:`Filter Incoming Queries </mongodb/filter-incoming-queries>`
     - Learn how to add additional query parameters to incoming queries
       to secure data and improve query efficiency.

   * - :doc:`Enforce a Document Schema </mongodb/enforce-a-document-schema>`
     - Learn how to specify a schema that controls the shape and
       contents of documents in a collection.

   * - :doc:`Configure Advanced Rules </mongodb/configure-advanced-rules>`
     - Learn how to specify complex MongoDB collection rules by
       modifying the underlying configuration file directly in the
       {+ui+}.

   * - :doc:`Specify Cluster Read Preference </mongodb/specify-cluster-read-preference>`
     - Learn how to specify which replica set members {+service+} reads data
       from.

   * - :doc:`Enable Wire Protocol Connections </mongodb/enable-wire-protocol-connections>`
     - Learn how to enable connections to {+service+} through standard
       MongoDB clients and drivers.

Usage Guides
~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`Insert Documents </mongodb/insert-documents>`
     - Learn how to insert one or more documents into a MongoDB
       collection.

   * - :doc:`Find Documents </mongodb/find-documents>`
     - Learn how to find documents in a collection, including
       patterns and operators that you can use to refine your query.

   * - :doc:`Update Documents </mongodb/update-documents>`
     - Learn how to update documents in a collection, including
       operators for manipulating specific fields.

   * - :doc:`Delete Documents </mongodb/delete-documents>`
     - Learn how to remove one or more documents from a MongoDB
       collection.

   * - :doc:`Run Aggregation Pipelines </mongodb/run-aggregation-pipelines>`
     - Learn how to execute an :manual:`aggregation pipeline
       </core/aggregation-pipeline>` on a collection to calculate
       summary statistics and manipulate documents.

   * - :doc:`Connect Over the Wire Protocol </mongodb/connect-over-the-wire-protocol>`
     - Learn how to connect to MongoDB through {+service+} using standard
       MongoDB driver clients.

Reference Documentation
~~~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1
   :widths: 20 50

   * - Guide
     - Description

   * - :doc:`MongoDB Actions </mongodb/actions>`
     - Look up detailed examples and parameters for all MongoDB service
       actions.

   * - :doc:`Query Roles </mongodb/query-roles>`
     - Learn how {+service+} uses role-based permission sets to control CRUD
       permissions. See examples of :guilabel:`Apply When` and
       permission sets for common use cases.

   * - :doc:`Query Filters </mongodb/query-filters>`
     - Learn how {+service+} dynamically applies filters to optimize queries
       and secure data.

   * - :doc:`Document Schemas </mongodb/document-schemas>`
     - Learn how {+service+} uses JSON schemas to control and validate the
       shape and contents of documents in a collection.

   * - :doc:`Connection Strings </mongodb/connection-strings>`
     - Look up the components of the connection strings used to
       :doc:`connect to {+service+} over the wire protocol
       </mongodb/connect-over-the-wire-protocol>`.

   * - :doc:`Service Limitations </mongodb/service-limitations>`
     - Learn about MongoDB features that {+service+} currently does not
       support and possible workarounds.

   * - :doc:`CRUD & Aggregation APIs </mongodb/crud-and-aggregation-apis>`
     - Look up support for specific MongoDB client operations in
       {+service+}.
