.. _ios-sync-data:

=========
Sync Data
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. include:: /includes/sync-beta-note.rst

Prerequisites
-------------

Before you can access a synced {+realm+} from the client, you must:

- :ref:`Enable sync <enable-sync>` in the {+ui+}.
- :ref:`Initialize the app <ios-quick-start-init-app>` and :ref:`authenticate a user <ios-quick-start-authenticate>` in your client project.

Open a Synced Realm
-------------------

To open a synced :term:`{+realm+}` for a given :term:`partition value`, initialize a
``Realm`` with a configuration object generated by passing the partition value to the
authenticated user's ``configuration`` method:

.. code-block:: swift

   let app = App(id: "myRealmAppId")
   // ... log in ...
   let user = app.currentUser()!
   let partitionValue = "myProject"
   let realm = try! Realm(configuration: user.configuration(partitionValue: partitionValue))


If it is the first time opening that particular {+realm+}, especially if it is a read-only
realm, use the ``Realm.asyncOpen()`` method instead.

.. admonition:: Why Use asyncOpen?
   :class: note

   The ``Realm()`` initializer is convenient, but upon first open of a given {+realm+}, it
   writes the schema to disk. The {+service-short+} server interprets this initial local
   schema as a write. If the {+realm+} is read-only, then the operation fails, causing the
   client to error out. Therefore, it is always recommended to use the
   ``Realm.asyncOpen()`` method the first time you open any given read-only {+realm+}.

.. code-block:: swift
   :emphasize-lines: 5

   let app = App(id: "myRealmAppId")
   // ...after log in...
   let user = app.currentUser()!
   let partitionValue = "myPartition"
   Realm.asyncOpen(configuration: user.configuration(partitionValue: partitionValue),
       callback: { (maybeRealm, error) in
           guard error == nil else {
               fatalError("Failed to open realm: \(error!)")
           }
           guard let realm = maybeRealm else {
               fatalError("realm is nil!")
           }
           // realm opened
       })

The :ref:`partition value <partitioning>` specifies which subset of your data to sync.
This is typically a user ID, project ID, store ID, or some other category identifier in
your app that has particular relevance to the current user. 

.. seealso:: :ref:`Partition Atlas Data into Realms <partitioning>`


Sync Data
---------

The syntax to :ref:`read <ios-realm-database-reads>`, :ref:`write
<ios-realm-database-writes>`, and :ref:`watch for changes <ios-client-notifications>` on a
synced {+realm+} is identical to the syntax for non-synced {+realms+}. While you 
work with local data, a background thread efficiently integrates, uploads, and 
downloads changesets.

.. admonition:: When Using Sync, Avoid Writes on the Main Thread
   :class: important

   The fact that {+service-short+} performs sync integrations on a background thread means
   that if you write to your {+realm+} on the main thread, there's a small chance your UI
   could appear to hang as it waits for the background sync thread to finish a write
   transaction. Therefore, it's a best practice :ref:`never to write on the main thread
   when using {+sync+} <ios-threading-three-rules>`.

The following code reads a collection of ``Task`` objects, watches that collection for
changes, then writes a new ``Task`` to the {+realm+}:

.. code-block:: swift

   // Read all tasks in the realm. No special syntax required for synced realms.
   let tasks = realm.objects(Task.self)

   // Watch for changes. No special syntax required for synced realms.
   // Retain notificationToken as long as you want to observe.
   let notificationToken = tasks.observe { (changes) in
        print("Changed: \(changes)")
   }

   // Write to the realm. No special syntax required for synced realms.
   try! realm.write {
     realm.add(Task(partition: partitionValue, name: "My task"))
   }

   // Later, when done observing
   notificationToken.invalidate()

.. seealso:: :ref:`Threading <ios-client-threading>`


Background Data Sync
~~~~~~~~~~~~~~~~~~~~
If you want your app to update data in the background (while the app is minimized), 
iOS requires you to implement `Background App Refresh  
<https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background/updating_your_app_with_background_app_refresh>`_. 
Enabling Background App Refresh minimizes the time it takes for the user to see 
the most recent data; without Background App Refresh, {+realm+} updates the 
data when the user launches the app, potentially resulting in a noticeable lag.

Summary
-------

- Open a synced {+realm+} with the configuration object generated when you pass 
  a :term:`partition value` to the user object's ``configuration`` method.
- Compared to using a non-synced {+realm+}, there is no special syntax for 
  reading from, writing to, or watching objects on a synced {+realm+}.
- You should avoid writing to a synced {+realm+} on the main thread.
