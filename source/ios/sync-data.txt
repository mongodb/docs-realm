.. _ios-sync-data:

=========
Sync Data
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Prerequisites
-------------

Before you can access a synced {+realm+} from the client, you must:

- :ref:`Enable sync <enable-sync>` in the {+ui+}.
- :ref:`Initialize the app <ios-quick-start-init-app>` and :ref:`authenticate a user <ios-quick-start-authenticate>` in your client project.

Open a Synced Realm
-------------------

To open a synced {+realm+} for a given :term:`partition value`, initialize a ``Realm`` with a configuration object generated by passing the partition value to the authenticated user's ``configuration`` method:

.. code-block:: swift

   realm = try! Realm(configuration: user.configuration(partitionValue: partitionValue))

If the {+realm+} is read-only or it's the first time the user has launched the app, use the ``Realm.asyncOpen()`` method instead:

.. code-block:: swift
   :emphasize-lines: 3

   let user = app.currentUser()
   let partitionValue = "myPartition"
   Realm.asyncOpen(configuration: user.configuration(partitionValue: partitionValue),
       callback: { (maybeRealm, error) in
           guard error == nil else {
               fatalError("Failed to open realm: \(error!)")
           }
           guard let realm = maybeRealm else {
               fatalError("realm is nil!")
           }
           // realm opened
       })

The :ref:`partition value <partitioning>` specifies which subset of your data to sync. This is typically a user ID, project ID, store ID, or some other category identifier in your app that has particular relevance to the current user. 

.. seealso:: :ref:`Partition Atlas Data into Realms <partitioning>`

Sync Data
---------

There is no special syntax to :ref:`read <ios-realm-database-reads>` and :ref:`write <ios-realm-database-writes>` on a synced {+realm+}. While you work with local data, a background thread efficiently integrates, uploads, and downloads changesets. To be notified of local and remote changes, use {+client-database+}'s :ref:`notification system <ios-client-notifications>`:

.. code-block:: swift

   // Read all tasks in the realm. No special syntax required for synced realms.
   let tasks = realm.objects(Task.self)

   // Watch for changes. No special syntax required for synced realms.
   // Retain notificationToken as long as you want to observe.
   let notificationToken = tasks.observe { (changes) in
        print("Changed: \(changes)")
   }

   // Write to the realm. No special syntax required for synced realms.
   try! realm.write {
     realm.add(Task(partition: partitionValue, name: "My task"))
   }

   // Later, when done observing
   notificationToken.invalidate()

Summary
-------

- Open a synced {+realm+} with the configuration object generated when you pass a :term:`partition value` to the user object's ``configuration`` method.
- There is no other special syntax for reading from, writing to, or watching objects on a synced {+realm+} compared to a non-synced realm.
