.. _ios-realm-database-writes:

======
Writes
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

:term:`{+client-database+}` uses a highly efficient storage engine
to persist objects. You can **create** objects in a :term:`{+realm+}`,
**update** objects in a {+realm+}, and eventually **delete**
objects from a {+realm+}. Because these operations modify the
state of the {+realm+}, we call them writes.

{+client-database+} handles writes in terms of **transactions**. A
transaction is a list of read and write operations that
{+client-database+} treats as a single indivisible operation. In other
words, a transaction is *all or nothing*: either all of the
operations in the transaction succeed or none of the
operations in the transaction take effect.

.. note:: Remember

   All writes must happen in a transaction.

A {+realm+} allows only one open transaction at a time. {+client-database+}
blocks other writes on other threads until the open
transaction is complete. Consequently, there is no race
condition when reading values from the {+realm+} within a
transaction.

When you are done with your transaction, {+client-database+} either
**commits** it or **cancels** it:

- When {+client-database+} **commits** a transaction, {+client-database+} writes
  all changes to disk. For :term:`synced {+realms+} <{+sync+}>`, {+client-database+} queues the change
  for synchronization with :term:`{+service+}`.
- When {+client-database+} **cancels** a write transaction or an operation in
  the transaction causes an error, all changes are discarded
  (or "rolled back").

.. note::

   The examples on this page use the following schemas:

   .. tabs-realm-languages::

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.models.swift
            :language: swift

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.models.m
            :language: objectivec


.. _ios-acid-compliance:

Realm is ACID Compliant
~~~~~~~~~~~~~~~~~~~~~~~

{+client-database+} guarantees that transactions are :term:`ACID`
compliant. This means that all committed write
operations are guaranteed to be valid and that clients don't
see transient states in the event of a system crash.

.. _ios-open-a-transaction:

Run a Transaction
-----------------

{+client-database+} represents each transaction as a callback function
that contains zero or more read and write operations. To run
a transaction, define a transaction callback and pass it to
the {+realm+}'s ``write`` method. Within this callback, you are
free to create, read, update, and delete on the {+realm+}. If
the code in the callback throws an exception when {+client-database+} runs
it, {+client-database+} cancels the transaction. Otherwise, {+client-database+} commits
the transaction immediately after the callback.

.. important:: Concurrency Concerns

   Since transactions block each other, it is best to avoid
   opening transactions on both the UI thread and a
   background thread. If you are using :doc:`Sync
   </sync>`, avoid opening transactions on the
   UI thread altogether, as {+client-database+} processes synchronizations
   on a background thread. If a background transaction
   blocks your UI thread's transaction, your app may appear
   unresponsive.

.. example::

   The following code shows how to run a transaction with
   the {+realm+}'s write method. If the code in the callback
   throws an exception, {+client-database+} cancels the transaction.
   Otherwise, {+client-database+} commits the transaction.

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.transaction.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.transaction.swift
            :language: swift


.. _ios-create-an-object:

Create an Object
----------------

In general, instantiate :ref:`{+service-short+} objects
<ios-realm-objects>` as you would any other object. In a
transaction, you can add the object to the {+realm+} if the
{+realm+}'s :ref:`schema <ios-realm-schema>` includes the object
type. When you add an instance to the {+realm+}, it becomes
*managed* by that {+realm+}.

.. example::

   This code demonstrates how to create an object with {+client-database+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.create.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.create.swift
            :language: swift


.. _ios-upsert:

Upsert an Object
~~~~~~~~~~~~~~~~

An **upsert** is a write operation that either inserts a new object
with a given primary key or updates an existing object that already has
that primary key. We call this an upsert because it is an "**update** or
**insert**" operation. This is useful when an object may or may not
already exist, such as when bulk importing a dataset into an existing
{+realm+}. Upserting is an elegant way to update existing entries while
adding any new entries.

.. example::

   This code demonstrates how to upsert an object with
   {+realm+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.upsert.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.upsert.swift
            :language: swift


.. _ios-update:

Update an Object
----------------

Within a transaction, you can update a {+service-short+} object the same
way you would update any other object: just assign a new value to the
property or update the property.

.. example::

   This code changes the dog's name to "Wolfie" and
   increments the age by 1:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.update.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.update.swift
            :language: swift

.. _ios-batch-update:

Update a Collection
~~~~~~~~~~~~~~~~~~~

{+client-database+} supports collection-wide updates. A collection update
applies the same update to specific properties of several
objects in a collection at once.

.. example::

   The following code demonstrates how to update a
   collection. Thanks to the :ref:`implicit inverse
   relationship <ios-inverse-relationship>` between the Dog's
   ``owner`` property and the Person's ``dogs`` property,
   {+client-database+} automatically updates Ali's list of dogs.

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.batch-update.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.batch-update.swift
            :language: swift

.. _ios-delete:

Delete an Object
----------------

To delete an object from a {+realm+}, pass the instance to the delete
method of the {+realm+} within a transaction.

.. important:: Do not use objects after delete

   {+client-database+} throws an error if you try to use an object after
   it has been deleted.

.. example::

   The following code shows how to delete one object from
   its {+realm+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete.swift
            :language: swift


.. _ios-delete-collection:

Delete a Collection
~~~~~~~~~~~~~~~~~~~

To delete a :ref:`collection of objects <ios-client-collections>` from a
{+realm+}, pass the collection to the delete method of the {+realm+}
within a transaction.

.. example::

   The following code demonstrates how to delete a
   collection from a {+realm+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-collection.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-collection.swift
            :language: swift


.. _ios-cascading-delete:

Cascading Delete
~~~~~~~~~~~~~~~~

Sometimes, you have :ref:`dependent objects
<ios-client-relationships>` that you want to delete when
you delete the parent object. We call this a **cascading
delete**. {+client-database+} will not delete the dependent objects for
you. If you do not delete the objects yourself, they will
remain orphaned in your {+realm+}. Whether or not this is a
problem depends on your application's needs.

Currently, the best way to delete dependent objects is to
iterate through the dependencies and delete them before
deleting the parent object.

.. example::

   The following code demonstrates how to perform a
   cascading delete by first deleting all of Ali's dogs,
   then deleting Ali:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.cascading-delete.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.cascading-delete.swift
            :language: swift

.. _ios-delete-all-of-object:

Delete All Instances of a Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can delete all instances of a :ref:`{+service-short+} type
<ios-realm-objects>` from a {+realm+} as you would any collection.

.. example::

   The following code demonstrates how to delete all
   Dog instances from a {+realm+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-all-of-class.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-all-of-class.swift
            :language: swift

.. _ios-delete-all:

Delete Everything
~~~~~~~~~~~~~~~~~

It is possible to delete all objects from the {+realm+}. This
does not affect the schema of the {+realm+}. This is useful for
quickly clearing out your {+realm+} while prototyping.

.. example::

   The following code demonstrates how to delete everything
   from a {+realm+}:

   .. tabs-realm-languages::

      .. tab::
         :tabid: objective-c

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-all.m
            :language: objectivec

      .. tab::
         :tabid: swift

         .. literalinclude:: /examples/generated/code/start/Crud.codeblock.delete-all.swift
            :language: swift

Summary
-------

- {+client-database+} handles writes in terms of **transactions**. All writes must occur in a transaction.
- {+client-database+} transactions are ACID compliant.
- To write to {+client-database+}, define the transaction in a callback function that you pass to the {+realm+}'s ``write`` method.
