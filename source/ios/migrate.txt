.. _ios-migrating-from-stitch-to-realm:

============================
Upgrade from Stitch to Realm
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------
If you have an existing app built with the Stitch SDK, you should migrate your
app to use the new Realm SDK.  While much of the application logic and flow of
information hasn't changed, there are a few changes to how the SDK connects to the
{+realm+} backend.

New Features
------------

- The {+service-short+} IOS SDK supports IOS applications written in Objective C.

- The {+service-short+} IOS SDK now includes {+client-database+}, which includes
  local object storage and :ref:`{+sync+} <ios-sync-data>`.


Changes
-------

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - What's Changed?
     - Solution
   
   * - The backend app connections previously accessed via `StitchAppClient <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/swift/6/Protocols/StitchAppClient.html>`__ are now available through :swift-sdk:`App <Extensions/App.html>`. Use ``App`` to access authentication functionality such as logging in and getting the current user. 

     - Migrate all occurrences of ``StitchAppClient`` to ``App``.

   * - `StitchUser <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/swift/6/Protocols/StitchUser.html>`__ was previously the interface to access application users, but now it is :swift-sdk:`Realm.User <Extensions/User.html>`.
     - Migrate all occurrences of ``StitchUser`` to ``Realm.User``.

   * - The login API has changed from `stitchAppClient.auth.loginWithCredential() <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/interfaces/stitchauth.html#loginwithcredential>`__ to :swift-sdk:`Realm.App.logIn() <Realm.App.html#logIn>`
     - Rewrite all authentication logic to use the :ref:`new login API <ios-authenticate>`.

   * - The API to log users out has changed from `stitchAppClient.auth.logout() <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/interfaces/stitchauth.html#logout>`__ to :swift-sdk:`Realm.User.logOut() <Realm.User.html#logOut>`.
     - Rewrite the application logic to log out using the ``Realm.User`` object's ``logOut()`` method.

   * - The Stitch SDK required developers to import `authentication credentials <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/interfaces/stitchcredential.html>`__ from the ``mongodb-stitch-browser-sdk``. The Realm SDK has a class, :swift-sdk:`Realm.Credentials <Realm.Credentials.html>`, that creates credentials for each authentication provider.
     - Replace imports of authentication credentials with method calls for each respective authentication provider through the ``Realm.Credentials`` class.

   * - The API to call a {+service-short+} function has changed from `stitchAppClient.callFunction() <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/interfaces/stitchappclient.html#callfunction>`__ to :swift-sdk:`app.currentUser.functions.<MyFunction>() <Realm.User.html#functions>`.
     - Replace server function calls with the new API method, ``app.currentUser.functions.<MyFunction>()`` 

   * - The interface to the MongoDB Data Access API, containing objects like :swift-sdk:`MongoDatabase <Realm-MongoDBDatabase.html>`, and :swift-sdk:`MongoCollection <Realm.MongoDBCollection.html>`, has changed. Through Stitch, passing the `RemoteMongoClient.Factory <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/modules/remotemongoclient.html#factory>`__ and the string "mongodb-atlas" to `StitchAppClient.getServiceClient() <http://stitch-sdks.s3-website-us-east-1.amazonaws.com/stitch-sdks/js/4/interfaces/stitchappclient.html#getserviceclient>`__ creates a remote Mongodb client. The Realm JS SDK creates a remote MongoDB client through the :swift-sdk:`Realm.User.mongoClient <Realm.User.html#mongoClient>` method on the user object.
     - Replace all ``mongoClient`` instantiations with ``Realm.User.mongoClient``.
   
   * - The  {+service-short+} SDKs do not provide an interface for calling Services (like the :doc:`Twilio <services/twilio>` and :doc:`AWS <services/aws>` services).
     -  Convert uses of Third Party Services in your Stitch Application to Realm functions in your Realm application using the AWS and/or Twilio npm packages. For more information, see :doc:`Upload External Dependencies </functions/upload-external-dependencies>`.