.. _ios-realm-objects:

=============
Realm Objects
=============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

{+service+} applications model data as objects composed of field-value
pairs that each contain one or more primitive data types or other
{+service-short+} objects. :term:`{+service-short+} objects <Realm
object>` are essentially the same as regular objects in most programming
languages, but they also include additional features like
:ref:`real-time updating data views <ios-live-object>` and reactive
:ref:`change event handlers <ios-client-notifications>`.

Every {+service-short+} object has an *object type* that refers to the
object's class. Objects of the same type share an :ref:`object model
<ios-object-model>` that defines the properties and relationships of
those objects. In Swift and Objective-C, you define object schemas as
classes that derive from {+service-short+}'s ``Object`` class.

.. note::

   If you are using :term:`{+sync+}`, the :ref:`primary key <ios-primary-key>` of an
   object *must* be an ``ObjectId``, ``String``, or ``Int`` called ``_id``.

.. example::

   The following code block shows an object model that describes a Dog.
   Every Dog object must include a ``name`` and ``age`` and may
   optionally include the dog's ``breed`` and a reference to a Person
   object that represents the dog's ``owner``.

   .. tabs-realm-languages::

      .. tab::
          :tabid: swift

          .. literalinclude:: /examples/Schemas/DogSchema.swift
              :language: swift

      .. tab::
          :tabid: objective-c

          .. literalinclude:: /examples/Schemas/DogSchema.m
              :language: objective-c


Key Concepts
------------

.. _ios-live-object:

Live Object
~~~~~~~~~~~

Objects in {+service-short+} clients are **live objects** that update
automatically to reflect data changes, including :doc:`synced </sync>`
remote changes, and emit :ref:`notification events
<ios-client-notifications>` that you can subscribe to whenever their
underlying data changes. You can use live objects to work with
object-oriented data natively without an :wikipedia:`ORM
<Object-relational_mapping>` tool.

Live objects are direct proxies to the underlying stored data, which
means that a live object doesn't directly contain data. Instead, a live
object always references the most up-to-date data on disk and
:wikipedia:`lazy loads <Lazy_loading>` property values when you access
them from a :ref:`collection <ios-client-collections>`. This means that
a {+realm+} can contain many objects, but you only pay the performance
cost for data that the application is actually using.

Valid write operations on a live object automatically persist to the
{+realm+} and propagate to any other synced clients. You do not need to
call an update method, modify the {+realm+}, or otherwise "push"
updates.

.. _ios-object-model:

Object Model
~~~~~~~~~~~~

An **object model** is a configuration object that defines the fields and
relationships of a {+service-short+} object type. {+service-short+}
Swift and Objective-C client applications define object models as
classes derived from ``Object`` in Swift or ``RLMObject`` in
Objective-C.

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      You can use the following types to define your object model
      properties:

      - Boolean ``Bool``
      - Integral types ``Int``, ``Int8``, ``Int16``, ``Int32``, ``Int64``
      - ``Double``
      - ``String``
      - ``Date``
      - ``Data``
      - ``ObjectId``
      - User-defined ``Object``-derived types
      - ``List``

      Additionally, you can use the optional ``String?``, ``Date?`` and
      ``Data?`` types. You *must* make user-defined Object properties
      optional. You can use ``RealmOptional`` to represent integers,
      doubles, and other types as optional.

   .. tab::
      :tabid: objective-c

      You can use the following types to define your object model
      properties:

      - Boolean types ``BOOL``, ``bool``
      - Integral types ``int``, ``NSInteger``, ``long``, ``long long``
      - ``double``
      - ``NSString``
      - ``NSDate``
      - ``NSData``
      - ``RLMObjectId``
      - User-defined ``RLMObject``-derived types
      - ``RLMList``

      Additionally, you can represent optional number types with
      ``NSNumber`` tagged with ``RLMInt``, ``RLMDouble``,
      or ``RLMBool``:

      .. code-block:: objective-c

         @property NSNumber<RLMInt> *age;

.. _ios-primary-key:

Primary Key
~~~~~~~~~~~

A **primary key** is a String or ``ObjectId`` property that uniquely
identifies an object. You may optionally define a primary key for an
object type as part of the :ref:`object model <ios-object-model>`.
{+client-database+} automatically indexes primary key properties, which
allows you to efficiently read and modify objects based on their primary
key.

If an object type has a primary key, then all instances of that type
must include the primary key property with a value that is unique among
objects of the same type in a {+realm+}. You cannot change the primary
key property for an object type after any object of that type is added
to a {+realm+}.

Specify your primary key to {+service-short+} by overriding the
``primaryKey`` method in your class and returning the name of the
property:

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      .. literalinclude:: /examples/Schemas/PersonSchema.swift
          :language: swift
          :emphasize-lines: 2, 5-7

   .. tab::
      :tabid: objective-c

      .. literalinclude:: /examples/Schemas/PersonSchema.m
          :language: objective-c
          :emphasize-lines: 2, 8-10

.. _ios-optional-or-required-properties:

Optional or Required Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. tabs-realm-languages::

   .. tab::
      :tabid: swift

      Because Swift supports optional values, whether a property is
      **optional** or **required** is built into the type of that
      property. You can use ``RealmOptional`` to make optional integral
      properties:

      .. code-block:: swift

         class Person: Object {
             // Required string property
             @objc dynamic var name: String = ""

             // Optional string property
             @objc dynamic var address: String? = nil

             // Optional integral type property
             let age = RealmOptional<Int>()
         }

   .. tab::
      :tabid: objective-c

      To declare a given property as required, implement the
      ``requiredProperties`` method and return an array of required
      property names.

      .. code-block:: objective-c

         @interface Person : RLMObject
         @property NSString *name;
         @property NSDate *birthday;
         @end

         @implementation Person
         + (NSArray *)requiredProperties {
             return @[@"name"];
         }
         @end

Summary
-------

- {+service-short+} objects are classes derived from ``Object`` in Swift
  and ``RLMObject`` in Objective-C.

- {+service-short+} objects are **live**: they always reflect the latest version
  on disk and update automatically when the underlying object changes.

- A {+service-short+} object type may have a **primary key** property to uniquely
  identify each instance of the object type.

- The {+service-short+} object model defines the properties of the object and
  which properties are optional.
