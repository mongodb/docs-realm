.. _ios-client-quick-start:

===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

This page contains information to quickly get {+client-database+}
integrated into your app. Before you begin, ensure you have:

- :ref:`Created a {+app+} <create-a-realm-app>`
- :ref:`Enabled {+sync+} <enable-sync>`
- :ref:`Installed the iOS SDK <ios-install>`

Import Realm
------------

Near the top of any Swift file that uses Realm, add the following import
statement:

.. code-block:: swift

   import RealmSwift

.. _ios-quick-start-init-app:

Initialize the App
------------------

To use {+backend+} features such as authentication and sync, you must
access your {+app+} using your {+app+} ID. You can find your {+app+} ID in the
{+ui+}.

.. code-block:: swift

   let app = RealmApp(id: "your-realm-app-id")

Define Your Object Model
------------------------

If have not :ref:`enabled {+sync+} <enable-sync>` or you enabled {+sync-short+} with
:term:`Development Mode` in the {+ui+}, you can define your :ref:`object model
<ios-realm-objects>` directly in code.

.. note::

   If you have enabled {+sync-short+} but turned off Developer Mode, you can copy and paste the object model definitions that {+backend-short+} generated for you from the :guilabel:`SDKs` tab in the {+ui+}. You must re-enable Developer Mode if you want to make changes to the object model definition from client side code. See :ref:`Configure Your Data Model <configure-your-data-model>`.

.. code-block:: swift

   class Task: Object {
       @objc dynamic var _id: ObjectId = ObjectId.generate()

       // When configuring Sync, we selected `_partition` as the partition key.
       // A partition key is only required if you are using Sync.
       @objc dynamic var _partition: String = ""

       @objc dynamic var name: String? = nil
       @objc dynamic var complete = false

       override static func primaryKey() -> String? {
           return "_id"
       }

       convenience init(partition: String, name: String) {
           self.init()
           self._partition = partition
           self.name = name
       }
   }

.. _ios-quick-start-authenticate:

Authenticate a User
-------------------

When you have enabled :ref:`anonymous authentication <anonymous-authentication>` in the
{+ui+}, users can immediately log into your app without providing any identifying
information:

.. code-block:: swift

   app.login(withCredential: AppCredentials.anonymous()) { (user, error) in
        // Remember to dispatch back to the main thread in completion handlers
        // if you want to do anything on the UI.
        DispatchQueue.main.sync {
          guard error == nil else {
            print("Login failed: \(error!)")
            return
          }

          // Now logged in, do something with user

        }
    }

{+service-short+} provides many additional ways to authenticate, register, and link users.

.. seealso:: :ref:`Authenticate a User <ios-authenticate>`

Open a Realm
------------

Once you have :ref:`enabled {+sync+} <enable-sync>` and authenticated a user, you can open
a synced :ref:`{+realm+} <ios-realms>`:

.. code-block:: swift

   let user = app.currentUser()
   let partitionValue = "myPartition"
   realm = try! Realm(configuration: user.configuration(partitionValue: partitionValue))

.. seealso:: :ref:`Sync Data <ios-sync-data>`


Create, Read, Update, and Delete Objects
----------------------------------------

Once you have opened a {+realm+}, you can modify it and its :ref:`objects <ios-realm-objects>` in a :ref:`write transaction <ios-realm-database-writes>` block.

To create a new Task, instantiate the Task class and add it to the {+realm+} in a write block:

.. code-block:: swift

   let task = Task(partition: partitionValue, name: "New Task")
   try! self.realm.write {
       self.realm.add(task)
   }

You can retrieve a live :ref:`collection <ios-client-collections>` of all tasks in the {+realm+}:

.. code-block:: swift

   // All tasks in the realm
   let tasks = realm.objects(Task.self)

You can also filter that collection using a :ref:`filter <ios-client-query-engine>`:

.. code-block:: swift

   // You can also filter a collection
   let tasksThatBeginWithA = tasks.filter("name beginsWith 'A'")
   let completeTasks = tasks.filter("complete = true")

To modify a task, simply update its properties in a write transaction block:

.. code-block:: swift

   let task = tasks[someIndex]
  
   // All modifications to a realm must happen in a write block.
   try! realm.write {
       task.completed = true
   }

Finally, you can delete a task:

.. code-block:: swift

   let task = tasks[someIndex]
  
   // All modifications to a realm must happen in a write block.
   try! realm.write {
       // Delete the Task.
       realm.delete(task)
   }

Watch for Changes
-----------------

You can :ref:`watch a realm, collection, or object for changes <ios-client-notifications>`
with the `observe` method.

.. note::

   Be sure to retain the notification token returned by ``observe`` as long as you want to continue observing. When you are done observing, invalidate the token to free the resources.

.. code-block:: swift

   // Retain notificationToken as long as you want to observe
   notificationToken = tasks.observe { (changes) in
        switch changes {
        case .initial:
            // Results are now populated and can be accessed without blocking the UI
        case .update(_, let deletions, let insertions, let modifications):
            // Query results have changed.
            print("Deleted indices: ", deletions)
            print("Inserted indices: ", insertions)
            print("Modified modifications: ", modifications)
        case .error(let error):
            // An error occurred while opening the Realm file on the background worker thread
            fatalError("\(error)")
        }
   }

   // Later, when done observing
   notificationToken.invalidate()


Log Out
-------

Once logged in, you can log out:

.. code-block:: swift

   app.logOut(completion: { (error) in
       // Logged out or error occurred
   })
